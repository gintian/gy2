package com.hjsj.hrms.businessobject.performance;

import com.hjsj.hrms.businessobject.competencymodal.personPostModal.PersonPostModalBo;
import com.hjsj.hrms.businessobject.performance.achivement.Permission;
import com.hjsj.hrms.businessobject.performance.achivement.PointCtrlXmlBo;
import com.hjsj.hrms.businessobject.performance.achivement.dataCollection.DataCollectBo;
import com.hjsj.hrms.businessobject.performance.batchGrade.BatchGradeBo;
import com.hjsj.hrms.businessobject.performance.kh_plan.ExamPlanBo;
import com.hjsj.hrms.businessobject.performance.kh_result.ResultBo;
import com.hjsj.hrms.businessobject.performance.kh_system.kh_template.KhTemplateBo;
import com.hjsj.hrms.businessobject.performance.objectiveManage.ObjectCardBo;
import com.hjsj.hrms.businessobject.performance.options.PerDegreeBo;
import com.hjsj.hrms.businessobject.performance.singleGrade.SingleGradeBo;
import com.hjsj.hrms.businessobject.sys.DbNameBo;
import com.hjsj.hrms.businessobject.sys.DbSecurityImpl;
import com.hjsj.hrms.businessobject.sys.report.Sys_Oth_Parameter;
import com.hjsj.hrms.module.utils.exportexcel.ExportExcelUtil;
import com.hjsj.hrms.transaction.performance.LoadXml;
import com.hjsj.hrms.utils.OracleBlobUtils;
import com.hjsj.hrms.utils.PubFunc;
import com.hjsj.hrms.utils.ResourceFactory;
import com.hjsj.hrms.utils.analyse.YksjParser;
import com.hrms.frame.codec.SafeCode;
import com.hrms.frame.dao.ContentDAO;
import com.hrms.frame.dao.RecordVo;
import com.hrms.frame.dao.db.DBMetaModel;
import com.hrms.frame.dbstruct.DataType;
import com.hrms.frame.dbstruct.DbWizard;
import com.hrms.frame.dbstruct.Field;
import com.hrms.frame.dbstruct.Table;
import com.hrms.frame.utility.AdminCode;
import com.hrms.frame.utility.IDGenerator;
import com.hrms.hjsj.sys.Constant;
import com.hrms.hjsj.sys.ConstantParamter;
import com.hrms.hjsj.sys.DataDictionary;
import com.hrms.hjsj.sys.FieldItem;
import com.hrms.hjsj.utils.Sql_switcher;
import com.hrms.struts.exception.GeneralException;
import com.hrms.struts.exception.GeneralExceptionHandler;
import com.hrms.struts.taglib.CommonData;
import com.hrms.struts.valueobject.UserView;
import org.apache.commons.beanutils.LazyDynaBean;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.xpath.XPath;

import javax.sql.RowSet;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.math.BigDecimal;
import java.sql.*;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.*;
import java.util.regex.Pattern;

/**
 * <p>
 * Title:
 * </p>
 * <p>
 * Description:考核评估
 * </p>
 * <p>
 * Company:HJHJ
 * </p>
 * <p>
 * Create time:Apr 30, 2008
 * </p>
 *
 * @author dengcan
 * @version 4.0
 */
public class PerEvaluationBo {
    private String code = "";
    private String planid = "";

    private String template_id = ""; // 计划对应模板号

    private Connection conn = null;

    private ArrayList perGradeTemplateList = new ArrayList(); // 标准标度列表

    private ArrayList mainbodySetList = new ArrayList(); // 主体类别列表

    private ArrayList gradeTempList = new ArrayList();

    private Hashtable planParamSet = new Hashtable();

    private int columnWidth = 100;

    private RecordVo planVo = null;
    private HashMap handScorePointMap = new HashMap(); // 计划下手工录分指标

    private LoadXml loadxml = null;

    private UserView userView = null;

    private RecordVo templateVo = null;

    private ArrayList selfItemList = new ArrayList();

    private ArrayList dataList = new ArrayList();
    private String scoreAjustOper = "";// 1-保存调整 2-提交调整
    private String priv_where = "";
    private String priv_where2 = ""; // 算排名时用到
    private int compute_flag = 1; // 绩效计算范围 1.完全计算 2.不计算指标和个性化项目 3.指标、项目 、总分都不计算
    private String batchComput = "False"; // 多人考评临时计算的参数
    private String presentMainbody_id = "";
    /**
     * 判断定量统一打分指标对考核对象权限的类
     */
    private Permission pointPrivBean = null;
    private HashMap UMPointScoreMap = new HashMap();
    private String a0100 = "";
    private String where = "";
    private String showmethod = "";
    private String showbenbu = "";
    private String aband = "";
    private boolean isByModelFlag = false;
    private boolean isPosHasPoint = false;//判断该岗位是否定义了指标
    private String accountingFlag = "";
    private String showDetails = "";//是否显示对象详情 true 显示  false不显示
    private String object_type = "";//考核对象类型  1团队  2人员
    private String batchScoreImportFormulaFlag = "true";

    public String getShowDetails() {
        return showDetails;
    }

    public void setShowDetails(String showDetails) {
        this.showDetails = showDetails;
    }

    public String getAccountingFlag() {
        return accountingFlag;
    }

    public void setAccountingFlag(String accountingFlag) {
        this.accountingFlag = accountingFlag;
    }

    public String getWhere() {
        return where;
    }

    public void setWhere(String where) {
        this.where = where;
    }

    public String getA0100() {
        return a0100;
    }

    public void setA0100(String a0100) {
        this.a0100 = a0100;
    }

    public PerEvaluationBo(Connection a_con) {

        this.conn = a_con;
    }

    public PerEvaluationBo(Connection a_con, UserView userView) {
        this.conn = a_con;
        this.priv_where = getPrivWhere(userView);
        this.userView = userView;
        this.pointPrivBean = new Permission(this.conn, this.userView);
    }

    public PerEvaluationBo(Connection a_con, String planid, String template_id) {

        this.planid = planid;
        this.conn = a_con;
        this.template_id = template_id;
        initParamSet();
        this.planVo = getPerPlanVo(this.planid);
        this.template_id = this.planVo.getString("template_id");
        this.templateVo = getTemplateVo(this.template_id);
        this.mainbodySetList = getPerMainBodySetList(this.planid); // 主体类别列表
        perGradeTemplateList = this.getPerGradeTemplateList(this.template_id);

    }

    public PerEvaluationBo(Connection a_con, String planid, String template_id,
                           UserView userView) {

        this.planid = planid;
        this.conn = a_con;
        this.template_id = template_id;
        initParamSet();
        this.planVo = getPerPlanVo(this.planid);
        this.template_id = this.planVo.getString("template_id");
        this.templateVo = getTemplateVo(this.template_id);
        this.mainbodySetList = getPerMainBodySetList(this.planid); // 主体类别列表
        this.priv_where = getPrivWhere(userView);
        this.userView = userView;
        this.pointPrivBean = new Permission(this.conn, this.userView);
        perGradeTemplateList = this.getPerGradeTemplateList(this.template_id);
        this.isByModelFlag = SingleGradeBo.getByModel(planid, a_con);
        this.showDetails = this.getShowDetails();
        this.object_type = this.getObject_type();
    }

    // 操作结果表的表结构 JinChunhai 2011.01.20

    public void editResult(String plan_id) throws GeneralException {
        try {
            String tablename = "per_result_" + plan_id;
            Table table = new Table(tablename);
            DbWizard dbWizard = new DbWizard(this.conn);
            boolean flag = false;

            LoadXml dxml = new LoadXml(this.conn, plan_id);

            String subsetMenus = dxml.getRelatePlanSubSetMenuValue();
            if (subsetMenus != null && subsetMenus.trim().length() > 0) {
                String[] temps = subsetMenus.split(",");
                for (int j = 0; j < temps.length; j++) {
                    String temp = temps[j].trim();
                    if (temp.length() == 0) {
                        continue;
                    }
                    FieldItem fielditem = DataDictionary.getFieldItem(temp);
                    if (fielditem == null) {
                        continue;
                    }
                    String itemtype = fielditem.getItemtype();
                    String itemid = fielditem.getItemid();
                    int itemlength = fielditem.getItemlength();
                    int decimalwidth = fielditem.getDecimalwidth();

                    if ("N".equalsIgnoreCase(itemtype)) {
                        if (decimalwidth == 0) {
                            if (!dbWizard
                                    .isExistField(tablename, itemid, false)) {
                                Field obj = new Field(itemid.toUpperCase());
                                obj.setDatatype(DataType.INT);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else {
                            if (!dbWizard
                                    .isExistField(tablename, itemid, false)) {
                                Field obj = new Field(itemid.toUpperCase());
                                obj.setDatatype(DataType.DOUBLE);
                                obj.setLength(itemlength);
                                obj.setDecimalDigits(decimalwidth);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        }
                    } else if ("A".equalsIgnoreCase(itemtype)) {
                        if (!dbWizard.isExistField(tablename, itemid, false)) {
                            Field obj = new Field(itemid.toUpperCase());
                            obj.setDatatype(DataType.STRING);
                            obj.setLength(itemlength);
                            obj.setKeyable(false);
                            table.addField(obj);
                            flag = true;
                        }
                    } else if ("M".equalsIgnoreCase(itemtype)) {
                        if (!dbWizard.isExistField(tablename, itemid, false)) {
                            Field obj = new Field(itemid.toUpperCase());
                            obj.setDatatype(DataType.CLOB);
                            // obj.setLength(itemlength);
                            obj.setKeyable(false);
                            table.addField(obj);
                            flag = true;
                        }
                    } else if ("D".equalsIgnoreCase(itemtype)) {
                        if (!dbWizard.isExistField(tablename, itemid, false)) {
                            Field obj = new Field(itemid.toUpperCase());
                            obj.setDatatype(DataType.DATE);
                            obj.setLength(itemlength);
                            obj.setKeyable(false);
                            table.addField(obj);
                            flag = true;
                        }
                    }
                }
            }

            ArrayList planlist = dxml.getRelatePlanValue("Plan");
            LazyDynaBean abean = null;
            for (int i = 0; i < planlist.size(); i++) {
                abean = (LazyDynaBean) planlist.get(i);
                String id = (String) abean.get("id");
                // String Name=(String)abean.get("Name");
                // String Type=(String)abean.get("Type");

                String Menus = (String) abean.get("Menus");
                if (Menus != null && Menus.trim().length() > 0) {
                    String[] temps = Menus.split(",");
                    for (int j = 0; j < temps.length; j++) {
                        String temp = temps[j].trim();
                        if (temp.length() == 0) {
                            continue;
                        }
                        if ("score".equalsIgnoreCase(temp)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id,
                                    false)) {
                                Field obj = new Field("G_" + id);
                                obj.setDatatype(DataType.FLOAT);
                                obj.setLength(12);
                                obj.setDecimalDigits(6);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if ("Grade".equalsIgnoreCase(temp)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_Grade", false)) {
                                Field obj = new Field("G_" + id + "_Grade");
                                obj.setDatatype(DataType.STRING);
                                obj.setLength(50);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if ("Avg".equalsIgnoreCase(temp)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_Avg", false)) {
                                Field obj = new Field("G_" + id + "_Avg");
                                obj.setDatatype(DataType.FLOAT);
                                obj.setLength(12);
                                obj.setDecimalDigits(6);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if ("Max".equalsIgnoreCase(temp)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_Max", false)) {
                                Field obj = new Field("G_" + id + "_Max");
                                obj.setDatatype(DataType.FLOAT);
                                obj.setLength(12);
                                obj.setDecimalDigits(6);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if ("Min".equalsIgnoreCase(temp)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_Min", false)) {
                                Field obj = new Field("G_" + id + "_Min");
                                obj.setDatatype(DataType.FLOAT);
                                obj.setLength(12);
                                obj.setDecimalDigits(6);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if ("XiShu".equalsIgnoreCase(temp)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_XiShu", false)) {
                                Field obj = new Field("G_" + id + "_XiShu");
                                obj.setDatatype(DataType.FLOAT);
                                obj.setLength(12);
                                obj.setDecimalDigits(6);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if ("Order".equalsIgnoreCase(temp)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_Order", false)) {
                                Field obj = new Field("G_" + id + "_Order");
                                obj.setDatatype(DataType.INT);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if ("UMOrd".equalsIgnoreCase(temp)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_UMOrd", false)) {
                                Field obj = new Field("G_" + id + "_UMOrd");
                                obj.setDatatype(DataType.INT);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if ("Mark".equalsIgnoreCase(temp)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_Mark", false)) {
                                Field obj = new Field("G_" + id + "_Mark");
                                obj.setDatatype(DataType.STRING);
                                obj.setLength(50);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if (temp.indexOf("Body") != -1) {
                            String bodyid = temp.replaceAll("Body", "");
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid), false)) {
                                Field obj = new Field("G_" + id + "_B_"
                                        + ("-1".equals(bodyid) ? "X1" : bodyid));
                                obj.setDatatype(DataType.FLOAT);
                                obj.setLength(12);
                                obj.setDecimalDigits(6);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if (temp.indexOf("Item") != -1) {
                            String itemid = temp.replaceAll("Item", "");
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_Item" + itemid, false)) {
                                Field obj = new Field("G_" + id + "_Item"
                                        + itemid);
                                obj.setDatatype(DataType.FLOAT);
                                obj.setLength(12);
                                obj.setDecimalDigits(6);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_" + temp, false)) {
                                Field obj = new Field("G_" + id + "_" + temp);
                                obj.setDatatype(DataType.FLOAT);
                                obj.setLength(12);
                                obj.setDecimalDigits(6);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        }
                    }
                } else {
                    if (!dbWizard.isExistField(tablename, "G_" + id, false)) {
                        Field obj = new Field("G_" + id);
                        obj.setDatatype(DataType.FLOAT);
                        obj.setLength(12);
                        obj.setDecimalDigits(6);
                        obj.setKeyable(false);
                        table.addField(obj);
                        flag = true;
                    }
                }

                String HZMenus = (String) abean.get("HZMenus");
                String temp2 = "";
                String temp3 = "";
                if (HZMenus != null && HZMenus.trim().length() > 0) {
                    String[] temps = HZMenus.split(",");
                    for (int j = 0; j < temps.length; j++) {
                        String temp = temps[j].trim();
                        String temp1 = "";

                        if (temp.indexOf(":") != -1) {
                            temp1 = temp.substring(0, temp.indexOf(":"));
                            temp2 = temp.substring(temp.indexOf(":") + 1);
                        }
                        if (temp1.length() == 0) {
                            continue;
                        }
                        temp3 = "_Z" + temp2;
                        if ("score".equalsIgnoreCase(temp1)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + temp3, false)) {
                                Field obj = new Field("G_" + id + temp3);
                                obj.setDatatype(DataType.FLOAT);
                                obj.setLength(12);
                                obj.setDecimalDigits(6);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if ("Grade".equalsIgnoreCase(temp1)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_Grade" + temp3 + "", false)) {
                                Field obj = new Field("G_" + id + "_Grade"
                                        + temp3 + "");
                                obj.setDatatype(DataType.STRING);
                                obj.setLength(50);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if ("Avg".equalsIgnoreCase(temp1)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_Avg" + temp3 + "", false)) {
                                Field obj = new Field("G_" + id + "_Avg"
                                        + temp3 + "");
                                obj.setDatatype(DataType.FLOAT);
                                obj.setLength(12);
                                obj.setDecimalDigits(6);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if ("Max".equalsIgnoreCase(temp1)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_Max" + temp3 + "", false)) {
                                Field obj = new Field("G_" + id + "_Max"
                                        + temp3 + "");
                                obj.setDatatype(DataType.FLOAT);
                                obj.setLength(12);
                                obj.setDecimalDigits(6);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if ("Min".equalsIgnoreCase(temp1)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_Min" + temp3 + "", false)) {
                                Field obj = new Field("G_" + id + "_Min"
                                        + temp3 + "");
                                obj.setDatatype(DataType.FLOAT);
                                obj.setLength(12);
                                obj.setDecimalDigits(6);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if ("XiShu".equalsIgnoreCase(temp1)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_XiShu" + temp3 + "", false)) {
                                Field obj = new Field("G_" + id + "_XiShu"
                                        + temp3 + "");
                                obj.setDatatype(DataType.FLOAT);
                                obj.setLength(12);
                                obj.setDecimalDigits(6);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if ("Order".equalsIgnoreCase(temp1)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_Order" + temp3 + "", false)) {
                                Field obj = new Field("G_" + id + "_Order"
                                        + temp3 + "");
                                obj.setDatatype(DataType.INT);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if ("UMOrd".equalsIgnoreCase(temp1)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_UMOrd" + temp3 + "", false)) {
                                Field obj = new Field("G_" + id + "_UMOrd"
                                        + temp3 + "");
                                obj.setDatatype(DataType.INT);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if ("Mark".equalsIgnoreCase(temp1)) {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_Mark" + temp3 + "", false)) {
                                Field obj = new Field("G_" + id + "_Mark"
                                        + temp3 + "");
                                obj.setDatatype(DataType.STRING);
                                obj.setLength(50);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if (temp1.indexOf("Body") != -1) {
                            String bodyid = temp1.replaceAll("Body", "");
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid) + temp3, false)) {
                                Field obj = new Field("G_" + id + "_B_"
                                        + ("-1".equals(bodyid) ? "X1" : bodyid) + temp3);
                                obj.setDatatype(DataType.FLOAT);
                                obj.setLength(12);
                                obj.setDecimalDigits(6);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else if (temp1.indexOf("Item") != -1) {
                            String itemid = temp1.replaceAll("Item", "");
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_Item" + itemid + temp3, false)) {
                                Field obj = new Field("G_" + id + "_Item"
                                        + itemid + temp3);
                                obj.setDatatype(DataType.FLOAT);
                                obj.setLength(12);
                                obj.setDecimalDigits(6);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        } else {
                            if (!dbWizard.isExistField(tablename, "G_" + id
                                    + "_" + temp1 + temp3, false)) {
                                Field obj = new Field("G_" + id + "_" + temp1
                                        + temp3);
                                obj.setDatatype(DataType.FLOAT);
                                obj.setLength(12);
                                obj.setDecimalDigits(6);
                                obj.setKeyable(false);
                                table.addField(obj);
                                flag = true;
                            }
                        }
                    }
                } else {
                    if (!dbWizard.isExistField(tablename, "G_" + id + temp3,
                            false)) {
                        Field obj = new Field("G_" + id + temp3);
                        obj.setDatatype(DataType.FLOAT);
                        obj.setLength(12);
                        obj.setDecimalDigits(6);
                        obj.setKeyable(false);
                        table.addField(obj);
                        flag = true;
                    }
                }
            }

            if (flag) {
                dbWizard.addColumns(table);// 更新列
            }

        } catch (Exception e) {
            e.printStackTrace();
            throw GeneralExceptionHandler.Handle(e);
        }
    }

    // 更新per_result_planid表中调整后的表结构的"子集"字段的值 JinChunhai 2011.01.20
    public void updateSubset(String planid) throws GeneralException {
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rs = null;
            RowSet rowSet = null;
            HashMap map = new HashMap();
            LoadXml ldxml = new LoadXml(this.conn, planid);
            String subsetMenus = ldxml.getRelatePlanSubSetMenuValue();
            this.planVo = getPerPlanVo(planid);
            String object_type = planVo.getString("object_type");
            if (subsetMenus != null && subsetMenus.trim().length() > 0) {
                String[] temps = subsetMenus.split(",");
                for (int j = 0; j < temps.length; j++) {
                    String temp = temps[j].trim();
                    if (temp.length() == 0) {
                        continue;
                    }
                    FieldItem fielditem = DataDictionary.getFieldItem(temp);
                    if (fielditem == null) {
                        continue;
                    }
                    String fieldsetid = fielditem.getFieldsetid();
                    String itemid = fielditem.getItemid();
                    if (map.get(fieldsetid) == null) {
                        map.put(fieldsetid, itemid);
                    } else {
                        String menu_params = (String) map.get(fieldsetid);
                        menu_params += "," + itemid;
                        map.put(fieldsetid, menu_params);
                    }
                }
            }
            Set set = map.keySet();
            Iterator te = set.iterator();
            while (te.hasNext()) {
                String strKey = (String) te.next(); // 键值
                String strValue = (String) map.get(strKey); // value值
                StringBuffer buf = new StringBuffer();
                StringBuffer bufe = new StringBuffer();

                String[] temps = strValue.split(",");
                for (int j = 0; j < temps.length; j++) {
                    String temp = temps[j].trim();
                    if (temp.length() == 0) {
                        continue;
                    }

                    FieldItem i = DataDictionary.getFieldItem(temp.toUpperCase());
                    if (i == null || "0".equals(i.getUseflag())) {
                        throw new Exception("\"评估表结构设置\"中包含未构库的指标，请重新设置");
                    }

                    bufe.append("," + temp.toUpperCase() + "=?");
                    buf.append("," + temp.toUpperCase());
                }
                String s = strKey.substring(0, 1);
                String ss = strKey.substring(0, 3);

                rs = dao.search("select object_id,b0110,E01A1 from per_object where plan_id="
                        + planid + " order by A0000 ");
                while (rs.next()) {
                    String object_id = rs.getString("object_id");
                    String b0110 = rs.getString("b0110");
                    String E01A1 = rs.getString("E01A1");

                    StringBuffer sqlstr = new StringBuffer();
                    sqlstr.append("update PER_RESULT_" + planid + " set "
                            + bufe.substring(1) + " where object_id=? ");
                    ArrayList dataList = new ArrayList();

                    if ("A".equalsIgnoreCase(s)) {
                        String str = "";
                        if ("A01".equalsIgnoreCase(ss)) {
                            str = ("select " + buf.substring(1) + " from Usr"
                                    + strKey + " where A0100='" + object_id + "'");
                        } else {
                            str = ("select " + buf.substring(1) + " from Usr"
                                    + strKey + " where A0100='" + object_id
                                    + "' and I9999=(select max(I9999) from Usr"
                                    + strKey + " where A0100='" + object_id + "')");
                        }

                        rowSet = dao.search(str);
                        while (rowSet.next()) {
                            for (int j = 0; j < temps.length; j++) {
                                String temp = temps[j].trim();
                                if (temp.length() == 0) {
                                    continue;
                                }
                                FieldItem fielditem = DataDictionary
                                        .getFieldItem(temp);
                                String itemtype = fielditem.getItemtype();
                                String itemid = fielditem.getItemid();
                                int decimalwidth = fielditem.getDecimalwidth();

                                if ("N".equalsIgnoreCase(itemtype)) {
                                    if (decimalwidth == 0) {
                                        Integer value = new Integer(
                                                PubFunc.round(rowSet
                                                        .getString(itemid), 0));
                                        dataList.add(value);
                                    } else {
                                        dataList.add(new Double(rowSet
                                                .getDouble(itemid)));
                                    }

                                } else if ("A".equalsIgnoreCase(itemtype)
                                        || "M".equalsIgnoreCase(itemtype)) {
                                    dataList.add(rowSet.getString(itemid));
                                } else if ("D".equalsIgnoreCase(itemtype)) {
                                    dataList.add(rowSet.getDate(itemid));
                                }
                            }
                            dataList.add(object_id);
                        }
                    } else if ("B".equalsIgnoreCase(s)) {
                        String str = "";
                        if ("B01".equalsIgnoreCase(ss)) {
                            if (object_type != null
                                    && object_type.trim().length() > 0
                                    && ("2".equalsIgnoreCase(object_type) || "4".equalsIgnoreCase(object_type))) {
                                str = ("select " + buf.substring(1) + " from "
                                        + strKey + " where B0110='" + b0110 + "'");
                            } else {
                                str = ("select " + buf.substring(1) + " from "
                                        + strKey + " where B0110='" + object_id + "'");
                            }
                        } else {
                            str = ("select " + buf.substring(1) + " from "
                                    + strKey + " where B0110='" + b0110
                                    + "' and I9999=(select max(I9999) from "
                                    + strKey + " where B0110='" + b0110 + "')");
                        }

                        rowSet = dao.search(str);
                        while (rowSet.next()) {
                            for (int j = 0; j < temps.length; j++) {
                                String temp = temps[j].trim();
                                if (temp.length() == 0) {
                                    continue;
                                }
                                FieldItem fielditem = DataDictionary
                                        .getFieldItem(temp);
                                String itemtype = fielditem.getItemtype();
                                String itemid = fielditem.getItemid();
                                int decimalwidth = fielditem.getDecimalwidth();

                                if ("N".equalsIgnoreCase(itemtype)) {
                                    if (decimalwidth == 0) {
                                        Integer value = new Integer(
                                                PubFunc.round(rowSet
                                                        .getString(itemid), 0));
                                        dataList.add(value);
                                    } else {
                                        dataList.add(new Double(rowSet
                                                .getDouble(itemid)));
                                    }

                                } else if ("A".equalsIgnoreCase(itemtype)
                                        || "M".equalsIgnoreCase(itemtype)) {
                                    dataList.add(rowSet.getString(itemid));
                                } else if ("D".equalsIgnoreCase(itemtype)) {
                                    dataList.add(rowSet.getDate(itemid));
                                }
                            }
                            dataList.add(object_id);
                        }
                    } else if ("K".equalsIgnoreCase(s)) {
                        String str = "";
                        if ("K01".equalsIgnoreCase(ss)) {
                            if (object_type != null
                                    && object_type.trim().length() > 0
                                    && ("2".equalsIgnoreCase(object_type) || "4".equalsIgnoreCase(object_type))) {
                                str = ("select " + buf.substring(1) + " from "
                                        + strKey + " where E01A1='" + E01A1 + "'");
                            } else {
                                str = ("select " + buf.substring(1) + " from "
                                        + strKey + " where E01A1='" + object_id + "'");
                            }
                        } else {
                            str = ("select " + buf.substring(1) + " from "
                                    + strKey + " where E01A1='" + E01A1
                                    + "' and I9999=(select max(I9999) from "
                                    + strKey + " where E01A1='" + E01A1 + "')");
                        }

                        rowSet = dao.search(str);
                        while (rowSet.next()) {
                            for (int j = 0; j < temps.length; j++) {
                                String temp = temps[j].trim();
                                if (temp.length() == 0) {
                                    continue;
                                }
                                FieldItem fielditem = DataDictionary
                                        .getFieldItem(temp);
                                String itemtype = fielditem.getItemtype();
                                String itemid = fielditem.getItemid();
                                int decimalwidth = fielditem.getDecimalwidth();

                                if ("N".equalsIgnoreCase(itemtype)) {
                                    if (decimalwidth == 0) {
                                        Integer value = new Integer(
                                                PubFunc.round(rowSet
                                                        .getString(itemid), 0));
                                        dataList.add(value);
                                    } else {
                                        dataList.add(new Double(rowSet
                                                .getDouble(itemid)));
                                    }

                                } else if ("A".equalsIgnoreCase(itemtype)
                                        || "M".equalsIgnoreCase(itemtype)) {
                                    dataList.add(rowSet.getString(itemid));
                                } else if ("D".equalsIgnoreCase(itemtype)) {
                                    dataList.add(rowSet.getDate(itemid));
                                }
                            }
                            dataList.add(object_id);
                        }
                    }
                    if (dataList.size() > 0) {
                        dao.update(sqlstr.toString(), dataList);
                    }
                }
            }
            if (rowSet != null) {
                rowSet.close();
            }
            if (rs != null) {
                rs.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    /**
     * @param @param  dao
     * @param @param  Menus//需引入的指标集合
     * @param @param  relatePlanType 引入计划类型
     * @param @param  relatePlanid 引入计划id
     * @param @throws GeneralException
     * @return void
     * @throws
     * @Title: importRelatePlanFromSuperOrg
     * @Description: 引入计划：从上级机构取得需要引入的数据  部门取单位的，单位取上级单位的。
     * @author:wangrd
     */
    private void importRelatePlanFromSuperOrg(ContentDAO dao,
                                              String Menus, String relatePlanType, String relatePlanid) throws GeneralException {
        String object_type = this.planVo.getString("object_type");
        String planid = this.planVo.getString("plan_id");
        //取得所属上级部门或单位分数的时候，根据引入计划的部门代码长短依次更新：先上级，然后上上级，直至最顶端单位 wangrd 2014-12-17
        if (!"2".equals(relatePlanType)) {//引入非人员计划
            String destKeyFld = "object_id";
            if ("2".equals(object_type)) {
                if ("3".equals(relatePlanType)) {//引入单位计划
                    destKeyFld = "b0110";
                } else {//引入团队、部门
                    destKeyFld = "e0122";
                }
            }
            if (Menus != null && Menus.trim().length() > 0) {
                //引入计划的考核对象长度集合
                String sql = "select distinct " + Sql_switcher.length("object_id")
                        + " as alen from PER_RESULT_" + relatePlanid
                        + " order by alen desc";
                ArrayList objectLenList = dao.searchDynaList(sql);//考核对象长度集合

                String strSet = "";
                String destTab = "PER_RESULT_" + planid;
                String srcTab = "PER_RESULT_" + relatePlanid;
                String[] temps = Menus.split(",");
                for (int j = 0; j < temps.length; j++) {
                    String temp = temps[j].trim();
                    if (temp.length() == 0) {
                        continue;
                    }
                    String srcFld = "";
                    String destFld = "G_" + relatePlanid + "_" + temp;
                    if ("score".equalsIgnoreCase(temp)) {
                        srcFld = "score";
                        destFld = "G_" + relatePlanid;
                    } else if ("Grade".equalsIgnoreCase(temp)) {
                        srcFld = "grade_id";
                    } else if ("Avg".equalsIgnoreCase(temp)) {
                        srcFld = "exs_GrpAvg";
                    } else if ("Max".equalsIgnoreCase(temp)) {
                        srcFld = "exs_GrpMax";
                    } else if ("Min".equalsIgnoreCase(temp)) {
                        srcFld = "exs_GrpMin";
                    } else if ("XiShu".equalsIgnoreCase(temp)) {
                        srcFld = "exX_object";
                    } else if ("Order".equalsIgnoreCase(temp)) {
                        srcFld = "ordering";
                    } else if ("UMOrd".equalsIgnoreCase(temp)) {
                        srcFld = "org_ordering";
                    } else if ("Mark".equalsIgnoreCase(temp)) {
                        srcFld = "evalRemark";
                    } else if (temp.indexOf("Body") != -1) {
                        srcFld = "";
                        continue;//下面处理
                    } else if (temp.indexOf("Item") != -1) {
                        String itemid = temp.replaceAll("Item", "");
                        srcFld = "T_" + itemid;
                    } else if (!"UMNum".equalsIgnoreCase(temp)
                            && !"GrpNum".equalsIgnoreCase(temp)) {
                        srcFld = "C_" + temp;
                    }
                    if (!"".equals(srcFld)) {
                        strSet = strSet + destFld + "=" + srcTab + "." + srcFld + "`";
                    }

                }
                if (strSet.length() > 0) {
                    DbWizard dbWizard = new DbWizard(this.conn);
                    strSet = strSet.substring(0, strSet.length() - 1);
                    for (int ilen = 0; ilen < objectLenList.size(); ilen++) {
                        LazyDynaBean objectLenBean = (LazyDynaBean) objectLenList.get(ilen);
                        String objectLength = (String) objectLenBean.get("alen");
                        String strJoin = Sql_switcher.left(destTab + "." + destKeyFld, objectLength)
                                + "=" + srcTab + ".object_id";
                        String strDWhere = "G_" + relatePlanid + " is null";
                        dbWizard.updateRecord(destTab, srcTab, strJoin, strSet, strDWhere, "");
                    }
                }
                //处理考核主体类别打分
                for (int j = 0; j < temps.length; j++) {
                    String temp = temps[j].trim();
                    if (temp.length() == 0) {
                        continue;
                    }

                    String srcFld = "";
                    String destFld = "";
                    if (temp.indexOf("Body") != -1) {//处理考核主体类别打分
                        srcTab = "per_objectbody_score";
                        srcFld = "score";
                        String bodyid = temp.replaceAll("Body", "");
                        destFld = "G_" + relatePlanid + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid);
                        strSet = destFld + "=" + srcTab + "." + srcFld;
                        String srcWhere = srcTab + ".body_id="
                                + bodyid + " and " + srcTab + ".plan_id=" + relatePlanid;

                        DbWizard dbWizard = new DbWizard(this.conn);
                        for (int ilen = 0; ilen < objectLenList.size(); ilen++) {
                            LazyDynaBean objectLenBean = (LazyDynaBean) objectLenList.get(ilen);
                            String objectLength = (String) objectLenBean.get("alen");
                            String strJoin = Sql_switcher.left(destTab + "." + destKeyFld, objectLength)
                                    + "=" + srcTab + ".object_id";
                            String strDWhere = destFld + " is null";
                            dbWizard.updateRecord(destTab, srcTab, strJoin, strSet, strDWhere, srcWhere);
                        }
                        break;
                    }
                }

            }
        }
    }

    // 更新per_result_planid表中调整后的表结构的"引入计划"的字段的值 JinChunhai 2011.01.20
    public void updateResultTable(String planid) throws GeneralException {
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            LoadXml ldxml = new LoadXml(this.conn, planid);
            ArrayList list = ldxml.getRelatePlanValue("Plan");
            this.planVo = getPerPlanVo(planid);
            String object_type = this.planVo.getString("object_type");
            String onlyFild = "";
            Sys_Oth_Parameter sysbo = new Sys_Oth_Parameter(this.conn);
            onlyFild = sysbo.getCHKValue(Sys_Oth_Parameter.CHK_UNIQUENESS, "0",
                    "name");

            LazyDynaBean abean = null;
            for (int i = 0; i < list.size(); i++) {
                abean = (LazyDynaBean) list.get(i);
                String id = (String) abean.get("id");
                String Type = (String) abean.get("Type");

                String Menus = (String) abean.get("Menus");
                if (Menus == null || Menus.length() < 1) {//空的时候，默认值引入得分
                    Menus = "score";
                }
                if (Menus != null && Menus.trim().length() > 0) {
                    String[] temps = Menus.split(",");
                    for (int j = 0; j < temps.length; j++) {
                        StringBuffer sqlstr = new StringBuffer();
                        String temp = temps[j].trim();

                        if (temp.length() == 0) {
                            continue;
                        }

                        String destFld = "G_" + id + "_" + temp;
                        if ("score".equals(temp)) {
                            destFld = "G_" + id;
                        } else if (temp.indexOf("Body") != -1) {
                            String bodyid = temp.replaceAll("Body", "");
                            destFld = "G_" + id + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid);
                        } else if (temp.indexOf("Item") != -1) {
                            String itemid = temp.replaceAll("Item", "");
                            destFld = "G_" + id + "_Item" + itemid;
                        }

                        //引入指标置为null
                        dao.update("update PER_RESULT_" + planid + " set " + destFld + "=NULL");

                        if ("score".equalsIgnoreCase(temp)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + " = ");
                            sqlstr.append("(select per_result_" + id
                                    + ".score from per_result_" + id);
                            if ("2".equalsIgnoreCase(Type)) {
                                sqlstr.append(" where PER_RESULT_" + planid
                                        + ".object_id=per_result_" + id
                                        + ".object_id)");
                            } else {
                                // sqlstr.append(" where PER_RESULT_" + planid +
                                // ".E0122=per_result_" + id + ".E0122)");

                                if (object_type != null
                                        && object_type.trim().length() > 0
                                        && "2".equalsIgnoreCase(object_type)) // 人员计划引入非人员计划
                                {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".E0122=per_result_" + id
                                            + ".object_id ");
                                    sqlstr.append(" or ((PER_RESULT_" + planid
                                            + ".E0122 is null or PER_RESULT_"
                                            + planid + ".E0122='') ");
                                    sqlstr.append(" and PER_RESULT_" + planid
                                            + ".b0110=per_result_" + id
                                            + ".object_id )) ");
                                } else {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".object_id=per_result_" + id
                                            + ".object_id)"); // 非人员计划引入非人员计划
                                }
                            }
                        } else if ("Grade".equalsIgnoreCase(temp)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_Grade = ");
                            sqlstr.append("(select per_result_" + id
                                    + ".grade_id from per_result_" + id);
                            StringBuffer sb = new StringBuffer();
                            if ("2".equalsIgnoreCase(Type)) {
                                sb.append(" where PER_RESULT_" + planid
                                        + ".object_id=per_result_" + id
                                        + ".object_id)");
                                sqlstr.append(sb);
                            } else {
                                // sqlstr.append(" where PER_RESULT_" + planid +
                                // ".E0122=per_result_" + id + ".E0122)");

                                if (object_type != null
                                        && object_type.trim().length() > 0
                                        && "2".equalsIgnoreCase(object_type)) // 人员计划引入非人员计划
                                {
                                    sb.append(" where PER_RESULT_" + planid
                                            + ".E0122=per_result_" + id
                                            + ".object_id ");
                                    sb.append(" or ((PER_RESULT_" + planid
                                            + ".E0122 is null or PER_RESULT_"
                                            + planid + ".E0122='') ");
                                    sb.append(" and PER_RESULT_" + planid
                                            + ".b0110=per_result_" + id
                                            + ".object_id )) ");
                                } else {
                                    sb.append(" where PER_RESULT_" + planid
                                            + ".object_id=per_result_" + id
                                            + ".object_id)"); // 非人员计划引入非人员计划
                                }
                                sqlstr.append(sb);
                                sqlstr.append(",Org_Grade=");
                                sqlstr.append("(select per_result_" + id
                                        + ".resultdesc from per_result_" + id);
                                sqlstr.append(sb);
                            }
                        } else if ("Avg".equalsIgnoreCase(temp)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_Avg = ");
                            sqlstr.append("(select per_result_" + id
                                    + ".exs_GrpAvg from per_result_" + id);
                            if ("2".equalsIgnoreCase(Type)) {
                                sqlstr.append(" where PER_RESULT_" + planid
                                        + ".object_id=per_result_" + id
                                        + ".object_id)");
                            } else {
                                // sqlstr.append(" where PER_RESULT_" + planid +
                                // ".E0122=per_result_" + id + ".E0122)");

                                if (object_type != null
                                        && object_type.trim().length() > 0
                                        && "2".equalsIgnoreCase(object_type)) // 人员计划引入非人员计划
                                {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".E0122=per_result_" + id
                                            + ".object_id ");
                                    sqlstr.append(" or ((PER_RESULT_" + planid
                                            + ".E0122 is null or PER_RESULT_"
                                            + planid + ".E0122='') ");
                                    sqlstr.append(" and PER_RESULT_" + planid
                                            + ".b0110=per_result_" + id
                                            + ".object_id )) ");
                                } else {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".object_id=per_result_" + id
                                            + ".object_id)"); // 非人员计划引入非人员计划
                                }
                            }
                        } else if ("Max".equalsIgnoreCase(temp)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_Max = ");
                            sqlstr.append("(select per_result_" + id
                                    + ".exs_GrpMax from per_result_" + id);
                            if ("2".equalsIgnoreCase(Type)) {
                                sqlstr.append(" where PER_RESULT_" + planid
                                        + ".object_id=per_result_" + id
                                        + ".object_id)");
                            } else {
                                // sqlstr.append(" where PER_RESULT_" + planid +
                                // ".E0122=per_result_" + id + ".E0122)");

                                if (object_type != null
                                        && object_type.trim().length() > 0
                                        && "2".equalsIgnoreCase(object_type)) // 人员计划引入非人员计划
                                {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".E0122=per_result_" + id
                                            + ".object_id ");
                                    sqlstr.append(" or ((PER_RESULT_" + planid
                                            + ".E0122 is null or PER_RESULT_"
                                            + planid + ".E0122='') ");
                                    sqlstr.append(" and PER_RESULT_" + planid
                                            + ".b0110=per_result_" + id
                                            + ".object_id )) ");
                                } else {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".object_id=per_result_" + id
                                            + ".object_id)"); // 非人员计划引入非人员计划
                                }
                            }
                        } else if ("Min".equalsIgnoreCase(temp)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_Min = ");
                            sqlstr.append("(select per_result_" + id
                                    + ".exs_GrpMin from per_result_" + id);
                            if ("2".equalsIgnoreCase(Type)) {
                                sqlstr.append(" where PER_RESULT_" + planid
                                        + ".object_id=per_result_" + id
                                        + ".object_id)");
                            } else {
                                // sqlstr.append(" where PER_RESULT_" + planid +
                                // ".E0122=per_result_" + id + ".E0122)");

                                if (object_type != null
                                        && object_type.trim().length() > 0
                                        && "2".equalsIgnoreCase(object_type)) // 人员计划引入非人员计划
                                {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".E0122=per_result_" + id
                                            + ".object_id ");
                                    sqlstr.append(" or ((PER_RESULT_" + planid
                                            + ".E0122 is null or PER_RESULT_"
                                            + planid + ".E0122='') ");
                                    sqlstr.append(" and PER_RESULT_" + planid
                                            + ".b0110=per_result_" + id
                                            + ".object_id )) ");
                                } else {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".object_id=per_result_" + id
                                            + ".object_id)"); // 非人员计划引入非人员计划
                                }
                            }
                        } else if ("XiShu".equalsIgnoreCase(temp)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_XiShu = ");
                            sqlstr.append("(select per_result_" + id
                                    + ".exX_object from per_result_" + id);
                            if ("2".equalsIgnoreCase(Type)) {
                                sqlstr.append(" where PER_RESULT_" + planid
                                        + ".object_id=per_result_" + id
                                        + ".object_id)");
                            } else {
                                // sqlstr.append(" where PER_RESULT_" + planid +
                                // ".E0122=per_result_" + id + ".E0122)");

                                if (object_type != null
                                        && object_type.trim().length() > 0
                                        && "2".equalsIgnoreCase(object_type)) // 人员计划引入非人员计划
                                {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".E0122=per_result_" + id
                                            + ".object_id ");
                                    sqlstr.append(" or ((PER_RESULT_" + planid
                                            + ".E0122 is null or PER_RESULT_"
                                            + planid + ".E0122='') ");
                                    sqlstr.append(" and PER_RESULT_" + planid
                                            + ".b0110=per_result_" + id
                                            + ".object_id )) ");
                                } else {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".object_id=per_result_" + id
                                            + ".object_id)"); // 非人员计划引入非人员计划
                                }
                            }
                        } else if ("Order".equalsIgnoreCase(temp)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_Order = ");
                            sqlstr.append("(select per_result_" + id
                                    + ".ordering from per_result_" + id);
                            if ("2".equalsIgnoreCase(Type)) {
                                sqlstr.append(" where PER_RESULT_" + planid
                                        + ".object_id=per_result_" + id
                                        + ".object_id)");
                            } else {
                                // sqlstr.append(" where PER_RESULT_" + planid +
                                // ".E0122=per_result_" + id + ".E0122)");

                                if (object_type != null
                                        && object_type.trim().length() > 0
                                        && "2".equalsIgnoreCase(object_type)) // 人员计划引入非人员计划
                                {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".E0122=per_result_" + id
                                            + ".object_id ");
                                    sqlstr.append(" or ((PER_RESULT_" + planid
                                            + ".E0122 is null or PER_RESULT_"
                                            + planid + ".E0122='') ");
                                    sqlstr.append(" and PER_RESULT_" + planid
                                            + ".b0110=per_result_" + id
                                            + ".object_id )) ");
                                } else {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".object_id=per_result_" + id
                                            + ".object_id)"); // 非人员计划引入非人员计划
                                }
                            }
                        } else if ("UMOrd".equalsIgnoreCase(temp)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_UMOrd = ");
                            sqlstr.append("(select per_result_" + id
                                    + ".org_ordering from per_result_" + id);
                            if ("2".equalsIgnoreCase(Type)) {
                                sqlstr.append(" where PER_RESULT_" + planid
                                        + ".object_id=per_result_" + id
                                        + ".object_id)");
                            } else {
                                // sqlstr.append(" where PER_RESULT_" + planid +
                                // ".E0122=per_result_" + id + ".E0122)");

                                if (object_type != null
                                        && object_type.trim().length() > 0
                                        && "2".equalsIgnoreCase(object_type)) // 人员计划引入非人员计划
                                {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".E0122=per_result_" + id
                                            + ".object_id ");
                                    sqlstr.append(" or ((PER_RESULT_" + planid
                                            + ".E0122 is null or PER_RESULT_"
                                            + planid + ".E0122='') ");
                                    sqlstr.append(" and PER_RESULT_" + planid
                                            + ".b0110=per_result_" + id
                                            + ".object_id )) ");
                                } else {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".object_id=per_result_" + id
                                            + ".object_id)"); // 非人员计划引入非人员计划
                                }
                            }
                        } else if ("Mark".equalsIgnoreCase(temp)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_Mark = ");
                            sqlstr.append("(select per_result_" + id
                                    + ".evalremark from per_result_" + id);
                            if ("2".equalsIgnoreCase(Type)) {
                                sqlstr.append(" where PER_RESULT_" + planid
                                        + ".object_id=per_result_" + id
                                        + ".object_id)");
                            } else {
                                // sqlstr.append(" where PER_RESULT_" + planid +
                                // ".E0122=per_result_" + id + ".E0122)");

                                if (object_type != null
                                        && object_type.trim().length() > 0
                                        && "2".equalsIgnoreCase(object_type)) // 人员计划引入非人员计划
                                {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".E0122=per_result_" + id
                                            + ".object_id ");
                                    sqlstr.append(" or ((PER_RESULT_" + planid
                                            + ".E0122 is null or PER_RESULT_"
                                            + planid + ".E0122='') ");
                                    sqlstr.append(" and PER_RESULT_" + planid
                                            + ".b0110=per_result_" + id
                                            + ".object_id )) ");
                                } else {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".object_id=per_result_" + id
                                            + ".object_id)"); // 非人员计划引入非人员计划
                                }
                            }
                        } else if (temp.indexOf("Body") != -1) {
                            String bodyid = temp.replaceAll("Body", "");

                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid) + " = ");
                            sqlstr.append("(select per_objectbody_score.score from per_objectbody_score");
                            sqlstr.append(" where PER_RESULT_"
                                    + planid
                                    + ".object_id=per_objectbody_score.object_id and body_id="
                                    + bodyid + " and plan_id=" + id + ")");
                        } else if (temp.indexOf("Item") != -1) {
                            String itemid = temp.replaceAll("Item", "");

                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_Item" + itemid + " = ");
                            sqlstr.append("(select per_result_" + id + ".T_"
                                    + itemid + " from per_result_" + id);
                            if ("2".equalsIgnoreCase(Type)) {
                                sqlstr.append(" where PER_RESULT_" + planid
                                        + ".object_id=per_result_" + id
                                        + ".object_id)");
                            } else {
                                // sqlstr.append(" where PER_RESULT_" + planid +
                                // ".E0122=per_result_" + id + ".E0122)");

                                if (object_type != null
                                        && object_type.trim().length() > 0
                                        && "2".equalsIgnoreCase(object_type)) // 人员计划引入非人员计划
                                {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".E0122=per_result_" + id
                                            + ".object_id ");
                                    sqlstr.append(" or ((PER_RESULT_" + planid
                                            + ".E0122 is null or PER_RESULT_"
                                            + planid + ".E0122='') ");
                                    sqlstr.append(" and PER_RESULT_" + planid
                                            + ".b0110=per_result_" + id
                                            + ".object_id )) ");
                                } else {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".object_id=per_result_" + id
                                            + ".object_id)"); // 非人员计划引入非人员计划
                                }
                            }
                        } else if (!"UMNum".equalsIgnoreCase(temp)
                                && !"GrpNum".equalsIgnoreCase(temp)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_" + temp + " = ");
                            sqlstr.append("(select per_result_" + id + ".C_"
                                    + temp + " from per_result_" + id);
                            if ("2".equalsIgnoreCase(Type)) {
                                sqlstr.append(" where PER_RESULT_" + planid
                                        + ".object_id=per_result_" + id
                                        + ".object_id)");
                            } else {
                                // sqlstr.append(" where PER_RESULT_" + planid +
                                // ".E0122=per_result_" + id + ".E0122)");

                                if (object_type != null
                                        && object_type.trim().length() > 0
                                        && "2".equalsIgnoreCase(object_type)) // 人员计划引入非人员计划
                                {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".E0122=per_result_" + id
                                            + ".object_id ");
                                    sqlstr.append(" or ((PER_RESULT_" + planid
                                            + ".E0122 is null or PER_RESULT_"
                                            + planid + ".E0122='') ");
                                    sqlstr.append(" and PER_RESULT_" + planid
                                            + ".b0110=per_result_" + id
                                            + ".object_id )) ");
                                } else {
                                    sqlstr.append(" where PER_RESULT_" + planid
                                            + ".object_id=per_result_" + id
                                            + ".object_id)"); // 非人员计划引入非人员计划
                                }
                            }
                        }

                        if (sqlstr.length() > 0) {
                            dao.update(sqlstr.toString());
                        }
                    }
                } else {
                    StringBuffer str = new StringBuffer();
                    str.append("update PER_RESULT_" + planid + " set G_" + id
                            + " = ");
                    str.append("(select per_result_" + id
                            + ".score from per_result_" + id);
                    if ("2".equalsIgnoreCase(Type)) {
                        str.append(" where PER_RESULT_" + planid
                                + ".object_id=per_result_" + id + ".object_id)");
                    } else {
                        // str.append(" where PER_RESULT_" + planid +
                        // ".E0122=per_result_" + id + ".E0122)");

                        if (object_type != null
                                && object_type.trim().length() > 0
                                && "2".equalsIgnoreCase(object_type)) // 人员计划引入非人员计划
                        {
                            str.append(" where PER_RESULT_" + planid
                                    + ".E0122=per_result_" + id + ".object_id ");
                            str.append(" or ((PER_RESULT_" + planid
                                    + ".E0122 is null or PER_RESULT_" + planid
                                    + ".E0122='') ");
                            str.append(" and PER_RESULT_" + planid
                                    + ".b0110=per_result_" + id
                                    + ".object_id )) ");
                        } else {
                            str.append(" where PER_RESULT_" + planid
                                    + ".object_id=per_result_" + id
                                    + ".object_id)"); // 非人员计划引入非人员计划
                        }
                    }

                    if (str.length() > 0) {
                        dao.update(str.toString());
                    }
                }

                //取得所属上级部门或单位分数的时候，根据引入计划的部门代码长短依次更新：先上级，然后上上级，直至最顶端单位 wangrd 2014-12-17
                importRelatePlanFromSuperOrg(dao, Menus, Type, id);

                //处理汇总指标
                String HZMenus = (String) abean.get("HZMenus");
                String temp2 = "";
                String temp3 = "";
                if (HZMenus != null && HZMenus.trim().length() > 0) {
                    String[] temps = HZMenus.split(",");
                    for (int j = 0; j < temps.length; j++) {
                        StringBuffer sqlstr = new StringBuffer();
                        String temp = temps[j].trim();
                        String temp1 = "";

                        if (temp.indexOf(":") != -1) {
                            temp1 = temp.substring(0, temp.indexOf(":"));
                            temp2 = temp.substring(temp.indexOf(":") + 1);
                        }
                        temp3 = "Z" + temp2;
                        if (temp1.length() == 0) {
                            continue;
                        }

                        if ("score".equalsIgnoreCase(temp1)) {

                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_" + temp3 + " = ");
                            sqlstr.append("(select " + temp2 + "(per_result_"
                                    + id + ".score) from per_result_" + id);
                            sqlstr.append(" where PER_RESULT_" + planid + "."
                                    + onlyFild + "=per_result_" + id
                                    + ".director) ");
                        } else if ("Grade".equalsIgnoreCase(temp1)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_Grade_" + temp3
                                    + " = ");
                            sqlstr.append("(select " + temp2 + "(per_result_"
                                    + id + ".grade_id) from per_result_" + id);
                            sqlstr.append(" where PER_RESULT_" + planid + "."
                                    + onlyFild + "=per_result_" + id
                                    + ".director) ");
                            sqlstr.append(",Org_Grade=");
                            sqlstr.append("(select per_result_" + id
                                    + ".resultdesc from per_result_" + id);
                            sqlstr.append(" where PER_RESULT_" + planid + "."
                                    + onlyFild + "=per_result_" + id
                                    + ".director) ");

                        } else if ("Avg".equalsIgnoreCase(temp1)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_Avg_" + temp3 + " = ");
                            sqlstr.append("(select " + temp2 + "(per_result_"
                                    + id + ".exs_GrpAvg) from per_result_" + id);
                            sqlstr.append(" where PER_RESULT_" + planid + "."
                                    + onlyFild + "=per_result_" + id
                                    + ".director) ");
                        } else if ("Max".equalsIgnoreCase(temp1)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_Max_" + temp3 + " = ");
                            sqlstr.append("(select " + temp2 + "(per_result_"
                                    + id + ".exs_GrpMax) from per_result_" + id);
                            sqlstr.append(" where PER_RESULT_" + planid + "."
                                    + onlyFild + "=per_result_" + id
                                    + ".director) ");

                        } else if ("Min".equalsIgnoreCase(temp1)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_Min_" + temp3 + " = ");
                            sqlstr.append("(select " + temp2 + "(per_result_"
                                    + id + ".exs_GrpMin) from per_result_" + id);
                            sqlstr.append(" where PER_RESULT_" + planid + "."
                                    + onlyFild + "=per_result_" + id
                                    + ".director) ");
                        } else if ("XiShu".equalsIgnoreCase(temp1)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_XiShu_" + temp3
                                    + " = ");
                            sqlstr.append("(select " + temp2 + "(per_result_"
                                    + id + ".exX_object) from per_result_" + id);
                            sqlstr.append(" where PER_RESULT_" + planid + "."
                                    + onlyFild + "=per_result_" + id
                                    + ".director) ");
                        } else if ("Order".equalsIgnoreCase(temp1)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_Order_" + temp3
                                    + " = ");
                            sqlstr.append("(select " + temp2 + "(per_result_"
                                    + id + ".ordering) from per_result_" + id);
                            sqlstr.append(" where PER_RESULT_" + planid + "."
                                    + onlyFild + "=per_result_" + id
                                    + ".director) ");

                        } else if ("UMOrd".equalsIgnoreCase(temp1)) {
                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_UMOrd_" + temp3
                                    + " = ");
                            sqlstr.append("(select " + temp2 + "(per_result_"
                                    + id + ".org_ordering) from per_result_"
                                    + id);
                            sqlstr.append(" where PER_RESULT_" + planid + "."
                                    + onlyFild + "=per_result_" + id
                                    + ".director) ");

                        } else if ("Mark".equalsIgnoreCase(temp1)) {

                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_Mark_" + temp3 + " = ");
                            sqlstr.append("(select " + temp2 + "(per_result_"
                                    + id + ".evalremark) from per_result_" + id);
                            sqlstr.append(" where PER_RESULT_" + planid + "."
                                    + onlyFild + "=per_result_" + id
                                    + ".director) ");

                        } else if (temp1.indexOf("Body") != -1) {
                            String bodyid = temp1.replaceAll("Body", "");

                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid) + "_"
                                    + temp3 + " = ");
                            sqlstr.append("(select "
                                    + temp2
                                    + "(per_objectbody_score.score) from per_objectbody_score");
                            sqlstr.append(" where PER_RESULT_"
                                    + planid
                                    + ".object_id=per_objectbody_score.object_id and body_id="
                                    + bodyid + " and plan_id=" + id + ")");
                        } else if (temp1.indexOf("Item") != -1) {
                            String itemid = temp1.replaceAll("Item", "");

                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_Item" + itemid + "_"
                                    + temp3 + " = ");
                            sqlstr.append("(select " + temp2 + "(per_result_"
                                    + id + ".T_" + itemid
                                    + ") from per_result_" + id);
                            sqlstr.append(" where PER_RESULT_" + planid + "."
                                    + onlyFild + "=per_result_" + id
                                    + ".director) ");

                        } else {

                            sqlstr.append("update PER_RESULT_" + planid
                                    + " set G_" + id + "_" + temp1 + "_"
                                    + temp3 + " = ");
                            sqlstr.append("(select " + temp2 + "(per_result_"
                                    + id + ".C_" + temp1 + ") from per_result_"
                                    + id);
                            sqlstr.append(" where PER_RESULT_" + planid + "."
                                    + onlyFild + "=per_result_" + id
                                    + ".director) ");

                        }

                        if (sqlstr.length() > 0) {
                            dao.update(sqlstr.toString());
                        }

                    }
                } else if (!"".equals(temp2.trim())) {
                    StringBuffer str = new StringBuffer();
                    str.append("update PER_RESULT_" + planid + " set G_" + id
                            + "_" + temp3 + " = ");
                    str.append("(select " + temp2 + "(per_result_" + id
                            + ".score) from per_result_" + id);
                    str.append(" where PER_RESULT_" + planid + "." + onlyFild
                            + "=per_result_" + id + ".director) ");

                    if (str.length() > 0) {
                        dao.update(str.toString());
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // 检查per_article表中有没有state;fileflag;description字段，若没有就创建 JinChunhai
// 2011.02.22
    public void editArticle() throws GeneralException {
        try {
            String tablename = "per_article";
            Table table = new Table(tablename);
            DbWizard dbWizard = new DbWizard(this.conn);
            boolean flag = false;
            if (!dbWizard.isExistField(tablename, "fileflag", false)) {
                Field obj = new Field("fileflag");
                obj.setDatatype(DataType.INT);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            if (!dbWizard.isExistField(tablename, "state", false)) {
                Field obj = new Field("state");
                obj.setDatatype(DataType.INT);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            if (!dbWizard.isExistField(tablename, "description", false)) {
                Field obj = new Field("description");
                obj.setDatatype(DataType.CLOB);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }

            if (flag) {
                dbWizard.addColumns(table);// 更新列
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 补充表结构
     *
     * @param planid
     * @throws GeneralException
     */
    public void testFields(String planid) throws GeneralException {
        try {
            LoadXml parameter_content = new LoadXml(this.conn, planid);
            Hashtable params = parameter_content.getDegreeWhole();

            String tablename = "per_result_" + planid;
            Table table = new Table(tablename);
            DbWizard dbWizard = new DbWizard(this.conn);
            boolean flag = false;
            if (!dbWizard.isExistField(tablename, "score_adjust", false)) {
                Field obj = new Field("score_adjust");
                obj.setDatatype(DataType.INT);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            if (!dbWizard.isExistField(tablename, "Org_Grade", false)) {
                Field obj = new Field("Org_Grade");
                obj.setDatatype(DataType.STRING);
                obj.setLength(30);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            if (!dbWizard.isExistField(tablename, "exS_GrpAvg", false)) {
                Field obj = new Field("exS_GrpAvg");
                obj.setDatatype(DataType.FLOAT);
                obj.setLength(12);
                obj.setDecimalDigits(6);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            if (!dbWizard.isExistField(tablename, "exX_object", false)) {
                Field obj = new Field("exX_object");
                obj.setDatatype(DataType.FLOAT);
                obj.setLength(12);
                obj.setDecimalDigits(6);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            if (!dbWizard.isExistField(tablename, "exS_GrpMax", false)) {
                Field obj = new Field("exS_GrpMax");
                obj.setDatatype(DataType.FLOAT);
                obj.setLength(12);
                obj.setDecimalDigits(6);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            if (!dbWizard.isExistField(tablename, "exS_GrpMin", false)) {
                Field obj = new Field("exS_GrpMin");
                obj.setDatatype(DataType.FLOAT);
                obj.setLength(12);
                obj.setDecimalDigits(6);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            if (!dbWizard.isExistField(tablename, "ex_GrpNum", false)) {
                Field obj = new Field("ex_GrpNum");
                obj.setDatatype(DataType.INT);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            if (!dbWizard.isExistField(tablename, "evalRemark", false)) {
                Field obj = new Field("evalRemark");
                obj.setDatatype(DataType.CLOB);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            if (!dbWizard.isExistField(tablename, "Body_id", false)) {
                Field obj = new Field("Body_id");
                obj.setDatatype(DataType.INT);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            if (!dbWizard.isExistField(tablename, "Ordering", false)) {
                Field obj = new Field("Ordering");
                obj.setDatatype(DataType.INT);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            // 部门排名
            if (!dbWizard.isExistField(tablename, "org_ordering", false)) {
                Field obj = new Field("org_ordering");
                obj.setDatatype(DataType.INT);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
// 部门人数
            if (!dbWizard.isExistField(tablename, "org_GrpNum", false)) {
                Field obj = new Field("org_GrpNum");
                obj.setDatatype(DataType.INT);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            String wholeEval = (String) params.get("WholeEval");
            if ("true".equalsIgnoreCase(wholeEval)) {// 只有进行总体评价的考核计划才建本字段
                if (!dbWizard.isExistField(tablename, "V_SUM", false)) {
                    Field obj = new Field("V_SUM");
                    obj.setDatatype(DataType.FLOAT);
                    obj.setLength(12);
                    obj.setDecimalDigits(6);
                    obj.setKeyable(false);
                    table.addField(obj);
                    flag = true;
                }
                /************优先取总体评价等级分类 EvalClass***************/
                String gradeClass = (String) params.get("GradeClass");//启动计划等级分类
                if (params.get("EvalClass") == null
                        || ((String) params.get("EvalClass")).trim().length() <= 0
                        || "0".equals((String) params.get("EvalClass"))) {
                    gradeClass = (String) params.get("GradeClass");
                } else {
                    gradeClass = (String) params.get("EvalClass");//总体评价等级分类
                }

                ContentDAO dao = new ContentDAO(this.conn);
                RowSet frowset = dao
                        .search("select pds.id,pds.itemname from per_degree pd,per_degreedesc pds where pd.degree_id=pds.degree_id and pd.degree_id="
                                + gradeClass + " order by pds.topscore desc");

                while (frowset.next()) {
                    String id = frowset.getString("id");
                    if (!dbWizard.isExistField(tablename, "V_" + id, false)) {
                        Field obj = new Field("V_" + id);
                        obj.setDatatype(DataType.FLOAT);
                        obj.setLength(12);
                        obj.setDecimalDigits(6);
                        obj.setKeyable(false);
                        table.addField(obj);
                        flag = true;
                    }
                }
                if (frowset != null) {
                    frowset.close();
                }
            }
            String showEvalDirector = (String) params.get("ShowEvalDirector");
            if ("True".equalsIgnoreCase(showEvalDirector))// 只有选择了"负责人"指标的考核计划才建本字段
            {
                if (!dbWizard.isExistField(tablename, "director", false)) {
                    Field obj = new Field("director");
                    obj.setDatatype(DataType.STRING);
                    obj.setLength(30);
                    obj.setKeyable(false);
                    table.addField(obj);
                    flag = true;
                }
            }
            if (!dbWizard.isExistField(tablename, "minusScore", false))// 关键事件扣分
            {
                Field obj = new Field("minusScore");
                obj.setDatatype(DataType.FLOAT);
                obj.setLength(12);
                obj.setDecimalDigits(6);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            if (!dbWizard.isExistField(tablename, "addScore", false))// 关键事件加分
            {
                Field obj = new Field("addScore");
                obj.setDatatype(DataType.FLOAT);
                obj.setLength(12);
                obj.setDecimalDigits(6);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            if (flag) {
                dbWizard.addColumns(table);// 更新列
            }

            table = new Table("per_degreedesc");
            DBMetaModel dbmodel = new DBMetaModel(this.conn);
            if (!dbWizard.isExistField("per_degreedesc", "xishu", false)) {
                Field obj = new Field("xishu");
                obj.setDatatype(DataType.FLOAT);
                obj.setLength(12);
                obj.setDecimalDigits(6);
                obj.setKeyable(false);
                table.addField(obj);
                dbWizard.addColumns(table);
                dbmodel.reloadTableModel("per_degreedesc");
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw GeneralExceptionHandler.Handle(e);
        }
    }

    public void setUserView(UserView userView) {
        this.userView = userView;
    }

    public void setScoreAjustOper(String scoreAjustOper) {
        this.scoreAjustOper = scoreAjustOper;
    }

    /**
     * 先看操作单位 再看管理范围 再看用户所在单位部门 绩效所有模块都改为：超级用户也按操作单位优先的规则限制可操作范围 JinChunhai
     * 2011.05.11
     */
    public String getPrivWhere(UserView userView) {
        StringBuffer buf = new StringBuffer();
        try {
            // if (!userView.isSuper_admin())
            {
                String operOrg = userView.getUnitIdByBusi("5"); // 操作单位 5: 绩效管理
                // 6：培训管理 7：招聘管理
                if (operOrg != null && operOrg.length() > 3) {
                    StringBuffer tempSql = new StringBuffer("");
                    String[] temp = operOrg.split("`");
                    for (int i = 0; i < temp.length; i++) {

                        if ("UN".equalsIgnoreCase(temp[i].substring(0, 2))) {
                            tempSql.append(" or b0110 like '"
                                    + temp[i].substring(2) + "%'");
                        } else if ("UM".equalsIgnoreCase(temp[i].substring(0, 2))) {
                            tempSql.append(" or e0122 like '"
                                    + temp[i].substring(2) + "%'");
                        }
                    }
                    buf.append(" and ( " + tempSql.substring(3) + " ) ");
                } else if ((!userView.isSuper_admin())
                        && (!"UN`".equalsIgnoreCase(operOrg))) // 按照管理范围走
                {
                    // 按管理范围
                    String codeid = userView.getManagePrivCode();
                    String codevalue = userView.getManagePrivCodeValue();
                    String a_code = codeid + codevalue;

                    if (a_code.trim().length() > 0)// 说明授权了
                    {
                        if ("UN".equalsIgnoreCase(a_code))// 说明授权了组织结构节点
                        // 此时userView.getManagePrivCodeValue()得到空串
                        {
                            buf.append(" and 1=1 ");
                        } else {
                            if (AdminCode.getCodeName("UN", codevalue) != null
                                    && AdminCode.getCodeName("UN", codevalue)
                                    .length() > 0) {
                                buf.append(" and b0110 like '" + codevalue
                                        + "%'");
                            } else if (AdminCode.getCodeName("UM", codevalue) != null
                                    && AdminCode.getCodeName("UM", codevalue)
                                    .length() > 0) {
                                buf.append(" and e0122 like '" + codevalue
                                        + "%'");
                            }
                        }
                    } else {
                        buf.append(" and 1=2 ");
                    }

                }
                // if(buf.length()==0)//没有设置任何权限
                // buf.append(" and 1=2 ");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return buf.toString();
    }

    /**
     * 根据考核计划得到考核对象列表
     *
     * @param planid
     * @return
     */
    public ArrayList getObjectList(String planid) {
        ArrayList list = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = dao
                    .search("select object_id,a0101 from per_object where plan_id="
                            + planid + " order by a0000");
            while (rowSet.next()) {
                CommonData data = new CommonData(rowSet.getString("object_id"),
                        rowSet.getString("a0101"));
                list.add(data);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    // 获得标准标度
    public ArrayList getGradeList(String per_comTable) {
        ArrayList list = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = dao
                    .search("select grade_template_id,gradedesc from "
                            + per_comTable + " order by gradevalue");
            CommonData data = new CommonData("", "");
            list.add(data);
            while (rowSet.next()) {
                data = new CommonData(rowSet.getString("grade_template_id"),
                        Sql_switcher.readMemo(rowSet, "gradedesc"));
                list.add(data);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;

    }

    /**
     * 根据考核计划得到考核对象列表 有条件范围的限制
     *
     * @param planid
     * @return
     */
    public ArrayList getObjectList2(String planid, String whl) {
        whl = PubFunc.keyWord_reback(whl);
        ArrayList list = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            StringBuffer buf = new StringBuffer();
            buf.append("select object_id,a0101 from per_object where plan_id="
                    + planid);
            if (whl.length() > 0) {
                buf.append(whl);
            }

            buf.append(" order by a0000");
            RowSet rowSet = dao.search(buf.toString());
            while (rowSet.next()) {
                CommonData data = new CommonData(rowSet.getString("object_id"),
                        rowSet.getString("a0101"));
                list.add(data);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * 根据 opt 取得考核对象的 评语或总结
     *
     * @param objectid 考核对象
     * @param opt      1：评语 2：总结
     * @param planid   计划id
     * @return
     */
    public String getSummarize(String objectid, String opt, String planid) {
        String summarize = "";
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            String fieldName = "appraise";
            String sql = "";
            RowSet rowSet = null;
            String temp = objectid;
            if ("2".equals(opt))// 总结
            { // 验证是否为非人员的计划 如果是要用团队负责人来保存
                sql = "select object_type from per_plan where plan_id="
                        + planid;
                rowSet = dao.search(sql);
                if (rowSet.next()) {
                    if (rowSet.getInt(1) != 2) {
                        sql = "select mainbody_id from per_mainbody where object_id='"
                                + objectid
                                + "' and plan_id="
                                + planid
                                + " and body_id=-1";
                        rowSet = dao.search(sql);
                        if (rowSet.next()) {
                            objectid = rowSet.getString(1);
                        }
                    }
                }

                sql = "select * from per_article where plan_id=" + planid
                        + " and Article_type=2 and fileflag=1 and a0100='"
                        + objectid + "' ";
                fieldName = "content";
            } else if ("1".equals(opt))// 评语
            {
                fieldName = "appraise";
                sql = "select * from per_result_" + planid
                        + " where object_id='" + objectid + "'";
            }

            rowSet = dao.search(sql);
            if (rowSet.next()) {
                summarize = Sql_switcher.readMemo(rowSet, fieldName);
            }

            if (summarize.length() == 0 && "2".equals(opt))// 总结 为了兼容cs的旧的计划
            // 如果在per_article表没有找到值就从结果表再取一遍
            {
                sql = "select * from per_result_" + planid
                        + " where object_id='" + temp + "'";
                rowSet = dao.search(sql);
                if (rowSet.next()) {
                    summarize = Sql_switcher.readMemo(rowSet, "summarize");
                }
            }

            if (rowSet != null) {
                rowSet.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return summarize;
    }

    /**
     * 保存 评语
     *
     * @param objectid 考核对象
     * @param planid   计划id
     * @param opt      1：评语 2：总结
     * @return
     */
    public String saveAppraise(String objectid, String planid, String appraise,
                               String opt) {
        String summarize = "";
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = null;
            String sql = "";
            if ("2".equals(opt)) {
                int article_id = 0;
                String temp = objectid;
                sql = "select object_type from per_plan where plan_id="
                        + planid;
                rowSet = dao.search(sql);
                if (rowSet.next()) {
                    if (rowSet.getInt(1) != 2) {
                        sql = "select mainbody_id from per_mainbody where object_id='"
                                + objectid
                                + "' and plan_id="
                                + planid
                                + " and body_id=-1";
                        rowSet = dao.search(sql);
                        if (rowSet.next()) {
                            objectid = rowSet.getString(1);
                        }
                    }
                }

                sql = "select * from per_article where plan_id="
                        + planid
                        + " and a0100='"
                        + objectid
                        + "' and lower(nbase)='usr' and article_type=2 and fileflag=1 ";
                rowSet = dao.search(sql);

                if (rowSet.next()) {
                    article_id = rowSet.getInt("article_id");
                } else {
                    article_id = insertPerArticleRecord(planid, 2, 1, objectid);
                }
                RecordVo vo = new RecordVo("per_article");
                vo.setInt("article_id", article_id);
                vo = dao.findByPrimaryKey(vo);
                vo.setString("content", appraise);
                vo.setInt("state", 1);
                vo.setString("description", "");
                dao.updateValueObject(vo);

                // 对于总结在结果表里再存一份
                rowSet = dao.search("select id from per_result_" + planid
                        + " where object_id='" + temp + "'");
                if (rowSet.next()) {
                    vo = new RecordVo("per_result_" + planid);

                    String id = rowSet.getString("id");
                    String result_id = "";
                    if (id.indexOf(".") != -1) {
                        result_id = id.substring(0, id.indexOf("."));
                        vo.setInt("id", Integer.parseInt(result_id));
                    } else {
                        vo.setInt("id", rowSet.getInt(1));
                    }
                    vo = dao.findByPrimaryKey(vo);
                    vo.setString("summarize", appraise);
                    dao.updateValueObject(vo);
                }
            } else {
                // String fieldName="appraise";
                //
                // PreparedStatement
                // ps=this.conn.prepareStatement("update per_result_"+planid+" set "+fieldName+"=? where object_id='"+objectid+"'");
                // switch(Sql_switcher.searchDbServer())
                // {
                // case Constant.ORACEL:
                // oracle.sql.CLOB clob=getOracleClob(planid,objectid,appraise);
                // ps.setClob(1, clob);
                // ps.execute();
                // break;
                // default:
                // ps.setString(1,appraise);
                // ps.execute();
                // break;
                // }

                rowSet = dao.search("select id from per_result_" + planid
                        + " where object_id='" + objectid + "'");
                if (rowSet.next()) {
                    RecordVo vo = new RecordVo("per_result_" + planid);

                    String id = rowSet.getString("id");
                    String result_id = "";
                    if (id.indexOf(".") != -1) {
                        result_id = id.substring(0, id.indexOf("."));
                        vo.setInt("id", Integer.parseInt(result_id));
                    } else {
                        vo.setInt("id", rowSet.getInt(1));
                    }
                    vo = dao.findByPrimaryKey(vo);
                    vo.setString("appraise", appraise);
                    dao.updateValueObject(vo);
                }

            }

            /*
             * RowSet rowSet =
             * dao.search("select id from per_result_"+planid+" where object_id='"
             * +objectid+"'"); if (rowSet.next()) { RecordVo vo=new
             * RecordVo("per_result_"+planid); vo.setInt("id",rowSet.getInt(1));
             * vo=dao.findByPrimaryKey(vo); if(opt.equals("2"))
             * vo.setString("summarize", appraise); else
             * vo.setString("appraise", appraise); dao.updateValueObject(vo);
             */

        } catch (Exception e) {
            e.printStackTrace();
        }
        return summarize;
    }

    // 新建个人目标记录
    private int insertPerArticleRecord(String planid, int article_type,
                                       int fileflag, String object_id) {
        int article_id = 0;
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            DBMetaModel dbmodel = new DBMetaModel(this.conn);
            dbmodel.reloadTableModel("per_article");
            RecordVo avo = new RecordVo("per_article");
            article_id = DbNameBo.getPrimaryKey("per_article", "article_id",
                    this.conn);
            avo.setInt("article_id", article_id);
            avo.setInt("plan_id", Integer.parseInt(planid));
            String b0110 = "";
            String e0122 = "";
            String e01a1 = "";
            String a0101 = "";
            RowSet rowSet = dao
                    .search("select b0110,e0122,e01a1,a0101 from UsrA01 where a0100='"
                            + object_id + "'");
            if (rowSet.next()) {
                b0110 = rowSet.getString("b0110") != null ? rowSet
                        .getString("b0110") : "";
                e0122 = rowSet.getString("e0122") != null ? rowSet
                        .getString("e0122") : "";
                e01a1 = rowSet.getString("e01a1") != null ? rowSet
                        .getString("e01a1") : "";
                a0101 = rowSet.getString("a0101") != null ? rowSet
                        .getString("a0101") : "";
            }
            avo.setString("b0110", b0110);
            avo.setString("e0122", e0122);
            avo.setString("e01a1", e01a1);
            avo.setString("nbase", "Usr");
            avo.setString("a0100", object_id);
            avo.setString("a0101", a0101);
            avo.setInt("article_type", article_type);
            avo.setInt("fileflag", fileflag);
            avo.setInt("state", 0);
            dao.addValueObject(avo);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return article_id;
    }

    private oracle.sql.CLOB getOracleClob(String planid, String objectid,
                                          String appraise) {
        ContentDAO dao = new ContentDAO(this.conn);
        oracle.sql.CLOB clob = null;
        try {
            /* 清空原CLOB对象 */
            dao.update("Update per_result_" + planid
                    + " SET appraise=EMPTY_CLOB() Where object_id='" + objectid
                    + "'");
            /* 查询CLOB对象并锁定 */
            ResultSet rs = dao.search("Select appraise FROM per_result_"
                    + planid + " Where object_id='" + objectid
                    + "' for update");
            if (rs.next()) {
                /* 获取此CLOB对象 */
                Object obj = rs.getClob("appraise");
                obj = OracleBlobUtils.convertDruidToOracle(obj);
                Clob clob1 = rs.getClob("appraise");
                clob = (oracle.sql.CLOB) OracleBlobUtils.convertDruidToOracle(clob1);
                /* 进行覆盖式修改 */
                BufferedWriter out = new BufferedWriter(
                        clob.getCharacterOutputStream());
                out.write(appraise);
                out.flush();
                out.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return clob;
    }

    /**
     * 按新标度重新生成分数
     */
    public void repeatComputeScore() {
        DbSecurityImpl dbS = new DbSecurityImpl();
        PreparedStatement ps = null;
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            HashMap pointDescMap = getTemplatePointDetail();
            RowSet rowSet = dao
                    .search("select * from per_table_" + this.planid);
            String sql = "update per_table_" + this.planid
                    + " set score=? where id=?";
            ps = this.conn
                    .prepareStatement(sql);
            LazyDynaBean abean = null;
            while (rowSet.next()) {
                String point_id = rowSet.getString("point_id");
                String degree_id = rowSet.getString("degree_id");
                int id = rowSet.getInt("id");
                if (degree_id != null && degree_id.trim().length() > 0
                        && point_id.length() > 0) {
                    ArrayList gradeList = (ArrayList) pointDescMap.get(point_id
                            .toLowerCase());
                    boolean flag = false;
                    for (int i = 0; i < gradeList.size(); i++) {
                        abean = (LazyDynaBean) gradeList.get(i);
                        String score = (String) abean.get("score");
                        String gradevalue = (String) abean.get("gradevalue");
                        String gradecode = (String) abean.get("gradecode");
                        if (gradecode.equalsIgnoreCase(degree_id)
                                && score.length() > 0
                                && gradevalue.length() > 0) {
                            double new_score = Double.parseDouble(score)
                                    * Double.parseDouble(gradevalue);
                            ps.setDouble(1, new_score);
                            ps.setInt(2, id);
                            ps.addBatch();
                            flag = true;
                            break;
                        }
                    }

                    if (!flag) {
                        dao.update("update per_table_" + this.planid
                                + " set score=null where id=" + id);
                    }

                }
            }
            // 打开Wallet
            dbS.open(this.conn, sql);
            ps.executeBatch();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            PubFunc.closeDbObj(ps);
            try {
                // 关闭Wallet
                dbS.close(this.conn);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

    /**
     * 取得模板引入的绩效指标标度
     *
     * @return
     */
    public HashMap getTemplatePointDetail() {
        HashMap map = new HashMap();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            StringBuffer sql = new StringBuffer(
                    "select pp.item_id,po.point_id,po.pointname,po.pointkind,pg.gradedesc,pg.gradecode,pg.top_value,pg.bottom_value,pp.score,pg.gradevalue,po.fielditem,po.l_fielditem,po.status ");
            sql.append(" from per_grade_template pt, per_template_item pi,per_template_point pp,per_point po ,per_grade pg ");
            sql.append(" where pi.item_id=pp.item_id and pp.point_id=po.point_id ");
            sql.append(" and po.point_id=pg.point_id and template_id='"
                    + this.template_id
                    //关联标准标度表，过滤掉不在标准标度里的标度。
                    + "' and pg.gradecode=pt.grade_template_id order by pp.seq,pg.point_id,pg.gradecode");

            RowSet rowSet = dao.search(sql.toString());
            LazyDynaBean abean = null;
            String pointId = "";
            ArrayList tempList = new ArrayList();
            while (rowSet.next()) {
                abean = new LazyDynaBean();
                String point_id = rowSet.getString("point_id") != null ? rowSet
                        .getString("point_id") : "";
                String gradevalue = rowSet.getString("gradevalue") != null ? rowSet
                        .getString("gradevalue") : "";
                String gradedesc = rowSet.getString("gradedesc") != null ? rowSet
                        .getString("gradedesc") : "";
                String gradecode = rowSet.getString("gradecode") != null ? rowSet
                        .getString("gradecode") : "";
                String top_value = rowSet.getString("top_value") != null ? rowSet
                        .getString("top_value") : "";
                String bottom_value = rowSet.getString("bottom_value") != null ? rowSet
                        .getString("bottom_value") : "";
                String pointkind = rowSet.getString("pointkind") != null ? rowSet
                        .getString("pointkind") : "";
                if ("".equals(pointId)) {
                    pointId = point_id;
                }

                if (!point_id.equals(pointId)) {

                    map.put(pointId.toLowerCase(), tempList);
                    pointId = point_id;
                    tempList = new ArrayList();
                }
                abean.set("point_id", point_id);
                abean.set("gradevalue", gradevalue);
                abean.set("gradedesc", gradedesc);
                abean.set("gradecode", gradecode);
                abean.set("top_value", top_value);
                abean.set("bottom_value", bottom_value);
                abean.set("pointname", rowSet.getString("pointname"));
                abean.set("score", rowSet.getString("score"));
                abean.set("pointkind", pointkind);
                tempList.add(abean);
            }
            map.put(pointId.toLowerCase(), tempList);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 取得模板引入的绩效指标标度
     *
     * @return
     */
    public HashMap getTemplatePoint() {
        HashMap map = new HashMap();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            StringBuffer sql = new StringBuffer(
                    "select pp.item_id,po.point_id,po.pointname,po.pointkind,pg.gradedesc,pg.gradecode,pg.top_value,pg.bottom_value,pp.score,pg.gradevalue,po.fielditem,po.l_fielditem,po.status ");
            sql.append(" from per_template_item pi,per_template_point pp,per_point po ,per_grade pg ");
            sql.append(" where pi.item_id=pp.item_id and pp.point_id=po.point_id ");
            sql.append(" and po.point_id=pg.point_id and template_id='"
                    + this.template_id
                    + "' order by pp.seq,pg.point_id,pg.gradecode");

            RowSet rowSet = dao.search(sql.toString());
            LazyDynaBean abean = null;
            String itemid = "";
            String pointId = "";
            ArrayList tempList = new ArrayList();
            while (rowSet.next()) {
                abean = new LazyDynaBean();
                String point_id = rowSet.getString("point_id") != null ? rowSet
                        .getString("point_id") : "";
                String gradevalue = rowSet.getString("gradevalue") != null ? rowSet
                        .getString("gradevalue") : "";
                String gradedesc = rowSet.getString("gradedesc") != null ? rowSet
                        .getString("gradedesc") : "";
                String gradecode = rowSet.getString("gradecode") != null ? rowSet
                        .getString("gradecode") : "";
                String top_value = rowSet.getString("top_value") != null ? rowSet
                        .getString("top_value") : "";
                String bottom_value = rowSet.getString("bottom_value") != null ? rowSet
                        .getString("bottom_value") : "";
                String pointkind = rowSet.getString("pointkind") != null ? rowSet
                        .getString("pointkind") : "";
                String item_id = rowSet.getString("item_id") != null ? rowSet.getString("item_id") : "";
                if ("".equals(item_id)) {
                    itemid = item_id;
                }

                if (!item_id.equals(itemid)) {
                    map.put(itemid.toLowerCase(), tempList);
                    itemid = item_id;
                    tempList = new ArrayList();
                }
                abean.set("point_id", point_id);
                abean.set("gradevalue", gradevalue);
                abean.set("gradedesc", gradedesc);
                abean.set("gradecode", gradecode);
                abean.set("top_value", top_value);
                abean.set("bottom_value", bottom_value);
                abean.set("pointname", rowSet.getString("pointname"));
                abean.set("score", rowSet.getString("score"));
                abean.set("pointkind", pointkind);
                tempList.add(abean);
            }
            map.put(itemid.toLowerCase(), tempList);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 调整等级
     *
     * @param opt      1：提高 2：降低
     * @param objectId 考核对象
     * @return
     */
    public String adjustGrade(String opt, String objectId, String planid) {

        String info = "";
        try {
            this.planid = planid;
            initParamSet();
            HashMap map = new HashMap();
            if (this.planParamSet.get("WholeEval") != null) {
                map.put("WholeEval",
                        (String) this.planParamSet.get("WholeEval"));
            }

            if (this.planParamSet.get("GradeClass") != null) {
                map.put("GradeClass",
                        (String) this.planParamSet.get("GradeClass"));
            }
            this.gradeTempList = getGradeList2(map);
            if (this.gradeTempList.size() > 0) {
                ContentDAO dao = new ContentDAO(this.conn);
                RowSet rowSet = dao
                        .search("select grade_id,resultdesc from per_result_"
                                + this.planid + " where object_id='" + objectId
                                + "'");
                LazyDynaBean abean = null;
                if (rowSet.next()) {
                    String grade_id = rowSet.getString("grade_id");
                    if (grade_id != null && !"".equals(grade_id) && grade_id.indexOf(".") != -1) {
                        grade_id = grade_id.substring(0, grade_id.indexOf("."));
                    }
                    int index = 0;
                    for (int i = 0; i < this.gradeTempList.size(); i++) {
                        abean = (LazyDynaBean) this.gradeTempList.get(i);
                        String id = (String) abean.get("id");
                        if (id.equals(grade_id)) {
                            index = i;
                            break;
                        }
                    }
                    if ((index == 0 && "1".equals(opt))
                            || (index == (this.gradeTempList.size() - 1) && "2"
                            .equals(opt))) {
                        info = ResourceFactory
                                .getProperty("lable.performance.evaluation.info1")
                                + "!";
                    } else {
                        int KeepDecimal = Integer
                                .parseInt((String) this.planParamSet
                                        .get("KeepDecimal"));
                        if ("2".equals(opt)) {
                            abean = (LazyDynaBean) this.gradeTempList
                                    .get(index + 1);
                        } else {
                            abean = (LazyDynaBean) this.gradeTempList
                                    .get(index - 1);
                        }
                        String id = (String) abean.get("id");
                        String resultdesc = (String) abean.get("itemname");
                        String xishu = (String) abean.get("xishu");
                        if (StringUtils.isBlank(xishu)) {
                            xishu = "0.00";
                        }
                        dao.update("update per_result_" + this.planid
                                + " set grade_id=" + id + ",exx_object='"
                                + xishu + "',resultdesc='" + resultdesc
                                + "' where object_id='" + objectId + "'");
                        if (xishu != null && xishu.trim().length() > 0) {
                            xishu = PubFunc.round(
                                    String.valueOf(Float.parseFloat(xishu)),
                                    KeepDecimal);
                        } else {
                            xishu = "";
                        }

                        info = resultdesc + "&" + xishu;
                    }
                } else {
                    info = ResourceFactory
                            .getProperty("lable.performance.evaluation.info2")
                            + "!";
                }
            } else {
                info = ResourceFactory
                        .getProperty("lable.performance.evaluation.info2")
                        + "!";
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return info;
    }

    /**
     * 输出简报
     *
     * @param planid
     * @return
     */
    public String outBriefing(String planid, UserView u) {
        String filename = "Briefing_" + u.getUserId() + ".txt";
        StringBuffer briefing = new StringBuffer("");
        FileOutputStream fileOut = null;
        try {
            this.planid = planid;
            ContentDAO dao = new ContentDAO(this.conn);
            this.planVo = getPerPlanVo(this.planid);
            briefing.append(this.planVo.getString("name")
                    + "-"
                    + ResourceFactory
                    .getProperty("lable.performance.evaluation.examCircsTable")
                    + "\r\n\r\n");
            int totalNum = 0;

            String url = System.getProperty("java.io.tmpdir")
                    + System.getProperty("file.separator") + filename;
            fileOut = new FileOutputStream(url);

            StringBuffer subStr = new StringBuffer("");

            int subNum = 0;
            StringBuffer subname = new StringBuffer("");
            String result_desc = "-1";
            RowSet rowSet = dao
                    .search("select a0101,grade_id,resultdesc from per_result_"
                            + planid + " order by grade_id");
            while (rowSet.next()) {
                String a0101 = rowSet.getString("a0101");
                String grade_id = rowSet.getString("grade_id");
                String resultdesc = rowSet.getString("resultdesc") != null ? rowSet
                        .getString("resultdesc") : "";

                if ("-1".equals(result_desc)) {
                    result_desc = resultdesc;
                }
                if (!result_desc.equals(resultdesc)) {
                    subStr.append("\r\n");
                    subStr.append(result_desc
                            + ResourceFactory
                            .getProperty("lable.performance.evaluation.archive")
                            + "（" + subNum + "个）：");
                    subStr.append("\r\n     " + subname.substring(1));
                    subname.setLength(0);
                    subNum = 0;
                    result_desc = resultdesc;
                }
                subname.append("、" + a0101);
                subNum++;
                totalNum++;
            }
            subStr.append("\r\n");
            subStr.append(result_desc
                    + ResourceFactory
                    .getProperty("lable.performance.evaluation.archive")
                    + "（" + subNum + "个）：");
            subStr.append("\r\n     " + subname.substring(1));

            briefing.append(ResourceFactory
                    .getProperty("lable.performance.evaluation.perObjectNum")
                    + ":" + totalNum + "。\r\n");
            briefing.append(subStr.toString());

            fileOut.write(briefing.toString().getBytes());

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            PubFunc.closeResource(fileOut);
        }
        return filename;
    }

    /** ************************* 绩效 计算 ************************************ */

    /**
     * 考核模板指标列表
     *
     * @return
     */
    public HashMap getPointMap() {

        HashMap map = new HashMap();
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            String sql = "select po.point_id,po.pointname,po.pointkind,pi.item_id,po.visible,po.fielditem,po.status,pp.score,pp.rank "
                    + " from per_template_item pi,per_template_point pp,per_point po "
                    + " where pi.item_id=pp.item_id and pp.point_id=po.point_id  "
                    + " and template_id='"
                    + this.template_id
                    + "'  order by pp.seq";
            RowSet rowSet = dao.search(sql);
            LazyDynaBean abean = null;
            while (rowSet.next()) {
                abean = new LazyDynaBean();
                abean.set("point_id", rowSet.getString("point_id"));
                abean.set("pointname", rowSet.getString("pointname"));
                abean.set("pointkind", rowSet.getString("pointkind"));
                abean.set("item_id", rowSet.getString("item_id"));
                abean.set("score", rowSet.getString("score"));
                abean.set("rank", rowSet.getString("rank"));
                map.put(rowSet.getString("point_id"), abean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }


    /**
     * 考核模板指标列表
     * map(指标id，bean指标属性)
     *
     * @return
     */
    public HashMap getPointMapByModel(String a0100) {

        HashMap map = new HashMap();
        ContentDAO dao = new ContentDAO(this.conn);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Calendar calendar = Calendar.getInstance();
        String historyDate = sdf.format(calendar.getTime());
        try {
            StringBuffer sql = new StringBuffer("");
            sql.append("select pcm.point_id,pp.pointname,pp.pointkind,pcm.point_type item_id,pcm.score,pcm.rank ");
            sql.append(" from per_competency_modal pcm, per_point pp ");
            sql.append(" where object_type='3' and object_id = (select " + Sql_switcher.isnull("e01a1", "null") + " from usra01 where a0100='" + a0100 + "')");
            sql.append(" and " + Sql_switcher.dateValue(historyDate) + " between start_date and end_date");
            sql.append(" and pcm.point_id=pp.point_id");
            RowSet rowSet = dao.search(sql.toString());
            LazyDynaBean abean = null;
            while (rowSet.next()) {
                abean = new LazyDynaBean();
                abean.set("point_id", rowSet.getString("point_id"));
                abean.set("pointname", rowSet.getString("pointname"));
                abean.set("pointkind", rowSet.getString("pointkind"));
                abean.set("item_id", rowSet.getString("item_id") == null || "".equals(rowSet.getString("item_id")) ? "-9999" : rowSet.getString("item_id"));
                abean.set("score", rowSet.getString("score") == null ? "0.0" : rowSet.getString("score"));
                abean.set("rank", rowSet.getString("rank") == null ? "0.0" : rowSet.getString("rank"));
                map.put(rowSet.getString("point_id"), abean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 考核模板指标列表
     *
     * @return
     */
    public ArrayList getPointList() {

        ArrayList list = new ArrayList();
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            String sql = "select po.point_id,po.pointname,po.pointkind,pi.item_id,po.visible,po.fielditem,po.status,pp.score,pp.rank "
                    + " from per_template_item pi,per_template_point pp,per_point po "
                    + " where pi.item_id=pp.item_id and pp.point_id=po.point_id  "
                    + " and template_id='"
                    + this.template_id
                    + "'  order by pp.seq";
            RowSet rowSet = dao.search(sql);
            LazyDynaBean abean = null;
            while (rowSet.next()) {
                abean = new LazyDynaBean();
                abean.set("point_id", rowSet.getString("point_id"));
                abean.set("pointname", rowSet.getString("pointname"));
                abean.set("pointkind", rowSet.getString("pointkind"));
                abean.set("item_id", rowSet.getString("item_id"));
                abean.set("score", rowSet.getString("score") == null ? "0.0" : rowSet.getString("score"));
                abean.set("rank", rowSet.getString("rank") == null ? "0.0" : rowSet.getString("rank"));
                list.add(abean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    public HashMap getPointMap2(String template_id) {
        HashMap map = new HashMap();
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            String sql = "select po.point_id,po.pointname,po.pointkind,pi.item_id,po.visible,po.fielditem,po.status,pp.score,pp.rank "
                    + " from per_template_item pi,per_template_point pp,per_point po "
                    + " where pi.item_id=pp.item_id and pp.point_id=po.point_id  "
                    + " and template_id='" + template_id + "'  order by pp.seq";
            RowSet rowSet = dao.search(sql);
            LazyDynaBean abean = null;
            while (rowSet.next()) {
                String point_id = rowSet.getString("point_id");
                String pointname = rowSet.getString("pointname");
                map.put(point_id.toUpperCase(), point_id);
                map.put(pointname, point_id);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    public HashMap getItemMap2(String template_id) {
        HashMap map = new HashMap();
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            String sql = " select item_id,itemdesc from per_template_item where template_id='"
                    + template_id + "'  and kind=2";
            RowSet rowSet = dao.search(sql);
            LazyDynaBean abean = null;
            while (rowSet.next()) {
                String item_id = rowSet.getString("item_id");
                String itemdesc = rowSet.getString("itemdesc");
                map.put(item_id, item_id);
                map.put(itemdesc, item_id);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 取得考核主体类别权重
     *
     * @return
     */
    public ArrayList getPerPlanBody() {

        ArrayList list = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = dao
                    .search("select * from per_plan_body where plan_id="
                            + this.planid);
            while (rowSet.next()) {
                LazyDynaBean abean = new LazyDynaBean();
                abean.set("body_id", rowSet.getString("body_id"));
                abean.set(
                        "rank",
                        rowSet.getString("rank") != null ? rowSet
                                .getString("rank") : "0");
                list.add(abean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * 取得考核指标动态权重
     *
     * @return
     */
    public ArrayList getDynaPointrank() {

        ArrayList list = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = dao
                    .search("select * from per_dyna_rank where plan_id="
                            + this.planid + " order by dyna_obj_type desc");
            while (rowSet.next()) {
                LazyDynaBean abean = new LazyDynaBean();
                abean.set("point_id", rowSet.getString("point_id"));
                abean.set("dyna_obj_type", rowSet.getString("dyna_obj_type"));
                abean.set("dyna_obj", rowSet.getString("dyna_obj"));
                abean.set("rank", rowSet.getString("rank"));
                list.add(abean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * 取得考核主体动态权重
     *
     * @return
     */
    public ArrayList getDynaBodyrank() {

        ArrayList list = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = dao
                    .search("select * from per_dyna_bodyrank where plan_id="
                            + this.planid + " order by dyna_obj_type desc");
            while (rowSet.next()) {
                LazyDynaBean abean = new LazyDynaBean();
                abean.set("body_id", rowSet.getString("body_id"));
                abean.set("dyna_obj_type", rowSet.getString("dyna_obj_type"));
                abean.set("dyna_obj", rowSet.getString("dyna_obj"));
                abean.set("rank", rowSet.getString("rank"));
                list.add(abean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * 取得考核主体动态权重
     *
     * @return
     */
    public ArrayList getAbsRankTable2Rank() {

        ArrayList list = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = dao.search("select * from absRankTable2 ");
            while (rowSet.next()) {
                LazyDynaBean abean = new LazyDynaBean();
                abean.set("id", isNull(rowSet.getString("id")));
                abean.set("b0110", isNull(rowSet.getString("b0110")));
                abean.set("e0122", isNull(rowSet.getString("e0122")));
                abean.set("e01a1", isNull(rowSet.getString("e01a1")));
                abean.set("object_id", isNull(rowSet.getString("object_id")));
                abean.set("body_id", isNull(rowSet.getString("body_id")));
                abean.set("objbody_id", isNull(rowSet.getString("objbody_id")));
                abean.set("username", isNull(rowSet.getString("username")));
                list.add(abean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * 取得考核对象的指标得分
     *
     * @param pointList
     * @return
     */
    public HashMap getObjPointScoreMap(ArrayList pointList) {

        HashMap map = new HashMap();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = dao.search("select * from per_result_"
                    + this.planid);
            LazyDynaBean abean = null;
            LazyDynaBean a_bean = null;
            while (rowSet.next()) {
                String object_id = rowSet.getString("object_id");
                abean = new LazyDynaBean();
                for (int j = 0; j < pointList.size(); j++) {
                    a_bean = (LazyDynaBean) pointList.get(j);
                    String point_id = (String) a_bean.get("point_id");
                    abean.set(
                            point_id,
                            rowSet.getString("C_" + point_id) != null ? rowSet
                                    .getString("C_" + point_id) : "0");
                }
                map.put(object_id, abean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 取得考核对象的指标得分（勾选了按岗位素质模型测评）
     *
     * @param pointList
     * @return
     */
    public HashMap getObjPointScoreMapByModel(ArrayList pointList) {

        HashMap map = new HashMap();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = dao.search("select * from per_history_result where plan_id=" + this.planid + " and status=0 order by object_id");
            while (rowSet.next()) {
                String object_id = rowSet.getString("object_id");
                if (map.get(object_id) != null) {
                    LazyDynaBean tempbean = (LazyDynaBean) map.get(object_id);
                    tempbean.set(rowSet.getString("point_id"), rowSet.getString("score") == null ? "0" : rowSet.getString("score"));
                    map.put(object_id, tempbean);
                } else {
                    LazyDynaBean abean = new LazyDynaBean();
                    abean.set(rowSet.getString("point_id"), rowSet.getString("score") == null ? "0" : rowSet.getString("score"));
                    map.put(object_id, abean);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 取得每个指标 对应的第一层（最顶层）项目
     *
     * @param pointList
     * @param itemList
     * @return
     */
    public HashMap getFirstItemMap(ArrayList pointList, ArrayList itemList) {

        HashMap map = new HashMap();
        LazyDynaBean abean = null;
        LazyDynaBean a_bean = null;
        for (int i = 0; i < pointList.size(); i++) {
            abean = (LazyDynaBean) pointList.get(i);
            String point_id = (String) abean.get("point_id");
            String item_id = (String) abean.get("item_id");
            boolean flag = false;
            while (true) {
                for (int j = 0; j < itemList.size(); j++) {
                    a_bean = (LazyDynaBean) itemList.get(j);
                    String itemid = (String) a_bean.get("item_id");
                    String parentid = (String) a_bean.get("parent_id");
                    if (itemid.equals(item_id)) {
                        if (parentid.length() == 0) {
                            flag = true;
                            item_id = itemid;
                            break;
                        } else {
                            item_id = parentid;
                            break;
                        }
                    }
                } //for end
                if (flag) {
                    break;
                }
            }
            map.put(point_id, item_id);
        }
        return map;
    }

    /**
     * 获得考核对象调整过的指标或个性化项目
     *
     * @param object_id
     * @return
     */
    public HashMap getAdjustPointOrItem(String object_id) {
        HashMap map = new HashMap();
        try {
            ContentDAO dao = new ContentDAO(this.conn);

            RowSet rowSet = dao
                    .search("select * from per_result_score  where  plan_id="
                            + this.planid
                            + " and AdjustScore is not null and object_id='"
                            + object_id + "'");
            while (rowSet.next()) {
                map.put(rowSet.getString("point_id").toLowerCase(),
                        rowSet.getString("AdjustScore") != null ? rowSet
                                .getString("AdjustScore") : "0");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 判断对象的指标 或 个性化项目是否被评过分
     *
     * @param object_id
     * @param point_id
     * @return
     */
    public boolean isSaveScore_point(String object_id, String point_id,
                                     String itemid) {
        boolean flag = false;
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = null;
            String sql = "";
            if (itemid.trim().length() == 0) {
                if (this.planVo.getInt("method") == 2) // 目标
                {
                    sql = "select count(pt.p0400) from per_target_evaluation pt,p04 where pt.p0400=p04.p0400 and lower(p04.p0401)='"
                            + point_id.toLowerCase()
                            + "' "
                            + " and p04.plan_id="
                            + this.planid
                            + " and pt.plan_id="
                            + this.planid
                            + " and pt.object_id='" + object_id + "' ";
                } else {
                    sql = "select count(point_id) from per_table_"
                            + this.planid + " where object_id='" + object_id
                            + "' and lower(point_id)='"
                            + point_id.toLowerCase() + "'";
                }
            } else // 判断个性化项目
            {
                sql = "select count(pt.p0400) from per_target_evaluation pt,p04 where pt.p0400=p04.p0400 and  p04.item_id="
                        + itemid.trim()
                        + " and p04.plan_id="
                        + this.planid
                        + " and pt.plan_id="
                        + this.planid
                        + " and pt.object_id='" + object_id + "' ";
            }
            rowSet = dao.search(sql);
            if (rowSet.next()) {
                if (rowSet.getInt(1) > 0) {
                    flag = true;
                }
            }
            if (rowSet != null) {
                rowSet.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return flag;
    }

    // 临时计算写入值
    public void createResultScore2(ArrayList pointList, ArrayList itemlist) {
        try {
            DbWizard dbWizard = new DbWizard(this.conn);
            ContentDAO dao = new ContentDAO(this.conn);
            if (!dbWizard.isExistTable("per_result_score", false)) {
                Table table = new Table("per_result_score");
                table.addField(getField("id", "I", 8, true));
                table.addField(getField("Object_id", "A", 30, false));
                table.addField(getField("Plan_id", "I", 8, false));
                table.addField(getField("Point_id", "A", 30, false));
                table.addField(getField("Score", "N", 10, false));
                table.addField(getField("AdjustScore", "N", 10, false));
                dbWizard.createTable(table);
            }
            if (!dbWizard
                    .isExistField("per_result_score", "adjustscore", false)) {
                Table table = new Table("per_result_score");
                table.addField(getField("AdjustScore", "N", 10, false));
                dbWizard.addColumns(table);
            }
            HashMap totalPointMap = getTotalScorePointList(this.template_id); // 取得统一打分指标s

            dbWizard.execute("delete from per_result_score where plan_id="
                    + this.planid
                    + " and AdjustScore is null   and object_id in (select object_id from per_result_"
                    + this.planid + " where 1=1 " + this.priv_where + " )");
            HashMap existMap = new HashMap();
            RowSet rowSet = dao
                    .search("select * from per_result_score  where  plan_id="
                            + this.planid + " " + this.priv_where);
            while (rowSet.next()) {
                existMap.put(rowSet.getString("point_id").toLowerCase(), "1");
            }

            rowSet = dao.search("select * from per_result_" + this.planid
                    + " where 1=1 " + this.priv_where);
            LazyDynaBean a_bean = new LazyDynaBean();
            while (rowSet.next()) {
                String object_id = rowSet.getString("object_id");
                for (int j = 0; j < pointList.size(); j++) {
                    a_bean = (LazyDynaBean) pointList.get(j);
                    String point_id = (String) a_bean.get("point_id");
                    Double value = new Double(0d);
                    if (rowSet.getObject("C_" + point_id) != null) {
                        value = new Double(rowSet.getDouble("C_" + point_id));
                    }
                    if (totalPointMap.get(point_id) != null
                            && existMap.get(point_id.toLowerCase()) == null) {
                        int id = DbNameBo.getPrimaryKey("per_result_score",
                                "id", this.conn);
                        dao.update("insert into per_result_score (id,object_id,plan_id,point_id,score) values("
                                + id
                                + ",'"
                                + rowSet.getString("object_id")
                                + "',"
                                + this.planid
                                + ",'"
                                + point_id
                                + "',"
                                + value.doubleValue() + ")");
                    } else if (isSaveScore_point(object_id, point_id, "")
                            && existMap.get(point_id.toLowerCase()) == null) {
                        int id = DbNameBo.getPrimaryKey("per_result_score",
                                "id", this.conn);
                        dao.update("insert into per_result_score (id,object_id,plan_id,point_id,score) values("
                                + id
                                + ",'"
                                + rowSet.getString("object_id")
                                + "',"
                                + this.planid
                                + ",'"
                                + point_id
                                + "',"
                                + value.doubleValue() + ")");
                    }
                }
                if (this.planVo.getInt("method") == 2) {
                    for (int j = 0; j < itemlist.size(); j++) {
                        LazyDynaBean abean = (LazyDynaBean) itemlist.get(j);
                        String item_id = (String) abean.get("item_id");
                        String kind = (String) abean.get("kind");

                        Double value = new Double(0d);
                        if (rowSet.getObject("T_" + item_id) != null) {
                            value = new Double(rowSet.getDouble("T_" + item_id));
                        }

                        if (kind != null && "2".equals(kind)) // 个性
                        {
                            if (isSaveScore_point(object_id, "", item_id)
                                    && existMap.get(item_id.toLowerCase()) == null) {
                                int id = DbNameBo.getPrimaryKey(
                                        "per_result_score", "id", this.conn);
                                dao.update("insert into per_result_score (id,object_id,plan_id,point_id,score) values("
                                        + id
                                        + ",'"
                                        + rowSet.getString("object_id")
                                        + "',"
                                        + this.planid
                                        + ",'"
                                        + item_id
                                        + "',"
                                        + value.doubleValue() + ")");
                            }
                        }
                    }
                }
            }

            if (rowSet != null) {
                rowSet.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void createResultScore(ArrayList pointList, ArrayList itemlist) {
        try {
            DbWizard dbWizard = new DbWizard(this.conn);
            ContentDAO dao = new ContentDAO(this.conn);
            if (!dbWizard.isExistTable("per_result_score", false)) {
                Table table = new Table("per_result_score");
                table.addField(getField("id", "I", 8, true));
                table.addField(getField("Object_id", "A", 30, false));
                table.addField(getField("Plan_id", "I", 8, false));
                table.addField(getField("Point_id", "A", 30, false));
                table.addField(getField("Score", "N", 10, false));
                table.addField(getField("AdjustScore", "N", 10, false));
                dbWizard.createTable(table);
            }
            if (!dbWizard
                    .isExistField("per_result_score", "adjustscore", false)) {
                Table table = new Table("per_result_score");
                table.addField(getField("AdjustScore", "N", 10, false));
                dbWizard.addColumns(table);
            }

            dbWizard.execute("delete from per_result_score where plan_id="
                    + this.planid
                    + " and object_id in (select object_id from per_result_"
                    + this.planid
                    + " where score_adjust is null or score_adjust=0 )");
            RowSet rowSet = dao.search("select * from per_result_"
                    + this.planid
                    + " where score_adjust is null or score_adjust=0");

            LazyDynaBean a_bean = new LazyDynaBean();
            while (rowSet.next()) {
                String object_id = rowSet.getString("object_id");
                for (int j = 0; j < pointList.size(); j++) {
                    a_bean = (LazyDynaBean) pointList.get(j);
                    String point_id = (String) a_bean.get("point_id");
                    Double value = new Double(0d);
                    if (rowSet.getObject("C_" + point_id) != null) {
                        value = new Double(rowSet.getDouble("C_" + point_id));
                    }

                    int id = DbNameBo.getPrimaryKey("per_result_score", "id",
                            this.conn);
                    dao.update("insert into per_result_score (id,object_id,plan_id,point_id,score) values("
                            + id
                            + ",'"
                            + rowSet.getString("object_id")
                            + "',"
                            + this.planid
                            + ",'"
                            + point_id
                            + "',"
                            + value.doubleValue() + ")");
                }
                if (this.planVo.getInt("method") == 2) {
                    for (int j = 0; j < itemlist.size(); j++) {
                        LazyDynaBean abean = (LazyDynaBean) itemlist.get(j);
                        String item_id = (String) abean.get("item_id");
                        String kind = (String) abean.get("kind");

                        Double value = new Double(0d);
                        if (rowSet.getObject("T_" + item_id) != null) {
                            value = new Double(rowSet.getDouble("T_" + item_id));
                        }

                        if (kind != null && "2".equals(kind)) // 个性
                        {

                            int id = DbNameBo.getPrimaryKey("per_result_score",
                                    "id", this.conn);
                            dao.update("insert into per_result_score (id,object_id,plan_id,point_id,score) values("
                                    + id
                                    + ",'"
                                    + rowSet.getString("object_id")
                                    + "',"
                                    + this.planid
                                    + ",'"
                                    + item_id
                                    + "'," + value.doubleValue() + ")");
                        }
                    }
                }
            }

            if (rowSet != null) {
                rowSet.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    String task_score_str = ""; // 目标计划的任务分值公式

    /**
     * 能力素质（勾选了按岗位素质模型测评）的计算
     *
     * @param userView
     * @param ruleMap
     * @param flag
     * @return
     * @throws GeneralException
     */
    public String calculatePlanByModel(UserView userView, HashMap ruleMap, int flag) throws GeneralException {
        String info = "";
        this.compute_flag = flag;
        // 允许调整计算结果值
        // if(this.compute_flag==1)
        {
            if (this.code != null && this.code.trim().length() > 0
                    && !"-1".equals(this.code)) {
                if (AdminCode.getCodeName("UN", this.code) != null
                        && AdminCode.getCodeName("UN", this.code).length() > 0) {
                    this.priv_where += " and b0110 like '" + this.code + "%'";
                } else if (AdminCode.getCodeName("UM", this.code) != null
                        && AdminCode.getCodeName("UM", this.code).length() > 0) {
                    this.priv_where += " and e0122 like '" + this.code + "%'";
                }
            }
            this.priv_where2 = this.priv_where;
            if (this.planParamSet.get("AllowAdjustEvalResult") != null
                    && "true"
                    .equalsIgnoreCase((String) this.planParamSet.get("AllowAdjustEvalResult"))) {
                DbWizard dbWizard = new DbWizard(this.conn);
                if (!dbWizard.isExistField("per_result_" + this.planid,
                        "score_adjust", false)) {
                    Table table = new Table("per_result_" + this.planid);
                    table.addField(getField("score_adjust", "I", 8, false));
                    dbWizard.addColumns(table);
                }
                if (this.compute_flag == 1) {
                    this.priv_where += " and (score_adjust is null or score_adjust=0)";
                }
            }
        }
        //首先清空一下数据。否则多次点击计算就会出错。
        ContentDAO dao = new ContentDAO(this.conn);
        StringBuffer delSql = new StringBuffer("");
        delSql.append("delete from per_history_result where plan_id=" + this.planid + this.priv_where2);
        try {
            dao.update(delSql.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
        /** 判断是否有 绩效评估得分明细表 必须要清除该计划下的所有数据*/
        isPerScoreDetailTable();
        ArrayList outerObjectList = new ArrayList();//外层总的循环 因为不同的考核对象对应的考核指标不同
        if (this.compute_flag == 4) {
            outerObjectList = getObjectList(this.priv_where, "");
        } else {
            outerObjectList = getObjectList("", "");
        }
        ArrayList gradeList = getPlanGradeList(ruleMap);//总体评价中的等级  20151229 dengcan
        for (int f = 0; f < outerObjectList.size(); f++) {
            ArrayList objectList = new ArrayList();
            LazyDynaBean tempbean = (LazyDynaBean) outerObjectList.get(f);
            objectList.add(tempbean);
            String temp_object_id = (String) tempbean.get("object_id");
            this.isPosHasPoint = SingleGradeBo.isHaveMatchByModel(temp_object_id, this.conn);
            this.userView = userView;
            this.mainbodySetList = getPerMainBodySetList(this.planid); // 主体类别列表
            ArrayList pointList = new ArrayList();
            if (isPosHasPoint) {
                pointList = pointListByModel(temp_object_id);//得到指标
            } else {
                pointList = getPointList();
            }
            try {
                ArrayList itemList = new ArrayList();
                if (isPosHasPoint) {
                    itemList = itemListByModel(temp_object_id);
                } else {
                    itemList = getItemList();
                }
                HashMap item_pointMap = new HashMap();
                if (isPosHasPoint) {
                    item_pointMap = getItem_pointMap(pointList);
                } else {
                    item_pointMap = getItemPoints2(itemList);
                }

                if (this.compute_flag == 1 || this.compute_flag == 4) {
                    if (!(this.planVo.getInt("method") != 2 && "true".equalsIgnoreCase((String) this.planParamSet
                            .get("HandEval")))) {//360计划，启动时是手工打分
                        anaysePerResultTable(ruleMap, gradeList);//分析等级分类的字段
                        // 取得每个项目 对应的第一层指标项
                        HashMap point_firstItemMap = new HashMap();
                        if (isPosHasPoint) {
                            point_firstItemMap = getFirstItemMapByModel(pointList);
                        } else {
                            point_firstItemMap = getFirstItemMap(pointList, itemList);
                        }
                        // 根据计算规则，建立评分临时表（处理空票不作废、此类有分、空票作废单项未评分的处理）
                        dealWithEvaluationTable(ruleMap, pointList, objectList);
                        // 去最值
                        moveBestValue(ruleMap);
                        // 计算单项指标分值,插入per_result_XXXX (同时兼顾 Per_ScoreDetail(绩效评估得分明细表)里的数据 )
                        calPointScoreByModel(itemList, ruleMap, pointList, objectList, point_firstItemMap);
                    }
                }
                HashMap objectItemRankMap = new HashMap();
                if (this.compute_flag == 1 || this.compute_flag == 2
                        || this.compute_flag == 4) {

                    HashMap dynaMap = new HashMap();
                    HashMap objectBodyMap = new HashMap();
                    String body_str = ",";
                    LazyDynaBean a_bean = null;
                    for (int i = 0; i < objectList.size(); i++) {
                        a_bean = (LazyDynaBean) objectList.get(i);
                        String body_id = (String) a_bean.get("body_id");
                        objectBodyMap.put((String) a_bean.get("object_id"),
                                body_id);
                        if (body_id != null && body_id.length() > 0
                                && body_str.indexOf("," + body_id + ",") == -1) {
                            body_str += body_id.trim() + ",";
                        }
                    }

                    if (body_str.length() > 1) {
                        LoadXml loadXml = new LoadXml();
                        String[] temps = body_str.split(",");
                        for (int i = 0; i < temps.length; i++) {
                            if (temps[i] != null && temps[i].length() > 0) {
                                HashMap _dynaMap = loadXml.getDynaItem(
                                        this.planid + "", this.conn, temps[i]);
                                if (_dynaMap != null) {
                                    dynaMap.put(temps[i], _dynaMap);
                                }
                            }
                        }

                    }

                    // 计算所有项目得分（注意动态指标权重）
                    calculateItemScoreByModel(objectList, ruleMap, item_pointMap,
                            itemList, pointList, objectItemRankMap, dynaMap,
                            objectBodyMap);

                    if (this.planParamSet.get("AllowAdjustEvalResult") != null
                            && "true"
                            .equalsIgnoreCase((String) this.planParamSet
                                    .get("AllowAdjustEvalResult"))) {
                        if (this.compute_flag == 1) // 如果是重新计算需将计算结果备份，为评分调整模块服务
                        {
                            createResultScore(pointList, itemList);
                        }
                    }
                    calculateOriginalScoreByModel(itemList, objectItemRankMap,
                            objectBodyMap, dynaMap, temp_object_id);
                }
                if (this.compute_flag == 4) {
                    createResultScore2(pointList, itemList);
                }

                //------------------
            } catch (Exception e) {
                e.printStackTrace();
                throw GeneralExceptionHandler.Handle(e);
            }

        }// for end
        //20151229 dengcan
        try {
            // 填写 考核主体对考核对象总体评价统计表   2013.12.6 pjf 按岗位素质总体评价
            if (ruleMap.get("WholeEval") != null
                    && ((String) ruleMap.get("WholeEval")).length() > 0) {
                if (ruleMap.get("WholeEvalMode") != null
                        && ("0".equals((String) ruleMap.get("WholeEvalMode")))) {
                    insertObjectVoteData();
                } else if (ruleMap.get("WholeEvalMode") != null
                        && ("1".equals((String) ruleMap.get("WholeEvalMode")))) {
                    insertObjectScoreData(ruleMap);
                }
            }

            // 计算最后得分 (考虑 关联计划 / 修正分值)
            if (this.compute_flag == 1 || this.compute_flag == 2
                    || this.compute_flag == 4) {
                calculateScore(ruleMap);
            }
            //将总分插入到历史表中
            //	insertScoreToHistory(temp_object_id);
            insertScoreToHistory();
            // 能力素质模型计算 JinChunhai 2011.12.12
            if (String.valueOf(this.planVo.getInt("busitype")) != null
                    && String.valueOf(this.planVo.getInt("busitype")).trim()
                    .length() > 0
                    && this.planVo.getInt("busitype") == 1) {
                // 计算"岗位标准分值" 1: 岗位标准分值=∑(指标N要求等级 * 指标N权重)
                calculatePostRuleScore();

                // 计算"匹配度" 1: 匹配度=(员工能力评测得分(总分)/岗位标准分值)*100
                calculateMateSurmise();

            }

            if (this.batchComput != null
                    && this.batchComput.trim().length() > 0
                    && "True".equalsIgnoreCase(this.batchComput)) {
                // 更新字段分组平均分、 分组最高分、分组最低分、组内人数
                updateGroupFields();
            } else if (this.compute_flag != 4) {
                // 更新字段分组平均分、 分组最高分、分组最低分、组内人数
                updateGroupFields();
            }
            // 写入等级数据
            if (ruleMap.get("GradeClass") != null
                    && ((String) ruleMap.get("GradeClass")).length() > 0) {
                setGradeValue((String) ruleMap.get("GradeClass"), flag);
            }
            if (this.compute_flag != 4) {
                // 填写 对象的主体选票统计表 数据
                insertBodyVoteData();
                // 填写 考评结果表 总体评价各等级的票数
                if (ruleMap.get("WholeEval") != null
                        && ((String) ruleMap.get("WholeEval")).length() > 0) {
                    insertPerResultWholeValue(ruleMap, gradeList);
                }
                // 填写 per_objectbody_score (象各主体类别评分) 的票数 (经跟王建华商量不用生成)
                insertPerObjectbodyScore();

                // 更新字段分组平均分、 分组最高分、分组最低分、组内人数
                // updateGroupFields();
                // 初始化备注字段
                String sql = "update per_result_" + planid
                        + " set evalremark=null  ";
                if (this.priv_where != null
                        && this.priv_where.trim().length() > 0) {
                    sql += " where 1=1 " + this.priv_where;
                }
                dao.update(sql);
                dao.update("update per_plan set status=6 where plan_id="
                        + planid);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return info;
    }

    /**
     * 绩效计算
     *
     * @param userView
     * @param ruleMap  计算规则
     * @param flag     1.完全计算 2.不计算指标和个性化项目 3.指标、项目 、总分都不计算 4.评分调整-临时计算
     * @return
     */
    public String calculatePlan(UserView userView, HashMap ruleMap, int flag)
            throws GeneralException {
        this.compute_flag = flag;
        this.addList = new ArrayList();
        // 允许调整计算结果值
        // if(this.compute_flag==1)
        {
            if (this.code != null && this.code.trim().length() > 0
                    && !"-1".equals(this.code)) {
                if (AdminCode.getCodeName("UN", this.code) != null
                        && AdminCode.getCodeName("UN", this.code).length() > 0) {
                    this.priv_where += " and b0110 like '" + this.code + "%'";
                } else if (AdminCode.getCodeName("UM", this.code) != null
                        && AdminCode.getCodeName("UM", this.code).length() > 0) {
                    this.priv_where += " and e0122 like '" + this.code + "%'";
                }
            }
            this.priv_where2 = this.priv_where;
            if (this.planParamSet.get("AllowAdjustEvalResult") != null
                    && "true"
                    .equalsIgnoreCase((String) this.planParamSet.get("AllowAdjustEvalResult"))) {
                DbWizard dbWizard = new DbWizard(this.conn);
                if (!dbWizard.isExistField("per_result_" + this.planid,
                        "score_adjust", false)) {
                    Table table = new Table("per_result_" + this.planid);
                    table.addField(getField("score_adjust", "I", 8, false));
                    dbWizard.addColumns(table);
                }
                if (this.compute_flag == 1) {
                    this.priv_where += " and (score_adjust is null or score_adjust=0)";
                }
            }
        }

        String info = "";
        this.userView = userView;
        this.mainbodySetList = getPerMainBodySetList(this.planid); // 主体类别列表
        ArrayList pointList = getPointList();
        ArrayList objectList = new ArrayList();
        if (this.compute_flag == 4) {
            objectList = getObjectList(this.priv_where, "");
        } else {
            objectList = getObjectList("", "");
        }
        ContentDAO dao = new ContentDAO(this.conn);
        ArrayList gradeList = getPlanGradeList(ruleMap);
        try {
            DbWizard dbWizard = new DbWizard(this.conn);
            if (!dbWizard.isExistField("per_target_evaluation", "stdscore",
                    false)) {
                Table table = new Table("per_target_evaluation");
                table.addField(getField("stdScore", "N", 12, false));
                dbWizard.addColumns(table);
            }

            ArrayList itemList = new ArrayList();
            RowSet rowSet = dao
                    .search("select * from per_template_item where template_id='"
                            + this.template_id + "' order by seq");
            LazyDynaBean abean = null;
            while (rowSet.next()) {
                abean = new LazyDynaBean();
                abean.set("item_id", rowSet.getString("item_id"));
                abean.set("itemdesc", rowSet.getString("itemdesc"));
                abean.set(
                        "parent_id",
                        rowSet.getString("parent_id") != null ? rowSet
                                .getString("parent_id") : "");
                abean.set(
                        "child_id",
                        rowSet.getString("child_id") != null ? rowSet
                                .getString("child_id") : "");
                abean.set(
                        "kind",
                        rowSet.getString("kind") != null ? rowSet
                                .getString("kind") : "1");
                abean.set(
                        "rank",
                        rowSet.getString("rank") != null ? String
                                .valueOf(rowSet.getDouble("rank")) : "1");
                abean.set(
                        "score",
                        rowSet.getString("score") != null ? String
                                .valueOf(rowSet.getDouble("score")) : "0");
                itemList.add(abean);
            }

            if (this.planVo.getInt("method") == 2
                    && "4"
                    .equals((String) this.planParamSet.get("scoreflag"))
                    && this.planParamSet.get("EvalCanNewPoint") != null
                    && "true"
                    .equalsIgnoreCase((String) this.planParamSet.get("EvalCanNewPoint")))// 加扣分 //首钢
            {
                calAddSubScore(itemList);

            } else {
                // 目标卡指标涉及到的公式计算
                if (this.planVo.getInt("method") == 2
                        && this.planParamSet.get("TargetTraceEnabled") != null
                        && "True"
                        .equalsIgnoreCase((String) this.planParamSet
                                .get("TargetTraceEnabled"))) {
                    String TargetCalcItem = ""; // 目标卡计算指标属性，P04中指标，以逗号分隔，顺序从前到后
                    if (planParamSet.get("TargetCalcItem") != null
                            && ((String) planParamSet.get("TargetCalcItem"))
                            .trim().length() > 0) {
                        TargetCalcItem = ((String) planParamSet
                                .get("TargetCalcItem")).trim();
                    }
                    if (TargetCalcItem.length() > 0) {
                        String[] temps = TargetCalcItem.split(",");
                        ArrayList fieldList = (ArrayList) DataDictionary
                                .getFieldList("P04", Constant.USED_FIELD_SET)
                                .clone();
                        FieldItem item = new FieldItem();
                        item.setItemid("task_score");
                        item.setItemdesc("评分");
                        item.setItemtype("N");
                        item.setDecimalwidth(4);
                        item.setItemlength(12);
                        fieldList.add(item);
                        for (int i = 0; i < temps.length; i++) {
                            if (temps[i].length() > 0) {
                                rowSet = dao
                                        .search("select expression,itemtype from t_hr_busiField  where upper(fieldsetid)='P04'  and upper(itemid)='"
                                                + temps[i].toUpperCase() + "' ");
                                if (rowSet.next()) {
                                    String expression = Sql_switcher.readMemo(
                                            rowSet, "expression");
                                    String itemtype = rowSet
                                            .getString("itemtype");
                                    int y_type = YksjParser.FLOAT;
                                    if ("A".equalsIgnoreCase(itemtype)) {
                                        y_type = YksjParser.STRVALUE;
                                    }
                                    if ("D".equalsIgnoreCase(itemtype)) {
                                        y_type = YksjParser.DATEVALUE;
                                    }
                                    if (expression.trim().length() > 0) {
                                        YksjParser yp = new YksjParser(
                                                this.userView, fieldList,
                                                YksjParser.forNormal, y_type,
                                                YksjParser.forPerson, "Ht", "");
                                        if (expression.indexOf("执行存储过程") != -1) {//如果是执行计算分值存储过程
                                            continue;
                                        }
                                        yp.run(expression, this.conn, "", "p04");
                                        String formular_sql = yp.getSQL();
                                        if (!"task_score".equalsIgnoreCase(
                                                temps[i].trim())) {
                                            if (formular_sql
                                                    .toLowerCase()
                                                    .indexOf(
                                                            "per_target_evaluation.score") == -1) {
                                                dao.update("update p04 set "
                                                        + temps[i]
                                                        + "=("
                                                        + formular_sql
                                                        + ") where plan_id="
                                                        + this.planVo
                                                        .getInt("plan_id")
                                                        + "   and ( p04.chg_type<>3 or p04.chg_type is null ) ");
                                            }
                                        } else {

                                            task_score_str = formular_sql;
                                        }

                                    }
                                }
                            }
                        }
                    }
                }

                HashMap item_pointMap = getItemPoints2(itemList);//每个项目对应的指标信息。键为Item_id，键值为指标信息的bean
                if (this.compute_flag == 1 || this.compute_flag == 4) {
                    if (!(this.planVo.getInt("method") != 2 && "true".equalsIgnoreCase((String) this.planParamSet
                            .get("HandEval")))) {//360计划，启动时是手工打分
                        anaysePerResultTable(ruleMap, gradeList);//处理考评结果表中关于等级分类的字段。缺少的就添上，多余的就删除
                        // 取得每个项目 对应的第一层指标项
                        HashMap point_firstItemMap = getFirstItemMap(pointList,
                                itemList);
                        // 根据计算规则，建立评分临时表（处理空票不作废、此类有分、空票作废单项未评分的处理）
                        dealWithEvaluationTable(ruleMap, pointList, objectList);
                        // 过滤统计范围
                        /*
                         * if (ruleMap.get("NodeKnowDegree") != null) { String
                         * NodeKnowDegree = (String)
                         * ruleMap.get("NodeKnowDegree"); String UseKnow =
                         * (String) ruleMap.get("UseKnow"); if
                         * (NodeKnowDegree.equalsIgnoreCase("true") &&
                         * UseKnow.equalsIgnoreCase("True")) // 是否有了解程度 { String
                         * KnowText =((String)ruleMap.get("KnowText")).trim();
                         * dao.delete("delete from " + tableName +
                         * " where know_id not in (" + KnowText +
                         * ") or know_id is null", new ArrayList()); } }
                         */

                        // 去最值
                        moveBestValue(ruleMap);

                        // 计算单项指标分值,插入per_result_XXXX (同时兼顾 Per_ScoreDetail
                        // (绩效评估得分明细表)里的数据 )
                        calPointScore(itemList, ruleMap, pointList, objectList,
                                point_firstItemMap);
                    }
                }
                HashMap objectItemRankMap = getObjectItemRank(this.planid);
                if (this.compute_flag == 1 || this.compute_flag == 2
                        || this.compute_flag == 4) {

                    HashMap dynaMap = new HashMap();
                    HashMap objectBodyMap = new HashMap();
                    String body_str = ",";
                    LazyDynaBean a_bean = null;
                    for (int i = 0; i < objectList.size(); i++) {
                        a_bean = (LazyDynaBean) objectList.get(i);
                        String body_id = (String) a_bean.get("body_id");
                        objectBodyMap.put((String) a_bean.get("object_id"),
                                body_id);
                        if (body_id != null && body_id.length() > 0
                                && body_str.indexOf("," + body_id + ",") == -1) {
                            body_str += body_id.trim() + ",";
                        }
                    }

                    if (body_str.length() > 1) {
                        LoadXml loadXml = new LoadXml();
                        String[] temps = body_str.split(",");
                        for (int i = 0; i < temps.length; i++) {
                            if (temps[i] != null && temps[i].length() > 0) {
                                HashMap _dynaMap = loadXml.getDynaItem(
                                        this.planid + "", this.conn, temps[i]);
                                if (_dynaMap != null) {
                                    dynaMap.put(temps[i], _dynaMap);
                                }
                            }
                        }

                    }

                    // 计算所有项目得分（注意动态指标权重）
                    calculateItemScore(objectList, ruleMap, item_pointMap,
                            itemList, pointList, objectItemRankMap, dynaMap,
                            objectBodyMap);

                    if (this.planParamSet.get("AllowAdjustEvalResult") != null
                            && "true"
                            .equalsIgnoreCase((String) this.planParamSet
                                    .get("AllowAdjustEvalResult"))) {
                        if (this.compute_flag == 1) // 如果是重新计算需将计算结果备份，为评分调整模块服务
                        {
                            createResultScore(pointList, itemList);
                        }
                    }
                    // 计算本次计算得分
                    // if(this.compute_flag==1||this.compute_flag==2)
                    calculateOriginalScore(itemList, objectItemRankMap,
                            objectBodyMap, dynaMap);
                }
                if (this.compute_flag == 4) {
                    createResultScore2(pointList, itemList);
                }
            }


            if (this.addList.size() > 0)  //目标考核没打分的考核主体模拟写入同一主体类别下打分主体的平均分。
            {
                ArrayList valueList = new ArrayList();
                valueList.add(new Integer(this.planid));
                dao.update("delete from per_target_evaluation where plan_id=? and degree_id='~'", valueList);
            }
            // 更新关键事件加扣分字段
            updateKeyMatterScore(ruleMap);

            // 填写 考核主体对考核对象总体评价统计表
            if (ruleMap.get("WholeEval") != null
                    && ((String) ruleMap.get("WholeEval")).length() > 0) {
                if (ruleMap.get("WholeEvalMode") != null
                        && ("0".equals((String) ruleMap.get("WholeEvalMode")))) {
                    insertObjectVoteData();
                } else if (ruleMap.get("WholeEvalMode") != null
                        && ("1".equals((String) ruleMap.get("WholeEvalMode")))) {
                    insertObjectScoreData(ruleMap);
                }
            }

            // 计算最后得分 (考虑 关联计划 / 修正分值)
            if (this.compute_flag == 1 || this.compute_flag == 2
                    || this.compute_flag == 4) {
                calculateScore(ruleMap);
            }

            // 能力素质模型计算 JinChunhai 2011.12.12
            if (String.valueOf(this.planVo.getInt("busitype")) != null
                    && String.valueOf(this.planVo.getInt("busitype")).trim()
                    .length() > 0
                    && this.planVo.getInt("busitype") == 1) {
                // 计算"岗位标准分值" 1: 岗位标准分值=∑(指标N要求等级 * 指标N权重)
                calculatePostRuleScore();

                // 计算"匹配度" 1: 匹配度=(员工能力评测得分/岗位标准分值)*100
                calculateMateSurmise();

            }

            if (this.batchComput != null
                    && this.batchComput.trim().length() > 0
                    && "True".equalsIgnoreCase(this.batchComput)) {
                // 更新字段分组平均分、 分组最高分、分组最低分、组内人数
                updateGroupFields();
            } else if (this.compute_flag != 4) {
                // 更新字段分组平均分、 分组最高分、分组最低分、组内人数
                updateGroupFields();
            }
            // 写入等级数据
            if (ruleMap.get("GradeClass") != null
                    && ((String) ruleMap.get("GradeClass")).length() > 0) {
                setGradeValue((String) ruleMap.get("GradeClass"), flag);
            }
            if (this.compute_flag != 4) {
                // 填写 对象的主体选票统计表 数据
                insertBodyVoteData();
                // 填写 考核主体对考核对象了解程度统计表
                if (ruleMap.get("NodeKnowDegree") != null
                        && ((String) ruleMap.get("NodeKnowDegree")).length() > 0) {
                    insertObjectKnowData();
                    /** 了解程度对比分析用数据，目前只兼容360 */
                    if (this.planVo.getInt("method") != 2) {
                        inertPer_bodyScore(pointList);
                    }
                }

                // 填写 考评结果表 总体评价各等级的票数
                if (ruleMap.get("WholeEval") != null
                        && ((String) ruleMap.get("WholeEval")).length() > 0 && ruleMap.get("WholeEvalMode") != null
                        && ("0".equals((String) ruleMap.get("WholeEvalMode")))) {
                    insertPerResultWholeValue(ruleMap, gradeList);
                }
                // 填写 per_objectbody_score (象各主体类别评分) 的票数 (经跟王建华商量不用生成)
                insertPerObjectbodyScore();

                // 更新字段分组平均分、 分组最高分、分组最低分、组内人数
                //	updateGroupFields();


                // 初始化备注字段
                String sql = "update per_result_" + planid
                        + " set evalremark=null  ";
                if (this.priv_where != null
                        && this.priv_where.trim().length() > 0) {
                    sql += " where 1=1 " + this.priv_where;
                }
                dao.update(sql);
                dao.update("update per_plan set status=6 where plan_id="
                        + planid);

            }

        } catch (Exception e) {
            e.printStackTrace();
            throw GeneralExceptionHandler.Handle(e);
        }
        return info;
    }

    public void inertPer_bodyScore(ArrayList pointList) {
        RowSet rs = null;
        RowSet subRs = null;
        try {
            DbWizard dbWizard = new DbWizard(this.conn);
            StringBuffer column = new StringBuffer();
            if (dbWizard.isExistTable("per_bodyscore_" + planid, false)) {
                dbWizard.dropTable("per_bodyscore_" + planid);
            }
            Table table = new Table("per_bodyscore_" + planid);
            table.addField(getField("id", "I", 10, true));
            column.append("id");
            table.addField(getField("PK_Flag", "I", 10, true));
            column.append(",PK_Flag");
            table.addField(getField("class_id", "I", 10, true));
            column.append(",class_id");
            table.addField(getField("B0110", "A", 30, false));
            column.append(",B0110");
            table.addField(getField("E0122", "A", 30, false));
            column.append(",E0122");
            table.addField(getField("E01A1", "A", 30, false));
            column.append(",E01A1");
            table.addField(getField("object_id", "A", 30, false));
            column.append(",object_id");
            table.addField(getField("a0101", "A", 100, false));
            column.append(",a0101");
            table.addField(getField("score", "N", 10, false));
            // column.append(",score");
            table.addField(getField("a0000", "I", 10, false));
            column.append(",a0000");
            for (int i = 0; i < pointList.size(); i++) {
                LazyDynaBean bean = (LazyDynaBean) pointList.get(i);
                String point_id = (String) bean.get("point_id");
                table.addField(getField("C_" + point_id.toUpperCase(), "N", 10,
                        false));
            }
            dbWizard.createTable(table);
            StringBuffer sql = new StringBuffer("");
            ContentDAO dao = new ContentDAO(this.conn);

            sql.setLength(0);
            sql.append("select po.a0000,po.id,po.b0110,po.e0122,po.e01a1,po.object_id,po.a0101,pm.know_id");
            sql.append(" from per_object po,");
            sql.append("(select max(plan_id) as plan_id,object_id,know_id from per_mainbody where plan_id="
                    + planid + " group by object_id,know_id) pm ");
            sql.append(" where po.plan_id=pm.plan_id and po.object_id=pm.object_id and po.plan_id="
                    + planid);
            rs = dao.search(sql.toString());
            StringBuffer insertBuf = new StringBuffer("");
            ArrayList list = new ArrayList();
            while (rs.next()) {
                insertBuf.setLength(0);
                String know_id = rs.getString("know_id");
                if (know_id == null || "".equals(know_id.trim())) {
                    continue;
                }
                sql.setLength(0);
                String object_id = rs.getString("object_id");
                int a0000 = rs.getInt("a0000");
                String b0110 = rs.getString("b0110") == null ? "" : rs
                        .getString("b0110");
                String e0122 = rs.getString("e0122") == null ? "" : rs
                        .getString("e0122");
                int id = rs.getInt("id");
                String e01a1 = rs.getString("e01a1") == null ? "" : rs
                        .getString("e01a1");
                String a0101 = rs.getString("a0101");
                sql.setLength(0);
                sql.append("select AVG(pt.score), pt.point_id from PER_TABLE_"
                        + planid
                        + " pt,per_mainbody pmb"
                        + " where  pt.mainbody_id=pmb.mainbody_id and pt.object_id=pmb.object_id and pmb.know_id="
                        + know_id + " and pmb.plan_id=" + planid
                        + " and pt.object_id='" + object_id + "'"
                        + " group by point_id");
                StringBuffer one = new StringBuffer();
                StringBuffer two = new StringBuffer();
                subRs = dao.search(sql.toString());
                while (subRs.next()) {
                    float score = subRs.getFloat(1);
                    String point_id = subRs.getString(2);
                    one.append(",C_" + point_id);
                    two.append("," + score);
                }
                StringBuffer buf = new StringBuffer();
                buf.append("insert into " + "per_bodyscore_" + planid + "("
                        + column.toString() + one.toString() + ") values( ");
                buf.append(id + ",2," + know_id + ",'" + b0110 + "','" + e0122
                        + "','" + e01a1 + "',");
                buf.append("'" + object_id + "','" + a0101 + "'," + a0000);
                buf.append(two.toString() + ")");
                list.add(buf.toString());
            }
            if (list.size() > 0) {
                dao.batchUpdate(list);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (subRs != null) {
                    subRs.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private HashMap getDataMap(String codesetid) {
        HashMap map = new HashMap();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            String tablename = "codeitem";
            if ("UN".equalsIgnoreCase(codesetid)
                    || "UM".equalsIgnoreCase(codesetid)
                    || "@K".equalsIgnoreCase(codesetid)) {
                tablename = "organization";
            }
            RowSet rowSet = dao.search("select * from " + tablename
                    + " where codesetid='" + codesetid + "' order by layer");
            while (rowSet.next()) {

                map.put(rowSet.getString("codeitemid"), rowSet
                        .getString("layer") != null ? rowSet.getString("layer")
                        : "");

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 更新字段分组平均分、 分组最高分、分组最低分、组内人数
     *
     * @throws GeneralException
     */
    public void updateGroupFields() throws GeneralException {
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            StringBuffer updateBuf = new StringBuffer();
            RowSet rowSet = null;
            String GrpMenu1 = (String) this.planParamSet.get("GrpMenu1"); // 排名指标1，格式：字段名;层级
            String GrpMenu2 = (String) this.planParamSet.get("GrpMenu2"); // 排名指标2，格式：字段名;层级
            Hashtable paramters = loadxml.getDegreeWhole();
            String deviationScoreUsed = (String) paramters.get("deviationScoreUsed");//是否使用纠偏总分 0不是  1是
            String total_score = "score";
            if ("1".equals(deviationScoreUsed)) {
                total_score = "reviseScore";
            }
            String grpField = "body_id";
            DbWizard dbWizard = new DbWizard(this.conn);
            if ((GrpMenu1 != null && GrpMenu1.trim().length() > 0 && ((String) GrpMenu1
                    .split(";")[0]).toString().trim().length() > 0)
                    || (GrpMenu2 != null && GrpMenu2.trim().length() > 0 && ((String) GrpMenu2
                    .split(";")[0]).toString().trim().length() > 0)) {
                Table table = new Table("per_result_" + this.planid);
                if (!dbWizard.isExistField("per_result_" + planid, "grp_field",
                        false)) {
                    Field obj = new Field("grp_field");
                    obj.setDatatype(DataType.STRING);
                    obj.setLength(80);
                    obj.setKeyable(false);
                    table.addField(obj);
                    dbWizard.addColumns(table);// 更新列
                }
                dao.update("update per_result_" + this.planid
                        + " set grp_field=''");
                if (GrpMenu1 != null && GrpMenu1.trim().length() > 0) {
                    String[] temps = GrpMenu1.split(";");
                    if (temps[0].trim().length() > 0) {
                        if (temps.length == 2 && !"0".equals(temps[1])) {
                            String codesetid = "";
                            if ("B0110".equalsIgnoreCase(temps[0])) {
                                codesetid = "UN";
                            } else if ("E0122".equalsIgnoreCase(temps[0])) {
                                codesetid = "UM";
                            } else if ("E01A1".equalsIgnoreCase(temps[0])) {
                                codesetid = "@K";
                            } else if (DataDictionary.getFieldItem(temps[0]) != null) {
                                codesetid = DataDictionary.getFieldItem(
                                        temps[0]).getCodesetid();
                            }
                            HashMap map = getDataMap(codesetid);

                            if (dbWizard.isExistField("per_result_" + planid,
                                    temps[0], false)) {
                                String _sql = "select " + temps[0]
                                        + ",object_id from per_result_"
                                        + this.planid;
                                if (this.priv_where2 != null
                                        && this.priv_where2.trim().length() > 0) {
                                    _sql += " where 1=1 " + this.priv_where2;
                                }
                                rowSet = dao.search(_sql);
                                while (rowSet.next()) {
                                    String _temp = rowSet.getString(1) != null ? rowSet
                                            .getString(1) : "";
                                    String object_id = rowSet.getString(2);
                                    if (_temp.length() == 0
                                            || map.get(_temp) == null
                                            || ((String) map.get(_temp))
                                            .length() == 0
                                            || Integer.parseInt(((String) map
                                            .get(_temp))) <= Integer
                                            .parseInt(temps[1])) {
                                        dao.update("update per_result_"
                                                + this.planid
                                                + " set grp_field="
                                                + Sql_switcher.isnull(temps[0],
                                                "''")
                                                + " where object_id='"
                                                + object_id + "'");
                                    } else {
                                        while (true && _temp.length() > 1) {
                                            _temp = _temp.substring(0,
                                                    _temp.length() - 1);
                                            if (map.get(_temp) != null
                                                    && Integer
                                                    .parseInt(((String) map
                                                            .get(_temp))) <= Integer
                                                    .parseInt(temps[1])) {
                                                dao.update("update per_result_"
                                                        + this.planid
                                                        + " set grp_field='"
                                                        + _temp
                                                        + "' where object_id='"
                                                        + object_id + "'");
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            dao.update("update per_result_" + this.planid
                                    + " set grp_field="
                                    + Sql_switcher.isnull(temps[0], "''"));
                        }
                    }
                }

                if (GrpMenu2 != null && GrpMenu2.trim().length() > 0) {
                    String[] temps = GrpMenu2.split(";");
                    if (temps[0].trim().length() > 0) {
                        if (temps.length == 2 && !"0".equals(temps[1])) {
                            String codesetid = "";
                            if ("B0110".equalsIgnoreCase(temps[0])) {
                                codesetid = "UN";
                            } else if ("E0122".equalsIgnoreCase(temps[0])) {
                                codesetid = "UM";
                            } else if ("E01A1".equalsIgnoreCase(temps[0])) {
                                codesetid = "@K";
                            } else if (DataDictionary.getFieldItem(temps[0]) != null) {
                                codesetid = DataDictionary.getFieldItem(
                                        temps[0]).getCodesetid();
                            }
                            HashMap map = getDataMap(codesetid);
                            if (dbWizard.isExistField("per_result_" + planid,
                                    temps[0], false)) {
                                String _sql = "select " + temps[0]
                                        + ",object_id from per_result_"
                                        + this.planid;
                                if (this.priv_where2 != null
                                        && this.priv_where2.trim().length() > 0) {
                                    _sql += " where 1=1 " + this.priv_where2;
                                }
                                rowSet = dao.search(_sql);
                                while (rowSet.next()) {
                                    String _temp = rowSet.getString(1) != null ? rowSet
                                            .getString(1) : "";
                                    String object_id = rowSet.getString(2);
                                    if (_temp.length() == 0
                                            || map.get(_temp) == null
                                            || ((String) map.get(_temp))
                                            .length() == 0
                                            || Integer.parseInt(((String) map
                                            .get(_temp))) <= Integer
                                            .parseInt(temps[1])) {
                                        dao.update("update per_result_"
                                                + this.planid
                                                + " set grp_field="
                                                + Sql_switcher.isnull(
                                                "grp_field", "''")
                                                + Sql_switcher.concat()
                                                + Sql_switcher.isnull(temps[0],
                                                "''")
                                                + " where object_id='"
                                                + object_id + "'");
                                    } else {
                                        while (true && _temp.length() > 1) {
                                            _temp = _temp.substring(0,
                                                    _temp.length() - 1);
                                            if (map.get(_temp) != null
                                                    && Integer
                                                    .parseInt(((String) map
                                                            .get(_temp))) <= Integer
                                                    .parseInt(temps[1])) {
                                                dao.update("update per_result_"
                                                        + this.planid
                                                        + " set grp_field="
                                                        + Sql_switcher.isnull(
                                                        "grp_field",
                                                        "''")
                                                        + Sql_switcher.concat()
                                                        + "'" + _temp
                                                        + "' where object_id='"
                                                        + object_id + "'");
                                                break;
                                            }
                                        }
                                    }
                                }
                            }

                        } else {
                            dao.update("update per_result_" + this.planid
                                    + " set grp_field="
                                    + Sql_switcher.isnull("grp_field", "''")
                                    + Sql_switcher.concat()
                                    + Sql_switcher.isnull(temps[0], "''"));
                        }
                    }
                }
                grpField = "grp_field";
            }

            if (Sql_switcher.searchDbServer() == Constant.ORACEL) {
                String tempSql = "(SELECT " + grpField + ", Avg("
                        + Sql_switcher.isnull("" + total_score + "", "0") + ") AS AvgS, Max("
                        + Sql_switcher.isnull("" + total_score + "", "0") + ") As MaxS, Min("
                        + Sql_switcher.isnull("" + total_score + "", "0")
                        + ") As MinS, Count(*) AS Cou FROM PER_RESULT_"
                        + planid + " ";
                if (this.priv_where2 != null
                        && this.priv_where2.trim().length() > 0) {
                    tempSql += " where 1=1 " + this.priv_where2;
                }
                tempSql += " GROUP BY " + grpField + "  ) A WHERE PER_RESULT_"
                        + planid + "." + grpField + "=A." + grpField + "";
                tempSql += " or (PER_RESULT_" + planid + "." + grpField
                        + " is null and A." + grpField + " is null)";
                updateBuf.append("UPDATE PER_RESULT_" + planid + " SET ");
                updateBuf.append("exS_GrpAvg=(select AvgS from " + tempSql
                        + "),");
                updateBuf.append("exS_GrpMax=(select MaxS from " + tempSql
                        + "),");
                updateBuf.append("exS_GrpMin=(select MinS from " + tempSql
                        + "),");
                updateBuf.append("ex_GrpNum=(select Cou from " + tempSql + ")");

                if (this.priv_where2 != null
                        && this.priv_where2.trim().length() > 0) {
                    updateBuf.append(" where 1=1 " + this.priv_where2);
                }

            } else if (Sql_switcher.searchDbServer() == Constant.MSSQL) {
                updateBuf.append("UPDATE PER_RESULT_" + planid
                        + " SET exS_GrpAvg=A.AvgS,exS_GrpMax=A.MaxS,");
                updateBuf
                        .append("exS_GrpMin=A.MinS,ex_GrpNum=A.Cou from (SELECT "
                                + grpField
                                + ", Avg("
                                + Sql_switcher.isnull("" + total_score + "", "0")
                                + ") AS AvgS, ");
                updateBuf.append("Max(" + Sql_switcher.isnull("" + total_score + "", "0")
                        + ") As MaxS, Min(" + Sql_switcher.isnull("" + total_score + "", "0")
                        + ") As MinS, Count(*) AS Cou FROM PER_RESULT_"
                        + planid);
                if (this.priv_where2 != null
                        && this.priv_where2.trim().length() > 0) {
                    updateBuf.append(" where 1=1 " + this.priv_where2);
                }
                updateBuf.append(" GROUP BY " + grpField + "");
                updateBuf.append(") A WHERE ( PER_RESULT_" + planid + "."
                        + grpField + "=A." + grpField + " ");
                if (this.priv_where2 != null
                        && this.priv_where2.trim().length() > 0) {
                    updateBuf.append(this.priv_where2);
                }
                updateBuf.append(" ) or (PER_RESULT_" + planid + "." + grpField
                        + " is null and A." + grpField + " is null)");

            }
            dao.update(updateBuf.toString());
            // 更新名次字段 ordering
            updateBuf.setLength(0);
            updateBuf.append("UPDATE PER_RESULT_" + planid
                    + " SET ordering=1 where ex_GrpNum=1 ");// 先将组内人数为1的名次置为1
            if (this.priv_where2 != null
                    && this.priv_where2.trim().length() > 0) {
                updateBuf.append(this.priv_where2);
            }
            dao.update(updateBuf.toString());

            String bodyidTemp = "-100";
            double scoreTemp = -1000000.0;
            String sql = "select * from PER_RESULT_" + planid
                    + " where ex_GrpNum!=1 ";
            if (this.priv_where2 != null
                    && this.priv_where2.trim().length() > 0) {
                sql += this.priv_where2;
            }
            sql += " ORDER BY " + grpField + " ASC, " + total_score + " DESC";
            rowSet = dao.search(sql);
            int orderIndex = 0;
            int sameScoreCount = 0;// 连续相同分数的个数
            while (rowSet.next()) {
                String a0101 = rowSet.getString("a0101");
                String _temp = rowSet.getString(grpField) != null ? rowSet
                        .getString(grpField) : "";
                if (!bodyidTemp.equalsIgnoreCase(_temp)) {
                    bodyidTemp = _temp;
                    orderIndex = 0;
                    scoreTemp = -1000000.0;
                    sameScoreCount = 0;// 连续相同分数的个数

                }
                String object_id = rowSet.getString("object_id");
                if (scoreTemp != rowSet.getDouble("" + total_score + ""))// 可以并列排名
                {
                    if (sameScoreCount > 0) {
                        orderIndex = orderIndex + sameScoreCount;
                    }
                    orderIndex++;
                    sameScoreCount = 0;
                    scoreTemp = rowSet.getDouble("" + total_score + "");
                    dao.update("update PER_RESULT_" + planid + " set ordering="
                            + orderIndex + " where object_id='" + object_id
                            + "'");
                } else {
                    if (orderIndex == 0) {
                        orderIndex++;
                    }
                    dao.update("update PER_RESULT_" + planid + " set ordering="
                            + orderIndex + " where object_id='" + object_id
                            + "'");
                    sameScoreCount++;
                }
            }
            if (rowSet != null) {
                rowSet.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw GeneralExceptionHandler.Handle(e);
        }
    }

    /**
     * 计算首钢 加减分
     */
    public void calAddSubScore(ArrayList itemList) {
        try {
            ContentDAO dao = new ContentDAO(this.conn);

            String sKey = "a0100";
            if (this.planVo.getInt("object_type") != 2) {
                sKey = "b0110";
            }

            String sTb = "t#" + this.userView.getUserName() + "_per_1"; // this.userView.getUserName()+"TempTb";
            DbWizard dbWizard = new DbWizard(this.conn);
            if (dbWizard.isExistTable(sTb, false)) {
                dao.update("drop table " + sTb);
            }

// 按首钢算分方式, 二级项目中根据项目权限授权打分. 每个主体一级项目评分得分为其有权限项目评分均分.
// 一级项目最终得分为每个主体一级项目评分的均分.
            StringBuffer sql = new StringBuffer("");
            switch (Sql_switcher.searchDbServer()) {
                case Constant.ORACEL:
                    sql.append("create table " + sTb + " as ");
                    break;
            }
            sql.append("select I.object_id, I.mainbody_id, I.body_id, I.item_id, I.parent_id, I.Score AS StdScore, I.rank, '1' AS Flag,");
            sql.append("(" + Sql_switcher.isnull("I.score", "0") + "+"
                    + Sql_switcher.isnull("S.score", "0") + ") As ItemScore,");
            sql.append("(" + Sql_switcher.isnull("I.score", "0") + "+"
                    + Sql_switcher.isnull("S.score", "0")
                    + ")*I.rank As Score ");
            if (Sql_switcher.searchDbServer() != Constant.ORACEL) {
                sql.append(" into " + sTb);
            }
            sql.append(" from ( SELECT M.object_id, M.mainbody_id, M.body_id, I.item_id, I.parent_id, I.score, I.rank FROM per_template_item I, per_mainbody M ");
            sql.append(" WHERE M.plan_id=" + this.planid + " ");
            sql.append(" AND I.template_id='" + this.template_id + "'");
            sql.append(" AND NOT I.item_id IN (SELECT parent_id FROM per_template_item WHERE  parent_id is not null GROUP BY parent_id) ) I ");
            sql.append(" LEFT JOIN (  SELECT M.object_id, M.mainbody_id, P.item_Id, SUM(S.score) AS score ");
            sql.append(" FROM per_mainbody M, per_target_evaluation S, P04 P ");
            sql.append(" WHERE P.P0400=S.P0400 AND P.plan_id=" + this.planid);
            sql.append(" AND M.plan_id="
                    + this.planid
                    + " AND M.object_id=S.object_id AND M.mainbody_id=S.mainbody_id ");
            sql.append(" AND M.status in (2, 3) ");
            sql.append(" AND S.plan_id=" + this.planid + " AND S.object_id=P."
                    + sKey + " ");
            sql.append(" GROUP BY M.object_id, M.mainbody_id, P.item_id ) S ");
            sql.append(" ON (I.item_id=S.item_id AND I.object_id=S.object_id AND I.mainbody_id=S.mainbody_id) ");
            sql.append(" ORDER BY I.object_id, I.mainbody_id, I.item_id ");
            dao.update(sql.toString());

            RowSet rowSet = dao.search("select * from per_itempriv_"
                    + this.planid);
            ResultSetMetaData mt = rowSet.getMetaData();
            for (int i = 0; i < mt.getColumnCount(); i++) {
                String columName = mt.getColumnName(i + 1).toLowerCase();
                if (columName.length() > 2
                        && "c_".equals(columName.substring(0, 2))) {
                    String itemid = columName.substring(2);
                    sql.setLength(0);
                    sql.append("DELETE FROM " + sTb
                            + " WHERE EXISTS(SELECT 1 FROM per_itempriv_"
                            + this.planid + " WHERE " + sTb
                            + ".object_id=per_itempriv_" + this.planid
                            + ".object_id ");
                    sql.append(" and " + sTb + ".body_id=per_itempriv_"
                            + this.planid + ".body_id AND " + sTb + ".item_id="
                            + itemid + " AND per_itempriv_" + this.planid
                            + ".C_" + itemid + "<>1)");
                    dao.update(sql.toString());

                }

            }

            // 2. 逐项目向上汇总
            rowSet = dao
                    .search("SELECT parent_id FROM per_template_item WHERE template_id='"
                            + template_id
                            + "' AND (Not parent_id IS NULL) GROUP BY parent_id ORDER BY parent_id DESC ");
            while (rowSet.next()) {
                // 算出上级项目每个人的均分, 再算上级项目的均分, 做为该项目的分数保存(可以 avg(Itemscore), 不算权重了,
                // 只顶级算权重)
                String itemid = rowSet.getString(1);
                sql.setLength(0);
                sql.append("INSERT INTO "
                        + sTb
                        + " (object_id, mainbody_id, item_id, parent_id, rank, Flag, ItemScore) ");
                sql.append(" SELECT object_id, '#' AS mainbody_id, Item_id, parent_id, rank, '0' AS Flag, Avg(ItemScore) AS ItemScore ");
                sql.append(" FROM (SELECT object_id, mainbody_id, I.item_id, I.parent_id, I.rank, Avg(ItemScore) As ItemScore ");
                sql.append(" FROM per_template_item I, " + sTb + " S ");
                sql.append(" WHERE I.template_id='" + this.template_id
                        + "' AND I.item_id=S.parent_id AND I.item_id='"
                        + itemid + "' ");
                sql.append(" GROUP BY object_id, mainbody_id, I.item_id, I.parent_id, I.rank ) S ");
                sql.append(" GROUP BY object_id, item_id, parent_id, rank");
                dao.update(sql.toString());
            }

            // 3. 检查第一级有无叶子结点, 该项目直接算均分

            rowSet = dao
                    .search(" SELECT item_id FROM per_template_item "
                            + "WHERE template_id='"
                            + this.template_id
                            + "' AND parent_id IS NULL "
                            + " AND  item_id not IN (SELECT parent_id FROM per_template_item "
                            + " WHERE template_id='" + this.template_id
                            + "' AND  parent_id IS NOT NULL) ");
            while (rowSet.next()) {
                String itemid = rowSet.getString(1);
                sql.setLength(0);
                sql.append("INSERT INTO "
                        + sTb
                        + " (object_id, mainbody_id, item_id, parent_id, rank, Flag, ItemScore) ");
                sql.append(" SELECT object_id, '#' AS mainbody_id, Item_id, parent_id, rank, '0' AS Flag, Avg(ItemScore) AS ItemScore");
                sql.append(" FROM " + sTb + " S ");
                sql.append(" WHERE item_id='" + itemid + "'");
                sql.append(" GROUP BY object_id, item_id, parent_id, rank ");
                dao.update(sql.toString());
            }

            // 4. 总分汇总, 此时, parent_id IS NULL(第一级项目)的分数未计算
            sql.setLength(0);
            sql.append("INSERT INTO "
                    + sTb
                    + " (object_id, mainbody_id, item_id, parent_id, ItemScore, Flag)  ");
            sql.append("SELECT object_id, '#', -1, -1, Sum(ItemScore*rank) As ItemScore, '0' AS Flag  ");
            sql.append("FROM " + sTb + " ");
            sql.append(" WHERE parent_id IS NULL AND mainbody_id='#' ");
            sql.append("GROUP BY object_id  ");
            dao.update(sql.toString());

            // 将叶子结点的均分写入到临时表中
            sql.setLength(0);
            sql.append("INSERT INTO " + sTb
                    + " (object_id, mainbody_id, item_id, ItemScore, Flag) ");
            sql.append(" SELECT object_id, '#', item_id, Avg(ItemScore) As ItemScore, '0' AS Flag ");
            sql.append(" FROM " + sTb);
            sql.append(" WHERE  parent_id IS NOT NULL  AND Flag='1' ");
            sql.append("GROUP BY object_id, item_id  ");
            dao.update(sql.toString());

            rowSet = dao
                    .search("select * from per_template_item where template_id='"
                            + this.template_id + "'");
            while (rowSet.next()) {
                String itemid = rowSet.getString("item_id");
                sql.setLength(0);
                sql.append(" UPDATE per_result_" + this.planid + " SET T_"
                        + itemid + "=(SELECT ItemScore FROM  " + sTb + " ");
                sql.append(" WHERE per_result_" + this.planid + ".Object_id="
                        + sTb + ".object_id AND " + sTb + ".item_id='" + itemid
                        + "' AND mainbody_id='#' ) ");
                if (this.priv_where != null
                        && this.priv_where.trim().length() > 0) {
                    sql.append(" where 1=1 " + this.priv_where);
                }
                dao.update(sql.toString());
            }

            sql.setLength(0);
            sql.append(" UPDATE per_result_" + this.planid
                    + " SET original_score=(SELECT ItemScore FROM  " + sTb
                    + " ");
            sql.append(" WHERE per_result_" + this.planid + ".Object_id=" + sTb
                    + ".object_id AND " + sTb
                    + ".item_id='-1' AND mainbody_id='#')");
            if (this.priv_where != null && this.priv_where.trim().length() > 0) {
                sql.append(" where 1=1 " + this.priv_where);
            }
            dao.update(sql.toString());

            if (rowSet != null) {
                rowSet.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void insertPerObjectbodyScore() {
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            DbWizard dbWizard = new DbWizard(this.conn);
            if (!dbWizard.isExistTable("per_objectbody_score", false)) {
                Table table = new Table("per_objectbody_score");
                table.addField(getField("id", "I", 10, true));
                table.addField(getField("body_id", "I", 10, true));
                table.addField(getField("object_id", "A", 30, false));
                table.addField(getField("score", "N", 10, false));
                table.addField(getField("plan_id", "I", 10, false));
                dbWizard.createTable(table);
            } else {
                dao.delete("delete from per_objectbody_score where plan_id="
                        + this.planid, new ArrayList());
            }
            StringBuffer sql = new StringBuffer(
                    "insert into per_objectbody_score (id,body_id,object_id,score,plan_id) ");
            sql.append("select per_object.id,a.body_id,a.object_id,a.score,"
                    + this.planid + " from ( ");
            sql.append(" select object_id,body_id,sum(score*point_rank) score  from Per_ScoreDetail where plan_id="
                    + this.planid + " group by object_id,body_id ");
            sql.append(" ) a ,per_object  where a.object_id=per_object.object_id and per_object.plan_id="
                    + this.planid + " and a.score<>0");
            dao.update(sql.toString());

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 创建按权重计算总体评价票数的临时表
     */
    public void createTempTable() {

        String tableName = "rankWholeApp";
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            DbWizard dbWizard = new DbWizard(this.conn);
            if (!dbWizard.isExistTable(tableName, false)) {
                Table table = new Table(tableName);
                table.addField(getField("object_id", "A", 30, false));
                table.addField(getField("whole_grade_id", "I", 10, false));
                table.addField(getField("countNum", "N", 12, false));
                table.addField(getField("userName", "A", 30, false));
                dbWizard.createTable(table);
            } else {
                dao.delete("delete from " + tableName + " where userName='"
                        + this.userView.getUserName() + "'", new ArrayList());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 填写 考评结果表 总体评价各等级的票数
     *
     * @param ruleMap
     * @param gradeList
     */
    public void insertPerResultWholeValue(HashMap ruleMap, ArrayList gradeList) {

        ContentDAO dao = new ContentDAO(this.conn);
        try {
            String AppUseWeight = (String) ruleMap.get("AppUseWeight");
            String UseWeight = (String) ruleMap.get("UseWeight");
            // ArrayList knowList=getKnowList();
            RowSet rowSet = null;
            if ((UseWeight != null && "true".equalsIgnoreCase(UseWeight))
                    && "True".equalsIgnoreCase(AppUseWeight)) // 评估中总体评价票数有权重
            {
                createTempTable();
                StringBuffer sql = new StringBuffer(
                        "insert into rankWholeApp (object_id,whole_grade_id,countNum,userName)");
                sql.append(" select aa.object_id,aa.whole_grade_id,sum(a_count)a_count,'"
                        + this.userView.getUserName() + "' from ( ");
                sql.append(" select a.object_id,a.whole_grade_id,a.body_id,a.acount,a.acount*b.rank a_count ");
                sql.append(" from (select object_id, whole_grade_id,body_id ,"
                        + Sql_switcher.isnull("count(whole_grade_id)", "0")
                        + " acount ");
                sql.append(" from per_mainbody where plan_id=" + this.planid);

                // 过滤统计范围
                if (ruleMap.get("NodeKnowDegree") != null) {
                    String NodeKnowDegree = (String) ruleMap
                            .get("NodeKnowDegree");
                    String UseKnow = (String) ruleMap.get("UseKnow");
                    if ("true".equalsIgnoreCase(NodeKnowDegree)
                            && "True".equalsIgnoreCase(UseKnow)) // 是否有了解程度
                    {
                        String KnowText = (String) ruleMap.get("KnowText");
                        sql.append(" and  know_id  in (" + KnowText
                                + ") and know_id is not null ");
                    }
                }
                if (this.compute_flag != 4) {
                    sql.append("  and (status=2  or status=3) ");
                }
                if (this.batchComput != null
                        && this.batchComput.trim().length() > 0
                        && "True".equalsIgnoreCase(this.batchComput)) {
                    sql.append("  and (status=2  or status=3 or mainbody_id='"
                            + this.presentMainbody_id + "' ) ");
                }
                sql.append(" group by  object_id,whole_grade_id,body_id ) a, ");
                sql.append(" (select * from per_plan_body where plan_id="
                        + this.planid + ") b ");
                sql.append(" where a.body_id=b.body_id ) aa group by   aa.object_id,aa.whole_grade_id");
                dao.update(sql.toString());

                for (int i = 0; i < gradeList.size(); i++) {
                    StringBuffer a_sql = new StringBuffer("");
                    LazyDynaBean abean = (LazyDynaBean) gradeList.get(i);
                    String id = (String) abean.get("id");
                    if ("SUM".equals(id)) {
                        continue;

                    }
                    /*
                     * a_sql.append(" select countNum,a.object_id from ( ");
                     * a_sql
                     * .append(" select object_id,"+Sql_switcher.isnull("countNum"
                     * , "0")+" countNum ");
                     * a_sql.append(" from rankWholeApp where userName='" +
                     * this.userView.getUserName() + "' and whole_grade_id=" +
                     * id + " ) a,per_result_" + this.planid );
                     * a_sql.append(" where per_result_" + this.planid +
                     * ".object_id=a.object_id ");
                     */
                    a_sql.append("select countnum ,object_id from rankWholeApp where whole_grade_id="
                            + id
                            + " and lower(userName)='"
                            + this.userView.getUserName().toLowerCase() + "'");
                    rowSet = dao.search(a_sql.toString());
                    ArrayList list = new ArrayList();
                    ArrayList list0 = new ArrayList();
                    while (rowSet.next()) {
                        list0 = new ArrayList();
                        list0.add(new Float(rowSet.getFloat("countNum")));
                        list0.add(rowSet.getString("object_id"));
                        list.add(list0);

                    }

                    a_sql.setLength(0);
                    a_sql.append("update per_result_" + this.planid
                            + " set  V_" + id + "=? where object_id=? ");
                    if (this.priv_where != null
                            && this.priv_where.trim().length() > 0) {
                        a_sql.append(this.priv_where);
                    }

                    dao.batchUpdate(a_sql.toString(), list);

                }
            } else {

                for (int i = 0; i < gradeList.size(); i++) {
                    StringBuffer a_sql = new StringBuffer("");
                    LazyDynaBean abean = (LazyDynaBean) gradeList.get(i);
                    String id = (String) abean.get("id");
                    if ("SUM".equals(id)) {
                        continue;

                    }
                    a_sql.append(" select acount,a.object_id from ( ");
                    a_sql.append(" select object_id, whole_grade_id ,"
                            + Sql_switcher.isnull("count(whole_grade_id)", "0")
                            + " acount ");
                    a_sql.append(" from per_mainbody where plan_id="
                            + this.planid);
                    if (this.compute_flag != 4) {
                        a_sql.append(" and ( status=2  or status=3) ");
                    }
                    if (this.batchComput != null
                            && this.batchComput.trim().length() > 0
                            && "True".equalsIgnoreCase(this.batchComput)) {
                        a_sql.append(" and ( status=2  or status=3 or mainbody_id='"
                                + this.presentMainbody_id + "' ) ");
                    }

                    // 过滤统计范围
                    if (ruleMap.get("NodeKnowDegree") != null) {
                        String NodeKnowDegree = (String) ruleMap
                                .get("NodeKnowDegree");
                        String UseKnow = (String) ruleMap.get("UseKnow");
                        if ("true".equalsIgnoreCase(NodeKnowDegree)
                                && "True".equalsIgnoreCase(UseKnow)) // 是否有了解程度
                        {
                            String KnowText = (String) ruleMap.get("KnowText");
                            a_sql.append(" and  know_id  in (" + KnowText
                                    + ") and know_id is not null ");
                        }
                    }

                    a_sql.append(" and whole_grade_id="
                            + id
                            + "  group by  object_id,whole_grade_id ) a,per_result_"
                            + this.planid);
                    a_sql.append(" where per_result_" + this.planid
                            + ".object_id=a.object_id ");
                    if (this.priv_where != null
                            && this.priv_where.trim().length() > 0) {
                        a_sql.append(this.priv_where);
                    }

                    String sql = "update per_result_" + this.planid + " set V_"
                            + id + "=NULL ";
                    if (this.priv_where != null
                            && this.priv_where.trim().length() > 0) {
                        sql += " where 1=1 " + this.priv_where;
                    }
                    dao.update(sql);

                    rowSet = dao.search(a_sql.toString());
                    ArrayList list = new ArrayList();
                    ArrayList list0 = new ArrayList();
                    while (rowSet.next()) {
                        list0 = new ArrayList();
                        list0.add(new Integer(rowSet.getInt("acount")));
                        list0.add(rowSet.getString("object_id"));
                        list.add(list0);
                    }

                    sql = "update per_result_" + this.planid + " set  V_" + id
                            + "=? where object_id=? ";
                    if (this.priv_where != null
                            && this.priv_where.trim().length() > 0) {
                        sql += this.priv_where;
                    }
                    dao.batchUpdate(sql, list);

                }

            }

            String aa = "";
            for (int i = 0; i < gradeList.size(); i++) {
                LazyDynaBean abean = (LazyDynaBean) gradeList.get(i);
                String id = (String) abean.get("id");
                if ("SUM".equals(id)) {
                    continue;
                }
                aa += "+" + Sql_switcher.isnull("V_" + id, "0");
            }
            if (aa.length() > 0) {
                String sql = "update per_result_" + this.planid
                        + " set V_SUM=(" + aa.substring(1) + ")";
                if (this.priv_where != null
                        && this.priv_where.trim().length() > 0) {
                    sql += " where 1=1 " + this.priv_where;
                }

                dao.update(sql);
            }

            if (rowSet != null) {
                rowSet.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * 取得总体评价 等级列表
     *
     * @param ruleMap
     * @return
     */
    public ArrayList getGradeList(HashMap ruleMap) {

        ArrayList gradeList = new ArrayList();
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            if (ruleMap.get("WholeEval") != null
                    && ((String) ruleMap.get("WholeEval")).length() > 0
                    && "True"
                    .equalsIgnoreCase((String) ruleMap.get("WholeEval"))) {
                String GradeClass = (String) ruleMap.get("EvalClass");
                if (GradeClass == null || "".equals(GradeClass) || "0".equals(GradeClass)) {
                    GradeClass = (String) ruleMap.get("GradeClass");
                }
                if (GradeClass != null && !"".equals(GradeClass)) {
                    RowSet rowSet = dao
                            .search("select pds.id,pds.itemname from per_degree pd,per_degreedesc pds where pd.degree_id=pds.degree_id and pd.degree_id="
                                    + GradeClass + " order by pds.id ");
                    while (rowSet.next()) {
                        LazyDynaBean abean = new LazyDynaBean();
                        abean.set("id", rowSet.getString("id"));
                        abean.set("itemname", rowSet.getString("itemname"));
                        gradeList.add(abean);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return gradeList;
    }

    /**
     * 取得总体评价 等级列表
     *
     * @param ruleMap
     * @return
     */
    public ArrayList getGradeList2(HashMap ruleMap) {

        ArrayList gradeList = new ArrayList();
        ContentDAO dao = new ContentDAO(this.conn);
        try {

            String GradeClass = (String) ruleMap.get("EvalClass");
            if (GradeClass == null || "".equals(GradeClass)) {
                GradeClass = (String) ruleMap.get("GradeClass");
            }
            if (GradeClass != null && !"".equals(GradeClass) || "0".equals(GradeClass)) {
                RowSet rowSet = dao
                        .search("select pds.id,pds.itemname,pds.xishu from per_degree pd,per_degreedesc pds where pd.degree_id=pds.degree_id and pd.degree_id="
                                + GradeClass + " order by pds.id ");
                while (rowSet.next()) {
                    LazyDynaBean abean = new LazyDynaBean();
                    abean.set("id", rowSet.getString("id"));
                    abean.set("itemname", rowSet.getString("itemname"));
                    abean.set("xishu", rowSet.getString("xishu") == null ? ""
                            : rowSet.getString("xishu"));
                    gradeList.add(abean);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return gradeList;
    }

    /**
     * 取得总体评价 计划参数/启动选择 等级列表
     *
     * @param ruleMap
     * @return
     */
    public ArrayList getPlanGradeList(HashMap ruleMap) {

        ArrayList gradeList = new ArrayList();
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            if (ruleMap.get("WholeEval") != null
                    && ((String) ruleMap.get("WholeEval")).length() > 0
                    && "True"
                    .equalsIgnoreCase((String) ruleMap.get("WholeEval"))) {
                if (ruleMap.get("EvalClass") != null) {
                    /************优先按总体评价等级分类****************/
                    String EvalClass = (String) ruleMap.get("EvalClass");//EvalClass在计划参数总体评价中的等级分类ID
                    if (EvalClass == null || EvalClass.length() == 0 || "0".equals(EvalClass.trim())) {
                        EvalClass = (String) ruleMap.get("GradeClass");//GradeClass 启动时的等级分类
                    }

                    RowSet rowSet = dao
                            .search("select pds.id,pds.itemname from per_degree pd,per_degreedesc pds where pd.degree_id=pds.degree_id and pd.degree_id="
                                    + EvalClass + " order by pds.id ");
                    while (rowSet.next()) {
                        LazyDynaBean abean = new LazyDynaBean();
                        abean.set("id", rowSet.getString("id"));
                        abean.set("itemname", rowSet.getString("itemname"));
                        gradeList.add(abean);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return gradeList;
    }

    /**
     * 处理考评结果表中关于等级分类的字段。缺少的就添上，多余的就删除
     *
     * @param ruleMap
     * @param gradeList
     */
    public void anaysePerResultTable(HashMap ruleMap, ArrayList gradeList) {

        ContentDAO dao = new ContentDAO(this.conn);
        Table table = new Table("per_result_" + this.planid);
        DbWizard dbWizard = new DbWizard(this.conn);
        try {
            if (gradeList.size() > 0) {
                LazyDynaBean a_bean = new LazyDynaBean();
                a_bean.set("id", "SUM");
                a_bean.set("itemname", "SUM");
                gradeList.add(a_bean);

                RowSet rowSet = dao.search("select * from per_result_"
                        + this.planid + " where 1=2");
                ResultSetMetaData mt = rowSet.getMetaData();
                ArrayList existColumn = new ArrayList();

                for (int i = 0; i < mt.getColumnCount(); i++) {
                    String columnName = mt.getColumnName(i + 1);
                    if (columnName.length() > 2
                            && "V_"
                            .equalsIgnoreCase(columnName.substring(0, 2))) {
                        existColumn.add(columnName);
                    }
                }
                LazyDynaBean abean = null;
                // 添加字段
                boolean isAdd = false;
                for (int i = 0; i < gradeList.size(); i++) {
                    abean = (LazyDynaBean) gradeList.get(i);
                    String id = (String) abean.get("id");
                    boolean isExist = false;
                    for (int j = 0; j < existColumn.size(); j++) {
                        if (((String) existColumn.get(j)).equalsIgnoreCase("V_"
                                + id)) {
                            isExist = true;
                            break;
                        }
                    }
                    if (!isExist) {
                        isAdd = true;
                        table.addField(getField("V_" + id, "N", 12, false));
                    }
                }
                if (isAdd) {
                    dbWizard.addColumns(table);
                }

                // 删除字段  columnName的个数可能会比gradeList的多。要删除
                boolean isSub = false;
                for (int j = 0; j < existColumn.size(); j++) {
                    String columnName = (String) existColumn.get(j);
                    boolean isColumn = false;
                    for (int i = 0; i < gradeList.size(); i++) {
                        abean = (LazyDynaBean) gradeList.get(i);
                        String id = (String) abean.get("id");
                        if (columnName.equalsIgnoreCase("V_" + id)) {
                            isColumn = true;
                            break;
                        }
                    }
                    if (!isColumn && !"V_SUM".equals(columnName)) {
                        isSub = true;
                        table.addField(getField(columnName, "N", 12, false));
                    }
                }
                if (isSub) {
                    dbWizard.dropColumns(table);
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    // 填写 考核主体对考核对象了解程度统计表
    public void insertObjectKnowData() {

        ContentDAO dao = new ContentDAO(this.conn);
        try {
            isTable(1);
            StringBuffer sql = new StringBuffer(
                    "insert into per_object_know (id,know_id,object_id,knowNum,plan_id)");
            sql.append("select po.id,pm.know_id,po.object_id,count(pm.know_id) knowNum,"
                    + this.planid);
            sql.append(" from per_mainbody pm,per_object po ");
            sql.append(" where pm.object_id=po.object_id and  po.plan_id="
                    + this.planid + " and  pm.plan_id=" + this.planid);
            sql.append(" and pm.know_id is not null");
            sql.append(" group by po.id, po.object_id,pm.know_id ");
            sql.append(" order by po.object_id");
            dao.update(sql.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    // 填写 考核主体对考核对象总体评价统计表
    public void insertObjectVoteData() {

        ContentDAO dao = new ContentDAO(this.conn);
        try {
            isTable(2);
            StringBuffer sql = new StringBuffer(
                    "insert into per_object_vote (id,whole_grade_id,object_id,vote,plan_id)");
            sql.append("select po.id,pm.whole_grade_id,po.object_id,count(pm.whole_grade_id) whole_grade_id,"
                    + this.planid);
            sql.append(" from per_mainbody pm,per_object po ");
            sql.append(" where pm.object_id=po.object_id and  po.plan_id="
                    + this.planid);
            if (this.compute_flag != 4) {
                sql.append(" and (pm.status=2  or pm.status=3) ");
            }
            if (this.batchComput != null
                    && this.batchComput.trim().length() > 0
                    && "True".equalsIgnoreCase(this.batchComput)) {
                sql.append(" and (pm.status=2  or pm.status=3 or pm.mainbody_id='"
                        + this.presentMainbody_id + "' ) ");
            }
            sql.append(" and  pm.plan_id=" + this.planid);
            sql.append(" and pm.whole_grade_id is not null");
            sql.append(" group by po.id, po.object_id,pm.whole_grade_id ");
            sql.append(" order by po.object_id");
            dao.update(sql.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //填写考核对象的总体评价得分到per_result_XXX表的whole_score字段
    public void insertObjectScoreData(HashMap ruleMap) {
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            DbWizard dbWizard = new DbWizard(this.conn);
            if (!dbWizard.isExistField("per_result_" + this.planid, "whole_score",
                    false)) {
                Table table = new Table("per_result_" + this.planid);
                table.addField(getField("whole_score", "N", 12, false));
                dbWizard.addColumns(table);
            }
            String UseWeight = (String) ruleMap.get("UseWeight");
            int KeepDecimal = Integer.parseInt((String) ruleMap
                    .get("KeepDecimal")); // 保留小数位
            ArrayList dynaBodyrankList = getDynaBodyrank(); // 取得考核主体动态权重
            ArrayList bodyRankList = getPerPlanBody(); // 取得考核主体权重
            StringBuffer sql = new StringBuffer("");
            StringBuffer sqlStr = new StringBuffer("");
            sql.append(" update per_result_" + this.planid + " set whole_score=? where object_id=?");
            ArrayList scoreList = new ArrayList();
            RowSet rs = null;
            ResultSet resultSet = null;
            ResultSet rowSet = null;
            if (UseWeight != null && "true".equalsIgnoreCase(UseWeight)) // 使用权重
            {  //2013.11.14 pjf begin
                StringBuffer strTemp = new StringBuffer("");
                HashMap bodyRank = new HashMap(); // 取得考核对象对应的主体权重
                strTemp.append(" select p.b0110,p.e0122,p.e01a1,p.body_id objBody_id,p.object_id from per_object p where plan_id=" + this.planid);
                rowSet = dao.search(strTemp.toString());
                while (rowSet.next()) {
                    String object_id = rowSet.getString("object_id");
                    String b0110 = rowSet.getString("b0110");
                    String e0122 = rowSet.getString("e0122");
                    String e01a1 = rowSet.getString("e01a1");
                    String objBody_id = rowSet.getString("objBody_id");
                    bodyRank = getBodyRank(b0110, e0122, e01a1, objBody_id,
                            object_id, dynaBodyrankList, bodyRankList);
                    String whole_score = "";
                    float tempScore = 0;
                    float sum = 0;
                    sqlStr.setLength(0);
                    sqlStr.append("select body_id,avg(whole_score) whole_score from per_mainbody where plan_id=" + this.planid + " and object_id='" + object_id + "' group by body_id ");
                    rs = dao.search(sqlStr.toString());
                    while (rs.next()) {
                        String body_id = rs.getString("body_id");
                        if (rs.getString("whole_score") != null) {
                            tempScore = rs.getFloat("whole_score");
                        }
                        if (body_id != null && bodyRank.get(body_id) != null) {
                            String rank = (String) bodyRank.get(body_id);
                            sum = sum + tempScore * Float.parseFloat(rank);
                        }
                    }
                    whole_score = String.valueOf(sum);
                    whole_score = PubFunc.round(whole_score, KeepDecimal);
                    ArrayList tempList = new ArrayList();
                    tempList.add(whole_score);
                    tempList.add(object_id);
                    scoreList.add(tempList);
                }
            } else {  //不适用权重
                sqlStr.append("select object_id,sum(" + Sql_switcher.isnull("whole_score", String.valueOf(0)) + ")  as score from  per_mainbody  where status=2 and plan_id="
                        + this.planid + " group by object_id ");
                rs = dao.search(sqlStr.toString());
                while (rs.next()) {
                    String score = String.valueOf((float) rs.getFloat("score"));
                    String object_id = (String) rs.getString("object_id");
                    if (!(UseWeight != null && "true".equalsIgnoreCase(UseWeight))) {
                        resultSet = dao.search("select count(mainbody_id) as maincount from per_mainbody where plan_id="
                                + this.planid + " and object_id='" + object_id + "' ");
                        while (resultSet.next()) {
                            String maincount = resultSet.getString("maincount");
                            if (maincount != null && Integer.parseInt(maincount) > 0) {
                                score = String.valueOf(rs.getFloat("score") / Integer.parseInt(maincount));
                            }
                        }
                    }
                    score = PubFunc.round(score, KeepDecimal);
                    ArrayList tempList = new ArrayList();
                    tempList.add(score);
                    tempList.add(object_id);
                    scoreList.add(tempList);
                }
            }  // 2013.11.14 pjf end
            if (scoreList.size() > 0) {
                dao.batchUpdate(sql.toString(), scoreList);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 判断是否存在 考核主体对考核对象了解程序统计表/考核主体对考核对象总体评价统计表
     *
     * @param flag 1: 考核主体对考核对象了解程序统计表 2: 考核主体对考核对象总体评价统计表
     */
    public void isTable(int flag) {

        DbWizard dbWizard = new DbWizard(this.conn);
        ContentDAO dao = new ContentDAO(this.conn);
        String tablename = "";
        if (flag == 1) {
            tablename = "per_object_know";
        } else if (flag == 2) {
            tablename = "per_object_vote";
        }
        try {
            if (!dbWizard.isExistTable(tablename, false)) {
                Table table = new Table(tablename);
                table.addField(getField("id", "I", 10, false));
                if (flag == 1) {
                    table.addField(getField("know_id", "I", 10, false));
                } else if (flag == 2) {
                    table.addField(getField("whole_grade_id", "I", 10, false));
                }
                table.addField(getField("object_id", "A", 30, false));
                if (flag == 1) {
                    table.addField(getField("knowNum", "I", 10, false));
                } else if (flag == 2) {
                    table.addField(getField("vote", "I", 10, false));
                }
                table.addField(getField("plan_id", "I", 10, false));
                dbWizard.createTable(table);
            } else {
                dao.delete("delete from " + tablename + " where plan_id="
                        + this.planid, new ArrayList());
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * 填写 对象的主体选票统计表 数据
     */
    public void insertBodyVoteData() {

        ContentDAO dao = new ContentDAO(this.conn);
        String tabname = "per_bodyVote_" + this.planid;
        try {
            createPerBodyVoteTable();
            ArrayList resultList = getMainBodyNumResult("", "");
            HashMap obj_body_num = (HashMap) resultList.get(0); // 考核对象＿类别＿票数 结果
            HashMap obj_grade = (HashMap) resultList.get(1); // 考核对象＿等级 结果
            HashMap obj_body_grade = (HashMap) resultList.get(2); // 考核对象＿类别＿等级
            // 结果
            ArrayList objectList = getObjectList("", "");
            StringBuffer sql = new StringBuffer("insert into " + tabname
                    + "(id,a0000,b0110,e0122,e01a1,object_id,a0101");
            StringBuffer subSql = new StringBuffer(" values (?,?,?,?,?,?,?");

            ArrayList list = new ArrayList();
            ArrayList tempList = null;
            for (int i = 0; i < objectList.size(); i++) {
                tempList = new ArrayList();
                LazyDynaBean objectBean = (LazyDynaBean) objectList.get(i);
                String a0101 = (String) objectBean.get("a0101");
                String object_id = (String) objectBean.get("object_id");
                String b0110 = (String) objectBean.get("b0110");
                String e0122 = (String) objectBean.get("e0122");
                String e01a1 = (String) objectBean.get("e01a1");
                String a0000 = (String) objectBean.get("a0000");
                tempList.add(new Integer((i + 1)));
                tempList.add(new Integer(a0000));
                tempList.add(b0110);
                tempList.add(e0122);
                tempList.add(e01a1);
                tempList.add(object_id);
                tempList.add(a0101);
                for (int j = 0; j < mainbodySetList.size(); j++) {
                    LazyDynaBean bodyBean = (LazyDynaBean) mainbodySetList
                            .get(j);
                    String body_id = (String) bodyBean.get("body_id");
                    if ("-1".equals(body_id)) {
                        body_id = "X1";
                    }
                    for (int e = 0; e < this.perGradeTemplateList.size(); e++) {
                        LazyDynaBean abean = (LazyDynaBean) perGradeTemplateList
                                .get(e);
                        String grade_template_id = (String) abean
                                .get("grade_template_id");
                        String value = (String) obj_body_grade.get(object_id
                                + "_" + body_id + "_" + grade_template_id);
                        if (value != null) {
                            tempList.add(new Integer(value));
                        } else {
                            tempList.add(new Integer(0));
                        }
                        if (i == 0) {
                            sql.append(",B_B" + body_id + "_G"
                                    + grade_template_id);
                            subSql.append(",?");
                        }

                    }
                    // 票数
                    String value = (String) obj_body_num.get(object_id + "_"
                            + body_id);
                    if (value != null) {
                        tempList.add(new Integer(value));
                    } else {
                        tempList.add(new Integer(0));
                    }

                    if (i == 0) {
                        sql.append(",V_" + body_id);
                        subSql.append(",?");
                    }
                }

                for (int e = 0; e < this.perGradeTemplateList.size(); e++) {
                    LazyDynaBean abean = (LazyDynaBean) perGradeTemplateList
                            .get(e);
                    String grade_template_id = (String) abean
                            .get("grade_template_id");
                    String value = (String) obj_grade.get(object_id + "_"
                            + grade_template_id);
                    if (value != null) {
                        tempList.add(new Float(value));
                    } else {
                        tempList.add(new Float(0));
                    }

                    if (i == 0) {
                        sql.append(",S_" + grade_template_id);
                        subSql.append(",?");
                    }

                }
                // 票数
                String value = (String) obj_body_num.get(object_id + "_-10");
                if (value != null) {
                    tempList.add(new Integer(value));
                } else {
                    tempList.add(new Integer(0));
                }

                if (i == 0) {
                    sql.append(",VoteNum");
                    subSql.append(",?");
                }
                list.add(tempList);
            }
            sql.append(")");
            sql.append(subSql.toString());
            sql.append(")");
            dao.batchInsert(sql.toString(), list);

            // 按主体类别权重重新计算S_等级的值
            String sqlStr = "select body_id,voterank from  per_plan_body where plan_id="
                    + this.planid;
            RowSet rs = dao.search(sqlStr);
            HashMap map = new HashMap();

            LoadXml parameter_content = new LoadXml(this.conn, this.planid);
            Hashtable params = parameter_content.getDegreeWhole();
            // String voteScoreDecimal = (String)
            // params.get("voteScoreDecimal");// 总分精度
            String voteDecimal = (String) params.get("voteDecimal");// 权重精度

            ArrayList updateSql = new ArrayList();
            while (rs.next()) {
                String body_id = rs.getString("body_id");
                String voterank = rs.getString("voterank");
                voterank = voterank == null || voterank.length() == 0 ? "1"
                        : PubFunc
                        .round(voterank, Integer.parseInt(voteDecimal));
                map.put(body_id, voterank);
            }

            PersonPostModalBo ppo = new PersonPostModalBo(this.conn);
            String per_comTable = "per_grade_template"; // 绩效标准标度
            if (ppo.getComOrPer(this.template_id, "temp")) {
                per_comTable = "per_grade_competence"; // 能力素质标准标度
            }
            sqlStr = "select grade_template_id,gradedesc from " + per_comTable
                    + "";
            rs = dao.search(sqlStr);
            while (rs.next()) {
                StringBuffer buf = new StringBuffer();
                buf.append("update PER_BODYVOTE_" + planid + " set S_");

                LazyDynaBean abean = new LazyDynaBean();
                String grade_template_id = rs.getString("grade_template_id");
                buf.append(grade_template_id + "=0");

                Set set = map.keySet();
                for (Iterator iter = set.iterator(); iter.hasNext(); ) {
                    String body_id = (String) iter.next();
                    String _body_id = body_id;
                    if ("-1".equals(body_id)) {
                        _body_id = "X1";
                    }
                    String col = "B_B" + _body_id + "_G" + grade_template_id;
                    buf.append("+" + Sql_switcher.isnull(col, "0") + "*"
                            + (String) map.get(body_id));
                }

                updateSql.add(buf.toString());
            }

            for (int j = 0; j < updateSql.size(); j++) {
                String str = (String) updateSql.get(j);
                // System.out.println(str);
                dao.update(str);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 创建 对象的主体选票统计表
     */
    public void createPerBodyVoteTable() {

        DbWizard dbWizard = new DbWizard(this.conn);
        String tablname = "per_bodyVote_" + this.planid;
        try {
            if (dbWizard.isExistTable(tablname, false)) {
                dbWizard.dropTable(tablname);
            }
            Table table = new Table(tablname);
            table.addField(getField("id", "I", 10, false));
            table.addField(getField("A0000", "I", 10, false));
            table.addField(getField("B0110", "A", 30, false));
            table.addField(getField("E0122", "A", 30, false));
            table.addField(getField("E01A1", "A", 30, false));
            table.addField(getField("object_id", "A", 30, false));
            table.addField(getField("A0101", "A", 100, false));

            LazyDynaBean abean = null;
            LazyDynaBean a_bean = null;
            for (int i = 0; i < mainbodySetList.size(); i++) {
                abean = (LazyDynaBean) mainbodySetList.get(i);
                String body_id = (String) abean.get("body_id");
                if ("-1".equals(body_id)) {
                    body_id = "X1";
                }
                String name = (String) abean.get("name");
                for (int j = 0; j < perGradeTemplateList.size(); j++) {
                    a_bean = (LazyDynaBean) this.perGradeTemplateList.get(j);
                    String grade_template_id = (String) a_bean
                            .get("grade_template_id");
                    table.addField(getField("B_B" + body_id + "_G"
                            + grade_template_id, "I", 10, false));
                }
                table.addField(getField("V_" + body_id, "I", 10, false));
            }
            for (int j = 0; j < perGradeTemplateList.size(); j++) {
                a_bean = (LazyDynaBean) this.perGradeTemplateList.get(j);
                String grade_template_id = (String) a_bean
                        .get("grade_template_id");
                table.addField(getField("S_" + grade_template_id, "N", 12,
                        false));
            }
            table.addField(getField("VoteNum", "I", 10, false));
            dbWizard.createTable(table);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * 按公式计算等级
     *
     * @param gradeFormula
     */
    public void computeGrade(String gradeFormula, String gradeID) {
        try {
            String userPriv = getPrivWhere(userView);
            if (this.code != null && this.code.trim().length() > 0
                    && !"-1".equals(this.code)) {
                if (AdminCode.getCodeName("UN", this.code) != null
                        && AdminCode.getCodeName("UN", this.code).length() > 0) {
                    userPriv += " and b0110 like '" + this.code + "%'";
                } else if (AdminCode.getCodeName("UM", this.code) != null
                        && AdminCode.getCodeName("UM", this.code).length() > 0) {
                    userPriv += " and e0122 like '" + this.code + "%'";
                }
            }
            ContentDAO dao = new ContentDAO(this.conn);
            YksjParser yp = new YksjParser(this.userView, getSelectList(
                    this.planid, 2), YksjParser.forNormal, YksjParser.STRVALUE,
                    YksjParser.forPerson, "Ht", "");
            // String formula = gradeFormula.split("\\:")[1];
            String formula = gradeFormula.substring(2);
            if (formula.indexOf("执行存储过程") != -1) {
                formula = formula.replaceAll("计划号", this.planid);
            }
            yp.setVerify(false);
            yp.run(formula, this.conn, "", "per_result_" + planid);
            if (formula.indexOf("执行存储过程") != -1) {
                return;
            }

            StringBuffer buf = new StringBuffer();
            buf.append("update per_result_" + planid + " set resultdesc=("
                    + yp.getSQL() + ") where 1=1 ");
            if (userPriv != null && userPriv.trim().length() > 0) {
                buf.append(userPriv);
            }
            dao.update(buf.toString());

            buf.setLength(0);
            buf.append("update per_result_" + this.planid
                    + " set grade_id=null  where 1=1 ");
            if (userPriv != null && userPriv.trim().length() > 0) {
                buf.append(userPriv);
            }
            dao.update(buf.toString());
            buf.setLength(0);
            buf.append("update per_result_"
                    + this.planid
                    + " set grade_id=(select id from per_degreedesc where degree_id="
                    + gradeID + " and itemname=resultdesc)");
            if (userPriv != null && userPriv.trim().length() > 0) {
                buf.append(" where 1=1 " + userPriv);
            }
            dao.update(buf.toString());

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 写入考核等级数据
     *
     * @param gradeID  等级分类ID
     * @param operFlag 1.完全计算 2.不计算指标和个性化项目 3.指标、项目 、总分都不计算 2和3评分调整用
     * @throws GeneralException
     */
    public void setGradeValue(String gradeID, int operFlag)
            throws GeneralException {

        ContentDAO dao = new ContentDAO(this.conn);
        String userPriv = getPrivWhere(userView);//此处的权限是本人操作范围内人员，而打分权限是主体所有对象都可以打分
        if (this.code != null && this.code.trim().length() > 0
                && !"-1".equals(this.code)) {
            if (AdminCode.getCodeName("UN", this.code) != null
                    && AdminCode.getCodeName("UN", this.code).length() > 0) {
                userPriv += " and b0110 like '" + this.code + "%'";
            } else if (AdminCode.getCodeName("UM", this.code) != null
                    && AdminCode.getCodeName("UM", this.code).length() > 0) {
                userPriv += " and e0122 like '" + this.code + "%'";
            }
        }
        try {
            Hashtable paramters = loadxml.getDegreeWhole();
            String deviationScoreUsed = (String) paramters.get("deviationScoreUsed");//是否使用纠偏总分 0不是  1是
            String xiFormula = (String) this.planParamSet.get("xiFormula");
            String GradeFormula = (String) this.planParamSet
                    .get("GradeFormula");
            RowSet rowSet = null;

            // 如果计划未设置等级则把结果表的等级、等级系数、等级编号全部置空 JinChunhai 2012.05.18
            if ("-1".equalsIgnoreCase(gradeID)
                    && (GradeFormula == null
                    || GradeFormula.trim().length() <= 0 || (GradeFormula
                    .substring(2)).trim().length() <= 0)) {
                dao.update("update per_result_" + this.planid
                        + " set exX_object=null,resultdesc=null,grade_id=null ");
                return;
            }

            if (GradeFormula == null || GradeFormula.trim().length() == 0
                    || "0".equals(GradeFormula.substring(0, 1))
                    || "3".equals(GradeFormula.substring(0, 1)))// 默认 或者 先默认再公式
            {
                String total_score = "score";
                if ("1".equals(deviationScoreUsed)) {
                    total_score = "reviseScore";
                }
                ArrayList objList = new ArrayList();
                String sql = "select object_id,"
                        + Sql_switcher.isnull("" + total_score + "", "0")
                        + " score from per_result_" + this.planid;
                if (this.priv_where != null && this.priv_where.trim().length() > 0)//直接调用设置好的权限，不用再新增权限
                {
                    sql += " where 1=1 " + this.priv_where;
                }
//				sql += " order by " + Sql_switcher.isnull("score", "0")
//						+ " desc";
                sql += " order by score desc ";

                rowSet = dao.search(sql);
                LazyDynaBean abean = new LazyDynaBean();
                while (rowSet.next()) {
                    abean = new LazyDynaBean();
                    abean.set("object_id", rowSet.getString("object_id"));
                    abean.set("score", rowSet.getString("score"));
                    objList.add(abean);
                }

                int flag = 0;
                int domainflag = 0;
                rowSet = dao.search("select * from per_degree where degree_id="
                        + gradeID);
                if (rowSet.next()) {
                    flag = rowSet.getInt("flag");
                    domainflag = rowSet.getInt("domainflag");// 0:上限封闭 1:下限封闭
                }

                String order_str = "";
                if (flag == 2 || flag == 3 || flag == 4 || flag == 5) {
                    order_str = " order by id asc"; // +Sql_switcher.isnull("topscore","0")+" desc";
                    if (domainflag == 1) // 1:下限封闭
                    {
                        order_str = " order by id desc "; // +Sql_switcher.isnull("topscore","0")+" asc";
                    }

                } else {
                    order_str = "order by xishu desc ";
                }

                rowSet = dao.search("select id,itemname,"
                        + Sql_switcher.isnull("topscore", "0") + " topscore,"
                        + Sql_switcher.isnull("bottomscore", "0")
                        + " bottomscore,"
                        + Sql_switcher.isnull("percentvalue", "0")
                        + " percentvalue," + Sql_switcher.isnull("strict", "0")
                        + " strict," + Sql_switcher.isnull("xishu", "0")
                        + " xishu from per_degreedesc  where degree_id="
                        + gradeID + "  " + order_str);
                String _strict = "";
                ArrayList gradeList = new ArrayList();
                while (rowSet.next()) {
                    String id = rowSet.getString("id");
                    String itemname = rowSet.getString("itemname");
                    String percentvalue = rowSet.getString("percentvalue");
                    String strict = rowSet.getString("strict");
                    String xishu = rowSet.getString("xishu");
                    String topscore = rowSet.getString("topscore");
                    String bottomscore = rowSet.getString("bottomscore");
                    abean = new LazyDynaBean();
                    if (strict.length() > 0 && !"0".equals(strict)) {
                        _strict = strict;
                    }
                    abean.set("id", id);
                    abean.set("itemname", itemname);
                    abean.set("percentvalue", percentvalue);
                    abean.set("strict", strict);
                    abean.set("xishu", xishu);
                    abean.set("topscore", topscore);
                    abean.set("bottomscore", bottomscore);
                    abean.set("num", PubFunc.multiple(String.valueOf((Double
                            .parseDouble(percentvalue) * 0.01)), String
                            .valueOf(objList.size()), 0));
                    gradeList.add(abean);
                }
                /****************************等级的计算************************************/
                if (flag == 0) // 分数
                {
                    computeScoreDegree(domainflag, gradeID, objList, xiFormula);
                } else if (flag == 1) // 比例
                {
                    computePercentDegree(gradeID, objList, xiFormula,
                            gradeList, _strict);
                } else if (flag == 2) // 混合，先算分值
                {
                    computeMixDegree2(gradeID, objList, xiFormula, domainflag,
                            _strict, gradeList);
                } else if (flag == 3) // 混合，先算比例
                {
                    computeMixDegree(gradeID, objList, xiFormula, domainflag,
                            _strict, gradeList);
                } else if (flag == 4 || flag == 5) // 4:匹配度 5总分
                {
                    computeCompetencyDegree(domainflag, gradeID, objList, flag);

                    // 把匹配度为空的考核对象的等级也置为空
                    if (flag == 4) {
                        dao.update("update per_result_"
                                + this.planid
                                + " set resultdesc='' where mateSurmise is null ");
                    }
                }

                // 付给score为0的等级为最小等级
                rowSet = dao.search("select id,itemname,"
                        + Sql_switcher.isnull("xishu", "0")
                        + " xishu from per_degreedesc  where degree_id="
                        + gradeID + "  order by xishu asc,id desc");
                if (rowSet.next()) {
                    dao.update("update per_result_" + this.planid
                            + " set exX_object=" + rowSet.getDouble("xishu")
                            + ",resultdesc='" + rowSet.getString("itemname")
                            + "',grade_id=" + rowSet.getInt("id")
                            + " where score=0");
                }
                // 计划的等级分类设置了高级
                if (operFlag == 1 || operFlag == 4) {
                    updateGradeValueByHighSet(gradeID, objList, xiFormula);
                } else if ((operFlag == 2 || operFlag == 3)
                        && "2".equals(this.scoreAjustOper))// 提交评分调整时候
                // 做强制分布规则的验证 不做强制分布
                // 保存调整的时候不做高级验证
                {
                    String testResult = this.testGradeValueByHighSet(gradeID);
                    if (!"success".equalsIgnoreCase(testResult)) {
                        throw new GeneralException(testResult);
                    }
                }
            }
            if (GradeFormula != null
                    && GradeFormula.trim().length() > 0
                    && ("2".equals(GradeFormula.substring(0, 1)) || "3".equals(GradeFormula
                    .substring(0, 1))))// 公式或者先默认再公式的情况
            {
                computeGrade(GradeFormula, gradeID);
            } else if (GradeFormula != null && GradeFormula.trim().length() > 0
                    && "1".equals(GradeFormula.substring(0, 1)))// 存储过程计算等级
            {

                ArrayList param_list = new ArrayList();
                LazyDynaBean bean = new LazyDynaBean();
                bean.set("value", GradeFormula.split(";").length > 1 ? GradeFormula.split(";")[1] : "");
                param_list.add(bean);
                bean = new LazyDynaBean();
                bean.set("type", "A");
                bean.set("value", "per_result_" + this.planid);//评估结果表
                param_list.add(bean);
                bean = new LazyDynaBean();
                bean.set("type", "A");
                bean.set("value", (String) this.planParamSet.get("GradeClass"));//等级分类号
                param_list.add(bean);
                bean = new LazyDynaBean();
                bean.set("type", "A");
                bean.set("value", "");//考核对象范围，目前先为空
                param_list.add(bean);
                bean = new LazyDynaBean();
                bean.set("type", "A");
                bean.set("value", this.planid);//计划号
                param_list.add(bean);

                String pro_name = "";  //存储过程名
                LazyDynaBean _bean = (LazyDynaBean) param_list.get(0);
                pro_name = ((String) _bean.get("value")).toUpperCase();

                String validateSql1 = "";
                String validateSql2 = "";
                String validateSql3 = "";
                switch (Sql_switcher.searchDbServer()) {
                    case 1: // MSSQL
                        validateSql1 = "select   count(*)  from   sysobjects   where   ID in (SELECT id FROM sysobjects as a WHERE OBJECTPROPERTY(id, N'IsProcedure') = 1 and ";
                        validateSql1 += " id = object_id(N'[dbo].[" + pro_name + "]'))";
                        validateSql2 = "select count(*) b from syscolumns where ID in (SELECT id FROM sysobjects as a WHERE OBJECTPROPERTY(id, N'IsProcedure') = 1 and ";
                        validateSql2 += " id = object_id(N'[dbo].[" + pro_name + "]'))";
                        validateSql3 = "select * from syscolumns where ID in (SELECT id FROM sysobjects as a WHERE OBJECTPROPERTY(id, N'IsProcedure') = 1 and ";
                        validateSql3 += " id = object_id(N'[dbo].[" + pro_name + "]')) order by colorder ";
                        break;
                    case 2:// oracle
                        validateSql1 = "SELECT count(*) FROM all_objects WHERE object_type='PROCEDURE' AND object_name='" + pro_name + "'";
                        validateSql2 = "select count(*) b from user_arguments where object_name = '" + pro_name + "'";
                        validateSql3 = "select argument_name, PLS_TYPE from user_arguments  where object_name = '" + pro_name + "' order by position";
                        break;
                }

                //判断有无存储过程名
                int nn = 0;
                rowSet = dao.search(validateSql1);
                if (rowSet.next()) {
                    nn = rowSet.getInt(1);
                }
                if (nn == 0) {
                    throw GeneralExceptionHandler.Handle(new Exception("没有" + pro_name + "存储过程！"));
                }
                //判断存储过程参数个数
                nn = 0;
                rowSet = dao.search(validateSql2);
                if (rowSet.next()) {
                    nn = rowSet.getInt(1);
                }
                if (nn > param_list.size() - 1) {
                    throw GeneralExceptionHandler.Handle(new Exception(pro_name + "存储过程参数个数不许多于四个！"));
                }
                if (nn < 2) {
                    throw GeneralExceptionHandler.Handle(new Exception(pro_name + "存储过程参数个数不许少于两个！"));
                }
                StringBuffer sqlCall = new StringBuffer("{call  " + pro_name);
                nn = 0;
                rowSet = dao.search(validateSql3);
                StringBuffer buf_str = new StringBuffer("");
                while (rowSet.next()) {
                    nn++;
                    String type = "A";
                    if (Sql_switcher.searchDbServer() == 1)//MSSQL
                    {
                        int xtype = rowSet.getInt("xtype");
                        if (xtype == 61) {
                            type = "D";
                        }
                        if (xtype == 48 || xtype == 52 || xtype == 56 || xtype == 127) {
                            type = "I";
                        }
                        if (xtype == 62 || xtype == 106 || xtype == 108) {
                            type = "N";
                        }
                    } else {
                        String PLS_TYPE = rowSet.getString("PLS_TYPE");
                        if ("NUMBER".equalsIgnoreCase(PLS_TYPE) || "FLOAT".equalsIgnoreCase(PLS_TYPE)) {
                            type = "N";
                        }
                        if ("DATE".equalsIgnoreCase(PLS_TYPE)) {
                            type = "D";
                        }
                        if ("INTEGER".equalsIgnoreCase(PLS_TYPE)) {
                            type = "I";
                        }
                    }

                    _bean = (LazyDynaBean) param_list.get(nn);
                    String _type = (String) _bean.get("type");
                    String _value = (String) _bean.get("value");


                    if (!"A".equals(type) && "A".equalsIgnoreCase(_type)) {
                        throw GeneralExceptionHandler.Handle(new Exception(_value + "参数类型不对,请修改存储过程中对应的参数类别！"));
                    }
                    if (!"N".equals(type) && "N".equalsIgnoreCase(_type)) {
                        throw GeneralExceptionHandler.Handle(new Exception(_value + "参数类型不对,请修改存储过程中对应的参数类别！"));
                    }
                    if (!"D".equals(type) && "D".equalsIgnoreCase(_type)) {
                        throw GeneralExceptionHandler.Handle(new Exception(_value + "参数类型不对,请修改存储过程中对应的参数类别！"));
                    }
                    if (!"I".equals(type) && "I".equalsIgnoreCase(_type)) {
                        throw GeneralExceptionHandler.Handle(new Exception(_value + "参数类型不对,请修改存储过程中对应的参数类别！"));
                    }
                    buf_str.append(",?");
                }

                if (nn > 0) {
                    sqlCall.append("(" + buf_str.substring(1) + ")");
                }
                sqlCall.append("}");


                CallableStatement cstmt = null; // 存储过程
                cstmt = this.conn.prepareCall(sqlCall.toString());
                nn++;
                for (int i = 1; i < nn; i++)//此处用nn  比参数个数多1   zhaoxg add
                {
                    _bean = (LazyDynaBean) param_list.get(i);
                    String type = (String) _bean.get("type");
                    String value = (String) _bean.get("value");
                    if ("A".equals(type)) {
                        cstmt.setString(i, value);
                    }
                    if ("N".equals(type)) {
                        cstmt.setFloat(i, Float.parseFloat(value));
                    }
                    if ("D".equals(type)) {
                        String[] tmp = StringUtils.split(value, ".");
                        Calendar d = Calendar.getInstance();
                        d.set(Calendar.YEAR, Integer.parseInt(tmp[0]));
                        d.set(Calendar.MONTH, Integer.parseInt(tmp[1]) - 1);
                        d.set(Calendar.DATE, Integer.parseInt(tmp[2]));
                        java.sql.Date sql_d = new java.sql.Date(d.getTimeInMillis());
                        cstmt.setDate(i, sql_d);
                    }
                    if ("I".equals(type)) {
                        cstmt.setInt(i, Integer.parseInt(value));
                    }
                }
                cstmt.execute();

                if (cstmt != null) {
                    cstmt.close();
                }
            }
            /******************************等级系数的计算******************************************/
            if (xiFormula != null && xiFormula.trim().length() > 0) {

                Table table = new Table("per_result_" + planid);
                DbWizard dbWizard = new DbWizard(this.conn);
                DBMetaModel dbmodel = new DBMetaModel(this.conn);
                if (!dbWizard.isExistField("per_result_" + planid, "A0100",
                        false)) {
                    Field obj = new Field("A0100");
                    obj.setDatatype(DataType.STRING);
                    obj.setLength(8);
                    obj.setKeyable(false);
                    table.addField(obj);
                    dbWizard.addColumns(table);// 更新列
                    dbmodel.reloadTableModel("per_plan");
                }
                String sqlstr = "update per_result_" + planid
                        + " set a0100=object_id ";
                try {
                    dao.update(sqlstr);
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                YksjParser yp = new YksjParser(this.userView, getSelectList(
                        this.planid, 2), YksjParser.forNormal,
                        YksjParser.FLOAT, YksjParser.forPerson, "Ht", "");
                // xiFormula = xiFormula.trim().replaceAll("\\[", "");
                // xiFormula = xiFormula.replaceAll("\\]", "");

                yp.run(xiFormula, this.conn, "", "per_result_" + planid);
                StringBuffer buf = new StringBuffer();
                String sql = yp.getSQL();
                if ("1".equals(deviationScoreUsed)) {//按纠偏总分 等级系数若涉及到总分则使用纠偏总分计算
                    sql = sql.replace(Sql_switcher.isnull("score", "0"), Sql_switcher.isnull("reviseScore", "0"));
                }
                buf.append("update per_result_" + planid + " set exX_object=("
                        + sql + ") where 1=1 ");
                if (this.priv_where != null && this.priv_where.trim().length() > 0)//直接调用设置好的权限，不用再新增权限
                {
                    buf.append(this.priv_where);
                }
                dao.update(buf.toString());
                if (!dbWizard.isExistField("per_result_" + planid, "A0100",
                        false)) {
                    Field obj = new Field("A0100");
                    obj.setDatatype(DataType.STRING);
                    obj.setLength(8);
                    obj.setKeyable(false);
                    table.addField(obj);
                    dbWizard.dropColumns(table);// 更新列
                    dbmodel.reloadTableModel("per_plan");
                }

            }

            if (rowSet != null) {
                rowSet.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
            throw GeneralExceptionHandler.Handle(e);
        }
    }

    /**
     * 根据等级分类中的高级设置情况检验当前等级分布情况是否满足
     */
    public String testGradeValueByHighSet(String gradeID) {
        String userPriv = getPrivWhere(userView);
        if (this.code != null && this.code.trim().length() > 0
                && !"-1".equals(this.code)) {
            if (AdminCode.getCodeName("UN", this.code) != null
                    && AdminCode.getCodeName("UN", this.code).length() > 0) {
                userPriv += " and b0110 like '" + this.code + "%'";
            } else if (AdminCode.getCodeName("UM", this.code) != null
                    && AdminCode.getCodeName("UM", this.code).length() > 0) {
                userPriv += " and e0122 like '" + this.code + "%'";
            }
        }
        StringBuffer resultBuf = new StringBuffer("success");
        PerDegreeBo bo = new PerDegreeBo(this.conn, gradeID, this.planid);
        ArrayList degreeHighSet = bo.getDegreeHighSetList(true);// 评分调整
        // 测试强制分布规则的时候
        // 忽略启用
        if (degreeHighSet.size() == 0) {
            return resultBuf.toString();
        }

        ContentDAO dao = new ContentDAO(this.conn);
        RowSet rs1 = null;
        RowSet rs2 = null;
        String orderbyStr = "";// 排序语句 用来确定等级项目的等级高低顺序
        StringBuffer buf = new StringBuffer();
        ArrayList gradeList = new ArrayList();
        HashMap e0122EmpMap = new HashMap(); // 分组指标的考核对象数
        HashMap degreeItemMap = new HashMap();
        int khObjCount = 0;// 登录用户范围内的考核对象数
        try {
            // 以下代码得到由高到低排序的等级项目
            int flag = 0;
            rs1 = dao.search("select * from per_degree where degree_id="
                    + gradeID);
            if (rs1.next()) {
                flag = rs1.getInt("flag");
            }
            if (flag == 0) // 分数
            {
                orderbyStr = " order by "
                        + Sql_switcher.isnull("topscore", "0") + " desc,id";
            } else if (flag == 1) // 比例
            {
                orderbyStr = " order by " + Sql_switcher.isnull("xishu", "0")
                        + " desc,id";
            } else if (flag == 2) // 混合，先算分值
            {
                orderbyStr = " order by id";
            } else if (flag == 3) // 混合，先算比例
            {
                orderbyStr = " order by id";
            }

            buf.setLength(0);
            buf.append("select id,itemname,"
                    + Sql_switcher.isnull("topscore", "0") + " topscore,"
                    + Sql_switcher.isnull("bottomscore", "0") + " bottomscore,"
                    + Sql_switcher.isnull("xishu", "0")
                    + " xishu from per_degreedesc ");
            buf.append(" where degree_id=" + gradeID);
            buf.append(orderbyStr);
            rs1 = dao.search(buf.toString());
            while (rs1.next()) {
                String id = rs1.getString("id");
                String itemname = rs1.getString("itemname");
                String xishu = rs1.getString("xishu");
                String topscore = rs1.getString("topscore");
                String bottomscore = rs1.getString("bottomscore");
                LazyDynaBean abean = new LazyDynaBean();
                abean.set("id", id);
                abean.set("itemname", itemname);
                abean.set("xishu", xishu);
                abean.set("topscore", topscore);
                abean.set("bottomscore", bottomscore);
                gradeList.add(abean);
            }
            // 以上代码得到由高到低排序的等级项目

            /*
             * //以下代码根据高级设置的规则对考核对象做强制分布操作 buf.setLength(0);
             * buf.append("select e0122,count(*) from per_result_" + this.planid
             * +" where 1=1 "); if(userPriv!=null&&userPriv.trim().length()>0)
             * buf.append(userPriv); buf.append(" group by e0122");
             * rs1=dao.search(buf.toString()); while(rs1.next()) { String e0122
             * = rs1.getString(1); e0122EmpMap.put(e0122, rs1.getString(2)); }
             */

            buf.setLength(0);
            buf.append("select count(*) from per_result_" + this.planid
                    + " where 1=1 ");
            if (userPriv != null && userPriv.trim().length() > 0) {
                buf.append(userPriv);
            }
            rs1 = dao.search(buf.toString());
            if (rs1.next()) {
                khObjCount = rs1.getInt(1);
            }

            buf.setLength(0);
            buf.append("select id,itemname from per_degreedesc where degree_id="
                    + gradeID);
            rs1 = dao.search(buf.toString());
            while (rs1.next()) {
                String itemname = rs1.getString(2) == null ? "" : rs1
                        .getString(2);
                degreeItemMap.put(rs1.getString(1), itemname);
            }

            for (int i = 0; i < degreeHighSet.size(); i++) {
                LazyDynaBean abean = (LazyDynaBean) degreeHighSet.get(i);
                String mode = (String) abean.get("mode"); // 1 百分比 2 人数
                String toRoundOff = (String) abean.get("toRoundOff"); // 1表示四舍五入，为0表示取整
                // mode为百分比时
                String oper = (String) abean.get("oper");// 1 不少于 2 不多于
                String value = (String) abean.get("value");
                String grouped = (String) abean.get("grouped");// 分组指标
                String actIds = (String) abean.get("actIds");
                String um_grade = (String) abean.get("UMGrade");// 部门考核等级

                if ("-1".equalsIgnoreCase(grouped)) // 空
                {
                    grouped = "false";
                } else if ("UNIT".equalsIgnoreCase(grouped)) // 单位
                {
                    grouped = "b0110";
                } else if ("DEPART".equalsIgnoreCase(grouped)) // 部门
                {
                    grouped = "e0122";
                } else if ("CLASSIFY".equalsIgnoreCase(grouped)) // 对象类别
                {
                    grouped = "body_id";
                }

                // 以下代码根据高级设置的规则对考核对象做强制分布操作 JinChunhai 2011.11.07
                if (!"false".equalsIgnoreCase(grouped)) {
                    e0122EmpMap = new HashMap(); // 分组的考核对象数初始化
                    buf.setLength(0);
                    buf.append("select " + grouped
                            + ",count(*) from per_result_" + this.planid
                            + " where 1=1 ");
                    if (userPriv != null && userPriv.trim().length() > 0) {
                        buf.append(userPriv);
                    }
                    buf.append(" group by " + grouped + "");
                    rs1 = dao.search(buf.toString());
                    while (rs1.next()) {
                        String e0122 = rs1.getString(1);
                        e0122EmpMap.put(e0122, rs1.getString(2));
                    }
                }

                String[] actIds1 = actIds.split(",");
                ArrayList actIds2 = new ArrayList();
                for (int j = 0; j < actIds1.length; j++) {
                    if (actIds1[j].length() > 0) {
                        actIds2.add(actIds1[j]);
                    }
                }
                String id = "";
                String itemname = "";
                float xishu = 0;
                float bottomscore = 0;
                float topscore = 0;

                String id_next = "";
                String itemname_next = "";
                float xishu_next = 0;
                float bottomscore_next = 0;
                float topscore_next = 0;

                String id_pre = "";
                String itemname_pre = "";
                float xishu_pre = 0;
                float bottomscore_pre = 0;
                float topscore_pre = 0;
                int n = 9999;
                if (actIds2.size() == 1) {
                    for (int k = 0; k < gradeList.size(); k++) {
                        abean = (LazyDynaBean) gradeList.get(k);
                        id_next = (String) abean.get("id");
                        itemname_next = (String) abean.get("itemname");
                        xishu_next = Float.parseFloat((String) abean
                                .get("xishu"));
                        bottomscore_next = Float.parseFloat((String) abean
                                .get("topscore"));
                        topscore_next = Float.parseFloat((String) abean
                                .get("bottomscore"));
                        if (id_next.equals((String) actIds2.get(0))) {
                            id = id_next;
                            itemname = itemname_next;
                            xishu = xishu_next;
                            bottomscore = bottomscore_next;
                            topscore = topscore_next;
                            n = 0;
                        }

                        if (n == 1) {
                            break;
                        }
                        n++;
                    }

                    for (int k = 0; k < gradeList.size(); k++) {
                        abean = (LazyDynaBean) gradeList.get(k);
                        String tempid = (String) abean.get("id");

                        if (tempid.equals(actIds2.get(0))) {
                            break;
                        } else {
                            id_pre = (String) abean.get("id");
                            itemname_pre = (String) abean.get("itemname");
                            xishu_pre = Float.parseFloat((String) abean
                                    .get("xishu"));
                            bottomscore_pre = Float.parseFloat((String) abean
                                    .get("topscore"));
                            topscore_pre = Float.parseFloat((String) abean
                                    .get("bottomscore"));
                        }
                    }
                    // int num=0;
                    // if(mode.equals("1"))
                    // num=Integer.parseInt(PubFunc.round(String.valueOf(khObjCount*Float.parseFloat(value)),0));
                    // else if(mode.equals("2"))
                    // num=Integer.parseInt(PubFunc.round(value,0));

                    double temp = 0;
                    int num = 0;
                    if ("1".equals(mode)) {
                        temp = khObjCount * Float.parseFloat(value);
                    } else if ("2".equals(mode)) {
                        temp = Double.parseDouble(value);
                    }

                    if ("1".equals(oper))// 不少于
                    {
                        if (toRoundOff != null
                                && toRoundOff.trim().length() > 0
                                && "1".equalsIgnoreCase(toRoundOff)) {
                            num = Integer.parseInt(PubFunc.round(
                                    String.valueOf(temp), 0)); // 四舍五入
                        } else {
                            num = (int) Math.ceil(temp); // 向上取整 只要有小数则进1 3.0
                        }
                        // 3.1 3.8 返回 3.0
                        // 4.0 4.0
                    } else if ("2".equals(oper))// 不多于
                    {
                        if (toRoundOff != null
                                && toRoundOff.trim().length() > 0
                                && "1".equalsIgnoreCase(toRoundOff)) {
                            num = Integer.parseInt(PubFunc.round(
                                    String.valueOf(temp), 0)); // 四舍五入
                        } else {
                            num = (int) Math.floor(temp); // 向下取整 3.0 3.1 3.8 返回
                        }
                        // 3.0 3.0 3.0
                    }

                    if ("false".equalsIgnoreCase(grouped)) {
                        buf.setLength(0);
                        buf.append("select count(*) from per_result_"
                                + this.planid + " where grade_id=" + id);
                        if (userPriv != null && userPriv.trim().length() > 0) {
                            buf.append(userPriv);
                        }
                        if (um_grade.trim().length() > 0) {
                            buf.append(" and Org_Grade='" + um_grade.trim()
                                    + "'");
                        }

                        rs1 = dao.search(buf.toString());
                        if (rs1.next()) {
                            int _num = rs1.getInt(1);
                            if (um_grade.trim().length() > 0 && _num == 0)// 没有部门等级设为
                            // um_grade的考核对象就不用往下走规则了
                            {
                                continue;
                            }

                            if ("2".equals(oper) && _num > num)// 不多于
                            // 多出来的补给下一个等级
                            {
                                resultBuf.setLength(0);
                                resultBuf.append("不符合强制分布规则：等级["
                                        + (String) degreeItemMap.get(id)
                                        + "]不多于");
                                if ("1".equals(mode)) {
                                    value = Float.parseFloat(value) * 100 + "";
                                    value = DataCollectBo.roundAndRemoveZero(
                                            value, 2);
                                    resultBuf.append(value + "%");
                                } else if ("2".equals(mode)) {
                                    resultBuf.append(num);
                                }
                                return resultBuf.toString();

                            } else if ("1".equals(oper) && _num < num)// 不少于
                            // 从高一级的等级补
                            {
                                resultBuf.setLength(0);
                                resultBuf.append("不符合强制分布规则：等级["
                                        + (String) degreeItemMap.get(id)
                                        + "]不少于");
                                if ("1".equals(mode)) {
                                    value = Float.parseFloat(value) * 100 + "";
                                    value = DataCollectBo.roundAndRemoveZero(
                                            value, 2);
                                    resultBuf.append(value + "%");
                                } else if ("2".equals(mode)) {
                                    resultBuf.append(num);
                                }
                                return resultBuf.toString();
                            }
                        }
                    } else {
                        buf.setLength(0);
                        buf.append("select " + grouped
                                + ",count(*) from per_result_" + this.planid
                                + " where grade_id=" + id);
                        if (userPriv != null && userPriv.trim().length() > 0) {
                            buf.append(userPriv);
                        }
                        if (um_grade.trim().length() > 0) {
                            buf.append(" and Org_Grade='" + um_grade.trim()
                                    + "'");
                        }
                        buf.append(" group by " + grouped + "");
                        rs1 = dao.search(buf.toString());
                        while (rs1.next()) {
                            String e0122 = rs1.getString(1);
                            int _num = Integer.parseInt(rs1.getString(2));
                            if (um_grade.trim().length() > 0 && _num == 0)// 没有部门等级设为
                            // um_grade的考核对象就不用往下走规则了
                            {
                                continue;
                            }

                            int e0122EmpCount = Integer
                                    .parseInt((String) e0122EmpMap.get(e0122));// 以部门为单位的总人数
                            // if(mode.equals("1"))
                            // num=Integer.parseInt(PubFunc.round(String.valueOf(e0122EmpCount*Float.parseFloat(value)),0));
                            // else if(mode.equals("2"))
                            // num=Integer.parseInt(PubFunc.round(value,0));

                            if ("1".equals(mode)) {
                                temp = e0122EmpCount * Float.parseFloat(value);
                            } else if ("2".equals(mode)) {
                                temp = Double.parseDouble(value);
                            }

                            if ("1".equals(oper))// 不少于
                            {
                                if (toRoundOff != null
                                        && toRoundOff.trim().length() > 0
                                        && "1".equalsIgnoreCase(toRoundOff)) {
                                    num = Integer.parseInt(PubFunc.round(
                                            String.valueOf(temp), 0)); // 四舍五入
                                } else {
                                    num = (int) Math.ceil(temp); // 向上取整
                                }
                                // 只要有小数则进1
                                // 3.0 3.1
                                // 3.8 返回
                                // 3.0 4.0
                                // 4.0
                            } else if ("2".equals(oper))// 不多于
                            {
                                if (toRoundOff != null
                                        && toRoundOff.trim().length() > 0
                                        && "1".equalsIgnoreCase(toRoundOff)) {
                                    num = Integer.parseInt(PubFunc.round(
                                            String.valueOf(temp), 0)); // 四舍五入
                                } else {
                                    num = (int) Math.floor(temp); // 向下取整 3.0
                                }
                                // 3.1 3.8
                                // 返回 3.0
                                // 3.0 3.0
                            }

                            if ("2".equals(oper) && _num > num)// 不多于
                            // 多出来的补给下一个等级
                            {
                                resultBuf.setLength(0);
                                resultBuf.append("不符合强制分布规则：等级["
                                        + (String) degreeItemMap.get(id)
                                        + "]不多于");
                                if ("1".equals(mode)) {
                                    resultBuf.append(Float.parseFloat(value)
                                            * 100 + "%");
                                } else if ("2".equals(mode)) {
                                    resultBuf.append(num);
                                }
                                return resultBuf.toString();
                            } else if ("1".equals(oper) && _num < num)// 不少于
                            // 从高一级的等级补
                            {
                                resultBuf.setLength(0);
                                resultBuf.append("不符合强制分布规则：等级["
                                        + (String) degreeItemMap.get(id)
                                        + "]不少于");
                                if ("1".equals(mode)) {
                                    value = Float.parseFloat(value) * 100 + "";
                                    value = DataCollectBo.roundAndRemoveZero(
                                            value, 2);
                                    resultBuf.append(value + "%");
                                } else if ("2".equals(mode)) {
                                    resultBuf.append(num);
                                }
                                return resultBuf.toString();
                            }
                        }
                    }
                } else// 多个等级项目和的情况
                {
                    StringBuffer buf3 = new StringBuffer();
                    for (int x = 0; x < actIds2.size(); x++) {
                        buf3.append(" or grade_id=" + (String) actIds2.get(x));
                    }

                    StringBuffer buf2 = new StringBuffer();
                    StringBuffer degreedescBuf = new StringBuffer();
                    for (int x = 0; x < actIds2.size(); x++) {
                        String degreeItemId = (String) actIds2.get(x);
                        buf2.append(" or id=" + degreeItemId);
                        degreedescBuf.append("+"
                                + (String) degreeItemMap.get(degreeItemId));
                    }

                    String sql = "select id,itemname,xishu from per_degreedesc where degree_id="
                            + gradeID
                            + " and ("
                            + buf2.substring(3)
                            + ") "
                            + orderbyStr;
                    rs1 = dao.search(sql);
                    int xF = 0;// 多个等级中的第一个
                    int xL = 0;// 多个等级中最后一个
                    int xI = 0;
                    String itemname_xF = "";
                    float xishu_xF = 0;
                    while (rs1.next()) {
                        xI++;
                        if (xI == 1) {
                            xF = rs1.getInt(1);
                            itemname_xF = rs1.getString("itemname");
                            xishu_xF = rs1.getFloat("xishu");
                        }

                        xL = rs1.getInt(1);
                    }

                    // 取得多个等级项目的上一个等级和下一个等级 如 全部为(A B C D E)如果被选等级为C D
                    // 那么上一个等级就是B 下一个等级就是E
                    for (int j = 0; j < gradeList.size(); j++) {
                        abean = (LazyDynaBean) gradeList.get(j);
                        int tempid = Integer.parseInt((String) abean.get("id"));
                        if (xF > tempid) {
                            id_pre = (String) abean.get("id");
                            itemname_pre = (String) abean.get("itemname");
                            xishu_pre = Float.parseFloat((String) abean
                                    .get("xishu"));

                        }
                        if (id_next.length() == 0 && xL < tempid) {
                            id_next = (String) abean.get("id");
                            itemname_next = (String) abean.get("itemname");
                            xishu_next = Float.parseFloat((String) abean
                                    .get("xishu"));
                        }
                    }

                    // int objnum=khObjCount;
                    // if(mode.equals("1"))
                    // objnum=Integer.parseInt(PubFunc.round(String.valueOf(khObjCount*Float.parseFloat(value)),0));
// else if(mode.equals("2"))
                    // objnum=Integer.parseInt(PubFunc.round(value,0));

                    double temp = 0;
                    int objnum = khObjCount;
                    if ("1".equals(mode)) {
                        temp = khObjCount * Float.parseFloat(value);
                    } else if ("2".equals(mode)) {
                        temp = Double.parseDouble(value);
                    }

                    if ("1".equals(oper))// 不少于
                    {
                        if (toRoundOff != null
                                && toRoundOff.trim().length() > 0
                                && "1".equalsIgnoreCase(toRoundOff)) {
                            objnum = Integer.parseInt(PubFunc.round(
                                    String.valueOf(temp), 0)); // 四舍五入
                        } else {
                            objnum = (int) Math.ceil(temp); // 向上取整 只要有小数则进1 3.0
                        }
                        // 3.1 3.8 返回 3.0
                        // 4.0 4.0
                    } else if ("2".equals(oper))// 不多于
                    {
                        if (toRoundOff != null
                                && toRoundOff.trim().length() > 0
                                && "1".equalsIgnoreCase(toRoundOff)) {
                            objnum = Integer.parseInt(PubFunc.round(
                                    String.valueOf(temp), 0)); // 四舍五入
                        } else {
                            objnum = (int) Math.floor(temp); // 向下取整 3.0 3.1 3.8
                        }
                        // 返回 3.0 3.0
                        // 3.0
                    }

                    if ("false".equalsIgnoreCase(grouped)) {
                        buf.setLength(0);
                        buf.append("select count(*) from per_result_"
                                + this.planid + " where 1=1 ");
                        if (buf3.length() > 0) {
                            sql += " and (" + buf3.substring(3) + ")";
                        }
                        if (userPriv != null && userPriv.trim().length() > 0) {
                            sql += userPriv;
                        }
                        if (um_grade.trim().length() > 0) {
                            sql += " and Org_Grade='" + um_grade.trim() + "'";
                        }
                        rs1 = dao.search(sql);
                        if (rs1.next()) {
                            int _num = rs1.getInt(1);
                            if (um_grade.trim().length() > 0 && _num == 0)// 没有部门等级设为
                            // um_grade的考核对象就不用往下走规则了
                            {
                                continue;
                            }

                            if ("2".equals(oper) && _num > objnum)// 不多于
                            // 多出来的补给下一个等级
                            {
                                resultBuf.setLength(0);
                                resultBuf.append("不符合强制分布规则：等级["
                                        + degreedescBuf + "]不多于");
                                if ("1".equals(mode)) {
                                    value = Float.parseFloat(value) * 100 + "";
                                    value = DataCollectBo.roundAndRemoveZero(
                                            value, 2);
                                    resultBuf.append(value + "%");
                                } else if ("2".equals(mode)) {
                                    resultBuf.append(objnum);
                                }
                                return resultBuf.toString();

                            } else if ("1".equals(oper) && _num < objnum)// 不少于
                            // 从高一级的等级补
                            {
                                resultBuf.setLength(0);
                                resultBuf.append("不符合强制分布规则：等级["
                                        + degreedescBuf + "]不少于");
                                if ("1".equals(mode)) {
                                    value = Float.parseFloat(value) * 100 + "";
                                    value = DataCollectBo.roundAndRemoveZero(
                                            value, 2);
                                    resultBuf.append(value + "%");
                                } else if ("2".equals(mode)) {
                                    resultBuf.append(objnum);
                                }
                                return resultBuf.toString();
                            }
                        }
                    } else {
                        sql = "select " + grouped
                                + ",count(*) from per_result_" + this.planid
                                + " where 1=1 ";
                        if (buf3.length() > 0) {
                            sql += " and (" + buf3.substring(3) + ")";
                        }
                        if (userPriv != null && userPriv.trim().length() > 0) {
                            sql += userPriv;
                        }
                        if (um_grade.trim().length() > 0) {
                            sql += " and Org_Grade='" + um_grade.trim() + "'";
                        }
                        sql += " group by " + grouped + "";
                        rs1 = dao.search(sql);
                        while (rs1.next()) {
                            String e0122 = rs1.getString(1);
                            int _num = Integer.parseInt(rs1.getString(2));
                            if (um_grade.trim().length() > 0 && _num == 0)// 没有部门等级设为
                            // um_grade的考核对象就不用往下走规则了
                            {
                                continue;
                            }

                            int e0122EmpCount = Integer
                                    .parseInt((String) e0122EmpMap.get(e0122));// 以部门为单位的总人数
                            // if(mode.equals("1"))
                            // objnum=Integer.parseInt(PubFunc.round(String.valueOf(e0122EmpCount*Float.parseFloat(value)),0));
                            // else if(mode.equals("2"))
                            // objnum=Integer.parseInt(PubFunc.round(value,0));

                            if ("1".equals(mode)) {
                                temp = e0122EmpCount * Float.parseFloat(value);
                            } else if ("2".equals(mode)) {
                                temp = Double.parseDouble(value);
                            }

                            if ("1".equals(oper))// 不少于
                            {
                                if (toRoundOff != null
                                        && toRoundOff.trim().length() > 0
                                        && "1".equalsIgnoreCase(toRoundOff)) {
                                    objnum = Integer.parseInt(PubFunc.round(
                                            String.valueOf(temp), 0)); // 四舍五入
                                } else {
                                    objnum = (int) Math.ceil(temp); // 向上取整
                                }
                                // 只要有小数则进1
                                // 3.0 3.1
                                // 3.8 返回
                                // 3.0 4.0
                                // 4.0
                            } else if ("2".equals(oper))// 不多于
                            {
                                if (toRoundOff != null
                                        && toRoundOff.trim().length() > 0
                                        && "1".equalsIgnoreCase(toRoundOff)) {
                                    objnum = Integer.parseInt(PubFunc.round(
                                            String.valueOf(temp), 0)); // 四舍五入
                                } else {
                                    objnum = (int) Math.floor(temp); // 向下取整 3.0
                                }
                                // 3.1
                                // 3.8
                                // 返回
                                // 3.0
                                // 3.0
                                // 3.0
                            }

                            if ("2".equals(oper) && _num > objnum)// 不多于
                            // 多出来的补给下一个等级
                            {
                                resultBuf.setLength(0);
                                resultBuf.append("不符合强制分布规则：等级["
                                        + degreedescBuf + "]不多于");
                                if ("1".equals(mode)) {
                                    value = Float.parseFloat(value) * 100 + "";
                                    value = DataCollectBo.roundAndRemoveZero(
                                            value, 2);
                                    resultBuf.append(value + "%");
                                } else if ("2".equals(mode)) {
                                    resultBuf.append(objnum);
                                }
                                return resultBuf.toString();
                            } else if ("1".equals(oper) && _num < objnum)// 不少于
                            // 从高一级的等级补
                            {
                                resultBuf.setLength(0);
                                resultBuf.append("不符合强制分布规则：等级["
                                        + degreedescBuf + "]不少于");
                                if ("1".equals(mode)) {
                                    value = Float.parseFloat(value) * 100 + "";
                                    value = DataCollectBo.roundAndRemoveZero(
                                            value, 2);
                                    resultBuf.append(value + "%");
                                } else if ("2".equals(mode)) {
                                    resultBuf.append(objnum);
                                }
                                return resultBuf.toString();
                            }
                        }
                    }
                }
            }
            if (rs1 != null) {
                rs1.close();
            }
            if (rs2 != null) {
                rs2.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return resultBuf.toString();
    }

    /**
     * 根据等级分类中的高级设置情况更新等级
     */
    private void updateGradeValueByHighSet(String gradeID, ArrayList objList,
                                           String xiFormula) {
        String userPriv = this.priv_where;
		/*if (this.code != null && this.code.trim().length() > 0
				&& !this.code.equals("-1")) {
			if (AdminCode.getCodeName("UN", this.code) != null
					&& AdminCode.getCodeName("UN", this.code).length() > 0)
				userPriv += " and b0110 like '" + this.code + "%'";
			else if (AdminCode.getCodeName("UM", this.code) != null
					&& AdminCode.getCodeName("UM", this.code).length() > 0)
			userPriv += " and e0122 like '" + this.code + "%'";
		}*/
        PerDegreeBo bo = new PerDegreeBo(this.conn, gradeID, this.planid);
        ArrayList degreeHighSet = bo.getDegreeHighSetList(false);// 计算的强制分布不忽略启用
        if (degreeHighSet.size() == 0) {
            return;
        }

        ContentDAO dao = new ContentDAO(this.conn);
        RowSet rs1 = null;
        RowSet rs2 = null;
        String orderbyStr = "";// 排序语句 用来确定等级项目的等级高低顺序
        StringBuffer buf = new StringBuffer();
        ArrayList gradeList = new ArrayList();
        HashMap e0122EmpMap = new HashMap(); // 分组指标的考核对象数
        HashMap groupMap = new HashMap(); // 分组指标的分组类别
        try {
            // 以下代码得到由高到低排序的等级项目
            int flag = 0;
            rs1 = dao.search("select * from per_degree where degree_id="
                    + gradeID);
            if (rs1.next()) {
                flag = rs1.getInt("flag");
            }
            if (flag == 0) // 分数
            {
                orderbyStr = " order by "
                        + Sql_switcher.isnull("topscore", "0") + " desc,id";
            } else if (flag == 1) // 比例
            {
                orderbyStr = " order by " + Sql_switcher.isnull("xishu", "0")
                        + " desc,id";
            } else if (flag == 2) // 混合，先算分值
            {
                orderbyStr = " order by id";
            } else if (flag == 3) // 混合，先算比例
            {
                orderbyStr = " order by id";
            }

            buf.setLength(0);
            buf.append("select id,itemname,"
                    + Sql_switcher.isnull("topscore", "0") + " topscore,"
                    + Sql_switcher.isnull("bottomscore", "0") + " bottomscore,"
                    + Sql_switcher.isnull("xishu", "0")
                    + " xishu from per_degreedesc ");
            buf.append(" where degree_id=" + gradeID);
            buf.append(orderbyStr);
            rs1 = dao.search(buf.toString());
            while (rs1.next()) {
                String id = rs1.getString("id");
                String itemname = rs1.getString("itemname");
                String xishu = rs1.getString("xishu");
                String topscore = rs1.getString("topscore");
                String bottomscore = rs1.getString("bottomscore");
                LazyDynaBean abean = new LazyDynaBean();
                abean.set("id", id);
                abean.set("itemname", itemname);
                abean.set("xishu", xishu);
                abean.set("topscore", topscore);
                abean.set("bottomscore", bottomscore);
                gradeList.add(abean);
            }
            // 以上代码得到由高到低排序的等级项目

            /*
             * //以下代码根据高级设置的规则对考核对象做强制分布操作 buf.setLength(0);
             * buf.append("select e0122,count(*) from per_result_" + this.planid
             * +" where 1=1 "); if(userPriv!=null&&userPriv.trim().length()>0)
             * buf.append(userPriv); buf.append(" group by e0122");
             * rs1=dao.search(buf.toString()); while(rs1.next()) { String e0122
             * = rs1.getString(1); e0122EmpMap.put(e0122, rs1.getString(2)); }
             */

            for (int i = 0; i < degreeHighSet.size(); i++) {
                LazyDynaBean abean = (LazyDynaBean) degreeHighSet.get(i);
                String mode = (String) abean.get("mode"); // 1 百分比 2 人数
                String toRoundOff = (String) abean.get("toRoundOff"); // 1表示四舍五入，为0表示取整
                // mode为百分比时
                String oper = (String) abean.get("oper");// 1 不少于 2 不多于
                String value = (String) abean.get("value");
                String grouped = (String) abean.get("grouped");// 分组指标
                String actIds = (String) abean.get("actIds");
                String um_grade = (String) abean.get("UMGrade");// 部门考核等级

                if ("-1".equalsIgnoreCase(grouped)) // 空
                {
                    grouped = "false";
                } else if ("UNIT".equalsIgnoreCase(grouped)) // 单位
                {
                    grouped = "b0110";
                } else if ("DEPART".equalsIgnoreCase(grouped)) // 部门
                {
                    grouped = "e0122";
                } else if ("CLASSIFY".equalsIgnoreCase(grouped)) // 对象类别
                {
                    grouped = "body_id";
                }

                // 以下代码根据高级设置的规则对考核对象做强制分布操作 JinChunhai 2011.11.07
                if (!"false".equalsIgnoreCase(grouped)) {
                    e0122EmpMap = new HashMap(); // 分组的考核对象数初始化
                    buf.setLength(0);
                    buf.append("select " + grouped
                            + ",count(*) from per_result_" + this.planid
                            + " where 1=1 ");
                    if (userPriv != null && userPriv.trim().length() > 0) {
                        buf.append(userPriv);
                    }
                    buf.append(" group by " + grouped + "");
                    rs1 = dao.search(buf.toString());
                    while (rs1.next()) {
                        String e0122 = rs1.getString(1);
                        e0122EmpMap.put(e0122, rs1.getString(2));
                    }

                    // 分组指标的分组类别
                    groupMap = new HashMap();
                    StringBuffer buf0 = new StringBuffer("");
                    buf0.append("select " + grouped + " from per_result_"
                            + this.planid + " where 1=1");
                    if (userPriv != null && userPriv.trim().length() > 0) {
                        buf0.append(userPriv);
                    }
                    if (um_grade.trim().length() > 0) {
                        buf0.append(" and Org_Grade='" + um_grade.trim() + "'");
                    }
                    buf0.append(" group by " + grouped + "");
                    rs1 = dao.search(buf0.toString());
                    while (rs1.next()) {
                        groupMap.put(rs1.getString(1), "1");
                    }
                }

                String[] actIds1 = actIds.split(",");
                ArrayList actIds2 = new ArrayList();
                for (int j = 0; j < actIds1.length; j++) {
                    if (actIds1[j].length() > 0) {
                        actIds2.add(actIds1[j]);
                    }
                }
                String id = "";
                String itemname = "";
                float xishu = 0;
                float bottomscore = 0;
                float topscore = 0;

                String id_next = "";
                String itemname_next = "";
                float xishu_next = 0;
                float bottomscore_next = 0;
                float topscore_next = 0;

                String id_pre = "";
                String itemname_pre = "";
                float xishu_pre = 0;
                float bottomscore_pre = 0;
                float topscore_pre = 0;
                int n = 9999;
                if (actIds2.size() == 1) {
                    for (int k = 0; k < gradeList.size(); k++) {
                        abean = (LazyDynaBean) gradeList.get(k);
                        id_next = (String) abean.get("id");
                        itemname_next = (String) abean.get("itemname");
                        xishu_next = Float.parseFloat((String) abean
                                .get("xishu"));
                        bottomscore_next = Float.parseFloat((String) abean
                                .get("topscore"));
                        topscore_next = Float.parseFloat((String) abean
                                .get("bottomscore"));
                        if (id_next.equals((String) actIds2.get(0))) {
                            id = id_next;
                            itemname = itemname_next;
                            xishu = xishu_next;
                            bottomscore = bottomscore_next;
                            topscore = topscore_next;
                            n = 0;
                        }

                        if (n == 1) {
                            break;
                        }
                        n++;
                    }

                    int m = 0;
                    for (int k = 0; k < gradeList.size(); k++) {
                        abean = (LazyDynaBean) gradeList.get(k);
                        String tempid = (String) abean.get("id");

                        if (tempid.equals(actIds2.get(0))) {
                            m = k;
                            break;
                        } else {
                            id_pre = (String) abean.get("id");
                            itemname_pre = (String) abean.get("itemname");
                            xishu_pre = Float.parseFloat((String) abean
                                    .get("xishu"));
                            bottomscore_pre = Float.parseFloat((String) abean
                                    .get("topscore"));
                            topscore_pre = Float.parseFloat((String) abean
                                    .get("bottomscore"));
                        }
                    }

                    // 如果当前等级分类下的等级项目个数小于等于 1 个
                    if (gradeList.size() <= 1) {
                        id_next = null;
                        itemname_next = "";
                        xishu_next = 0;
                        bottomscore_next = 0;
                        topscore_next = 0;
                    }

                    double temp = 0;
                    int num = 0;
                    if ("1".equals(mode)) {
                        temp = objList.size() * Float.parseFloat(value);
                    } else if ("2".equals(mode)) {
                        temp = Double.parseDouble(value);
                    }

                    if ("1".equals(oper))// 不少于
                    {
                        if (toRoundOff != null
                                && toRoundOff.trim().length() > 0
                                && "1".equalsIgnoreCase(toRoundOff)) {
                            num = Integer.parseInt(PubFunc.round(
                                    String.valueOf(temp), 0)); // 四舍五入
                        } else {
                            num = (int) Math.ceil(temp); // 向上取整 只要有小数则进1 3.0
                        }
                        // 3.1 3.8 返回 3.0
                        // 4.0 4.0
                    } else if ("2".equals(oper))// 不多于
                    {
                        if (toRoundOff != null
                                && toRoundOff.trim().length() > 0
                                && "1".equalsIgnoreCase(toRoundOff)) {
                            num = Integer.parseInt(PubFunc.round(
                                    String.valueOf(temp), 0)); // 四舍五入
                        } else {
                            num = (int) Math.floor(temp); // 向下取整 3.0 3.1 3.8 返回
                        }
                        // 3.0 3.0 3.0
                    }

                    if ("false".equalsIgnoreCase(grouped)) {
                        buf.setLength(0);
                        buf.append("select count(*) from per_result_"
                                + this.planid + " where grade_id=" + id);
                        if (userPriv != null && userPriv.trim().length() > 0) {
                            buf.append(userPriv);
                        }
                        if (um_grade.trim().length() > 0) {
                            buf.append(" and Org_Grade='" + um_grade.trim()
                                    + "'");
                        }

                        rs1 = dao.search(buf.toString());
                        if (rs1.next()) {
                            int _num = rs1.getInt(1);
                            if (um_grade.trim().length() > 0 && _num == 0)// 没有部门等级设为
                            // um_grade的考核对象就不用往下走规则了
                            {
                                continue;
                            }

                            if ("2".equals(oper) && _num > num)// 不多于
                            // 多出来的补给下一个等级
                            {
                                buf.setLength(0);
                                buf.append("select * from per_result_"
                                        + this.planid + " where grade_id=" + id);
                                if (userPriv != null
                                        && userPriv.trim().length() > 0) {
                                    buf.append(userPriv);
                                }
                                if (um_grade.trim().length() > 0) {
                                    buf.append(" and Org_Grade='"
                                            + um_grade.trim() + "'");
                                }
                                buf.append(" order by "
                                        + Sql_switcher.isnull("score", "0")
                                        + " asc");
                                rs2 = dao.search(buf.toString());
                                int ce = _num - num;
                                while (rs2.next()) {
                                    String object_id = rs2
                                            .getString("object_id");
                                    buf.setLength(0);
                                    buf.append("update per_result_"
                                            + this.planid + " set grade_id="
                                            + id_next + ",resultdesc='"
                                            + itemname_next + "'");
                                    if (xiFormula == null
                                            || xiFormula.trim().length() == 0) {
                                        buf.append(",exX_object=" + xishu_next);
                                    }
                                    buf.append(" where object_id='" + object_id
                                            + "'");
                                    dao.update(buf.toString());
                                    ce--;
                                    if (ce == 0) {
                                        break;
                                    }
                                }
                            } else if ("1".equals(oper) && _num < num)// 不少于
                            // 从高一级的等级补
                            {
                                int ce = num - _num;
                                boolean xblea = false;
                                for (int k = (m - 1); k >= 0; k--) {
                                    abean = (LazyDynaBean) gradeList.get(k);
                                    String id_pres = (String) abean.get("id");

                                    buf.setLength(0);
                                    buf.append("select * from per_result_"
                                            + this.planid + " where grade_id="
                                            + id_pres);
                                    if (userPriv != null
                                            && userPriv.trim().length() > 0) {
                                        buf.append(userPriv);
                                    }
                                    if (um_grade.trim().length() > 0) {
                                        buf.append(" and Org_Grade='"
                                                + um_grade.trim() + "'");
                                    }
                                    buf.append(" order by "
                                            + Sql_switcher.isnull("score", "0")
                                            + " asc");
                                    rs2 = dao.search(buf.toString());
                                    // int ce=num-_num;
                                    while (rs2.next()) {
                                        String object_id = rs2
                                                .getString("object_id");
                                        buf.setLength(0);
                                        buf.append("update per_result_"
                                                + this.planid
                                                + " set grade_id=" + id
                                                + ",resultdesc='" + itemname
                                                + "'");
                                        if (xiFormula == null
                                                || xiFormula.trim().length() == 0) {
                                            buf.append(",exX_object=" + xishu);
                                        }
                                        buf.append(" where object_id='"
                                                + object_id + "'");
                                        dao.update(buf.toString());
                                        ce--;
                                        if (ce == 0) {
                                            xblea = true;
                                            break;
                                        }
                                    }
                                    if (xblea) {
                                        break;
                                    }
                                }
                            }
                        } else if ("1".equals(oper) && num > 0)// 不少于 从高一级的等级补
                        {
                            int ce = num;
                            boolean xblea = false;
                            for (int k = (m - 1); k >= 0; k--) {
                                abean = (LazyDynaBean) gradeList.get(k);
                                String id_pres = (String) abean.get("id");

                                buf.setLength(0);
                                buf.append("select * from per_result_"
                                        + this.planid + " where grade_id="
                                        + id_pres);
                                if (userPriv != null
                                        && userPriv.trim().length() > 0) {
                                    buf.append(userPriv);
                                }
                                if (um_grade.trim().length() > 0) {
                                    buf.append(" and Org_Grade='"
                                            + um_grade.trim() + "'");
                                }
                                buf.append(" order by "
                                        + Sql_switcher.isnull("score", "0")
                                        + " asc");
                                rs2 = dao.search(buf.toString());
                                while (rs2.next()) {
                                    String object_id = rs2
                                            .getString("object_id");
                                    buf.setLength(0);
                                    buf.append("update per_result_"
                                            + this.planid + " set grade_id="
                                            + id + ",resultdesc='" + itemname
                                            + "'");
                                    if (xiFormula == null
                                            || xiFormula.trim().length() == 0) {
                                        buf.append(",exX_object=" + xishu);
                                    }
                                    buf.append(" where object_id='" + object_id
                                            + "'");
                                    dao.update(buf.toString());
                                    ce--;
                                    if (ce == 0) {
                                        xblea = true;
                                        break;
                                    }
                                }
                                if (xblea) {
                                    break;
                                }
                            }
                        }
                    } else {
                        buf.setLength(0);
                        buf.append("select " + grouped
                                + ",count(*) from per_result_" + this.planid
                                + " where grade_id=" + id);
                        if (userPriv != null && userPriv.trim().length() > 0) {
                            buf.append(userPriv);
                        }
                        if (um_grade.trim().length() > 0) {
                            buf.append(" and Org_Grade='" + um_grade.trim()
                                    + "'");
                        }
                        buf.append(" group by " + grouped + "");

                        rs1 = dao.search(buf.toString());
                        HashMap groupDataMap = new HashMap();
                        while (rs1.next()) {
                            String e0122 = rs1.getString(1);
                            int _num = Integer.parseInt(rs1.getString(2));
                            groupDataMap.put(e0122, "" + _num);
                        }


                        Set keySet = groupMap.keySet();
                        for (Iterator t = keySet.iterator(); t.hasNext(); ) {
                            //		while (rs1.next()) {
                            int _num = 0;
                            String e0122 = (String) t.next();
                            if (groupDataMap.get(e0122) != null) {
                                _num = Integer.parseInt((String) groupDataMap.get(e0122));
                            }


                            if (um_grade.trim().length() > 0 && _num == 0)// 没有部门等级设为  um_grade的考核对象就不用往下走规则了
                            {
                                continue;
                            }

                            int e0122EmpCount = Integer
                                    .parseInt((String) e0122EmpMap.get(e0122)); // 以部门为单位的总人数
                            if ("1".equals(mode)) {
                                temp = e0122EmpCount * Float.parseFloat(value);
                            } else if ("2".equals(mode)) {
                                temp = Double.parseDouble(value);
                            }

                            if ("1".equals(oper))// 不少于
                            {
                                if (toRoundOff != null
                                        && toRoundOff.trim().length() > 0
                                        && "1".equalsIgnoreCase(toRoundOff)) {
                                    num = Integer.parseInt(PubFunc.round(
                                            String.valueOf(temp), 0)); // 四舍五入
                                } else {
                                    num = (int) Math.ceil(temp); // 向上取整
                                }
                                // 只要有小数则进1
                                // 3.0 3.1
                                // 3.8 返回
                                // 3.0 4.0
                                // 4.0
                            } else if ("2".equals(oper))// 不多于
                            {
                                if (toRoundOff != null
                                        && toRoundOff.trim().length() > 0
                                        && "1".equalsIgnoreCase(toRoundOff)) {
                                    num = Integer.parseInt(PubFunc.round(
                                            String.valueOf(temp), 0)); // 四舍五入
                                } else {
                                    num = (int) Math.floor(temp); // 向下取整 3.0
                                }
                                // 3.1 3.8
                                // 返回 3.0
                                // 3.0 3.0
                            }

                            if ("2".equals(oper) && _num > num)// 不多于
                            // 多出来的补给下一个等级
                            {
                                buf.setLength(0);
                                buf.append("select * from per_result_"
                                        + this.planid + " where grade_id=" + id
                                        + " ");
                                if (e0122 == null) {
                                    buf.append(" and " + grouped + " is null ");
                                } else {
                                    buf.append(" and " + grouped + "='" + e0122
                                            + "' ");
                                }
                                if (userPriv != null
                                        && userPriv.trim().length() > 0) {
                                    buf.append(userPriv);
                                }
                                if (um_grade.trim().length() > 0) {
                                    buf.append(" and Org_Grade='"
                                            + um_grade.trim() + "'");
                                }
                                buf.append(" order by "
                                        + Sql_switcher.isnull("score", "0")
                                        + " asc");
                                rs2 = dao.search(buf.toString());
                                int ce = _num - num;
                                while (rs2.next()) {
                                    String object_id = rs2
                                            .getString("object_id");
                                    buf.setLength(0);
                                    buf.append("update per_result_"
                                            + this.planid + " set grade_id="
                                            + id_next + ",resultdesc='"
                                            + itemname_next + "'");
                                    if (xiFormula == null
                                            || xiFormula.trim().length() == 0) {
                                        buf.append(",exX_object=" + xishu_next);
                                    }
                                    buf.append(" where object_id='" + object_id
                                            + "'");
                                    dao.update(buf.toString());
                                    ce--;
                                    if (ce == 0) {
                                        break;
                                    }
                                }
                            } else if ("1".equals(oper) && _num < num)// 不少于
                            // 从高一级的等级补
                            {
                                int ce = num - _num;
                                boolean xblea = false;
                                if (m == 0 && gradeList.size() > 1) //1级不少于时，需要拽
                                {
                                    for (int k = 1; k < gradeList.size(); k++) {
                                        abean = (LazyDynaBean) gradeList.get(k);
                                        String id_pres = (String) abean.get("id");

                                        buf.setLength(0);
                                        buf.append("select * from per_result_"
                                                + this.planid + " where grade_id="
                                                + id_pres + " ");
                                        if (e0122 == null) {
                                            buf.append(" and " + grouped
                                                    + " is null ");
                                        } else {
                                            buf.append(" and " + grouped + "='"
                                                    + e0122 + "' ");
                                        }
                                        if (userPriv != null
                                                && userPriv.trim().length() > 0) {
                                            buf.append(userPriv);
                                        }
                                        if (um_grade.trim().length() > 0) {
                                            buf.append(" and Org_Grade='"
                                                    + um_grade.trim() + "'");
                                        }
                                        buf.append(" order by "
                                                + Sql_switcher.isnull("score", "0")
                                                + " desc");
                                        rs2 = dao.search(buf.toString());
                                        while (rs2.next()) {
                                            String object_id = rs2
                                                    .getString("object_id");
                                            buf.setLength(0);
                                            buf.append("update per_result_"
                                                    + this.planid
                                                    + " set grade_id=" + id
                                                    + ",resultdesc='" + itemname
                                                    + "'");
                                            if (xiFormula == null
                                                    || xiFormula.trim().length() == 0) {
                                                buf.append(",exX_object=" + xishu);
                                            }
                                            buf.append(" where object_id='"
                                                    + object_id + "'");
                                            dao.update(buf.toString());
                                            ce--;
                                            if (ce == 0) {
                                                xblea = true;
                                                break;
                                            }
                                        }
                                        if (xblea) {
                                            break;
                                        }
                                    }

                                } else {

                                    for (int k = (m - 1); k >= 0; k--) {
                                        abean = (LazyDynaBean) gradeList.get(k);
                                        String id_pres = (String) abean.get("id");

                                        buf.setLength(0);
                                        buf.append("select * from per_result_"
                                                + this.planid + " where grade_id="
                                                + id_pres + " ");
                                        if (e0122 == null) {
                                            buf.append(" and " + grouped
                                                    + " is null ");
                                        } else {
                                            buf.append(" and " + grouped + "='"
                                                    + e0122 + "' ");
                                        }
                                        if (userPriv != null
                                                && userPriv.trim().length() > 0) {
                                            buf.append(userPriv);
                                        }
                                        if (um_grade.trim().length() > 0) {
                                            buf.append(" and Org_Grade='"
                                                    + um_grade.trim() + "'");
                                        }
                                        buf.append(" order by "
                                                + Sql_switcher.isnull("score", "0")
                                                + " asc");
                                        rs2 = dao.search(buf.toString());
                                        while (rs2.next()) {
                                            String object_id = rs2
                                                    .getString("object_id");
                                            buf.setLength(0);
                                            buf.append("update per_result_"
                                                    + this.planid
                                                    + " set grade_id=" + id
                                                    + ",resultdesc='" + itemname
                                                    + "'");
                                            if (xiFormula == null
                                                    || xiFormula.trim().length() == 0) {
                                                buf.append(",exX_object=" + xishu);
                                            }
                                            buf.append(" where object_id='"
                                                    + object_id + "'");
                                            dao.update(buf.toString());
                                            ce--;
                                            if (ce == 0) {
                                                xblea = true;
                                                break;
                                            }
                                        }
                                        if (xblea) {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        if ("1".equals(oper)) {
                            for (Iterator t = groupMap.keySet().iterator(); t
                                    .hasNext(); ) {
                                String key = (String) t.next();
                                if (groupDataMap.get(key) == null) {
                                    int e0122EmpCount = Integer
                                            .parseInt((String) e0122EmpMap
                                                    .get(key)); // 以部门为单位的总人数
                                    if ("1".equals(mode)) {
                                        temp = e0122EmpCount
                                                * Float.parseFloat(value);
                                    } else if ("2".equals(mode)) {
                                        temp = Double.parseDouble(value);
                                    }

                                    if ("1".equals(oper))// 不少于
                                    {
                                        if (toRoundOff != null
                                                && toRoundOff.trim().length() > 0
                                                && "1"
                                                .equalsIgnoreCase(toRoundOff)) {
                                            num = Integer
                                                    .parseInt(PubFunc.round(
                                                            String.valueOf(temp),
                                                            0)); // 四舍五入
                                        } else {
                                            num = (int) Math.ceil(temp); // 向上取整
                                        }
                                        // 只要有小数则进1
                                        // 3.0
                                        // 3.1
                                        // 3.8
                                        // 返回
                                        // 3.0
                                        // 4.0
                                        // 4.0
                                    } else if ("2".equals(oper))// 不多于
                                    {
                                        if (toRoundOff != null
                                                && toRoundOff.trim().length() > 0
                                                && "1"
                                                .equalsIgnoreCase(toRoundOff)) {
                                            num = Integer
                                                    .parseInt(PubFunc.round(
                                                            String.valueOf(temp),
                                                            0)); // 四舍五入
                                        } else {
                                            num = (int) Math.floor(temp); // 向下取整
                                        }
                                        // 3.0
                                        // 3.1
                                        // 3.8
                                        // 返回
                                        // 3.0
                                        // 3.0
                                        // 3.0
                                    }

                                    int ce = num;
                                    boolean xblea = false;
                                    for (int k = (m - 1); k >= 0; k--) {
                                        abean = (LazyDynaBean) gradeList.get(k);
                                        String id_pres = (String) abean
                                                .get("id");

                                        buf.setLength(0);
                                        buf.append("select * from per_result_"
                                                + this.planid
                                                + " where grade_id=" + id_pres
                                                + " ");
                                        if (key == null) {
                                            buf.append(" and " + grouped
                                                    + " is null ");
                                        } else {
                                            buf.append(" and " + grouped + "='"
                                                    + key + "' ");
                                        }
                                        if (userPriv != null
                                                && userPriv.trim().length() > 0) {
                                            buf.append(userPriv);
                                        }
                                        if (um_grade.trim().length() > 0) {
                                            buf.append(" and Org_Grade='"
                                                    + um_grade.trim() + "'");
                                        }
                                        buf.append(" order by "
                                                + Sql_switcher.isnull("score",
                                                "0") + " asc");
                                        rs2 = dao.search(buf.toString());
                                        while (rs2.next()) {
                                            String object_id = rs2
                                                    .getString("object_id");
                                            buf.setLength(0);
                                            buf.append("update per_result_"
                                                    + this.planid
                                                    + " set grade_id=" + id
                                                    + ",resultdesc='"
                                                    + itemname + "'");
                                            if (xiFormula == null
                                                    || xiFormula.trim()
                                                    .length() == 0) {
                                                buf.append(",exX_object="
                                                        + xishu);
                                            }
                                            buf.append(" where object_id='"
                                                    + object_id + "'");
                                            dao.update(buf.toString());
                                            ce--;
                                            if (ce == 0) {
                                                xblea = true;
                                                break;
                                            }
                                        }
                                        if (xblea) {
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else // 多个等级项目和的情况
                {
                    StringBuffer buf3 = new StringBuffer();
                    for (int x = 0; x < actIds2.size(); x++) {
                        buf3.append(" or grade_id=" + (String) actIds2.get(x));
                    }

                    StringBuffer buf2 = new StringBuffer();
                    for (int x = 0; x < actIds2.size(); x++) {
                        buf2.append(" or id=" + (String) actIds2.get(x));
                    }
                    String sql = "select id,itemname,xishu from per_degreedesc where degree_id="
                            + gradeID
                            + " and ("
                            + buf2.substring(3)
                            + ") "
                            + orderbyStr;
                    rs1 = dao.search(sql);
                    int xF = 0;// 多个等级中的第一个
                    int xL = 0;// 多个等级中最后一个
                    int xI = 0;
                    String itemname_xF = "";
                    float xishu_xF = 0;
                    while (rs1.next()) {
                        xI++;
                        if (xI == 1) {
                            xF = rs1.getInt(1);
                            itemname_xF = rs1.getString("itemname");
                            xishu_xF = rs1.getFloat("xishu");
                        }

                        xL = rs1.getInt(1);
                    }

                    // 取得多个等级项目的上一个等级和下一个等级 如 全部为(A B C D E)如果被选等级为C D
                    // 那么上一个等级就是B 下一个等级就是E
                    int m = 0;
                    int l = 0;
                    for (int j = 0; j < gradeList.size(); j++) {
                        abean = (LazyDynaBean) gradeList.get(j);
                        int tempid = Integer.parseInt((String) abean.get("id"));
                        if (xF > tempid) {
                            m = j;
                            id_pre = (String) abean.get("id");
                            itemname_pre = (String) abean.get("itemname");
                            xishu_pre = Float.parseFloat((String) abean
                                    .get("xishu"));

                        }
                        if (id_next.length() == 0 && xL < tempid) {
                            id_next = (String) abean.get("id");
                            itemname_next = (String) abean.get("itemname");
                            xishu_next = Float.parseFloat((String) abean
                                    .get("xishu"));
                            l = j;
                        }
                    }

                    double temp = 0;
                    int objnum = objList.size();
                    if ("1".equals(mode)) {
                        temp = objList.size() * Float.parseFloat(value);
                    } else if ("2".equals(mode)) {
                        temp = Double.parseDouble(value);
                    }

                    if ("1".equals(oper))// 不少于
                    {
                        if (toRoundOff != null
                                && toRoundOff.trim().length() > 0
                                && "1".equalsIgnoreCase(toRoundOff)) {
                            objnum = Integer.parseInt(PubFunc.round(
                                    String.valueOf(temp), 0)); // 四舍五入
                        } else {
                            objnum = (int) Math.ceil(temp); // 向上取整 只要有小数则进1 3.0
                        }
                        // 3.1 3.8 返回 3.0
                        // 4.0 4.0
                    } else if ("2".equals(oper))// 不多于
                    {
                        if (toRoundOff != null
                                && toRoundOff.trim().length() > 0
                                && "1".equalsIgnoreCase(toRoundOff)) {
                            objnum = Integer.parseInt(PubFunc.round(
                                    String.valueOf(temp), 0)); // 四舍五入
                        } else {
                            objnum = (int) Math.floor(temp); // 向下取整 3.0 3.1 3.8
                        }
                        // 返回 3.0 3.0
                        // 3.0
                    }

                    if ("false".equalsIgnoreCase(grouped)) {
                        buf.setLength(0);
                        buf.append("select count(*) from per_result_"
                                + this.planid + " where 1=1 ");
                        if (buf3.length() > 0) {
                            buf.append(" and (" + buf3.substring(3) + ")");
                        }
                        if (userPriv != null && userPriv.trim().length() > 0) {
                            buf.append(userPriv);
                        }
                        if (um_grade.trim().length() > 0) {
                            buf.append(" and Org_Grade='" + um_grade.trim()
                                    + "'");
                        }
                        rs1 = dao.search(buf.toString());
                        if (rs1.next()) {
                            int _num = rs1.getInt(1);
                            if (um_grade.trim().length() > 0 && _num == 0)// 没有部门等级设为
                            // um_grade的考核对象就不用往下走规则了
                            {
                                continue;
                            }

                            if ("2".equals(oper) && _num > objnum)// 不多于
                            // 多出来的补给下一个等级
                            {
                                sql = "select * from per_result_" + this.planid
                                        + " where 1=1 ";
                                if (buf3.length() > 0) {
                                    sql += " and (" + buf3.substring(3) + ")";
                                }
                                if (userPriv != null
                                        && userPriv.trim().length() > 0) {
                                    sql += userPriv;
                                }
                                if (um_grade.trim().length() > 0) {
                                    sql += " and Org_Grade='" + um_grade.trim()
                                            + "'";
                                }
                                sql += " order by "
                                        + Sql_switcher.isnull("score", "0")
                                        + " asc";
                                rs2 = dao.search(sql);
                                int ce = _num - objnum;
                                while (rs2.next()) {
                                    String object_id = rs2
                                            .getString("object_id");
                                    sql = "update per_result_" + this.planid
                                            + " set grade_id=" + id_next
                                            + ",resultdesc='" + itemname_next
                                            + "'";
                                    if (xiFormula == null
                                            || xiFormula.trim().length() == 0) {
                                        sql += ",exX_object=" + xishu_next;
                                    }
                                    sql += " where object_id='" + object_id
                                            + "'";
                                    dao.update(sql);
                                    ce--;
                                    if (ce == 0) {
                                        break;
                                    }
                                }
                            } else if ("1".equals(oper) && _num < objnum)// 不少于
                            // 从高一级的等级补
                            {
                                int ce = objnum - _num;
                                boolean xblea = false;
                                for (int k = m; k >= 0; k--) {
                                    abean = (LazyDynaBean) gradeList.get(k);
                                    String id_pres = (String) abean.get("id");

                                    sql = "select * from per_result_"
                                            + this.planid + " where grade_id="
                                            + id_pres + " ";
                                    if (userPriv != null
                                            && userPriv.trim().length() > 0) {
                                        sql += userPriv;
                                    }
                                    if (um_grade.trim().length() > 0) {
                                        sql += " and Org_Grade='"
                                                + um_grade.trim() + "'";
                                    }
                                    sql += " order by "
                                            + Sql_switcher.isnull("score", "0")
                                            + " asc";
                                    rs2 = dao.search(sql);
                                    while (rs2.next()) {
                                        String object_id = rs2
                                                .getString("object_id");

                                        sql = "update per_result_"
                                                + this.planid
                                                + " set grade_id=" + xF
                                                + ",resultdesc='" + itemname_xF
                                                + "'";
                                        if (xiFormula == null
                                                || xiFormula.trim().length() == 0) {
                                            sql += ",exX_object=" + xishu_xF;
                                        }
                                        sql += " where object_id='" + object_id
                                                + "'";
                                        dao.update(sql);
                                        ce--;
                                        if (ce == 0) {
                                            xblea = true;
                                            break;
                                        }
                                    }
                                    if (xblea) {
                                        break;
                                    }
                                }
                            }
                        } else if ("1".equals(oper) && objnum > 0) // 不少于
                        // 从高一级的等级补
                        {
                            int ce = objnum;
                            boolean xblea = false;
                            for (int k = m; k >= 0; k--) {
                                abean = (LazyDynaBean) gradeList.get(k);
                                String id_pres = (String) abean.get("id");

                                sql = "select * from per_result_" + this.planid
                                        + " where grade_id=" + id_pres + " ";
                                if (userPriv != null
                                        && userPriv.trim().length() > 0) {
                                    sql += userPriv;
                                }
                                if (um_grade.trim().length() > 0) {
                                    sql += " and Org_Grade='" + um_grade.trim()
                                            + "'";
                                }
                                sql += " order by "
                                        + Sql_switcher.isnull("score", "0")
                                        + " asc";
                                rs2 = dao.search(sql);
                                while (rs2.next()) {
                                    String object_id = rs2
                                            .getString("object_id");

                                    sql = "update per_result_" + this.planid
                                            + " set grade_id=" + xF
                                            + ",resultdesc='" + itemname_xF
                                            + "'";
                                    if (xiFormula == null
                                            || xiFormula.trim().length() == 0) {
                                        sql += ",exX_object=" + xishu_xF;
                                    }
                                    sql += " where object_id='" + object_id
                                            + "'";
                                    dao.update(sql);
                                    ce--;
                                    if (ce == 0) {
                                        xblea = true;
                                        break;
                                    }
                                }
                                if (xblea) {
                                    break;
                                }
                            }
                        }
                    } else {
                        sql = "select " + grouped
                                + ",count(*) from per_result_" + this.planid
                                + " where 1=1 ";
                        if (buf3.length() > 0) {
                            sql += " and (" + buf3.substring(3) + ")";
                        }
                        if (userPriv != null && userPriv.trim().length() > 0) {
                            sql += userPriv;
                        }
                        if (um_grade.trim().length() > 0) {
                            sql += " and Org_Grade='" + um_grade.trim() + "'";
                        }
                        sql += " group by " + grouped + "";
                        rs1 = dao.search(sql);
                        HashMap groupDataMap = new HashMap();
                        while (rs1.next()) {
                            String e0122 = rs1.getString(1);

                            groupDataMap.put(e0122, "1");
                            int _num = Integer.parseInt(rs1.getString(2));
                            groupDataMap.put(e0122, "" + _num);

                        }
                        Set keySet = groupMap.keySet();
                        for (Iterator t = keySet.iterator(); t.hasNext(); ) {
                            int _num = 0;
                            String e0122 = (String) t.next();
                            if (groupDataMap.get(e0122) != null) {
                                _num = Integer.parseInt((String) groupDataMap.get(e0122));
                            }

                            if (um_grade.trim().length() > 0 && _num == 0)// 没有部门等级设为
                            // um_grade的考核对象就不用往下走规则了
                            {
                                continue;
                            }

                            int e0122EmpCount = Integer
                                    .parseInt((String) e0122EmpMap.get(e0122));// 以部门为单位的总人数
                            if ("1".equals(mode)) {
                                temp = e0122EmpCount * Float.parseFloat(value);
                            } else if ("2".equals(mode)) {
                                temp = Double.parseDouble(value);
                            }

                            if ("1".equals(oper))// 不少于
                            {
                                if (toRoundOff != null
                                        && toRoundOff.trim().length() > 0
                                        && "1".equalsIgnoreCase(toRoundOff)) {
                                    objnum = Integer.parseInt(PubFunc.round(
                                            String.valueOf(temp), 0)); // 四舍五入
                                } else {
                                    objnum = (int) Math.ceil(temp); // 向上取整
                                }
                                // 只要有小数则进1
                                // 3.0 3.1
                                // 3.8 返回
                                // 3.0 4.0
                                // 4.0
                            } else if ("2".equals(oper))// 不多于
                            {
                                if (toRoundOff != null
                                        && toRoundOff.trim().length() > 0
                                        && "1".equalsIgnoreCase(toRoundOff)) {
                                    objnum = Integer.parseInt(PubFunc.round(
                                            String.valueOf(temp), 0)); // 四舍五入
                                } else {
                                    objnum = (int) Math.floor(temp); // 向下取整 3.0
                                }
                                // 3.1
                                // 3.8
                                // 返回
                                // 3.0
                                // 3.0
                                // 3.0
                            }

                            if ("2".equals(oper) && _num > objnum)// 不多于
                            // 多出来的补给下一个等级
                            {
                                sql = "select * from per_result_" + this.planid
                                        + " ";
                                if (e0122 == null) {
                                    sql += " where " + grouped + " is null ";
                                } else {
                                    sql += " where " + grouped + "='" + e0122
                                            + "' ";
                                }
                                if (buf3.length() > 0) {
                                    sql += " and (" + buf3.substring(3) + ")";
                                }
                                if (userPriv != null
                                        && userPriv.trim().length() > 0) {
                                    sql += userPriv;
                                }
                                if (um_grade.trim().length() > 0) {
                                    sql += " and Org_Grade='" + um_grade.trim()
                                            + "'";
                                }
                                sql += " order by "
                                        + Sql_switcher.isnull("score", "0")
                                        + " asc";
                                rs2 = dao.search(sql);
                                int ce = _num - objnum;
                                while (rs2.next()) {
                                    String object_id = rs2
                                            .getString("object_id");
                                    sql = "update per_result_" + this.planid
                                            + " set grade_id=" + id_next
                                            + ",resultdesc='" + itemname_next
                                            + "'";
                                    if (xiFormula == null
                                            || xiFormula.trim().length() == 0) {
                                        sql += ",exX_object=" + xishu_next;
                                    }
                                    sql += " where object_id='" + object_id
                                            + "'";
                                    dao.update(sql);
                                    ce--;
                                    if (ce == 0) {
                                        break;
                                    }
                                }
                            } else if ("1".equals(oper) && _num < objnum)// 不少于
                            // 从高一级的等级补
                            {
                                int ce = objnum - _num;
                                boolean xblea = false;
                                if (m == 0 && l < gradeList.size()) //1级不少于时，需要拽
                                {
                                    for (int k = l; k < gradeList.size(); k++) {
                                        abean = (LazyDynaBean) gradeList.get(k);
                                        String id_pres = (String) abean.get("id");

                                        sql = "select * from per_result_"
                                                + this.planid + " where grade_id="
                                                + id_pres + " ";
                                        if (e0122 == null) {
                                            sql += " and " + grouped + " is null ";
                                        } else {
                                            sql += " and " + grouped + "='" + e0122
                                                    + "' ";
                                        }
                                        if (userPriv != null
                                                && userPriv.trim().length() > 0) {
                                            sql += userPriv;
                                        }
                                        if (um_grade.trim().length() > 0) {
                                            sql += " and Org_Grade='"
                                                    + um_grade.trim() + "'";
                                        }
                                        sql += " order by "
                                                + Sql_switcher.isnull("score", "0")
                                                + " desc";
                                        rs2 = dao.search(sql);
                                        while (rs2.next()) {
                                            String object_id = rs2
                                                    .getString("object_id");

                                            sql = "update per_result_"
                                                    + this.planid
                                                    + " set grade_id=" + xF
                                                    + ",resultdesc='" + itemname_xF
                                                    + "'";
                                            if (xiFormula == null
                                                    || xiFormula.trim().length() == 0) {
                                                sql += ",exX_object=" + xishu_xF;
                                            }
                                            sql += " where object_id='" + object_id
                                                    + "'";
                                            dao.update(sql);
                                            ce--;
                                            if (ce == 0) {
                                                xblea = true;
                                                break;
                                            }
                                        }
                                        if (xblea) {
                                            break;
                                        }


                                    }

                                } else {
                                    for (int k = m; k >= 0; k--) {
                                        abean = (LazyDynaBean) gradeList.get(k);
                                        String id_pres = (String) abean.get("id");

                                        sql = "select * from per_result_"
                                                + this.planid + " where grade_id="
                                                + id_pres + " ";
                                        if (e0122 == null) {
                                            sql += " and " + grouped + " is null ";
                                        } else {
                                            sql += " and " + grouped + "='" + e0122
                                                    + "' ";
                                        }
                                        if (userPriv != null
                                                && userPriv.trim().length() > 0) {
                                            sql += userPriv;
                                        }
                                        if (um_grade.trim().length() > 0) {
                                            sql += " and Org_Grade='"
                                                    + um_grade.trim() + "'";
                                        }
                                        sql += " order by "
                                                + Sql_switcher.isnull("score", "0")
                                                + " asc";
                                        rs2 = dao.search(sql);
                                        while (rs2.next()) {
                                            String object_id = rs2
                                                    .getString("object_id");

                                            sql = "update per_result_"
                                                    + this.planid
                                                    + " set grade_id=" + xF
                                                    + ",resultdesc='" + itemname_xF
                                                    + "'";
                                            if (xiFormula == null
                                                    || xiFormula.trim().length() == 0) {
                                                sql += ",exX_object=" + xishu_xF;
                                            }
                                            sql += " where object_id='" + object_id
                                                    + "'";
                                            dao.update(sql);
                                            ce--;
                                            if (ce == 0) {
                                                xblea = true;
                                                break;
                                            }
                                        }
                                        if (xblea) {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        if ("1".equals(oper)) {
                            for (Iterator t = groupMap.keySet().iterator(); t
                                    .hasNext(); ) {
                                String key = (String) t.next();
                                if (groupDataMap.get(key) == null) {
                                    int e0122EmpCount = Integer
                                            .parseInt((String) e0122EmpMap
                                                    .get(key));// 以部门为单位的总人数
                                    if ("1".equals(mode)) {
                                        temp = e0122EmpCount
                                                * Float.parseFloat(value);
                                    } else if ("2".equals(mode)) {
                                        temp = Double.parseDouble(value);
                                    }

                                    if ("1".equals(oper))// 不少于
                                    {
                                        if (toRoundOff != null
                                                && toRoundOff.trim().length() > 0
                                                && "1"
                                                .equalsIgnoreCase(toRoundOff)) {
                                            objnum = Integer
                                                    .parseInt(PubFunc.round(
                                                            String.valueOf(temp),
                                                            0)); // 四舍五入
                                        } else {
                                            objnum = (int) Math.ceil(temp); // 向上取整
                                        }
                                        // 只要有小数则进1
                                        // 3.0
                                        // 3.1
                                        // 3.8
                                        // 返回
                                        // 3.0
                                        // 4.0
                                        // 4.0
                                    } else if ("2".equals(oper))// 不多于
                                    {
                                        if (toRoundOff != null
                                                && toRoundOff.trim().length() > 0
                                                && "1"
                                                .equalsIgnoreCase(toRoundOff)) {
                                            objnum = Integer
                                                    .parseInt(PubFunc.round(
                                                            String.valueOf(temp),
                                                            0)); // 四舍五入
                                        } else {
                                            objnum = (int) Math.floor(temp); // 向下取整
                                        }
                                        // 3.0
                                        // 3.1
                                        // 3.8
                                        // 返回
                                        // 3.0
                                        // 3.0
                                        // 3.0
                                    }

                                    int ce = objnum;
                                    boolean xblea = false;
                                    for (int k = m; k >= 0; k--) {
                                        abean = (LazyDynaBean) gradeList.get(k);
                                        String id_pres = (String) abean
                                                .get("id");

                                        sql = "select * from per_result_"
                                                + this.planid
                                                + " where grade_id=" + id_pres
                                                + " ";
                                        if (key == null) {
                                            sql += " and " + grouped
                                                    + " is null ";
                                        } else {
                                            sql += " and " + grouped + "='"
                                                    + key + "' ";
                                        }
                                        if (userPriv != null
                                                && userPriv.trim().length() > 0) {
                                            sql += userPriv;
                                        }
                                        if (um_grade.trim().length() > 0) {
                                            sql += " and Org_Grade='"
                                                    + um_grade.trim() + "'";
                                        }
                                        sql += " order by "
                                                + Sql_switcher.isnull("score",
                                                "0") + " asc";
                                        rs2 = dao.search(sql);
                                        while (rs2.next()) {
                                            String object_id = rs2
                                                    .getString("object_id");

                                            sql = "update per_result_"
                                                    + this.planid
                                                    + " set grade_id=" + xF
                                                    + ",resultdesc='"
                                                    + itemname_xF + "'";
                                            if (xiFormula == null
                                                    || xiFormula.trim()
                                                    .length() == 0) {
                                                sql += ",exX_object="
                                                        + xishu_xF;
                                            }
                                            sql += " where object_id='"
                                                    + object_id + "'";
                                            dao.update(sql);
                                            ce--;
                                            if (ce == 0) {
                                                xblea = true;
                                                break;
                                            }
                                        }
                                        if (xblea) {
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (rs1 != null) {
                rs1.close();
            }
            if (rs2 != null) {
                rs2.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 混合(先分值后比例)计算等级
     *
     * @param gradeID
     * @param objList
     * @param xiFormula
     * @param domainflag
     */
    private void computeMixDegree2(String gradeID, ArrayList objList,
                                   String xiFormula, int domainflag, String _strict,
                                   ArrayList gradeList) {
        RowSet rowSet = null;
        RowSet rs = null;
        Hashtable paramters = loadxml.getDegreeWhole();
        String deviationScoreUsed = (String) paramters.get("deviationScoreUsed");//是否使用纠偏总分 0不是  1是
        String total_score = "score";
        if ("1".equals(deviationScoreUsed)) {
            total_score = "reviseScore";
        }
        try {
            String userPriv = getPrivWhere(userView);
            if (this.code != null && this.code.trim().length() > 0
                    && !"-1".equals(this.code)) {
                if (AdminCode.getCodeName("UN", this.code) != null
                        && AdminCode.getCodeName("UN", this.code).length() > 0) {
                    userPriv += " and b0110 like '" + this.code + "%'";
                } else if (AdminCode.getCodeName("UM", this.code) != null
                        && AdminCode.getCodeName("UM", this.code).length() > 0) {
                    userPriv += " and e0122 like '" + this.code + "%'";
                }
            }
            LazyDynaBean abean = null;
            ContentDAO dao = new ContentDAO(this.conn);
            String _bottomscore = "0";
            rowSet = dao.search("select id,itemname,"
                    + Sql_switcher.isnull("topscore", "0") + " topscore,"
                    + Sql_switcher.isnull("bottomscore", "0") + " bottomscore,"
                    + Sql_switcher.isnull("percentvalue", "0")
                    + " percentvalue," + Sql_switcher.isnull("strict", "0")
                    + " strict," + Sql_switcher.isnull("xishu", "0")
                    + " xishu from per_degreedesc  where degree_id=" + gradeID
                    + "  order by id ");
            ArrayList _gradeList = new ArrayList();
            int n = 0;
            while (rowSet.next()) {
                String id = rowSet.getString("id");
                String itemname = rowSet.getString("itemname");
                String percentvalue = rowSet.getString("percentvalue");
                String strict = rowSet.getString("strict");
                String xishu = rowSet.getString("xishu");
                String topscore = rowSet.getString("topscore");
                String bottomscore = rowSet.getString("bottomscore");
                if (n == 0) {
                    _bottomscore = rowSet.getString("bottomscore");
                }
                abean = new LazyDynaBean();
                abean.set("id", id);
                abean.set("itemname", itemname);
                abean.set("percentvalue", percentvalue);
                abean.set("strict", strict);
                abean.set("xishu", xishu);
                abean.set("topscore", topscore);
                abean.set("bottomscore", bottomscore);
                abean.set("num", PubFunc.multiple(String.valueOf((Double
                        .parseDouble(percentvalue) * 0.01)), String
                        .valueOf(objList.size()), 0));
                _gradeList.add(abean);
                n++;
            }

            String str = "update per_result_" + this.planid
                    + " set resultdesc='' where 1=1 ";
            if (userPriv != null && userPriv.trim().length() > 0) {
                str += userPriv;
            }
            dao.update(str);
            n = 0;
            for (int i = 0; i < gradeList.size(); i++) {

                abean = (LazyDynaBean) gradeList.get(i);
                String id = (String) abean.get("id");
                String itemname = (String) abean.get("itemname");
                float topscore = Float.parseFloat((String) abean
                        .get("topscore"));
                float bottomscore = Float.parseFloat((String) abean
                        .get("bottomscore"));
                float xishu = Float.parseFloat((String) abean.get("xishu"));

                String left_f = "<=";
                if (n == 0) {
                    left_f = "";
                }
                String right_f = ">";
                if (domainflag == 1) // 1:下限封闭
                {
                    left_f = "<";
                    right_f = ">=";
                    if (n == 0) {
                        right_f = "";
                    }
                }
                String sql = "";
                if (xiFormula == null || xiFormula.trim().length() == 0) {
                    sql = "update per_result_" + this.planid + " set grade_id="
                            + id + ",resultdesc='" + itemname + "',exX_object="
                            + xishu + " where 1=1 ";
                } else {
                    sql = "update per_result_" + this.planid + " set grade_id="
                            + id + ",resultdesc='" + itemname + "' where 1=1 ";
                }

                if (left_f.length() > 0) {
                    sql += " and " + total_score + " " + left_f + topscore;
                }
                if (right_f.length() > 0) {
                    sql += " and " + total_score + " " + right_f + bottomscore;
                }
                if (userPriv != null && userPriv.trim().length() > 0) {
                    sql += userPriv;
                }
                if (i == 0 || i == gradeList.size() - 1) {
                    dao.update(sql);
                }
                n++;
            }
            if (_strict.length() > 0 && !"0".equals(_strict)) // 有限制
            {
                int num = Integer.parseInt(PubFunc.round(
                        String.valueOf(objList.size()
                                * Float.parseFloat(_strict)), 0));
                n = 0;
                String right_f = ">";
                if (domainflag == 1) // 1:下限封闭
                {
                    right_f = ">=";
                }
                String sql = "select count(*) from per_result_" + this.planid
                        + " where " + total_score + "" + right_f + _bottomscore;
                if (userPriv != null && userPriv.trim().length() > 0) {
                    sql += userPriv;
                }
                // sql+=" order by "+Sql_switcher.isnull("score","0")+" desc";
                rowSet = dao.search(sql);
                if (rowSet.next()) {
                    int _num = rowSet.getInt(1);
                    if (_num > num) {
                        sql = "select * from per_result_" + this.planid
                                + " where " + total_score + "" + right_f + _bottomscore;
                        if (userPriv != null && userPriv.trim().length() > 0) {
                            sql += userPriv;
                        }
                        sql += " order by " + Sql_switcher.isnull("" + total_score + "", "0")
                                + " asc";
                        rs = dao.search(sql);
                        int ce = _num - num;
                        while (rs.next()) {
                            String object_id = rs.getString("object_id");

                            sql = "update per_result_" + this.planid
                                    + " set  resultdesc=''";
                            sql += " where object_id='" + object_id + "'";
                            dao.update(sql);
                            ce--;
                            if (ce == 0) {
                                break;
                            }
                        }

                    }

                }
            }

            ArrayList objList_temp = objList;

            objList = new ArrayList();
            String sql = "select object_id,"
                    + Sql_switcher.isnull("" + total_score + "", "0")
                    + " score from per_result_" + this.planid + " where 1=1 "
                    + " and ( resultdesc is null or "
                    + Sql_switcher.length("resultdesc") + "=0 )";
            if (userPriv != null && userPriv.trim().length() > 0) {
                sql += userPriv;
            }
            sql += " order by " + Sql_switcher.isnull("" + total_score + "", "0") + " desc";

            rowSet = dao.search(sql);
            abean = new LazyDynaBean();
            while (rowSet.next()) {
                abean = new LazyDynaBean();
                abean.set("object_id", rowSet.getString("object_id"));
                abean.set("score", rowSet.getString("" + total_score + ""));
                objList.add(abean);
            }

            n = 0;
            StringBuffer other_obj = new StringBuffer("");
            for (int i = 0; i < _gradeList.size(); i++) {
                abean = (LazyDynaBean) _gradeList.get(i);
                String id = (String) abean.get("id");
                String itemname = (String) abean.get("itemname");
                String percentvalue = (String) abean.get("percentvalue");
                String strict = (String) abean.get("strict");
                String xishu = (String) abean.get("xishu");

                int num = Integer.parseInt(PubFunc.multiple(String
                                .valueOf((Double.parseDouble(percentvalue) * 0.01)),
                        String.valueOf(objList.size()), 0));
                int index = 0;
                str = "";
                if (xiFormula == null || xiFormula.trim().length() == 0) {
                    str = ",exX_object=" + xishu;
                }
                for (int j = n; j < objList.size(); j++) {
                    abean = (LazyDynaBean) objList.get(j);
                    String object_id = (String) abean.get("object_id");
                    String score = (String) abean.get("score");
                    index++;
                    if (index <= num) {
                        if (i == 0 || i == _gradeList.size() - 1) {
                            continue;
                        }
                        dao.update("update per_result_" + this.planid
                                + " set grade_id=" + id + ",resultdesc='"
                                + itemname + "'" + str + " where object_id='"
                                + object_id + "'");
                    } else {
                        n = j;
                        break;
                    }

                }
            }

            abean = (LazyDynaBean) _gradeList.get(_gradeList.size() - 2);
            sql = "update per_result_" + this.planid + " set grade_id="
                    + ((String) abean.get("id")) + ",resultdesc='"
                    + ((String) abean.get("itemname")) + "'" + str
                    + " where ( resultdesc is null or "
                    + Sql_switcher.length("resultdesc") + "=0 )";
            if (userPriv != null && userPriv.trim().length() > 0) {
                sql += userPriv;
            }
            dao.update(sql);

            if (rowSet != null) {
                rowSet.close();
            }
            if (rs != null) {
                rs.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * 混合(先比例后分值)计算等级
     *
     * @param gradeID
     * @param objList
     * @param xiFormula
     * @param domainflag
     */
    private void computeMixDegree(String gradeID, ArrayList objList,
                                  String xiFormula, int domainflag, String _strict,
                                  ArrayList gradeList) {
        try {
            Hashtable paramters = loadxml.getDegreeWhole();
            String deviationScoreUsed = (String) paramters.get("deviationScoreUsed");//是否使用纠偏总分 0不是  1是
            String total_score = "score";
            if ("1".equals(deviationScoreUsed)) {
                total_score = "reviseScore";
            }
            String userPriv = getPrivWhere(userView);
            if (this.code != null && this.code.trim().length() > 0
                    && !"-1".equals(this.code)) {
                if (AdminCode.getCodeName("UN", this.code) != null
                        && AdminCode.getCodeName("UN", this.code).length() > 0) {
                    userPriv += " and b0110 like '" + this.code + "%'";
                } else if (AdminCode.getCodeName("UM", this.code) != null
                        && AdminCode.getCodeName("UM", this.code).length() > 0) {
                    userPriv += " and e0122 like '" + this.code + "%'";
                }
            }
            LazyDynaBean abean = null;
            ContentDAO dao = new ContentDAO(this.conn);
            for (int i = 0; i < gradeList.size(); i++) {
                if (i == 0 || i == gradeList.size() - 1) {
                    continue;
                }
                abean = (LazyDynaBean) gradeList.get(i);
                String id = (String) abean.get("id");
                String itemname = (String) abean.get("itemname");
                float topscore = Float.parseFloat((String) abean
                        .get("topscore"));
                float bottomscore = Float.parseFloat((String) abean
                        .get("bottomscore"));
                float xishu = Float.parseFloat((String) abean.get("xishu"));
                String left_f = "<=";
                String right_f = ">";
                if (domainflag == 1) // 1:下限封闭
                {
                    left_f = "<";
                    right_f = ">=";
                }
                String sql = "";
                if (xiFormula == null || xiFormula.trim().length() == 0) {
                    sql = "update per_result_" + this.planid + " set grade_id="
                            + id + ",resultdesc='" + itemname + "',exX_object="
                            + xishu + " where 1=1 ";
                } else {
                    sql = "update per_result_" + this.planid + " set grade_id="
                            + id + ",resultdesc='" + itemname + "' where 1=1 ";
                }

                if (left_f.length() > 0) {
                    sql += " and " + total_score + " " + left_f + topscore;
                }
                if (right_f.length() > 0) {
                    sql += " and " + total_score + " " + right_f + bottomscore;
                }

                if (userPriv != null && userPriv.trim().length() > 0) {
                    sql += userPriv;
                }
                dao.update(sql);
            }

            gradeList.clear();
            RowSet rowSet = dao.search("select id,itemname,"
                    + Sql_switcher.isnull("topscore", "0") + " topscore,"
                    + Sql_switcher.isnull("bottomscore", "0") + " bottomscore,"
                    + Sql_switcher.isnull("percentvalue", "0")
                    + " percentvalue," + Sql_switcher.isnull("strict", "0")
                    + " strict," + Sql_switcher.isnull("xishu", "0")
                    + " xishu from per_degreedesc  where degree_id=" + gradeID
                    + "  order by id ");
            while (rowSet.next()) {
                String id = rowSet.getString("id");
                String itemname = rowSet.getString("itemname");
                String percentvalue = rowSet.getString("percentvalue");
                String strict = rowSet.getString("strict");
                String xishu = rowSet.getString("xishu");
                String topscore = rowSet.getString("topscore");
                String bottomscore = rowSet.getString("bottomscore");
                abean = new LazyDynaBean();
                abean.set("id", id);
                abean.set("itemname", itemname);
                abean.set("percentvalue", percentvalue);
                abean.set("strict", strict);
                abean.set("xishu", xishu);
                abean.set("topscore", topscore);
                abean.set("bottomscore", bottomscore);
                abean.set("num", PubFunc.multiple(String.valueOf((Double
                        .parseDouble(percentvalue) * 0.01)), String
                        .valueOf(objList.size()), 0));
                gradeList.add(abean);
            }

            StringBuffer other_obj = new StringBuffer("");
            for (int i = 0; i < gradeList.size(); i++) {
                abean = (LazyDynaBean) gradeList.get(i);
                String id = (String) abean.get("id");
                String itemname = (String) abean.get("itemname");
                String percentvalue = (String) abean.get("percentvalue");
                String strict = (String) abean.get("strict");
                String xishu = (String) abean.get("xishu");
                int num = Integer.parseInt((String) abean.get("num"));

                if (!(i == 0 || i == gradeList.size() - 1)) {
                    continue;
                }
                int index = 0;
                String str = "";
                if (xiFormula == null || xiFormula.trim().length() == 0) {
                    str = ",exX_object=" + xishu;
                }
                if (i == 0) {
                    for (int j = 0; j < objList.size(); j++) {
                        abean = (LazyDynaBean) objList.get(j);
                        String object_id = (String) abean.get("object_id");
                        String score = (String) abean.get("score");
                        index++;
                        if (index <= num) {
                            dao.update("update per_result_" + this.planid
                                    + " set grade_id=" + id + ",resultdesc='"
                                    + itemname + "'" + str
                                    + " where object_id='" + object_id + "'");
                            if (i == 0
                                    && _strict.length() > 0
                                    && Float.parseFloat(score) < Float
                                    .parseFloat(_strict)) {
                                other_obj.append(",'" + object_id + "'");
                            }
                        } else {
                            break;
                        }
                    }
                } else {
                    for (int j = objList.size() - 1; j >= 0; j--) {
                        abean = (LazyDynaBean) objList.get(j);
                        String object_id = (String) abean.get("object_id");
                        String score = (String) abean.get("score");
                        index++;
                        if (index <= num) {
                            dao.update("update per_result_" + this.planid
                                    + " set grade_id=" + id + ",resultdesc='"
                                    + itemname + "'" + str
                                    + " where object_id='" + object_id + "'");
                        } else {
                            break;
                        }
                    }
                }
            }

            if (other_obj.length() > 0 && gradeList.size() > 1) {
                abean = (LazyDynaBean) gradeList.get(1);
                String id = (String) abean.get("id");
                String itemname = (String) abean.get("itemname");
                String xishu = (String) abean.get("xishu");
                String str = "";
                if (xiFormula == null || xiFormula.trim().length() == 0) {
                    str = ",exX_object=" + xishu;
                }

                dao.update("update per_result_" + this.planid
                        + " set grade_id=" + id + ",resultdesc='" + itemname
                        + "'" + str + " where object_id in ( "
                        + other_obj.substring(1) + " )");
            }

            if (rowSet != null) {
                rowSet.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * 根据比例计算等级
     *
     * @param gradeID
     * @param objList
     * @param xiFormula
     * @param gradeList
     * @param _strict
     */
    private void computePercentDegree(String gradeID, ArrayList objList,
                                      String xiFormula, ArrayList gradeList, String _strict) {

        try {
            // 2009-11-30 wjh
            // 原先是从高到低排等级, 最后会出现好几个情况都舍去的情形, 最后剩下人员按最后一级排,
            // 但用户一般较注意前面的跟最后一级, 中间的则相对灵活, 所以, 在处理时,

            // 确定每个等级的人数
            // 每个等级的人数 = 每级比例*总人数(小数位数做四舍五入处理)
            // 如各级人数之和大于总人数
            // 从后到前，检查哪个等级小数大于或等于0.5且最小, 则该等级-1人. 依次处理
            // (例：A26% B25% C25% D24% 11人)
            // 如各级人数之和小于总人数(三个以上等级均不到0.5, 都做了舍去处理)
            // 从前到后，检查哪个等级小数小于0.5且最大, 则该等级+1人. 依次处理
            // (例：A26% B25% C25% D24% 9人)

            ContentDAO dao = new ContentDAO(this.conn);

            LazyDynaBean abean = null;
            int n = 0;
            StringBuffer other_obj = new StringBuffer("");
            for (int i = 0; i < gradeList.size(); i++) {
                abean = (LazyDynaBean) gradeList.get(i);
                String id = (String) abean.get("id");
                String itemname = (String) abean.get("itemname");
                String percentvalue = (String) abean.get("percentvalue");
                String strict = (String) abean.get("strict");
                String xishu = (String) abean.get("xishu");
                int num = Integer.parseInt((String) abean.get("num"));

                int index = 0;
                String str = "";
                if (xiFormula == null || xiFormula.trim().length() == 0) {
                    str = ",exX_object=" + xishu;
                }

                for (int j = n; j < objList.size(); j++) {
                    abean = (LazyDynaBean) objList.get(j);
                    String object_id = (String) abean.get("object_id");
                    String score = (String) abean.get("score");
                    index++;
                    if (index <= num) {
                        dao.update("update per_result_" + this.planid
                                + " set grade_id=" + id + ",resultdesc='"
                                + itemname + "'" + str + " where object_id='"
                                + object_id + "'");
                        if (i == 0
                                && _strict.length() > 0
                                && Float.parseFloat(score) < Float
                                .parseFloat(_strict)) {
                            other_obj.append(",'" + object_id + "'");
                        }
                        n++;
                    } else {
                        n = j;
                        break;
                    }

                }

            }

            if (other_obj.length() > 0 && gradeList.size() > 1) {
                abean = (LazyDynaBean) gradeList.get(1);
                String id = (String) abean.get("id");
                String itemname = (String) abean.get("itemname");
                String xishu = (String) abean.get("xishu");
                String str = "";
                if (xiFormula == null || xiFormula.trim().length() == 0) {
                    str = ",exX_object=" + xishu;
                }

                dao.update("update per_result_" + this.planid
                        + " set grade_id=" + id + ",resultdesc='" + itemname
                        + "'" + str + " where object_id in ( "
                        + other_obj.substring(1) + " )");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * 按 匹配度、总分 计算等级分类
     *
     * @param domainflag 0:上限封闭 1:下限封闭
     * @param flag       4:匹配度 5：总分
     * @param gradeID
     */
    private void computeCompetencyDegree(int domainflag, String gradeID,
                                         ArrayList objList, int flag) {
        try {
            String userPriv = getPrivWhere(userView);
            if (this.code != null && this.code.trim().length() > 0
                    && !"-1".equals(this.code)) {
                if (AdminCode.getCodeName("UN", this.code) != null
                        && AdminCode.getCodeName("UN", this.code).length() > 0) {
                    userPriv += " and b0110 like '" + this.code + "%'";
                } else if (AdminCode.getCodeName("UM", this.code) != null
                        && AdminCode.getCodeName("UM", this.code).length() > 0) {
                    userPriv += " and e0122 like '" + this.code + "%'";
                }
            }
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = null;

            String order_str = " order by "
                    + Sql_switcher.isnull("topscore", "0") + " desc";
            if (domainflag == 1) // 1:下限封闭
            {
                order_str = " order by " + Sql_switcher.isnull("topscore", "0")
                        + " asc";
            }
            rowSet = dao.search(" select id,itemname,"
                    + Sql_switcher.isnull("topscore", "0") + " topscore,"
                    + Sql_switcher.isnull("bottomscore", "0")
                    + " bottomscore,xishu from per_degreedesc where degree_id="
                    + gradeID + order_str);
            int n = 0;

            ArrayList list = new ArrayList();
            LazyDynaBean _bean = new LazyDynaBean();
            while (rowSet.next()) {
                _bean = new LazyDynaBean();
                String id = rowSet.getString("id");
                String itemname = rowSet.getString("itemname") != null ? rowSet
                        .getString("itemname") : "";
                String topscore = rowSet.getString("topscore");
                String bottomscore = rowSet.getString("bottomscore");
                String xishu = rowSet.getString("xishu") != null ? rowSet
                        .getString("xishu") : "";
                _bean.set("id", id);
                _bean.set("itemname", itemname);
                _bean.set("topscore", topscore);
                _bean.set("bottomscore", bottomscore);
                _bean.set("xishu", xishu);
                list.add(_bean);
            }

            for (int i = 0; i < list.size(); i++) {
                _bean = (LazyDynaBean) list.get(i);
                String id = (String) _bean.get("id");
                String itemname = (String) _bean.get("itemname");
                String topscore = (String) _bean.get("topscore");
                String bottomscore = (String) _bean.get("bottomscore");
                String xishu = (String) _bean.get("xishu");

                String left_f = "<=";
                if (n == 0) {
                    left_f = "";
                }
                String right_f = ">";
                if (domainflag == 1) // 1:下限封闭
                {
                    left_f = "<";
                    if (i == list.size() - 1) {
                        left_f = "<=";
                    }
                    right_f = ">=";
                    if (n == 0) {
                        right_f = "";
                    }
                }

                String sql = "update per_result_" + this.planid
                        + " set grade_id=" + id + ",resultdesc='" + itemname
                        + "' where 1=1 ";
                Hashtable paramters = loadxml.getDegreeWhole();
                String deviationScoreUsed = (String) paramters.get("deviationScoreUsed");//是否使用纠偏总分 0不是  1是
                String total_score = "score";
                if ("1".equals(deviationScoreUsed)) {
                    total_score = "reviseScore";
                }
                String desc = total_score;
                if (flag == 4) {
                    desc = "mateSurmise";
                }

                if (left_f.length() > 0) {
                    sql += " and " + desc + " " + left_f + topscore;
                }
                if (right_f.length() > 0) {
                    sql += " and " + desc + " " + right_f + bottomscore;
                }

                if (userPriv != null && userPriv.trim().length() > 0) {
                    sql += userPriv;
                }
                dao.update(sql);
                n++;
            }

            if (rowSet != null) {
                rowSet.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 按分值计算等级分类
     *
     * @param domainflag 0:上限封闭 1:下限封闭
     * @param gradeID
     */
    private void computeScoreDegree(int domainflag, String gradeID,
                                    ArrayList objList, String xiFormula) {
        try {
            String userPriv = getPrivWhere(userView);
            if (this.compute_flag == 4) {
                userPriv = this.priv_where;
            }
            Hashtable paramters = loadxml.getDegreeWhole();
            String deviationScoreUsed = (String) paramters.get("deviationScoreUsed");//是否使用纠偏总分 0不是  1是
            String total_score = "score";
            if ("1".equals(deviationScoreUsed)) {
                total_score = "reviseScore";
            }
            if (this.code != null && this.code.trim().length() > 0
                    && !"-1".equals(this.code)) {
                if (AdminCode.getCodeName("UN", this.code) != null
                        && AdminCode.getCodeName("UN", this.code).length() > 0) {
                    userPriv += " and b0110 like '" + this.code + "%'";
                } else if (AdminCode.getCodeName("UM", this.code) != null
                        && AdminCode.getCodeName("UM", this.code).length() > 0) {
                    userPriv += " and e0122 like '" + this.code + "%'";
                }
            }
            ContentDAO dao = new ContentDAO(this.conn);
            String strict = "";
            RowSet rowSet = dao
                    .search("select strict from per_degreedesc  where degree_id="
                            + gradeID + " and strict is not null and strict>0");
            if (rowSet.next()) {
                strict = rowSet.getString("strict");
            }

            String order_str = " order by "
                    + Sql_switcher.isnull("topscore", "0") + " desc";
            if (domainflag == 1) // 1:下限封闭
            {
                order_str = " order by " + Sql_switcher.isnull("topscore", "0")
                        + " asc";
            }
            rowSet = dao.search(" select id,itemname,"
                    + Sql_switcher.isnull("topscore", "0") + " topscore,"
                    + Sql_switcher.isnull("bottomscore", "0")
                    + " bottomscore,xishu from per_degreedesc where degree_id="
                    + gradeID + order_str);
            int n = 0;

            ArrayList list = new ArrayList();
            LazyDynaBean _bean = new LazyDynaBean();
            while (rowSet.next()) {
                _bean = new LazyDynaBean();
                String id = rowSet.getString("id");
                String itemname = rowSet.getString("itemname") != null ? rowSet
                        .getString("itemname") : "";
                String topscore = rowSet.getString("topscore");
                String bottomscore = rowSet.getString("bottomscore");
                String xishu = rowSet.getString("xishu") != null ? rowSet
                        .getString("xishu") : "";
                _bean.set("id", id);
                _bean.set("itemname", itemname);
                _bean.set("topscore", topscore);
                _bean.set("bottomscore", bottomscore);
                _bean.set("xishu", xishu);
                list.add(_bean);
            }

            // while (rowSet.next())
            for (int i = 0; i < list.size(); i++) {
                _bean = (LazyDynaBean) list.get(i);
                String id = (String) _bean.get("id");
                String itemname = (String) _bean.get("itemname");
                String topscore = (String) _bean.get("topscore");
                String bottomscore = (String) _bean.get("bottomscore");
                String xishu = (String) _bean.get("xishu");

                String left_f = "<=";
                if (n == 0) {
                    left_f = "";
                }
                String right_f = ">";
                if (domainflag == 1) // 1:下限封闭
                {
                    left_f = "<";
                    if (i == list.size() - 1) {
                        left_f = "";
                    }
                    right_f = ">=";
                    if (n == 0) {
                        right_f = "";
                    }

                }
                /*
                 * String id = rowSet.getString("id"); String itemname =
                 * rowSet.getString("itemname"); float topscore =
                 * rowSet.getFloat("topscore"); float bottomscore =
                 * rowSet.getFloat("bottomscore"); float
                 * xishu=rowSet.getFloat("xishu");
                 */
                String sql = "";
                if ((xiFormula == null || xiFormula.trim().length() == 0)
                        && xishu != null && xishu.length() > 0) {
                    sql = "update per_result_" + this.planid + " set grade_id="
                            + id + ",resultdesc='" + itemname + "',exX_object="
                            + xishu + " where 1=1 ";
                } else {
                    sql = "update per_result_" + this.planid + " set grade_id="
                            + id + ",resultdesc='" + itemname + "' where 1=1 ";
                }

                if (left_f.length() > 0) {
                    sql += " and " + total_score + " " + left_f + topscore;
                }
                if (right_f.length() > 0) {
                    sql += " and " + total_score + " " + right_f + bottomscore;
                }

                if (userPriv != null && userPriv.trim().length() > 0) {
                    sql += userPriv;
                }
                dao.update(sql);
                n++;
            }

            if (strict.length() > 0) // 有限制
            {
                int num = Integer.parseInt(PubFunc.round(
                        String.valueOf(objList.size()
                                * Float.parseFloat(strict)), 0));
                order_str = " order by " + Sql_switcher.isnull("topscore", "0")
                        + " desc";
                rowSet = dao
                        .search(" select id,itemname,"
                                + Sql_switcher.isnull("topscore", "0")
                                + " topscore,"
                                + Sql_switcher.isnull("bottomscore", "0")
                                + " bottomscore,xishu from per_degreedesc where degree_id="
                                + gradeID + order_str);
                n = 0;

                float bottomscore = 0;
                String right_f = ">";
                if (domainflag == 1) // 1:下限封闭
                {
                    right_f = ">=";
                }

                String id = "";
                String itemname = "";
                float xishu = 0;
                while (rowSet.next()) {

                    id = rowSet.getString("id");
                    itemname = rowSet.getString("itemname");
                    xishu = rowSet.getFloat("xishu");
                    if (n == 0) {
                        bottomscore = rowSet.getFloat("bottomscore");
                    }
                    if (n == 1) {
                        break;
                    }
                    n++;
                }

                if (n == 1) {
                    String sql = "select count(*) from per_result_"
                            + this.planid + " where " + total_score + "" + right_f
                            + bottomscore;
                    if (userPriv != null && userPriv.trim().length() > 0) {
                        sql += userPriv;
                    }
                    // sql+=" order by "+Sql_switcher.isnull("score","0")+" desc";李振伟2010-07-19
                    rowSet = dao.search(sql);
                    if (rowSet.next()) {
                        int _num = rowSet.getInt(1);
                        if (_num > num) {
                            sql = "select * from per_result_" + this.planid
                                    + " where " + total_score + "" + right_f + bottomscore;
                            if (userPriv != null
                                    && userPriv.trim().length() > 0) {
                                sql += userPriv;
                            }
                            sql += " order by "
                                    + Sql_switcher.isnull("" + total_score + "", "0")
                                    + " asc";
                            rowSet = dao.search(sql);
                            int ce = _num - num;
                            while (rowSet.next()) {
                                String object_id = rowSet
                                        .getString("object_id");

                                sql = "update per_result_" + this.planid
                                        + " set grade_id=" + id
                                        + ",resultdesc='" + itemname + "'";
                                if (xiFormula == null
                                        || xiFormula.trim().length() == 0) {
                                    sql += ",exX_object=" + xishu;
                                }
                                sql += " where object_id='" + object_id + "'";
                                dao.update(sql);
                                ce--;
                                if (ce == 0) {
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            if (rowSet != null) {
                rowSet.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /* 更新关键事件的加扣分字段* */
    public void updateKeyMatterScore(HashMap ruleMap) {
        ContentDAO dao = new ContentDAO(this.conn);
        String PointScoreFromKeyEvent = "False";
        if (ruleMap.get("PointScoreFromKeyEvent") != null) {
            PointScoreFromKeyEvent = (String) ruleMap
                    .get("PointScoreFromKeyEvent"); // 指标评分优先取自关键事件
        }
        String _sqlstr = "";
        if ("True".equalsIgnoreCase(PointScoreFromKeyEvent)) {
            _sqlstr = " and ( point_id is null or point_id='' )";
        }

        String tab_name = "per_result_" + this.planid;

        try {
            editArticleA0000(tab_name);

            dao.update("update " + tab_name + " set addScore=0,minusScore=0");
            StringBuffer sql_str = new StringBuffer("update " + tab_name
                    + " set addScore=");
            if (this.planVo.getInt("object_type") != 2) // 团队
            {
                sql_str.append("(select b.s_score from  (select sum(score) s_score,b0110 from  per_key_event where score>0 "
                        + _sqlstr
                        + " and (status is null or status='03') and Object_type=1 "
                        + getMatchingTimeSql() + " group by  b0110 ) b ");
                sql_str.append(" where  b.b0110=" + tab_name
                        + ".object_id ) where exists (select null ");
                sql_str.append("from  (select sum(score) s_score,b0110 from  per_key_event where score>0  "
                        + _sqlstr
                        + "  and (status is null or status='03') and Object_type=1 "
                        + getMatchingTimeSql() + " group by  b0110 ) b ");
                sql_str.append(" where  b.b0110=" + tab_name + ".object_id )");
            } else // 人员
            {
                sql_str.append("(select b.s_score from  (select sum(score) s_score,a0100 from  per_key_event where score>0  "
                        + _sqlstr
                        + " and (status is null or status='03')  and Object_type=2 "
                        + getMatchingTimeSql() + " group by  a0100 ) b ");
                sql_str.append(" where  b.a0100=" + tab_name
                        + ".object_id ) where exists (select null ");
                sql_str.append("from  (select sum(score) s_score,a0100 from  per_key_event where score>0 "
                        + _sqlstr
                        + "  and (status is null or status='03')  and Object_type=2 "
                        + getMatchingTimeSql() + " group by  a0100 ) b ");
                sql_str.append(" where  b.a0100=" + tab_name + ".object_id )");
            }
            if (this.priv_where != null && this.priv_where.trim().length() > 0) {
                sql_str.append(this.priv_where);
            }
            dao.update(sql_str.toString());

            sql_str = new StringBuffer("update " + tab_name
                    + " set minusScore=");
            if (this.planVo.getInt("object_type") != 2) // 团队
            {
                sql_str.append("(select b.s_score from  (select sum(score) s_score,b0110 from  per_key_event where score<0 "
                        + _sqlstr
                        + "  and (status is null or status='03')  and Object_type=1 "
                        + getMatchingTimeSql() + " group by  b0110 ) b ");
                sql_str.append(" where  b.b0110=" + tab_name
                        + ".object_id ) where exists (select null ");
                sql_str.append("from  (select sum(score) s_score,b0110 from  per_key_event where score<0 "
                        + _sqlstr
                        + "  and (status is null or status='03')  and Object_type=1 "
                        + getMatchingTimeSql() + " group by  b0110 ) b ");
                sql_str.append(" where  b.b0110=" + tab_name + ".object_id )");
            } else // 人员
            {
                sql_str.append("(select b.s_score from  (select sum(score) s_score,a0100 from  per_key_event where score<0 "
                        + _sqlstr
                        + "  and (status is null or status='03')  and Object_type=2 "
                        + getMatchingTimeSql() + " group by  a0100 ) b ");
                sql_str.append(" where  b.a0100=" + tab_name
                        + ".object_id ) where exists (select null ");
                sql_str.append("from  (select sum(score) s_score,a0100 from  per_key_event where score<0 "
                        + _sqlstr
                        + "  and (status is null or status='03')  and Object_type=2 "
                        + getMatchingTimeSql() + " group by  a0100 ) b ");
                sql_str.append(" where  b.a0100=" + tab_name + ".object_id )");
            }
            if (this.priv_where != null && this.priv_where.trim().length() > 0) {
                sql_str.append(this.priv_where);
            }
            dao.update(sql_str.toString());

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // 检查结果表中有没有字段，若没有就创建
    public void editArticleA0000(String tablename) throws GeneralException {
        try {
            Table table = new Table(tablename);
            DbWizard dbWizard = new DbWizard(this.conn);
            DBMetaModel dbmodel = new DBMetaModel(this.conn);
            boolean flag = false;

            if (!dbWizard.isExistField(tablename, "minusScore", false))// 关键事件扣分
            {
                Field obj = new Field("minusScore");
                obj.setDatatype(DataType.FLOAT);
                obj.setLength(12);
                obj.setDecimalDigits(6);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            if (!dbWizard.isExistField(tablename, "addScore", false))// 关键事件加分
            {
                Field obj = new Field("addScore");
                obj.setDatatype(DataType.FLOAT);
                obj.setLength(12);
                obj.setDecimalDigits(6);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            // 部门排名
            if (!dbWizard.isExistField(tablename, "org_ordering", false)) {
                Field obj = new Field("org_ordering");
                obj.setDatatype(DataType.INT);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }
            // 部门人数
            if (!dbWizard.isExistField(tablename, "org_GrpNum", false)) {
                Field obj = new Field("org_GrpNum");
                obj.setDatatype(DataType.INT);
                obj.setKeyable(false);
                table.addField(obj);
                flag = true;
            }

            if (flag) {
                dbWizard.addColumns(table);// 更新列
                dbmodel.reloadTableModel(tablename);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 计算最后得分 (考虑 关联计划 / 修正分值/关键事件)
     */
    public void calculateScore(HashMap ruleMap) {
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            String sql = "update per_result_" + this.planid
                    + " set score=original_score";
            if (this.priv_where != null && this.priv_where.trim().length() > 0) {
                sql += " where 1=1 " + this.priv_where;
            }
            dao.update(sql);

            String KeyEventEnabled = "false";
            if (this.planParamSet.get("KeyEventEnabled") != null) {
                KeyEventEnabled = (String) this.planParamSet
                        .get("KeyEventEnabled");
            }

            String tablename = "per_result_" + this.planid;
            Table table = new Table(tablename);
            DbWizard dbWizard = new DbWizard(this.conn);
            DBMetaModel dbmodel = new DBMetaModel(this.conn);
            if (!dbWizard.isExistField(tablename, "A0100", false)) {
                Field obj = new Field("A0100");
                obj.setDatatype(DataType.STRING);
                obj.setLength(8);
                obj.setKeyable(false);
                table.addField(obj);
                dbWizard.addColumns(table);// 更新列
                dbmodel.reloadTableModel(tablename);
            }
            if (planVo.getInt("object_type") == 2) { // 人员计划走下列代码
                String sqlstr = "update " + tablename + " set a0100=object_id";
                dao.update(sqlstr);
            }
            // 关联计划
            String formulaSql = "";
            String formula = "";
            if (ruleMap.get("formulaSql") != null) {
                formulaSql = (String) ruleMap.get("formulaSql");
            }
            if (formulaSql.trim().length() > 0) {
                RowSet rowSet = dao.search("select * from per_result_"
                        + this.planid + " where 1=2");
                ResultSetMetaData mt = rowSet.getMetaData();
                /*
                 * for (int i = 1; i <= mt.getColumnCount(); i++) { String
                 * columnName = mt.getColumnName(i); if (columnName.length() > 2
                 * && columnName.substring(0, 2).equalsIgnoreCase("G_")) {
                 * String aplanid = columnName.substring(2); rowSet =
                 * dao.search("select * from per_plan where plan_id=" +
                 * aplanid); int obj_type = 0; if (rowSet.next()) obj_type =
                 * rowSet.getInt("object_type"); if (obj_type != 0) { sql = "";
                 * if (obj_type == 1||obj_type == 4)// 部门 { sql =
                 * "update per_result_" + this.planid + "   set  G_" + aplanid +
                 * "=(select b.score " + " from per_result_" + aplanid +
                 * " b where   per_result_" + this.planid +
                 * ".e0122=b.object_id ) " +
                 * " where exists (select null  from per_result_" + aplanid +
                 * " b where  per_result_" + this.planid +
                 * ".e0122=b.object_id )";
                 *
                 * } else if (obj_type == 2) // 人员 { sql = "update per_result_"
                 * + this.planid + "   set  G_" + aplanid + "=(select b.score "
                 * + " from per_result_" + aplanid + " b where   per_result_" +
                 * this.planid + ".object_id=b.object_id ) " +
                 * " where exists (select null  from per_result_" + aplanid +
                 * " b where  per_result_" + this.planid +
                 * ".object_id=b.object_id )";
                 *
                 * } else if(obj_type == 3)// 单位 { sql = "update per_result_" +
                 * this.planid + "   set  G_" + aplanid + "=(select b.score " +
                 * " from per_result_" + aplanid + " b where   per_result_" +
                 * this.planid + ".b0110=b.object_id ) " +
                 * " where exists (select null  from per_result_" + aplanid +
                 * " b where  per_result_" + this.planid +
                 * ".b0110=b.object_id )";
                 *
                 * }
                 *
                 * if(this.priv_where!=null&&this.priv_where.trim().length()>0)
                 * sql+=this.priv_where;
                 *
                 *
                 * dao.update(sql); } }
                 *
                 * }
                 */

                ArrayList formulalist = loadxml.getRelatePlanValue("Formula",
                        "Caption");

                if (formulalist.size() > 0) {
                    formula = formulalist.get(0).toString();
                } else {
                    formula = "[本次得分]";
                }

                if (formula.indexOf("[总分]") != -1
                        || formula.indexOf("[本次得分]") != -1) {
                    if ("true".equalsIgnoreCase(KeyEventEnabled)) {
                        String tab_name = "per_result_" + this.planid;
                        StringBuffer sql_str = new StringBuffer("update "
                                + tab_name + " set score=");
                        if (this.planVo.getInt("object_type") != 2) // 团队
                        {
                            sql_str.append("(select b.s_score+"
                                    + tab_name
                                    + ".score from  (select sum(score) s_score,b0110 from  per_key_event where Object_type=1  and (status is null or status='03') "
                                    + getMatchingTimeSql()
                                    + " group by  b0110 ) b ");
                            sql_str.append(" where  b.b0110=" + tab_name
                                    + ".object_id ) where exists (select null ");
                            sql_str.append("from  (select sum(score) s_score,b0110 from  per_key_event where Object_type=1  and (status is null or status='03') "
                                    + getMatchingTimeSql()
                                    + " group by  b0110 ) b ");
                            sql_str.append(" where  b.b0110=" + tab_name
                                    + ".object_id )");
                        } else // 人员
                        {
                            sql_str.append("(select b.s_score+"
                                    + tab_name
                                    + ".score from  (select sum(score) s_score,a0100 from  per_key_event where Object_type=2  and (status is null or status='03') "
                                    + getMatchingTimeSql()
                                    + " group by  a0100 ) b ");
                            sql_str.append(" where  b.a0100=" + tab_name
                                    + ".object_id ) where exists (select null ");
                            sql_str.append("from  (select sum(score) s_score,a0100 from  per_key_event where Object_type=2  and (status is null or status='03') "
                                    + getMatchingTimeSql()
                                    + " group by  a0100 ) b ");
                            sql_str.append(" where  b.a0100=" + tab_name
                                    + ".object_id )");
                        }
                        if (this.priv_where != null
                                && this.priv_where.trim().length() > 0) {
                            sql_str.append(this.priv_where);
                        }

                        dao.update(sql_str.toString());
                    }
                }


                if (!"notImport".equals(this.batchScoreImportFormulaFlag)) {//如果多人评分勾选不引入计算公式   pjf 2014.01.03
                    YksjParser yp = new YksjParser(this.userView, getSelectList(
                            this.planid, 1), YksjParser.forNormal,
                            YksjParser.FLOAT, YksjParser.forPerson, "Ht", "");
                    yp.setVerify(false);
                    yp.run(formula.trim(), this.conn, "", tablename);

                    sql = yp.getSQL();

                    formulaSql = sql;

                    sql = "update per_result_" + this.planid + " set score="
                            + formulaSql;
                    if (this.priv_where != null
                            && this.priv_where.trim().length() > 0) {
                        sql += " where 1=1 " + this.priv_where;
                    }
                    dao.update(sql);
                }
            }


            // 需考虑关键事件
            if ("true".equalsIgnoreCase(KeyEventEnabled)
                    && formulaSql.trim().length() == 0) {

                String PointScoreFromKeyEvent = "False";
                if (ruleMap.get("PointScoreFromKeyEvent") != null) {
                    PointScoreFromKeyEvent = (String) ruleMap
                            .get("PointScoreFromKeyEvent"); // 指标评分优先取自关键事件
                }
                String _sqlstr = "";
                if ("True".equalsIgnoreCase(PointScoreFromKeyEvent)) {
                    _sqlstr = " and ( point_id is null or point_id='' )";
                }

                String tab_name = "per_result_" + this.planid;
                StringBuffer sql_str = new StringBuffer("update " + tab_name
                        + " set score=");
                if (this.planVo.getInt("object_type") != 2) // 团队
                {
                    sql_str.append("(select b.s_score+"
                            + tab_name
                            + ".score from  (select sum(score) s_score,b0110 from  per_key_event where Object_type=1  and (status is null or status='03') "
                            + _sqlstr + " " + getMatchingTimeSql()
                            + " group by  b0110 ) b ");
                    sql_str.append(" where  b.b0110=" + tab_name
                            + ".object_id ) where exists (select null ");
                    sql_str.append("from  (select sum(score) s_score,b0110 from  per_key_event where Object_type=1  and (status is null or status='03') "
                            + _sqlstr
                            + " "
                            + getMatchingTimeSql()
                            + " group by  b0110 ) b ");
                    sql_str.append(" where  b.b0110=" + tab_name
                            + ".object_id )");
                } else // 人员
                {
                    sql_str.append("(select b.s_score+"
                            + tab_name
                            + ".score from  (select sum(score) s_score,a0100 from  per_key_event where Object_type=2  and (status is null or status='03') "
                            + _sqlstr + " " + getMatchingTimeSql()
                            + " group by  a0100 ) b ");
                    sql_str.append(" where  b.a0100=" + tab_name
                            + ".object_id ) where exists (select null ");
                    sql_str.append("from  (select sum(score) s_score,a0100 from  per_key_event where Object_type=2  and (status is null or status='03') "
                            + _sqlstr
                            + " "
                            + getMatchingTimeSql()
                            + " group by  a0100 ) b ");
                    sql_str.append(" where  b.a0100=" + tab_name
                            + ".object_id )");
                }
                if (this.priv_where != null
                        && this.priv_where.trim().length() > 0) {
                    sql_str.append(this.priv_where);
                }

                dao.update(sql_str.toString());
            }

            {
                // 修正分值
                sql = "update per_result_"
                        + this.planid
                        + "   set  score=(select per_result_"
                        + this.planid
                        + ".score+b.score "
                        + " from per_result_correct b where b.plan_id="
                        + this.planid
                        + " and per_result_"
                        + this.planid
                        + ".object_id=b.object_id ) "
                        + " where exists (select null  from per_result_correct b where b.plan_id="
                        + this.planid + " and per_result_" + this.planid
                        + ".object_id=b.object_id )";
                if (this.priv_where != null && this.priv_where.trim().length() > 0) {
                    sql += this.priv_where;
                }
                dao.update(sql);
            }

            String totalScore = "score";
            Hashtable paramters = loadxml.getDegreeWhole();
            String deviationScoreUsed = (String) paramters.get("deviationScoreUsed");//是否使用纠偏总分 0不是  1是
            if ("1".equals(deviationScoreUsed)) {            //对总分纠偏计算
                totalScore = "reviseScore";
                ArrayList formulaDeciationList = loadxml.getRelatePlanValue("ReviseScore", "Caption");
                String deviationFormula = "";
                String deviationFormulaSql = "";
                if (formulaDeciationList.size() > 0) {
                    deviationFormula = formulaDeciationList.get(0).toString();
                } else {
                    deviationFormula = "[本次得分]";
                }
                YksjParser yp = new YksjParser(this.userView, getSelectList(
                        this.planid, 1), YksjParser.forNormal,
                        YksjParser.FLOAT, YksjParser.forPerson, "Ht", "");
                yp.setVerify(false);
                yp.run(deviationFormula.trim(), this.conn, "", tablename);
                sql = yp.getSQL();
                deviationFormulaSql = sql;
                sql = "update per_result_" + this.planid + " set reviseScore="
                        + deviationFormulaSql;
                if (this.priv_where != null && this.priv_where.trim().length() > 0) {
                    sql += " where 1=1 " + this.priv_where;
                }
                dao.update(sql);
            }

            //20151229 dengcan
            if (dbWizard.isExistField(tablename, "A0100", false)) {
			/*
				Field obj = new Field("A0100");
				obj.setDatatype(DataType.STRING);
obj.setLength(8);
				obj.setKeyable(false);
				table.addField(obj);
				dbWizard.dropColumns(table);// 更新列
				dbmodel.reloadTableModel(tablename);
				*/
                dao.update("update " + tablename + " set a0100=null");
            }

            // 计算组平均分 exS_GrpAvg
            String sql0 = "select po.body_id,count(po.id),"
                    + Sql_switcher.isnull("sum(" + totalScore + ")", "0")
                    + "/count(po.id)  from per_object po,per_result_"
                    + this.planid
                    + " pr "
                    + " where po.plan_id="
                    + this.planid
                    + " and po.object_id=pr.object_id  and ( po.body_id is not null ) group by po.body_id ";
            RowSet rowSet = dao.search(sql0);

            testFields(this.planid);//补充表结构

            while (rowSet.next()) {
                String body_id = rowSet.getString("body_id");
                String exS_GrpAvg = rowSet.getString(3);
                sql0 = "update per_result_"
                        + this.planid
                        + " set exS_GrpAvg="
                        + exS_GrpAvg
                        + " where object_id in (select object_id from per_object where plan_id="
                        + this.planid + " and body_id=" + body_id + ")";
                if (this.priv_where != null
                        && this.priv_where.trim().length() > 0) {
                    sql0 += this.priv_where;
                }
                dao.update(sql0);
            }

            // 部门排名
            if (this.planVo.getInt("object_type") == 2) {
                if (this.priv_where2 != null
                        && this.priv_where2.trim().length() > 0) {
                    dao.update("update per_result_"
                            + this.planid
                            + " set org_ordering=null,org_grpnum=null where 1=1 "
                            + this.priv_where2);
                } else {
                    dao.update("update per_result_" + this.planid
                            + " set org_ordering=null,org_grpnum=null ");
                }
                StringBuffer sql_str = new StringBuffer("");
                sql_str.append(" SELECT id, E0122, CodeItemId AS DeptOne, " + totalScore + "  FROM per_result_"
                        + this.planid + "  ,Organization O");
                sql_str.append(" WHERE  E0122 IS NOT NULL   AND ((CodeSetId='UN' AND E0122 = O.CodeItemId ) ");
                sql_str.append(" OR (O.Layer=1 AND CodeSetId='UM' AND E0122 Like O.CodeItemId"
                        + Sql_switcher.concat() + "'%') ) ");
                if (this.priv_where2 != null
                        && this.priv_where2.trim().length() > 0) {
                    sql_str.append(this.priv_where2);
                }
                sql_str.append(" union All ");
                sql_str.append(" SELECT id, E0122, '' AS DeptOne, " + totalScore + "  FROM  per_result_"
                        + this.planid + "    WHERE E0122 IS NULL ");
                if (this.priv_where2 != null
                        && this.priv_where2.trim().length() > 0) {
                    sql_str.append(this.priv_where2);
                }

                HashMap depMap = new HashMap();

                rowSet = dao.search("SELECT COUNT(*),DeptOne  FROM ( "
                        + sql_str.toString() + " ) AA  GROUP BY DeptOne");
                while (rowSet.next()) {
                    if (rowSet.getString(2) == null
                            || rowSet.getString(2).length() <= 0) {
                        depMap.put("AA", rowSet.getString(1));
                    } else {
                        depMap.put(rowSet.getString(2), rowSet.getString(1));
                    }
                }

                ArrayList valueList = new ArrayList();
                rowSet = dao.search(sql_str.toString()
                        + " ORDER BY DeptOne, " + totalScore + " DESC ");
                int order = 1;
                String groupValue = "";
                double oldScore = -1;
                while (rowSet.next()) {
                    String id = rowSet.getString("id");
                    String deptOne = rowSet.getString("DeptOne");
                    //'' AS DeptOne 这种方式得到的 deptOne 好像还是null,特殊处理下
                    deptOne = deptOne == null ? "" : deptOne;
                    double score = rowSet.getDouble(totalScore);
                    ArrayList tempList = new ArrayList();
                    if (oldScore == -1) {
                        groupValue = deptOne;
                        oldScore = score;
                    }

                    if (groupValue.equals(deptOne)) {
                        if (oldScore == score) {
                            tempList.add(new Integer(order));
                        } else {
                            order++;
                            tempList.add(new Integer(order));
                        }
                        //总分结果是从大到小排序，oldScore记录的是上一个总分，当前程序oldScore只记录了最高分，从第二次循环开始便没有重新复制。
                        oldScore = score;
                        if (groupValue.length() == 0
                                && depMap.get("AA") != null) {
                            tempList.add(new Integer((String) depMap.get("AA")));
                        } else {
                            tempList.add(new Integer((String) depMap
                                    .get(groupValue)));
                        }
                    } else {
                        order = 1;
                        groupValue = deptOne;
                        oldScore = score;

                        tempList.add(new Integer(order));
                        if ((groupValue == null || groupValue.length() == 0)
                                && depMap.get("AA") != null) {
                            tempList.add(new Integer((String) depMap.get("AA")));
                        } else {
                            tempList.add(new Integer((String) depMap
                                    .get(groupValue)));
                        }
                    }
                    tempList.add(new Integer(id));
                    valueList.add(tempList);
                }
                dao.batchUpdate("update per_result_" + this.planid
                                + " set org_ordering=?,org_grpnum=? where id=?",
                        valueList);

            }

            /*
             * //总分小于0就改为0 废弃这段强制赋值程序，如用户有这种业务需要可通过计算公式实现。 JinChunhai 2011.11.12
             * sql="update per_result_" + this.planid +
             * " set score=0 where score<0";
             * if(this.priv_where!=null&&this.priv_where.trim().length()>0)
             * sql+=this.priv_where; dao.update(sql);
             */

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * 计算"岗位标准分值" 1: 岗位标准分值=∑(指标N要求等级 * 指标N权重)
     */
    public void calculatePostRuleScore() {
        ContentDAO dao = new ContentDAO(this.conn);
        RowSet rowSet = null;
        try {
            String sql = "update per_result_" + this.planid
                    + " set postRuleScore='0.0'";
            if (this.priv_where != null && this.priv_where.trim().length() > 0) {
                sql += " where 1=1 " + this.priv_where;
            }
            dao.update(sql);

            // 获得能力素质各岗位要求的总分数
            HashMap postScoreMap = getE01a1TotalScore();

            // 修正分值
            StringBuffer strSql = new StringBuffer("");
            strSql.append("select e01a1 from per_result_" + this.planid + " ");
            if (this.priv_where != null && this.priv_where.trim().length() > 0) {
                strSql.append(" where 1=1 " + this.priv_where);
            }
            strSql.append(" group by e01a1 ");
            rowSet = dao.search(strSql.toString());
            while (rowSet.next()) {
                String e01a1 = rowSet.getString("e01a1") == null ? "e01a1"
                        : rowSet.getString("e01a1");
                String postScore = (String) postScoreMap.get(e01a1);

                if (postScore != null && postScore.trim().length() > 0) {
                    // 写入岗位标准分值
                    String sqlStr = "update per_result_" + this.planid
                            + " set postRuleScore='"
                            + Double.parseDouble(postScore) + "'";
                    sqlStr += " where e01a1='" + e01a1 + "' ";
                    dao.update(sqlStr);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * 获得能力素质各岗位要求的总分数
     */
    public HashMap getE01a1TotalScore() {
        HashMap map = new HashMap();
        ContentDAO dao = new ContentDAO(this.conn);
        RowSet rowSet = null;
        String creatDate = PubFunc.getStringDate("yyyy-MM-dd HH:mm:ss"); // 获取当前时间
        try {
            StringBuffer sql = new StringBuffer("");
            sql.append("select pc.object_id,sum(pc.score*pg.gradevalue*pc.rank) postScore ");
            sql.append(" from per_competency_modal pc,per_grade pg ");
            sql.append(" where pc.object_type = 3 ");
            sql.append(" and pc.point_id=pg.point_id and pc.gradecode=pg.gradecode ");
            sql.append(" and " + Sql_switcher.dateValue(creatDate)
                    + " between start_date and end_date");
            sql.append(" group by pc.object_id ");

            rowSet = dao.search(sql.toString());
            while (rowSet.next()) {
                String e01a1 = rowSet.getString("object_id") == null ? "object_id"
                        : rowSet.getString("object_id");
                String postScore = rowSet.getString("postScore") == null ? "0.0"
                        : rowSet.getString("postScore");

                map.put(e01a1, postScore);
            }
            if (rowSet != null) {
                rowSet.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 计算"匹配度" 1: 匹配度=(员工能力评测得分/岗位标准分值)*100
     */
    public void calculateMateSurmise() {
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            String sql = "update per_result_"
                    + this.planid
                    + " set mateSurmise=(score/(case when postRuleScore=0 then null else postRuleScore end ))";
            if (this.priv_where != null && this.priv_where.trim().length() > 0) {
                sql += " where 1=1 " + this.priv_where;
            }
            dao.update(sql);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public ArrayList getSelectList(String planid, int flag) {
        ComputFormulaBo bo = new ComputFormulaBo("custom_formula", this.conn,
                planid, this.userView);
        return bo.getSelfFields(planid, flag);
    }

    // 取得计划与关键事件匹配的sql片断
    public String getMatchingTimeSql() {
        StringBuffer whl = new StringBuffer("");
        int cycle = this.planVo.getInt("cycle"); // 考核周期
        switch (cycle) {
            case 0: // 年度
                whl.append(" and " + Sql_switcher.year("busi_date") + "="
                        + this.planVo.getString("theyear"));
                break;
            case 1: // 半年度
                whl.append(" and " + Sql_switcher.year("busi_date") + "="
                        + this.planVo.getString("theyear"));
                String thequarter = this.planVo.getString("thequarter");
                if ("01".equals(thequarter)) // 上半年
                {
                    whl.append(" and " + Sql_switcher.month("busi_date") + ">=1");
                    whl.append(" and " + Sql_switcher.month("busi_date") + "<=6");
                } else if ("02".equals(thequarter)) // 下半年
                {
                    whl.append(" and " + Sql_switcher.month("busi_date") + ">=7");
                    whl.append(" and " + Sql_switcher.month("busi_date") + "<=12");
                }
                break;
            case 2: // 季度
                whl.append(" and " + Sql_switcher.year("busi_date") + "="
                        + this.planVo.getString("theyear"));
                String athequarter = this.planVo.getString("thequarter");
                if ("01".equals(athequarter)) // 1季度
                {
                    whl.append(" and " + Sql_switcher.month("busi_date") + ">=1");
                    whl.append(" and " + Sql_switcher.month("busi_date") + "<=3");
                }
                if ("02".equals(athequarter)) // 2季度
                {
                    whl.append(" and " + Sql_switcher.month("busi_date") + ">=4");
                    whl.append(" and " + Sql_switcher.month("busi_date") + "<=6");
                }
                if ("03".equals(athequarter)) // 3季度
                {
                    whl.append(" and " + Sql_switcher.month("busi_date") + ">=7");
                    whl.append(" and " + Sql_switcher.month("busi_date") + "<=9");
                }
                if ("04".equals(athequarter)) // 4季度
                {
                    whl.append(" and " + Sql_switcher.month("busi_date") + ">=10");
                    whl.append(" and " + Sql_switcher.month("busi_date") + "<=12");
                }

                break;
            case 3: // 月度
                whl.append(" and " + Sql_switcher.year("busi_date") + "="
                        + this.planVo.getString("theyear"));
                whl.append(" and " + Sql_switcher.month("busi_date") + "="
                        + this.planVo.getString("themonth"));
                break;
            case 7: // 不定期
                Date start_date = this.planVo.getDate("start_date");
                Calendar sd = Calendar.getInstance();
                sd.setTime(start_date);
                Date end_date = this.planVo.getDate("end_date");
                Calendar ed = Calendar.getInstance();
                ed.setTime(end_date);
                whl.append(" and ( " + Sql_switcher.year("busi_date") + ">"
                        + sd.get(Calendar.YEAR));
                whl.append(" or ( " + Sql_switcher.year("busi_date") + "="
                        + sd.get(Calendar.YEAR) + " and "
                        + Sql_switcher.month("busi_date") + ">"
                        + (sd.get(Calendar.MONTH) + 1) + " ) ");
                whl.append(" or ( " + Sql_switcher.year("busi_date") + "="
                        + sd.get(Calendar.YEAR) + " and "
                        + Sql_switcher.month("busi_date") + "="
                        + (sd.get(Calendar.MONTH) + 1) + " and "
                        + Sql_switcher.day("busi_date") + ">="
                        + sd.get(Calendar.DATE) + " ) ) ");

                whl.append(" and ( " + Sql_switcher.year("busi_date") + "<"
                        + ed.get(Calendar.YEAR));
                whl.append(" or ( " + Sql_switcher.year("busi_date") + "="
                        + ed.get(Calendar.YEAR) + " and "
                        + Sql_switcher.month("busi_date") + "<"
                        + (ed.get(Calendar.MONTH) + 1) + " ) ");
                whl.append(" or ( " + Sql_switcher.year("busi_date") + "="
                        + ed.get(Calendar.YEAR) + " and "
                        + Sql_switcher.month("busi_date") + "="
                        + (ed.get(Calendar.MONTH) + 1) + " and "
                        + Sql_switcher.day("busi_date") + "<="
                        + ed.get(Calendar.DATE) + " ) ) ");

                break;
        }

        return whl.toString();
    }

    /**
     * 计算本次计算得分
     *
     * @param itemList
     */
    public void calculateOriginalScore(ArrayList itemList,
                                       HashMap objectItemRankMap, HashMap objectBodyMap, HashMap dynaMap) {

        ContentDAO dao = new ContentDAO(this.conn);
        RowSet rowSet = null;
        RowSet rs = null;
        try {
            if ("4".equals((String) this.planParamSet.get("scoreflag"))) {
                // StringBuffer sub_sql=new StringBuffer("");
                // BigDecimal a_score = new BigDecimal("0");
                // for (int j = 0; j < itemList.size(); j++)
                // {
                // LazyDynaBean abean = (LazyDynaBean) itemList.get(j);
                // String item_id = (String) abean.get("item_id");
                // String parent_id = (String) abean.get("parent_id");
                // String rank=(String)abean.get("rank");
                // String kind=(String)abean.get("kind");
                // String score=(String)abean.get("score");
                // a_score=a_score.add(new BigDecimal(score));
                // if (parent_id.length() == 0)
                // {
                // sub_sql.append("+");
                // sub_sql.append(Sql_switcher.isnull("T_" + item_id,"0"));
                // }
                // }
                // String sql = "update per_result_" + this.planid +
                // " set original_score=( (" + sub_sql.substring(1)
                // +")/NullIF("+a_score.toString()+"*"+this.templateVo.getDouble("topscore")+",0) )  ";
                // dao.update(sql);
                // 加扣分的总分不字此求了 fzg
                return;
            }

            if (this.planVo.getInt("method") == 2
                    && "1".equals(this.templateVo.getString("status"))
                    && this.planParamSet.get("ScoreFromItem") != null
                    && "true"
                    .equalsIgnoreCase((String) this.planParamSet.get("ScoreFromItem"))) {
                ObjectCardBo cbo = null;

                String sql0 = "select * from per_result_" + this.planid;
                if (this.priv_where != null
                        && this.priv_where.trim().length() > 0) {
                    sql0 += " where 1=1 " + this.priv_where;
                }
                rs = dao.search(sql0);
                while (rs.next()) {
                    String object_id = (String) rs.getString("object_id");
                    cbo = new ObjectCardBo(this.conn, this.planid, object_id,
                            this.userView);
                    String _score = cbo.getStepByStepScore(
                            ((String) this.planParamSet
                                    .get("taskAdjustNeedNew")), null, 3, 1);
                    dao.update("update per_result_" + this.planid
                            + " set original_score=" + _score
                            + " where object_id='" + object_id + "'");
                }

                if (rs != null) {
                    rs.close();
                }
                if (rowSet != null) {
                    rowSet.close();
                }
                return;
            }

            if (this.planVo.getInt("method") == 2) {
                String sql0 = "select * from per_result_" + this.planid;
                if (this.priv_where != null
                        && this.priv_where.trim().length() > 0) {
                    sql0 += " where 1=1 " + this.priv_where;
                }
                rs = dao.search(sql0);
                while (rs.next()) {
                    String object_id = (String) rs.getString("object_id");
                    String body_id = "";
                    if (objectBodyMap.get(object_id) != null) {
                        body_id = (String) objectBodyMap.get(object_id);
                    }
                    HashMap _map = null;
                    if (dynaMap != null && dynaMap.get(body_id) != null) {
                        _map = (HashMap) dynaMap.get(body_id);
                    }

                    StringBuffer sub_sql = new StringBuffer("");
                    for (int j = 0; j < itemList.size(); j++) {
                        LazyDynaBean abean = (LazyDynaBean) itemList.get(j);
                        String item_id = (String) abean.get("item_id");
                        String parent_id = (String) abean.get("parent_id");
                        String rank = (String) abean.get("rank");
                        String kind = (String) abean.get("kind");
                        if (parent_id.length() == 0) {
                            sub_sql.append("+");

                            boolean flag = false;
                            if (_map != null
                                    && _map.get(body_id + item_id) != null) {
                                HashMap map = (HashMap) _map.get(body_id
                                        + item_id);
                                if (map.get("isAddMinusItem") != null
                                        && "1"
                                        .equals((String) map.get("isAddMinusItem"))) {
                                    flag = true;
                                }
                            }

                            if (flag) // 加扣分项不算
                            {
                                sub_sql.append("0");
                            } else {
                                if ("2".equals(kind)) {

                                    if (objectItemRankMap.get(object_id + "/"
                                            + item_id) != null) {
                                        sub_sql.append(Sql_switcher.isnull(
                                                "T_"
                                                        + item_id
                                                        + "*"
                                                        + (String) objectItemRankMap
                                                        .get(object_id
                                                                + "/"
                                                                + item_id),
                                                "0"));
                                    } else {
                                        sub_sql.append(Sql_switcher.isnull("T_"
                                                + item_id + "*0", "0"));
                                    }
                                } else {
                                    sub_sql.append(Sql_switcher.isnull("T_"
                                            + item_id, "0"));
                                }
                            }
                        }
                    }
                    // String sql = "update per_result_" + this.planid +
                    // " set original_score=(" + sub_sql.substring(1) +
                    // ") where object_id='"+object_id+"'";
                    dao.update("update per_result_" + this.planid
                            + " set original_score=(" + sub_sql.substring(1)
                            + ") where object_id='" + object_id + "'");

                    sub_sql.setLength(0);
                    StringBuffer sql = new StringBuffer(
                            "select distinct item_id from P04 where plan_id="
                                    + this.planVo.getInt("plan_id"));
                    if (this.planVo.getInt("object_type") == 1
                            || this.planVo.getInt("object_type") == 3
                            || this.planVo.getInt("object_type") == 4) {
                        sql.append(" and b0110='" + object_id + "'");
                    } else if (this.planVo.getInt("object_type") == 2) {
                        sql.append(" and a0100='" + object_id + "'");
                    }
                    sql.append(" and ( chg_type<>3 or chg_type is null ) ");
                    rowSet = dao.search(sql.toString());
                    while (rowSet.next()) {
                        if (rowSet.getString("item_id") != null
                                && rowSet.getString("item_id").trim().length() > 0) {
                            boolean flag = false;
                            if (_map != null
                                    && _map.get(body_id
                                    + rowSet.getString("item_id")) != null) {
                                HashMap map = (HashMap) _map.get(body_id
                                        + rowSet.getString("item_id"));
                                if (map.get("isAddMinusItem") != null
                                        && "1"
                                        .equals((String) map.get("isAddMinusItem"))) {
                                    flag = true;
                                }
                            }
                            if (flag) {
                                sub_sql.append("+"
                                        + Sql_switcher.isnull(
                                        "T_"
                                                + rowSet.getString("item_id"),
                                        "0"));
                            }
                        }
                    }
                    if (sub_sql.length() > 0) {
                        dao.update("update per_result_" + this.planid
                                + " set original_score=original_score"
                                + sub_sql.toString() + " where object_id='"
                                + object_id + "'");
                    }

                }

            } else {
                StringBuffer sub_sql = new StringBuffer("");
                for (int j = 0; j < itemList.size(); j++) {
                    LazyDynaBean abean = (LazyDynaBean) itemList.get(j);
                    String item_id = (String) abean.get("item_id");
                    String parent_id = (String) abean.get("parent_id");
                    String rank = (String) abean.get("rank");
                    String kind = (String) abean.get("kind");
                    if (parent_id.length() == 0) {
                        if ("2".equals(kind)) {
                            sub_sql.append("+T_" + item_id + "*" + rank);
                        } else {
                            sub_sql.append("+T_" + item_id);
                        }
                    }
                }

                String sql0 = "update per_result_" + this.planid
                        + " set original_score=(" + sub_sql.substring(1) + ")";
                if (this.priv_where != null
                        && this.priv_where.trim().length() > 0) {
                    sql0 += " where 1=1 " + this.priv_where;
                }
                dao.update(sql0);
            }
            if (rs != null) {
                rs.close();
            }
            if (rowSet != null) {
                rowSet.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 计算本次计算得分(勾选了按岗位素质模型测评) 郭峰
     * 就是把所有的项目分数加起来
     *
     *
     * @param itemList
     */
    public void calculateOriginalScoreByModel(ArrayList itemList, HashMap objectItemRankMap, HashMap objectBodyMap, HashMap dynaMap, String object_id) {
        ContentDAO dao = new ContentDAO(this.conn);
        RowSet rowSet = null;
        RowSet rs = null;
        try {
            if ("4".equals((String) this.planParamSet.get("scoreflag"))) {
                return;
            }
            StringBuffer sql = new StringBuffer("");
            sql.append("select score from per_history_result where object_id='" + object_id + "' and plan_id=" + this.planid + " and status=1 " + this.priv_where);
            rowSet = dao.search(sql.toString());
            float totalScore = 0;
            while (rowSet.next()) {
                float temptotalScore = rowSet.getFloat(1);
                totalScore += temptotalScore;
            }
            String sql0 = "update per_result_" + this.planid
                    + " set original_score=" + totalScore;
            sql0 += " where 1=1 and object_id='" + object_id + "'" + this.priv_where;
            dao.update(sql0);
            if (rs != null) {
                rs.close();
            }
            if (rowSet != null) {
                rowSet.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 获得考核对象的动态指标权重
     */
    public HashMap getObjPointRank() {
        HashMap map = new HashMap();
        ContentDAO dao = new ContentDAO(this.conn);
        String sql = "select * from per_dyna_rank where plan_id=" + this.planid;
        try {
            RowSet rs = dao.search(sql);
            while (rs.next()) {
                map.put(rs.getString("point_id") + "_"
                                + rs.getString("dyna_obj"),
                        Double.toString(rs.getDouble("rank")));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 获得动态考核主体权重
     */
    public HashMap getDynaMainbodyRankMap() {
        HashMap map = new HashMap();
        ContentDAO dao = new ContentDAO(this.conn);
        String sql = "select * from per_dyna_bodyrank where plan_id="
                + this.planid;
        try {
            RowSet rs = dao.search(sql);
            while (rs.next()) {
                map.put(rs.getString("body_id") + "_"
                                + rs.getString("dyna_obj"),
                        Double.toString(rs.getDouble("rank")));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 取得各对象项目权重
     *
     * @return
     */
    public HashMap getObjItemRank() {
        HashMap map = new HashMap();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            String a_objectid = "a0100";
            if (this.planVo.getInt("object_type") != 2) {
                a_objectid = "b0110";
            }
            StringBuffer sql = new StringBuffer("select item_id,sum(p0415),"
                    + a_objectid + " from p04 where plan_id=" + this.planid);
            sql.append(" and ( ( state=-1 and chg_type!=3 ) or state is null or state<>-1 )");
            sql.append(" group by item_id," + a_objectid + " order by "
                    + a_objectid);
            RowSet rowSet = dao.search(sql.toString());
            while (rowSet.next()) {
                map.put(rowSet.getString(a_objectid) + "/"
                        + rowSet.getString("item_id"), rowSet.getString(2));
            }

            // select item_id,sum(p0415),a0100 from p04 where plan_id=569 and
            // a0100='00005539' group by item_id,a0100

        } catch (Exception e) {
            e.printStackTrace();
        }

        return map;
    }

    /**
     * 计算扣分模式下的模板项分值
     *
     * @param objPointScoreMap
     * @param KeepDecimal
     * @param itemList
     */
    public void calculateItemReduceScore(HashMap objPointScoreMap,
                                         int KeepDecimal, ArrayList itemList, ArrayList objectList,
                                         HashMap item_pointMap) {
        ContentDAO dao = new ContentDAO(this.conn);
        RowSet rowSet = null;
        HashMap totalPointMap = getTotalScorePointList(this.template_id); // 取得统一打分指标s
        HashMap objPointRanks = new HashMap();
        if (this.planVo.getInt("method") != 2) {
            objPointRanks = this.getObjPointRank();// 考核对象的动态指标权重
        }
        HashMap existData = new HashMap();
        HashMap midItemMap = new HashMap();
        HashMap removeSelfItemMap = new HashMap();// 没有任务的的个性项目
        try {
            String sql0 = "";
            String a_objectid = "a0100";
            if (this.planVo.getInt("object_type") != 2) {
                a_objectid = "b0110";
            }
            // sql0="select "+a_objectid+",item_id,count(*) from p04 where plan_id="+this.planid+" and (chg_type is null or chg_type!=3)  group by "
            // +a_objectid+",item_id";

            sql0 = "select pti.item_id,po.object_id from per_template_item pti, per_object po  where pti.template_id='"
                    + this.template_id
                    + "' and pti.kind=2 and po.plan_id="
                    + this.planid + " ";
            sql0 += " and not exists ( select null from p04 where plan_id="
                    + this.planid
                    + "  and (chg_type is null or chg_type!=3) and p04."
                    + a_objectid
                    + "=po.object_id and pti.item_id=p04.item_id ) ";
            rowSet = dao.search(sql0);
            while (rowSet.next()) {
                String object_id = rowSet.getString("object_id");
                String item_id = rowSet.getString("item_id");
                removeSelfItemMap.put(object_id + "`" + item_id, "");
            }

            ArrayList leafItemList = new ArrayList();
            String _str2 = "per_target_evaluation";
            if (this.task_score_str.trim().length() > 0) {
                String _str = "("
                        + this.task_score_str.trim().replaceAll(
                        "per_target_evaluation", "EE") + ")";
                _str2 = " ( select  "
                        + _str
                        + " score,EE.P0400,EE.stdScore,EE.mainbody_id,EE.plan_id,EE.object_id  from per_target_evaluation EE,p04 z where EE.p0400=z.p0400 and EE.plan_id="
                        + this.planid + " )";

            }
            // 1. 算叶子项目分值
            LazyDynaBean a_bean = null;
            for (int j = 0; j < itemList.size(); j++) {
                LazyDynaBean abean = (LazyDynaBean) itemList.get(j);
                String item_id = (String) abean.get("item_id");
                String child_id = (String) abean.get("child_id");
                String kind = (String) abean.get("kind");
                String score = (String) abean.get("score");
                String rank = (String) abean.get("rank");
                if ("2".equals(kind))// 叶子项目是个性项目
                {
                    leafItemList.add(abean);
                    for (int i = 0; i < objectList.size(); i++) {
                        a_bean = (LazyDynaBean) objectList.get(i);
                        String object_id = (String) a_bean.get("object_id");
                        a_objectid = "a0100";
                        if (this.planVo.getInt("object_type") != 2) {
                            a_objectid = "b0110";
                        }

                        sql0 = "SELECT SUM("
                                + Sql_switcher.isnull("A.Score", "0")
                                + "*P0415) AS Score FROM P04, "
                                + "(SELECT P.P0400, AVG("
                                + Sql_switcher.isnull("P.Score", "0")
                                + "+"
                                + Sql_switcher.isnull("stdScore", "0")
                                + ") AS Score FROM "
                                + _str2
                                + " P, per_mainbody B "
                                + "  WHERE P.plan_id="
                                + this.planid
                                + " AND P.Object_id='"
                                + object_id
                                + "' "
                                + "    AND P.plan_id=B.plan_id AND P.object_id=B.object_id AND P.mainbody_id=B.mainbody_id ";
                        if (this.compute_flag != 4) {
                            sql0 += " AND (B.status in (2, 3)) ";
                        }
                        if (this.batchComput != null
                                && this.batchComput.trim().length() > 0
                                && "True".equalsIgnoreCase(this.batchComput)) {
                            sql0 += " AND (B.status=2 or B.status=3 or B.mainbody_id='"
                                    + this.presentMainbody_id + "' ) ";
                        }
                        sql0 += " GROUP BY P0400) A " + "WHERE plan_id="
                                + this.planid + " AND " + a_objectid + "='"
                                + object_id + "' AND item_id=" + item_id
                                + " AND P04.P0400=A.P0400 ";

                        rowSet = dao.search(sql0);
                        String temp_value = "0";
                        if (rowSet.next()) {
                            temp_value = rowSet.getString(1);
                            if (temp_value == null) {
                                temp_value = "0";
                            }
                        }
                        temp_value = PubFunc
                                .add(score, temp_value, KeepDecimal);
                        if (Double.parseDouble(temp_value) < 0) // ||removeSelfItemMap.get(object_id+"`"+item_id)!=null)
                        {
                            temp_value = "0";
                        }
                        if (removeSelfItemMap.get(object_id + "`" + item_id) != null) {
                            sql0 = "update per_result_" + this.planid
                                    + " set T_" + item_id
                                    + "=null where object_id='" + object_id
                                    + "'";
                            if (this.priv_where != null
                                    && this.priv_where.trim().length() > 0) {
                                sql0 += " " + this.priv_where;
                            }
                            dao.update(sql0);
                        } else {
                            sql0 = "update per_result_" + this.planid
                                    + " set T_" + item_id + "=" + temp_value
                                    + " where object_id='" + object_id + "'";
                            if (this.priv_where != null
                                    && this.priv_where.trim().length() > 0) {
                                sql0 += " " + this.priv_where;
                            }
                            dao.update(sql0);
                        }
                        existData.put(object_id + "`" + item_id, temp_value);
                    }
                } else if (child_id.trim().length() == 0)// 叶子项目是共性项目
                // 指标的分直接从结果表取得
                {
                    leafItemList.add(abean);
                    for (int k = 0; k < objectList.size(); k++) {
                        a_bean = (LazyDynaBean) objectList.get(k);
                        String object_id = (String) a_bean.get("object_id");
                        LazyDynaBean obj_pointScore = (LazyDynaBean) objPointScoreMap
                                .get(object_id);
                        String status = this.templateVo.getString("status"); // 0:分值
                        // 1:权重
                        if (item_pointMap.get(item_id) != null) {
                            ArrayList pointList = (ArrayList) item_pointMap
                                    .get(item_id);

                            if (this.planVo.getInt("method") == 2) // 目标
                            {
                                pointList = getPointList_goal(pointList,
                                        object_id);
                            }

                            LazyDynaBean abean1 = null;
                            LazyDynaBean a_bean1 = null;
                            String temp_value = "0";
                            for (int i = 0; i < pointList.size(); i++) {
                                abean1 = (LazyDynaBean) pointList.get(i);
                                String point_id = (String) abean1
                                        .get("point_id");
                                String ascore = obj_pointScore.get(point_id) != null ? (String) obj_pointScore
                                        .get(point_id) : "0";

                                String rank1 = (String) abean1.get("rank");// 模板中的标准权重
                                if (objPointRanks.get(point_id + "_"
                                        + object_id) != null) {
                                    rank1 = (String) objPointRanks.get(point_id
                                            + "_" + object_id);// 取得考核对象的动态指标权重
                                }

                                if ("0".equals(status)) {
                                    temp_value = PubFunc.add(ascore,
                                            temp_value, 6);
                                } else if ("1".equals(status)) {
                                    if (totalPointMap.get(point_id) != null)// 定量统一打分指标
                                    // 权重模板
                                    // 不乘权重
                                    {
                                        temp_value = PubFunc.add(ascore,
                                                temp_value, 6);
                                    } else {
                                        temp_value = PubFunc.add(PubFunc
                                                        .multiple(ascore, rank1, 6),
                                                temp_value, 6);
                                    }
                                }
                            }
                            temp_value = PubFunc.add(score, temp_value,
                                    KeepDecimal);

                            if (Double.parseDouble(temp_value) < 0) {
                                temp_value = "0";
                            }
                            sql0 = "update per_result_" + this.planid
                                    + " set T_" + item_id + "=" + temp_value
                                    + " where object_id='" + object_id + "'";
                            if (this.priv_where != null
                                    && this.priv_where.trim().length() > 0) {
                                sql0 += " " + this.priv_where;
                            }
                            dao.update(sql0);
                            existData
                                    .put(object_id + "`" + item_id, temp_value);
                        }
                    }
                }
            }

            // 2. 逐项目向上汇总计算中间层项目和顶层项目
            for (int n = 0; n < itemList.size(); n++) {
                LazyDynaBean abean = (LazyDynaBean) itemList.get(n);
                String item_id = (String) abean.get("item_id");
                String child_id = (String) abean.get("child_id");
                if (child_id.trim().length() > 0)// 叶子项目是共性项目 指标的分直接从结果表取得
                {
                    midItemMap.put(item_id, abean);
                }
            }
            for (int k = 0; k < objectList.size(); k++) {
                a_bean = (LazyDynaBean) objectList.get(k);
                String object_id = (String) a_bean.get("object_id");
                boolean flag = false;
                do {
                    for (Iterator it = midItemMap.keySet().iterator(); it
                            .hasNext(); ) {
                        String key = (String) it.next();
                        LazyDynaBean _abean = (LazyDynaBean) midItemMap
                                .get(key);
                        String miditem_id = (String) _abean.get("item_id");
                        String miditem_score = (String) _abean.get("score");

                        if (existData.get(object_id + "`" + miditem_id) != null) {
                            continue;
                        }

                        ArrayList subItemList = new ArrayList();
                        for (int j = 0; j < leafItemList.size(); j++) {
                            LazyDynaBean abean = (LazyDynaBean) leafItemList
                                    .get(j);
                            String item_id = (String) abean.get("item_id");
                            // if(removeSelfItemMap.get(object_id+"`"+item_id)!=null)//没有任务的个性项目不算入它的父项目的子项目
                            // continue;

                            String parent_id = (String) abean.get("parent_id");
                            if (parent_id.equalsIgnoreCase(miditem_id)) {
                                subItemList.add(abean);
                            }
                        }
                        if (subItemList.size() > 0) {
                            String temp_value_fz = "0";// 下级项目计算得分乘以项目权重再求和
                            String temp_value_fm = "0";// 下级项目分乘以项目权重再求和
                            for (int j = 0; j < subItemList.size(); j++) {
                                LazyDynaBean abean = (LazyDynaBean) itemList
                                        .get(j);
                                String subitem_id = (String) abean
                                        .get("item_id");
                                String subitem_rank = (String) abean
                                        .get("rank");
                                String subitem_score = (String) existData
                                        .get(object_id + "`" + subitem_id);
                                if (subitem_score == null) {
                                    subitem_score = "0";
                                }
                                String subitem_templateScore = (String) abean
                                        .get("score");

                                temp_value_fz = PubFunc.add(PubFunc.multiple(
                                        subitem_score, subitem_rank, 6),
                                        temp_value_fz, 6);
                                temp_value_fm = PubFunc.add(
                                        PubFunc.multiple(subitem_templateScore,
                                                subitem_rank, 6),
                                        temp_value_fm, 6);
                            }
                            String temp_value = PubFunc.multiple(temp_value_fz,
                                    miditem_score, 6);
                            temp_value = PubFunc.divide(temp_value,
                                    temp_value_fm, 6);
                            sql0 = "update per_result_" + this.planid
                                    + " set T_" + miditem_id + "=" + temp_value
                                    + " where object_id='" + object_id + "'";
                            if (this.priv_where != null
                                    && this.priv_where.trim().length() > 0) {
                                sql0 += " " + this.priv_where;
                            }
                            dao.update(sql0);
                            existData.put(object_id + "`" + miditem_id,
                                    temp_value);
                            leafItemList.add(_abean);// 把计算好的中间项目也作为叶子项目对待
                            // 供它的上级项目计算用
                        }
                    }

                    for (Iterator it = midItemMap.keySet().iterator(); it
                            .hasNext(); ) {
                        String key = (String) it.next();
                        LazyDynaBean _abean = (LazyDynaBean) midItemMap
                                .get(key);
                        String miditem_id = (String) _abean.get("item_id");

                        if (existData.get(object_id + "`" + miditem_id) == null) {
                            flag = true;
                        }
                    }
                } while (flag);
            }
            // 3. 计算总分
            for (int k = 0; k < objectList.size(); k++) {
                a_bean = (LazyDynaBean) objectList.get(k);
                String object_id = (String) a_bean.get("object_id");
                // 得到顶层项目
                ArrayList subItemList = new ArrayList();
                for (int n = 0; n < itemList.size(); n++) {
                    LazyDynaBean abean = (LazyDynaBean) itemList.get(n);
                    String parent_id = (String) abean.get("parent_id");
                    if (parent_id.trim().length() == 0) {
                        String item_id = (String) abean.get("item_id");
                        // if(removeSelfItemMap.get(object_id+"`"+item_id)!=null)//没有任务的个性项目不算入它的父项目的子项目
                        // continue;
                        subItemList.add(abean);
                    }
                }
                if (subItemList.size() > 0) {
                    String temp_value_fz = "0";// 下级项目计算得分乘以项目权重再求和
                    String temp_value_fm = "0";// 下级项目分乘以项目权重再求和
                    for (int j = 0; j < subItemList.size(); j++) {
                        LazyDynaBean _abean = (LazyDynaBean) subItemList.get(j);
                        String subitem_id = (String) _abean.get("item_id");
                        String subitem_rank = (String) _abean.get("rank");
                        String subitem_score = (String) existData.get(object_id
                                + "`" + subitem_id);
                        String subitem_templateScore = (String) _abean
                                .get("score");

                        temp_value_fz = PubFunc.add(PubFunc.multiple(
                                subitem_score, subitem_rank, 6), temp_value_fz,
                                6);
                        temp_value_fm = PubFunc.add(PubFunc.multiple(
                                subitem_templateScore, subitem_rank, 6),
                                temp_value_fm, 6);
                    }
                    String templateScore = this.templateVo
                            .getString("topscore");
                    String temp_value = temp_value_fz;
                    //存在项目分是0的情况， 如果项目分是0就不应该乘以模板总分再除以项目总分了吧，否则计算出的总分会不对。
                    if (Double.parseDouble(temp_value_fm) != 0) {
                        temp_value = PubFunc.multiple(temp_value_fz,
                                templateScore, 6);
                        temp_value = PubFunc.divide(temp_value, temp_value_fm,
                                6);
                    }
                    sql0 = "update per_result_" + this.planid
                            + " set original_score=" + temp_value
                            + " where object_id='" + object_id + "'";
                    if (this.priv_where != null
                            && this.priv_where.trim().length() > 0) {
                        sql0 += " " + this.priv_where;
                    }
                    dao.update(sql0);
                }
            }
            if (rowSet != null) {
                rowSet.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void calculateItemReduceScore2(HashMap objPointScoreMap,
                                          int KeepDecimal, ArrayList itemList, ArrayList objectList,
                                          HashMap item_pointMap) {
        ContentDAO dao = new ContentDAO(this.conn);
        RowSet rowSet = null;
        try {

            ArrayList leafItemList = new ArrayList();
            String _str2 = "per_target_evaluation";
            if (this.task_score_str.trim().length() > 0) {
                String _str = "("
                        + this.task_score_str.trim().replaceAll(
                        "per_target_evaluation", "EE") + ")";
                _str2 = " ( select  "
                        + _str
                        + " score,EE.P0400,EE.stdScore,EE.mainbody_id,EE.plan_id,EE.object_id  from per_target_evaluation EE,p04 z where EE.p0400=z.p0400 and EE.plan_id="
                        + this.planid + " )";

            }
            // 算叶子项目分值
            String sql0 = "";
            LazyDynaBean a_bean = null;
            for (int j = 0; j < itemList.size(); j++) {
                LazyDynaBean abean = (LazyDynaBean) itemList.get(j);
                String item_id = (String) abean.get("item_id");
                String child_id = (String) abean.get("child_id");
                String kind = (String) abean.get("kind");
                String score = (String) abean.get("score");
                String rank = (String) abean.get("rank");
                if ("2".equals(kind)) {
                    leafItemList.add(abean);
                    for (int i = 0; i < objectList.size(); i++) {
                        a_bean = (LazyDynaBean) objectList.get(i);
                        String object_id = (String) a_bean.get("object_id");
                        String a_objectid = "a0100";
                        if (this.planVo.getInt("object_type") != 2) {
                            a_objectid = "b0110";
                        }

                        sql0 = "SELECT SUM("
                                + Sql_switcher.isnull("A.Score", "0")
                                + "*P0415) AS Score FROM P04, "
                                + "(SELECT P.P0400, AVG("
                                + Sql_switcher.isnull("P.Score", "0")
                                + "+"
                                + Sql_switcher.isnull("stdScore", "0")
                                + ") AS Score FROM "
                                + _str2
                                + " P, per_mainbody B "
                                + "  WHERE P.plan_id="
                                + this.planid
                                + " AND P.Object_id='"
                                + object_id
                                + "' "
                                + "    AND P.plan_id=B.plan_id AND P.object_id=B.object_id AND P.mainbody_id=B.mainbody_id ";
                        if (this.compute_flag != 4) {
                            sql0 += " AND (B.status in (2, 3)) ";
                        }
                        if (this.batchComput != null
                                && this.batchComput.trim().length() > 0
                                && "True".equalsIgnoreCase(this.batchComput)) {
                            sql0 += " AND (B.status=2 or B.status=3 or B.mainbody_id='"
                                    + this.presentMainbody_id + "' ) ";
                        }
                        sql0 += " GROUP BY P0400) A " + "WHERE plan_id="
                                + this.planid + " AND " + a_objectid + "='"
                                + object_id + "' AND item_id=" + item_id
                                + " AND P04.P0400=A.P0400 ";

                        rowSet = dao.search(sql0);
                        String temp_value = "0";
                        if (rowSet.next()) {
                            temp_value = rowSet.getString(1);
                            if (temp_value == null) {
                                temp_value = "0";
                            }
                        }
                        temp_value = PubFunc
                                .add(score, temp_value, KeepDecimal);
                        if (Double.parseDouble(temp_value) < 0) {
                            temp_value = "0";
                        }
                        sql0 = "update per_result_" + this.planid + " set T_"
                                + item_id + "=" + temp_value
                                + " where object_id='" + object_id + "'";
                        if (this.priv_where != null
                                && this.priv_where.trim().length() > 0) {
                            sql0 += " " + this.priv_where;
                        }
                        dao.update(sql0);
                    }
                } else if (child_id.trim().length() == 0) {
                    leafItemList.add(abean);
                    for (int i = 0; i < objectList.size(); i++) {
                        a_bean = (LazyDynaBean) objectList.get(i);
                        String object_id = (String) a_bean.get("object_id");
                        String a_objectid = "a0100";
                        if (this.planVo.getInt("object_type") != 2) {
                            a_objectid = "b0110";
                        }

                        if (this.planVo.getInt("method") == 2) {
                            sql0 = "SELECT SUM("
                                    + Sql_switcher.isnull("A.Score", "0")
                                    + ") AS Score FROM P04, "
                                    + "(SELECT P.P0400, AVG("
                                    + Sql_switcher.isnull("P.Score", "0")
                                    + "+"
                                    + Sql_switcher.isnull("stdScore", "0")
                                    + ") AS Score FROM "
                                    + _str2
                                    + " P, per_mainbody B "
                                    + "  WHERE P.plan_id="
                                    + this.planid
                                    + " AND P.Object_id='"
                                    + object_id
                                    + "' "
                                    + "    AND P.plan_id=B.plan_id AND P.object_id=B.object_id AND P.mainbody_id=B.mainbody_id ";
                            if (this.compute_flag != 4) {
                                sql0 += " AND (B.status in (2, 3)) ";
                            }
                            if (this.batchComput != null
                                    && this.batchComput.trim().length() > 0
                                    && "True"
                                    .equalsIgnoreCase(this.batchComput)) {
                                sql0 += " AND (B.status=2 or B.status=3 or B.mainbody_id='"
                                        + this.presentMainbody_id + "' ) ";
                            }
                            sql0 += " GROUP BY P0400) A " + "WHERE plan_id="
                                    + this.planid + " AND " + a_objectid + "='"
                                    + object_id + "' AND item_id=" + item_id
                                    + " AND P04.P0400=A.P0400 ";
                        } else {
                            sql0 = "SELECT SUM("
                                    + Sql_switcher.isnull("A.Score", "0")
                                    + ") AS Score FROM  per_template_point ptp,per_template_item  pti, "
                                    + "(SELECT P.point_id, AVG("
                                    + Sql_switcher.isnull("P.Score", "0")
                                    + ") AS Score FROM per_table_"
                                    + this.planid
                                    + " P, per_mainbody B "
                                    + "  WHERE   P.Object_id='"
                                    + object_id
                                    + "' "
                                    + "    AND B.plan_id="
                                    + this.planid
                                    + " AND P.object_id=B.object_id AND P.mainbody_id=B.mainbody_id ";
                            if (this.compute_flag != 4) {
                                sql0 += " AND (B.status in (2, 3)) ";
                            }
                            if (this.batchComput != null
                                    && this.batchComput.trim().length() > 0
                                    && "True"
                                    .equalsIgnoreCase(this.batchComput)) {
                                sql0 += " AND (B.status=2 or B.status=3 or B.mainbody_id='"
                                        + this.presentMainbody_id + "' ) ";
                            }
                            sql0 += " GROUP BY point_id) A "
                                    + " where ptp.item_id=pti.item_id and  pti.template_id='"
                                    + this.template_id
                                    + "' and ptp.point_id=A.point_id and ptp.item_id="
                                    + item_id;
                        }

                        rowSet = dao.search(sql0);
                        String temp_value = "0";
                        if (rowSet.next()) {
                            temp_value = rowSet.getString(1);
                            if (temp_value == null) {
                                temp_value = "0";
                            }
                        }
                        temp_value = PubFunc
                                .add(score, temp_value, KeepDecimal);
                        if (Double.parseDouble(temp_value) < 0) {
                            temp_value = "0";
                        }
                        sql0 = "update per_result_" + this.planid + " set T_"
                                + item_id + "=" + temp_value
                                + " where object_id='" + object_id + "'";
                        if (this.priv_where != null
                                && this.priv_where.trim().length() > 0) {
                            sql0 += " " + this.priv_where;
                        }
                        dao.update(sql0);
                    }
                }
            }

            // 2. 逐项目向上汇总
            rowSet = dao
                    .search("SELECT parent_id FROM per_template_item WHERE template_id='"
                            + template_id
                            + "' AND  parent_id IS Not NULL GROUP BY parent_id ORDER BY parent_id DESC ");
            while (rowSet.next()) {
                // 算出上级项目每个人的均分, 再算上级项目的均分, 做为该项目的分数保存(可以 avg(Itemscore), 不算权重了,
                // 只顶级算权重)
                String itemid = rowSet.getString(1);
                String sql_str = getItemScoreStr(itemid, itemList,
                        item_pointMap);
                dao.update("update per_result_" + this.planid + " set T_"
                        + itemid + "=" + sql_str);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 获得 项目分值的计算sql
     *
     * @param itemid
     * @param items
     * @param item_pointMap
     * @param objPointScoreMap
     * @return
     */
    private String getItemScoreStr(String itemid, ArrayList itemList,
                                   HashMap item_pointMap) {
        String sql_str = "";
        try {
            for (int j = 0; j < itemList.size(); j++) {
                LazyDynaBean abean = (LazyDynaBean) itemList.get(j);
                String item_id = (String) abean.get("item_id");
                String rank = (String) abean.get("rank");
                String parent_id = (String) abean.get("parent_id");
                if (parent_id.equalsIgnoreCase(itemid)) {
                    sql_str += "+T_" + itemid + "*" + rank;
                }
            }

            ArrayList pointList = (ArrayList) item_pointMap.get(itemid);
            LazyDynaBean abean = null;
            for (int i = 0; i < pointList.size(); i++) {
                abean = (LazyDynaBean) pointList.get(i);
                String point_id = (String) abean.get("point_id");
                String score = (String) abean.get("score");
                sql_str += "+" + score + "+C_" + point_id;
            }

            if (sql_str.length() > 0) {
                sql_str = sql_str.substring(1);
            }
        } catch (Exception e) {

        }

        return sql_str;
    }

    // 计算所有项目得分（注意动态指标权重）
    public void calculateItemScore(ArrayList objectList, HashMap ruleMap,
                                   HashMap item_pointMap, ArrayList itemList, ArrayList pointList,
                                   HashMap objectItemRankMap, HashMap dynaMap, HashMap objectBodyMap) {

        ContentDAO dao = new ContentDAO(this.conn);
        try {
            // 计算共性项目
            String UseWeight = (String) ruleMap.get("UseWeight");
            int KeepDecimal = Integer.parseInt((String) ruleMap
                    .get("KeepDecimal")); // 保留小数位
            HashMap objPointScoreMap = getObjPointScoreMap(pointList); // 取得考核对象的指标得分

            if ("4".equals((String) this.planParamSet.get("scoreflag"))) {
                calculateItemReduceScore(objPointScoreMap, KeepDecimal,
                        itemList, objectList, item_pointMap);
                return;
            }

            LazyDynaBean a_bean = null;
            ArrayList dynaPointRankList = getDynaPointrank(); // 取得考核指标动态权重
            StringBuffer sql = new StringBuffer("update per_result_"
                    + this.planid + " set ");
            StringBuffer sub_sql = new StringBuffer("");
            boolean updateFlag = false;
            for (int j = 0; j < itemList.size(); j++) {
                LazyDynaBean abean = (LazyDynaBean) itemList.get(j);
                String item_id = (String) abean.get("item_id");
                String kind = (String) abean.get("kind");
                if ("1".equals(kind)) {
                    sub_sql.append(",T_" + item_id + "=?");
                    updateFlag = true;
                }

            }

            HashMap objPointRanks = new HashMap();
            if (this.planVo.getInt("method") != 2) {
                objPointRanks = this.getObjPointRank();// 考核对象的动态指标权重
            }
            if (updateFlag) {
                sql.append(sub_sql.substring(1) + " where object_id=?");
                ArrayList list = new ArrayList();
                for (int i = 0; i < objectList.size(); i++) {
                    a_bean = (LazyDynaBean) objectList.get(i);
                    // String b0110 = (String) a_bean.get("b0110");
                    // String e0122 = (String) a_bean.get("e0122");
                    // String e01a1 = (String) a_bean.get("e01a1");
                    String object_id = (String) a_bean.get("object_id");
                    LazyDynaBean obj_pointScore = (LazyDynaBean) objPointScoreMap
                            .get(object_id);
                    ArrayList tempList = new ArrayList();
                    for (int j = 0; j < itemList.size(); j++) {
                        LazyDynaBean abean = (LazyDynaBean) itemList.get(j);
                        String item_id = (String) abean.get("item_id");
                        String kind = (String) abean.get("kind");
                        if ("1".equals(kind)) {
                            String score = getItemScore(ruleMap, a_bean,
                                    item_id, obj_pointScore, dynaPointRankList,
                                    KeepDecimal, UseWeight, item_pointMap,
                                    objPointRanks);
                            tempList.add(new Float(score));
                        }
                    }
                    tempList.add(object_id);
                    list.add(tempList);
                }

                if (this.priv_where != null
                        && this.priv_where.trim().length() > 0) {
                    sql.append(this.priv_where);
                }

                dao.batchUpdate(sql.toString(), list);
            }

            // 计算个性项目
            // HashMap bodyRankMap=new HashMap();
            String sql0 = "";
            RowSet rowSet = null;
            RowSet rowSet2 = null;
            if (this.compute_flag == 1 || this.compute_flag == 4) // this.compute_flag==2
            // 不计算个性项目
            {
                DbWizard dbWizard = new DbWizard(this.conn);
                if (!dbWizard.isExistField("p04", "TargetScore", false)) {
                    Table table = new Table("p04", "p04");
                    table.addField(getField("TargetScore", "N", 12, false));
                    dbWizard.addColumns(table);
                }

                String _str2 = "per_target_evaluation";
                /*
                 * if(this.task_score_str.trim().length()>0) { String
                 * _str="("+this
                 * .task_score_str.trim().replaceAll("per_target_evaluation"
                 * ,"EE")+")"; _str2=" ( select  "+_str+
                 * " score,EE.P0400,EE.stdScore,EE.mainbody_id,EE.plan_id,EE.object_id  from per_target_evaluation EE,p04 z where EE.p0400=z.p0400 and EE.plan_id="
                 * +this.planid+" )";
                 *
                 * }
                 */
                if (UseWeight != null && "true".equalsIgnoreCase(UseWeight)) // 使用权重
                {
                    createAbsRankTable(ruleMap);
                    // bodyRankMap=getBodyRankMap();
                    // createAbsRankP04Table();
                    //String zeroByNull = (String) ruleMap.get("zeroByNull"); // 空票按零分计算
                    //if ("true".equals(zeroByNull)) {
                    /**
                     * 针对目标卡使用权重计算分值的时候，将共性指标计算规则和个性指标计算规则统一
                     * 此处不需要在判断 “空票按零分计算” 这个参数了，因为在dealWithEvaluationTable 方法中已经根据
                     * 算分规则（包括空票按零分计算，此类打分等）补充了数据到PER_TARGET_EVALUATION中
                     * 空票按零计算：顾名思义没打分的都按0计算
                     * 空票不按零计算： 将同类别主体下已打分的平均分，作为同类别主体的打分记录；类别下的主体都没有打分时，这种情况不计算分（
                     * 如果要算分需要 勾选此类有分的选项
                     * ）
                     */
                    sql0 = " UPDATE P04 SET task_score=(SELECT Score "
                            + "FROM (SELECT E.P0400, SUM((E.Score+"
                            + Sql_switcher.isnull("E.stdScore", "0")
                            + ")*absrank) AS Score FROM " + _str2
                            + " E, absRankTable1 C, per_mainbody B WHERE E.plan_id=";
					/*} else {
						sql0 = " UPDATE P04 SET task_score=(SELECT Score "
								+ "FROM (SELECT E.P0400, case when max(p04.fromflag)=1 then SUM((E.Score+"
								+ Sql_switcher.isnull("E.stdScore", "0")
								+ ")*absrank)/nullif(SUM(absRank),0)"
								+" else SUM((E.Score+"+ Sql_switcher.isnull("E.stdScore", "0")+")*absrank) end"
								+" AS Score FROM "
								+ _str2
								+ " E, absRankTable1 C, per_mainbody B,p04 WHERE E.p0400=p04.p0400 and E.plan_id=";
					}*/
                    sql0 += this.planid
                            + " AND B.plan_id=E.plan_id AND B.object_id=E.object_id "
                            + " AND B.mainbody_id=E.mainbody_id ";
                    if (this.batchComput != null
                            && this.batchComput.trim().length() > 0
                            && "True".equalsIgnoreCase(this.batchComput)) {
                        sql0 += " AND (B.mainbody_id='"
                                + this.presentMainbody_id + "' ) ";
                    }
                    sql0 += " AND C.username='"
                            + this.userView.getUserName().toLowerCase()
                            + "' "
                            + "    AND B.object_id=C.object_id AND B.mainbody_id=C.mainbody_id GROUP BY E.P0400) A "
                            + "WHERE plan_id=" + this.planid
                            + " AND P04.P0400=A.P0400 )" + "WHERE plan_id="
                            + this.planid + " ";
                    dao.update(sql0);

                    /**
                     * 如果勾上此类有分的参数，需要补上此类有分的分数，因为p04表的任务得分（task_score）在导出打分明细的时候有用，
                     * p04 表中的task_score 得分和计算后的共性指标得分不同，此处补分是为了保持
                     * 和评估界面的指标得分保持一致
                     */
                    String tableName = "t#" + this.userView.getUserName() + "_per_2";
                    sql0 = "update p04 set task_score=task_score+" + Sql_switcher.isnull("(select score from (select sum(score) as score,point_id,object_id from (select point_id,avg(score)*max(ppb.nrank) as score,a.object_id"
                            + " from " + tableName + " A,ABSRANKTABLE2 ppb where "
                            + " a.mainbody_id = 'x' and a.body_id = ppb.BODY_ID"
                            + " and ppb.username='" + this.userView.getUserName() + "'"
                            + " group by point_id,a.object_id,a.mainbody_id,a.body_id) b"
                            + " group by b.point_id,b.object_id) C where p04.p0401 = C.point_id and p04.a0100=c.OBJECT_ID)", "0");
                    sql0 += "where plan_id = " + this.planid;
                    dao.update(sql0);
                } else {
                    String zeroByNull = (String) ruleMap.get("zeroByNull"); // 空票按零分计算
                    if ("true".equals(zeroByNull)) {
                        sql0 = " UPDATE P04 SET  task_score =(SELECT Score "
                                + "FROM (SELECT P.P0400, SUM(P.Score+"
                                + Sql_switcher.isnull("stdScore", "0")
                                + ") AS Score FROM " + _str2
                                + " P, per_mainbody B ";
                        sql0 += "  WHERE P.plan_id="
                                + this.planid
                                + " AND P.plan_id=B.plan_id AND P.object_id=B.object_id "
                                + "    AND P.mainbody_id=B.mainbody_id ";
                        if (this.compute_flag != 4) {
                            sql0 += " AND (B.status in (2, 3)) ";
                        }
                        if (this.batchComput != null
                                && this.batchComput.trim().length() > 0
                                && "True".equalsIgnoreCase(this.batchComput)) {
                            sql0 += " AND (B.mainbody_id='"
                                    + this.presentMainbody_id + "' ) ";
                        }
                        sql0 += " GROUP BY P0400) A " + "WHERE plan_id="
                                + this.planid + " AND P04.P0400=A.P0400 )"
                                + "WHERE plan_id=" + this.planid + " ";
                        dao.update(sql0);
                        rowSet = dao
                                .search("select object_id,count(mainbody_id) as maincount from per_mainbody where plan_id="
                                        + this.planid + " group by object_id ");
                        while (rowSet.next()) {
                            String object_id = rowSet.getString("object_id");
                            String maincount = rowSet.getString("maincount");
                            dao.update("update P04 SET  task_score = task_score/"
                                    + maincount
                                    + " where a0100="
                                    + object_id
                                    + " ");
                        }
                    } else {
                        sql0 = " UPDATE P04 SET  task_score =(SELECT Score "
                                + "FROM (SELECT P.P0400, AVG(P.Score+"
                                + Sql_switcher.isnull("stdScore", "0")
                                + ") AS Score FROM " + _str2
                                + " P, per_mainbody B ";
                        sql0 += "  WHERE P.plan_id="
                                + this.planid
                                + " AND P.plan_id=B.plan_id AND P.object_id=B.object_id "
                                + "    AND P.mainbody_id=B.mainbody_id ";
                        if (this.compute_flag != 4) {
                            sql0 += " AND (B.status in (2, 3)) ";
                        }
                        if (this.batchComput != null
                                && this.batchComput.trim().length() > 0
                                && "True".equalsIgnoreCase(this.batchComput)) {
                            sql0 += " AND (B.status=2 or B.status=3 or B.mainbody_id='"
                                    + this.presentMainbody_id + "' ) ";
                        }
                        sql0 += " GROUP BY P0400) A " + "WHERE plan_id="
                                + this.planid + " AND P04.P0400=A.P0400 )"
                                + "WHERE plan_id=" + this.planid + " ";
                        dao.update(sql0);
                    }
                }
                HashMap<String, LazyDynaBean> totalPointMap = getTotalScorePointList(this.template_id); // 取得统一打分指标
                //定量统一打分通过业务数据录入时，per_target_evaluation表中没有记录 需要单独从 结果表中取数
                for (String pointId : totalPointMap.keySet()) {
                    rowSet = dao.search("select C_" + pointId + " score,object_id from per_result_" + this.planid);
                    while (rowSet.next()) {
                        String objectId = rowSet.getString("object_id");
                        Float pointScore = rowSet.getFloat("score");

                        ArrayList values = new ArrayList();
                        values.add(pointScore);
                        values.add(this.planid);
                        values.add(objectId);
                        values.add(pointId);
                        dao.update("update p04 set task_score=? where plan_id=? and a0100=? and p0401=?", values);
                    }
                }
                if (this.task_score_str.trim().length() > 0) // 任务分值定义计算公式
                {
                    // System.out.println("update p04 set targetscore="+this.task_score_str+" where  plan_id="+this.planid);
                    dao.update("update p04 set targetscore="
                            + this.task_score_str + " where  plan_id="
                            + this.planid);

                } else {
                    dao.update("update p04 set targetscore=task_score where  plan_id="
                            + this.planid);
                }

                if (ruleMap.get("isvalidate") != null
                        && "true"
                        .equalsIgnoreCase((String) ruleMap.get("isvalidate"))) // 启用分值范围控制
                {
                    if (ruleMap.get("scoreRangeList") != null) {

                        ArrayList scoreRangeList = (ArrayList) ruleMap
                                .get("scoreRangeList");
                        LazyDynaBean bean = null;
                        for (int i = 0; i < scoreRangeList.size(); i++) {
                            bean = (LazyDynaBean) scoreRangeList.get(i);
                            String id = (String) bean.get("id");

                            String maxscore = (String) bean.get("maxscore");
                            String minscore = (String) bean.get("minscore");
                            if (maxscore != null
                                    && maxscore.trim().length() > 0) {
                                dao.update("update p04 set TargetScore="
                                        + maxscore + " where TargetScore>"
                                        + maxscore + " and  lower(p0401)='"
                                        + id.toLowerCase()
                                        + "' and fromflag=2 and plan_id="
                                        + this.planid + "     ");
                            }
                            if (minscore != null
                                    && minscore.trim().length() > 0) {
                                dao.update("update p04 set TargetScore="
                                        + minscore + " where TargetScore<"
                                        + minscore + " and  lower(p0401)='"
                                        + id.toLowerCase()
                                        + "' and fromflag=2  and plan_id="
                                        + this.planid + "     ");
                            }

                        }
                    }
                }

                // HashMap objItemRankMap=getObjItemRank();

                HashMap AdjustPointOrItemMap = new HashMap(); // 考核对象单个指标是否调整过
                // 评分调整模块临时计算用到
                if (this.compute_flag == 4) {
                    LazyDynaBean _bean = (LazyDynaBean) objectList.get(0);
                    String object_id = (String) _bean.get("object_id");
                    AdjustPointOrItemMap = getAdjustPointOrItem(object_id);
                }

                for (int j = 0; j < itemList.size(); j++) {
                    LazyDynaBean abean = (LazyDynaBean) itemList.get(j);
                    String item_id = (String) abean.get("item_id");
                    String kind = (String) abean.get("kind");
                    // String rank=(String)abean.get("rank");
                    if ("2".equals(kind)) {
                        // selfItem.add(abean);
                        // HashMap objectScoreMap=getObjectScore(item_id,rank);
                        // LazyDynaBean aabean=null;
                        boolean isAddMinusItem = false; // 是否是加扣分项目
                        for (int i = 0; i < objectList.size(); i++) {
                            a_bean = (LazyDynaBean) objectList.get(i);
                            // String b0110 = (String) a_bean.get("b0110");
                            String e0122 = (String) a_bean.get("e0122");
                            // String e01a1 = (String) a_bean.get("e01a1");
                            String object_id = (String) a_bean.get("object_id");
                            String body_id = (String) a_bean.get("body_id");
                            // BigDecimal a_score = new BigDecimal("0");
                            String a_objectid = "a0100";
                            if (this.planVo.getInt("object_type") != 2) {
                                a_objectid = "b0110";
                            }

                            if (this.compute_flag == 4
                                    && AdjustPointOrItemMap.get(item_id
                                    .toLowerCase()) != null) // 如果为评分调整里的临时计算
                            // 如果该个性项目被调整过，结果表不允许重新赋值
                            {
                                continue;
                            }

                            String p0415_str = "p0415";
                            String dyna_value = "0";
                            if (dynaMap != null && dynaMap.get(body_id) != null) {
                                HashMap _map = (HashMap) dynaMap.get(body_id);
                                if (_map != null
                                        && _map.get(body_id + item_id) != null) {
                                    HashMap map = (HashMap) _map.get(body_id
                                            + item_id);
                                    if (map.get("isAddMinusItem") != null
                                            && "1"
                                            .equals((String) map
                                                    .get("isAddMinusItem"))) {
                                        p0415_str = "1";
                                        isAddMinusItem = true;
                                        dyna_value = moveZero((String) map
                                                .get("dyna_value"));
                                    }
                                }
                            }

                            if (UseWeight != null
                                    && "true".equalsIgnoreCase(UseWeight)) // 使用权重
                            {
                                /*
                                 * sql0="SELECT SUM("+Sql_switcher.isnull("A.Score"
                                 * ,"0")+"*"+p0415_str+") AS Score FROM P04, " +
                                 * "(SELECT E.P0400, SUM(("
                                 * +Sql_switcher.isnull("E.Score"
                                 * ,"0")+"+"+Sql_switcher
                                 * .isnull("E.stdScore","0"
                                 * )+")*"+Sql_switcher.isnull
                                 * ("absrank","0")+")/SUM("
                                 * +Sql_switcher.isnull("absRank"
                                 * ,"0")+") AS Score FROM "
                                 * +_str2+" E, absRankTable1 C, per_mainbody B "
                                 * + "  WHERE E.plan_id="+this.planid+
                                 * " AND B.Object_id='"
                                 * +object_id+"' AND absRank<>0  AND C.username='"
                                 * +
                                 * this.userView.getUserName().toLowerCase()+"' "
                                 * +
                                 * "    AND B.plan_id=E.plan_id AND B.object_id=E.object_id AND B.mainbody_id=E.mainbody_id "
                                 * ; if(this.compute_flag!=4)
                                 * sql0+=" AND (B.status in (2, 3)) "; sql0+=
                                 * "    AND B.object_id=C.object_id AND B.mainbody_id=C.mainbody_id GROUP BY P0400) A "
                                 * +
                                 * "WHERE plan_id="+this.planid+" AND "+a_objectid
                                 * +"='"+object_id+"' AND item_id="+item_id+
                                 * " AND P04.P0400=A.P0400 ";
                                 */

                            } else {
                                /*
                                 * sql0="SELECT SUM("+Sql_switcher.isnull("A.Score"
                                 * ,"0")+"*"+p0415_str+") AS Score FROM P04, " +
                                 * "(SELECT P.P0400, AVG("
                                 * +Sql_switcher.isnull("P.Score"
                                 * ,"0")+"+"+Sql_switcher
                                 * .isnull("stdScore","0")+
                                 * ") AS Score FROM "+_str2
                                 * +" P, per_mainbody B " +
                                 * "  WHERE P.plan_id="+
                                 * this.planid+" AND P.Object_id='"
                                 * +object_id+"' " +
                                 * "    AND P.plan_id=B.plan_id AND P.object_id=B.object_id AND P.mainbody_id=B.mainbody_id "
                                 * ; if(this.compute_flag!=4)
                                 * sql0+=" AND (B.status in (2, 3)) ";
                                 * sql0+=" GROUP BY P0400) A " +
                                 * "WHERE plan_id="
                                 * +this.planid+" AND "+a_objectid
                                 * +"='"+object_id+"' AND item_id="+item_id+
                                 * " AND P04.P0400=A.P0400 ";
                                 */

                            }

                            if (isAddMinusItem) {
                                dao.update("update p04 set targetscore=task_score where  plan_id="
                                        + this.planid
                                        + "  AND "
                                        + a_objectid
                                        + "='"
                                        + object_id
                                        + "' AND item_id="
                                        + item_id);
                                if (ruleMap.get("isvalidate") != null
                                        && "true"
                                        .equalsIgnoreCase((String) ruleMap.get("isvalidate"))) // 启用分值范围控制
                                {
                                    if (ruleMap.get("scoreRangeList") != null) {

                                        ArrayList scoreRangeList = (ArrayList) ruleMap
                                                .get("scoreRangeList");
                                        LazyDynaBean bean = null;
                                        for (int a = 0; a < scoreRangeList
                                                .size(); a++) {
                                            bean = (LazyDynaBean) scoreRangeList
                                                    .get(a);
                                            String id = (String) bean.get("id");

                                            String maxscore = (String) bean
                                                    .get("maxscore");
                                            String minscore = (String) bean
                                                    .get("minscore");
                                            if (maxscore != null
                                                    && maxscore.trim().length() > 0) {
                                                dao.update("update p04 set TargetScore="
                                                        + maxscore
                                                        + " where TargetScore>"
                                                        + maxscore
                                                        + " and  lower(p0401)='"
                                                        + id.toLowerCase()
                                                        + "' and fromflag=2 and plan_id="
                                                        + this.planid
                                                        + "   AND "
                                                        + a_objectid
                                                        + "='"
                                                        + object_id
                                                        + "' AND item_id="
                                                        + item_id);
                                            }
                                            if (minscore != null
                                                    && minscore.trim().length() > 0) {
                                                dao.update("update p04 set TargetScore="
                                                        + minscore
                                                        + " where TargetScore<"
                                                        + minscore
                                                        + " and  lower(p0401)='"
                                                        + id.toLowerCase()
                                                        + "' and fromflag=2  and plan_id="
                                                        + this.planid
                                                        + "  AND "
                                                        + a_objectid
                                                        + "='"
                                                        + object_id
                                                        + "' AND item_id="
                                                        + item_id);
                                            }

                                        }
                                    }
                                }
                            }

                            // JinChunhai 2012.10.12
                            setP0415Value(a_objectid, object_id, item_id);

                            sql0 = "SELECT SUM("
                                    + Sql_switcher.isnull("TargetScore", "0")
                                    + "*" + p0415_str + ") AS Score FROM P04  "
                                    + "WHERE plan_id=" + this.planid + " AND "
                                    + a_objectid + "='" + object_id
                                    + "' AND item_id=" + item_id;

                            rowSet = dao.search(sql0);
                            String temp_value = "0";
                            if (rowSet.next()) {
                                temp_value = rowSet.getString(1);
                                if (temp_value != null) {
                                    if (isAddMinusItem) // 加扣分项目
                                    {
                                        if (dyna_value.length() > 0) {
                                            if ("0".equals(this.templateVo.getString(
                                                    "status"))) {
                                                temp_value = PubFunc.add(
                                                        temp_value, dyna_value,
                                                        2);
                                            } else // 权重
                                            {
                                                temp_value = PubFunc
                                                        .add(temp_value,
                                                                String.valueOf(Double
                                                                        .parseDouble(dyna_value)
                                                                        * this.templateVo
                                                                        .getDouble("topscore")),
                                                                2);
                                            }
                                        }
                                    } else {
                                        if (temp_value != null
                                                && "1".equals(this.templateVo.getString(
                                                "status"))) // 1:权重模板
                                        // 0:分值模板
                                        {
                                            // map.put(rowSet.getString(a_objectid)+"/"+rowSet.getString("item_id"),rowSet.getString(2));
                                            if (objectItemRankMap.get(object_id
                                                    + "/" + item_id) != null) {
                                                String _rank = (String) objectItemRankMap
                                                        .get(object_id + "/"
                                                                + item_id);
                                                if (Float.parseFloat(_rank) != 0) {
//													temp_value = PubFunc
//															.divide(temp_value,
//																	_rank,
//																	KeepDecimal);
                                                } else {
                                                    temp_value = "0";
                                                }
                                            }
                                        }

                                    }
                                }
                                if (temp_value == null) {
                                    temp_value = "0";
                                }
                            }
                            String _value = "0";
                            String all_scroe = "0";//定量指标总的权重   zhaoxg 2014-5-12
                            if (!isAddMinusItem) {
                                // 增加个性化定量指标的分数
                                // P04: P0401, P0415, item_id per_point:
                                // point_id, status, Pointkind
                                // per_gather_score_xxx: T_xxxxxx_S
                                // per_gather_xxx: object_id, gather_id
                                sql0 = " SELECT P0401, P0415 FROM P04, per_point "
                                        + " WHERE plan_id="
                                        + this.planid
                                        + " and item_id='"
                                        + item_id
                                        + "' AND P0401=point_id AND per_point.status=1 and per_point.pointkind=1 and " + Sql_switcher.isnull("Chg_type", "0") + "<>3";
                                if (this.planVo.getInt("object_type") != 2) {
                                    sql0 += " AND b0110='" + object_id + "'";
                                } else {
                                    sql0 += " AND A0100='" + object_id + "'";
                                }
                                rowSet = dao.search(sql0);
                                all_scroe = (String) objectItemRankMap.get(object_id + "/" + item_id);

                                if (all_scroe == null) //2014-6-27  dengcan,解决对象没有定义目标卡产生的问题
                                {
                                    all_scroe = "0";
                                }
                                while (rowSet.next()) {
                                    String tableName = "per_gather_" + this.planid;
                                    if (dbWizard.isExistTable(tableName, false)) {
                                        String p0401 = rowSet.getString("p0401");
                                        String p0415 = rowSet.getString("p0415") != null ? rowSet.getString("p0415") : "0";

                                        String sql1 = "SELECT * FROM  per_gather_score_"
                                                + this.planid
                                                + " where gather_id in (SELECT gather_id FROM ";
                                        sql1 += "per_gather_" + this.planid
                                                + " WHERE object_id='" + object_id
                                                + "' )";
                                        rowSet2 = dao.search(sql1);
                                        if (rowSet2.next()) {
                                            String str = "T_" + p0401 + "_S";
                                            String value = rowSet2.getString(str) == null ? "0"
                                                    : rowSet2.getString(str);

                                            if (ruleMap.get("isvalidate") != null
                                                    && "true"
                                                    .equalsIgnoreCase((String) ruleMap
                                                            .get("isvalidate"))) // 启用分值范围控制
                                            {
                                                if (ruleMap.get("scoreRangeList") != null) {
                                                    ArrayList scoreRangeList = (ArrayList) ruleMap
                                                            .get("scoreRangeList");
                                                    LazyDynaBean bean = null;
                                                    for (int e = 0; e < scoreRangeList
                                                            .size(); e++) {
                                                        bean = (LazyDynaBean) scoreRangeList
                                                                .get(e);
                                                        String id = (String) bean
                                                                .get("id");
                                                        if (p0401
                                                                .equalsIgnoreCase(id)) {
                                                            String maxscore = (String) bean
                                                                    .get("maxscore");
                                                            String minscore = (String) bean
                                                                    .get("minscore");
                                                            if (maxscore != null
                                                                    && maxscore
                                                                    .trim()
                                                                    .length() > 0) {
                                                                if (Double
                                                                        .parseDouble(value) > Double
                                                                        .parseDouble(maxscore)) {
                                                                    value = maxscore;
                                                                }
                                                            }
                                                            if (minscore != null
                                                                    && minscore
                                                                    .trim()
                                                                    .length() > 0) {
                                                                if (Double
                                                                        .parseDouble(value) < Double
                                                                        .parseDouble(minscore)) {
                                                                    value = minscore;
                                                                }
                                                            }
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            if (_value != null
                                                    && "1".equals(this.templateVo.getString(
                                                    "status"))) // 1:权重模板
                                            {
                                                _value = PubFunc.add(_value, PubFunc.multiple(value, p0415, 6), 6);
                                            } else {
                                                _value = PubFunc.add(_value,
                                                        value, 6);
                                            }
                                        }
                                    }
                                }
                                if (Float.parseFloat(all_scroe) != 0) {
                                    //在计算最终结果时才去算精度，过程中计算的_value如果按精度保留小数 可能最终计算后的结果会丢失精度  haosl 2019年1月7日
                                    temp_value = PubFunc.divide(PubFunc.add(temp_value, _value, 6), all_scroe, KeepDecimal);
                                } else {
                                    temp_value = "0";
                                }

                            }


                            String CalcMenScoreRefDept = (String) this.planParamSet
                                    .get("CalcMenScoreRefDept"); // 本次评分=个人指标得分*部门指标得分的权重和（目标考核和360°）
                            // True,
                            // False,
                            // 默认为 False
                            if ("True".equalsIgnoreCase(CalcMenScoreRefDept)) {
                                if (UMPointScoreMap.size() > 0
                                        && UMPointScoreMap.get(e0122) != null) {
                                    LazyDynaBean _bean = (LazyDynaBean) UMPointScoreMap
                                            .get(e0122);
                                    if (_bean.get(item_id) != null) {
                                        String _scroe = (String) _bean
                                                .get(item_id);
                                        temp_value = PubFunc.multiple(
                                                temp_value, _scroe, 6);
                                    }
                                }
                            }

                            sql0 = "update per_result_" + this.planid
                                    + " set T_" + item_id + "=" + temp_value
                                    + " where object_id='" + object_id + "'";
                            if (this.priv_where != null
                                    && this.priv_where.trim().length() > 0) {
                                sql0 += " " + this.priv_where;
                            }
                            dao.update(sql0);
                        }
                    }
                }

            }

            ArrayList selfItem = new ArrayList();
            for (int j = 0; j < itemList.size(); j++) {
                LazyDynaBean abean = (LazyDynaBean) itemList.get(j);
                String item_id = (String) abean.get("item_id");
                String kind = (String) abean.get("kind");
                if ("2".equals(kind)) {
                    selfItem.add(abean);
                }
            }

            // 汇总项目分数
            HashMap existMap = new HashMap();
            LazyDynaBean abean = null;

            // 获得有指标的项目的分值
            HashMap itempointMap = getItemPoints(itemList);
            HashMap itemPointScoreMap_objs = new HashMap();
            for (int i = 0; i < objectList.size(); i++) {
                LazyDynaBean itemScore = new LazyDynaBean();
                a_bean = (LazyDynaBean) objectList.get(i);
                String object_id = (String) a_bean.get("object_id");
                LazyDynaBean obj_pointScore = (LazyDynaBean) objPointScoreMap
                        .get(object_id);
                ArrayList tempList = new ArrayList();
                for (int j = 0; j < itemList.size(); j++) {
                    abean = (LazyDynaBean) itemList.get(j);
                    String item_id = (String) abean.get("item_id");
                    String kind = (String) abean.get("kind");
                    if ("1".equals(kind)) {
                        String score = getItemScore(ruleMap, a_bean, item_id,
                                obj_pointScore, dynaPointRankList, KeepDecimal,
                                UseWeight, itempointMap, objPointRanks);
                        itemScore.set(item_id, score);
                    }
                }
                itemPointScoreMap_objs.put(object_id, itemScore);
            }

            sql0 = "select * from per_result_" + this.planid;
            if (this.priv_where != null && this.priv_where.trim().length() > 0) {
                sql0 += " where 1=1 " + this.priv_where;
            }
            rowSet = dao.search(sql0);
            while (rowSet.next()) {
                String object_id = rowSet.getString("object_id");
                String body_id = "";
                if (objectBodyMap.get(object_id) != null) {
                    body_id = (String) objectBodyMap.get(object_id);
                }
                HashMap _map = null;
                if (dynaMap != null && dynaMap.get(body_id) != null) {
                    _map = (HashMap) dynaMap.get(body_id);
                }

                existMap = new HashMap();
                for (int i = 0; i < selfItem.size(); i++) {
                    abean = (LazyDynaBean) selfItem.get(i);
                    String parent_id = (String) abean.get("parent_id");
                    String item_id = (String) abean.get("item_id");
                    if (existMap.get(item_id) == null && parent_id.length() > 0) {
                        iteratorItem(parent_id, itemList, existMap, object_id,
                                objectItemRankMap, itemPointScoreMap_objs,
                                _map, body_id);
                    }
                }
            }

            if (rowSet != null) {
                rowSet.close();
            }
            if (rowSet2 != null) {
                rowSet2.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 计算项目得分（勾选了按岗位素质模型计算） 郭峰
     */
    public void calculateItemScoreByModel(ArrayList objectList, HashMap ruleMap,
                                          HashMap item_pointMap, ArrayList itemList, ArrayList pointList,
                                          HashMap objectItemRankMap, HashMap dynaMap, HashMap objectBodyMap) {

        ContentDAO dao = new ContentDAO(this.conn);
        try {
            // 计算共性项目
            String UseWeight = (String) ruleMap.get("UseWeight");
            int KeepDecimal = Integer.parseInt((String) ruleMap
                    .get("KeepDecimal")); // 保留小数位
            HashMap objPointScoreMap = getObjPointScoreMapByModel(pointList); // 取得考核对象的指标得分

            LazyDynaBean a_bean = null;
//			ArrayList dynaPointRankList = getDynaPointrank(); // 取得考核指标动态权重
            ArrayList dynaPointRankList = new ArrayList(); // 取得考核指标动态权重
            StringBuffer sql = new StringBuffer("");
            sql.append("insert into per_history_result (id,plan_id,point_id,b0110,e0122,e01a1,object_id,a0101,score,amount,archive_date,status)");
            sql.append(" values (?,?,?,?,?,?,?,?,?,?,?,?)");
            HashMap objPointRanks = new HashMap();// 能力素质没有 考核对象的动态指标权重
            a_bean = (LazyDynaBean) objectList.get(0);
            String object_id = (String) a_bean.get("object_id");
            String b0110 = (String) a_bean.get("b0110");
            String e0122 = (String) a_bean.get("e0122");
            String e01a1 = (String) a_bean.get("e01a1");
            String a0101 = (String) a_bean.get("a0101");
            LazyDynaBean obj_pointScore = (LazyDynaBean) objPointScoreMap.get(object_id);
            ArrayList list = new ArrayList();
            ArrayList tempList = new ArrayList();
            for (int j = 0; j < itemList.size(); j++) {
                tempList = new ArrayList();
                IDGenerator idg = new IDGenerator(2, this.conn);
                String id = idg.getId("per_history_result.id");
                tempList.add(id);
                tempList.add(this.planid);
                LazyDynaBean abean = (LazyDynaBean) itemList.get(j);
                String item_id = (String) abean.get("item_id");
                tempList.add(item_id);
                tempList.add(b0110);
                tempList.add(e0122);
                tempList.add(e01a1);
                tempList.add(object_id);
                tempList.add(a0101);
                String kind = (String) abean.get("kind");
                if ("1".equals(kind)) {
                    String score = getItemScore(ruleMap, a_bean,
                            item_id, obj_pointScore, dynaPointRankList,
                            KeepDecimal, UseWeight, item_pointMap,
                            objPointRanks);
                    tempList.add(new Float(score));
                }
                tempList.add(null);
                tempList.add(null);
                tempList.add("1");
                list.add(tempList);
            }//for end
            dao.batchUpdate(sql.toString(), list);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void setP0415Value(String objOrb0110, String object_id,
                              String item_id) {
        try {
            ContentDAO dao = new ContentDAO(this.conn);

            // 权重模板
            if ("1".equals(this.templateVo.getString("status"))) {
                dao.update("update p04 set p0415=0 where plan_id="
                        + this.planid + " AND p0415 is null AND " + objOrb0110
                        + "='" + object_id + "' AND item_id=" + item_id);
            } else {
                dao.update("update p04 set p0415=1 where plan_id="
                        + this.planid + " AND p0415 is null AND " + objOrb0110
                        + "='" + object_id + "' AND item_id=" + item_id);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 移除小数点后面的零
     *
     * @param number
     */
    public String moveZero(String number) {
        DecimalFormat df = new DecimalFormat("###############.#####");
        if (number == null || number.length() == 0) {
            return "";
        }
        return df.format(Double.parseDouble(number));
    }

    // 取得考核对象 绩效项目的权重
    public HashMap getObjectItemRank(String plan_id) {
        HashMap map = new HashMap();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            String a_objectid = "a0100";
            if (this.planVo.getInt("object_type") != 2) {
                a_objectid = "b0110";
            }

            StringBuffer buf = new StringBuffer("select " + a_objectid
                    + ",item_id," + Sql_switcher.isnull("sum(p0415)", "0")
                    + " from p04 where plan_id=" + plan_id);
            if (Sql_switcher.searchDbServer() == Constant.ORACEL) {
                buf.append(" and " + a_objectid + " is not null ");
            } else if (Sql_switcher.searchDbServer() == Constant.MSSQL) {
                buf.append(" and " + a_objectid + " is not null and "
                        + a_objectid + "!='' ");
            }
            buf.append(" and p0400 not in  ( select p0400  from p04 where plan_id="
                    + plan_id
                    + " and state=-1 and chg_type=3 )  group by "
                    + a_objectid + ",item_id ");

            // RowSet
            // rowSet=dao.search("select "+a_objectid+",item_id,"+Sql_switcher.isnull("sum(p0415)",
            // "0")+" from p04 where plan_id="+plan_id+" and p0400 not in  ( select p0400  from p04 where plan_id="+plan_id+" and state=-1 and chg_type=3 )  group by "+a_objectid+",item_id ");
            RowSet rowSet = dao.search(buf.toString());
            while (rowSet.next()) {
                String object_id = rowSet.getString(1);
                String item_id = rowSet.getString(2);
                String rank = rowSet.getString(3);
                if ("1".equals(this.templateVo.getString("status"))) // 1:权重模板
                // 0:分值模板
                {
                    map.put(object_id + "/" + item_id, rank);
                } else {
                    map.put(object_id + "/" + item_id, "1");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    public void iteratorItem(String parent_id, ArrayList itemList,
                             HashMap existMap, String object_id, HashMap objectItemRankMap,
                             HashMap itemPointScoreMap_objs, HashMap dynaMap, String body_id) {
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            LazyDynaBean abean = null;
            LazyDynaBean itemBean = (LazyDynaBean) itemPointScoreMap_objs
                    .get(object_id);

            StringBuffer sub_str = new StringBuffer("");
            for (int j = 0; j < itemList.size(); j++) {
                abean = (LazyDynaBean) itemList.get(j);
                String a_item_id = (String) abean.get("item_id");
                String a_parent_id = (String) abean.get("parent_id");
                String a_kind = (String) abean.get("kind");
                // String a_rank= (String) abean.get("rank");

                if (a_parent_id.equals(parent_id)) {

                    boolean flag = false;
                    if (dynaMap != null
                            && dynaMap.get(body_id + a_item_id) != null) {
                        HashMap map = (HashMap) dynaMap
                                .get(body_id + a_item_id);
                        if (map.get("isAddMinusItem") != null
                                && "1"
                                .equals((String) map.get("isAddMinusItem"))) {
                            flag = true;
                        }
                    }

                    if (flag) // 加扣分项不算
                    {
                        sub_str.append("+0");
                    } else {
                        if ("2".equals(a_kind)) {
                            if (this.compute_flag == 1) {
                                if (objectItemRankMap.get(object_id + "/"
                                        + a_item_id) != null) {
                                    sub_str.append("+T_"
                                            + a_item_id
                                            + "*"
                                            + (String) objectItemRankMap
                                            .get(object_id + "/"
                                                    + a_item_id));
                                } else {
                                    sub_str.append("+T_" + a_item_id + "*0");
                                }
                            } else if (this.compute_flag == 2
                                    || this.compute_flag == 3) {
                                if ("0".equals(
                                        this.templateVo.getString("status"))) // 1:权重模板 0:分值模板
                                {
                                    sub_str.append("+T_" + a_item_id + "*1");
                                } else {
                                    if (objectItemRankMap.get(object_id + "/"
                                            + a_item_id) != null) {
                                        sub_str.append("+T_"
                                                + a_item_id
                                                + "*"
                                                + (String) objectItemRankMap
                                                .get(object_id + "/"
                                                        + a_item_id));
                                    } else {
                                        sub_str.append("+T_" + a_item_id + "*0");
                                    }
                                }
                            }
                        } else {
                            sub_str.append("+T_" + a_item_id);
                        }
                    }
                    if ("2".equals(a_kind)) {
                        existMap.put(a_item_id, "1");
                    }
                }
            }
            if (sub_str.length() > 0) {

                String score = "0";
                if (itemBean.get(parent_id) != null) {
                    score = (String) itemBean.get(parent_id);
                }
                // dao.update("update per_result_"+this.planid+" set T_"+parent_id+"=T_"+parent_id+"+"+sub_str.substring(1)+" where object_id='"+object_id+"'");
                String sql = "update per_result_" + this.planid + " set T_"
                        + parent_id + "= " + score + "+" + sub_str.substring(1)
                        + " where object_id='" + object_id + "'";
                dao.update("update per_result_" + this.planid + " set T_"
                        + parent_id + "= " + score + "+" + sub_str.substring(1)
                        + " where object_id='" + object_id + "'");
                for (int j = 0; j < itemList.size(); j++) {
                    abean = (LazyDynaBean) itemList.get(j);
                    String a_item_id = (String) abean.get("item_id");
                    String a_parent_id = (String) abean.get("parent_id");
                    if (a_item_id.equals(parent_id) && a_parent_id.length() > 0) {
                        iteratorItem(a_parent_id, itemList, existMap,
                                object_id, objectItemRankMap,
                                itemPointScoreMap_objs, dynaMap, body_id);
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * 取得各主体 的权重
     *
     * @return
     */
    public HashMap getBodyRankMap() {
        HashMap map = new HashMap();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = dao.search("select * from absRankTable");
            while (rowSet.next()) {
                String object_id = rowSet.getString("object_id");
                String mainbody_id = rowSet.getString("mainbody_id");
                String abs_rank = rowSet.getString("abs_rank");
                map.put(object_id + "/" + mainbody_id, abs_rank);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 取得 个性项目下考核对象 各主体打的分值
     *
     * @param itemid
     * @param rank
     * @return
     */
    public HashMap getObjectScore(String itemid, String rank) {
        HashMap map = new HashMap();
        try {

            rank = "1";
            if ("1".equals(this.templateVo.getString("status"))) // 1:权重模板
            // 0:分值模板
            {
                rank = "sum(p0415)";
            }

            ContentDAO dao = new ContentDAO(this.conn);
            String sql = "select pte.object_id,pte.mainbody_id,sum(pte.score*p0415)/"
                    + rank
                    + " from per_target_evaluation pte,p04,per_mainbody pm "
                    + " where pte.p0400=p04.p0400 and pte.object_id=pm.object_id and pte.mainbody_id=pm.mainbody_id ";
            if (this.compute_flag != 4) {
                sql += " and (pm.status=2 or pm.status=3 ) ";
            }
            if (this.batchComput != null
                    && this.batchComput.trim().length() > 0
                    && "True".equalsIgnoreCase(this.batchComput)) {
                sql += " and (pm.status=2 or pm.status=3 or pm.mainbody_id='"
                        + this.presentMainbody_id + "' ) ";
            }
            sql += " and pm.plan_id="
                    + this.planid
                    + "  and pte.p0400 in ( select p0400 from p04 where plan_id="
                    + this.planid
                    + "  and item_id="
                    + itemid
                    + " ) "
                    + " group  by pte.object_id,pte.mainbody_id order by pte.object_id,pte.mainbody_id";
            RowSet rowSet = dao.search(sql);
            String old_object = "";
            ArrayList list = new ArrayList();
            while (rowSet.next()) {
                String object_id = rowSet.getString(1);
                String mainbody_id = rowSet.getString(2);
                String score = rowSet.getString(3);
                if (old_object.length() == 0) {
                    old_object = object_id;
                }
                if (!old_object.equals(object_id)) {
                    map.put(old_object, list);
                    list = new ArrayList();
                    old_object = object_id;
                }
                LazyDynaBean abean = new LazyDynaBean();
                abean.set("mainbody_id", mainbody_id);
                abean.set("score", score);
                list.add(abean);
            }
            map.put(old_object, list);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    public void buildObjbody_id() throws GeneralException {
        try {
            Table table = new Table("absRankTable2");
            DbWizard dbWizard = new DbWizard(this.conn);
            DBMetaModel dbmodel = new DBMetaModel(this.conn);

            if (!dbWizard.isExistField("absRankTable2", "objbody_id", false)) {
                Field obj = new Field("objbody_id");
                obj.setDatatype(DataType.INT);
                obj.setKeyable(false);
                table.addField(obj);

                dbWizard.addColumns(table);// 更新列
                dbmodel.reloadTableModel("absRankTable2");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // 如果计算规则中考虑了主体权重(针对项目管理计算规则)
    public void createAbsRankTable(HashMap ruleMap) {
        try {
            DbWizard dbWizard = new DbWizard(this.conn);
            ContentDAO dao = new ContentDAO(this.conn);
            String tablename = "absRankTable1";
            if (!dbWizard.isExistTable(tablename, false)) {
                Table table = new Table(tablename);
                table.addField(getField("mainbody_id", "A", 30, false));
                table.addField(getField("object_id", "A", 30, false));
                table.addField(getField("body_id", "I", 10, false));
                table.addField(getField("absrank", "N", 12, false));
                table.addField(getField("objid", "I", 10, false));

                table.addField(getField("username", "A", 30, false));
                dbWizard.createTable(table);
            } else {
                dao.delete("delete from " + tablename
                                + " where lower(username)='"
                                + this.userView.getUserName().toLowerCase() + "' ",
                        new ArrayList());
            }
            tablename = "absRankTable2";
            if (!dbWizard.isExistTable(tablename, false)) {
                Table table = new Table(tablename);
                table.addField(getField("id", "I", 10, false));
                table.addField(getField("b0110", "A", 50, false));
                table.addField(getField("e0122", "A", 50, false));
                table.addField(getField("e01a1", "A", 50, false));
                table.addField(getField("object_id", "A", 30, false));
                table.addField(getField("body_id", "I", 10, false));
                table.addField(getField("objbody_id", "I", 10, false));
                table.addField(getField("pNum", "I", 10, false));
                table.addField(getField("nRank", "N", 12, false));
                table.addField(getField("username", "A", 30, false));
                dbWizard.createTable(table);
            } else {
                buildObjbody_id();
                dao.delete("delete from " + tablename
                                + " where lower(username)='"
                                + this.userView.getUserName().toLowerCase() + "' ",
                        new ArrayList());
            }

            insertAbsRankValues(ruleMap);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * 往主体绝对权重中插入值
     */
    public void insertAbsRankValues(HashMap ruleMap) {
        RowSet rowSet = null;
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            String sql = "INSERT INTO absRankTable1 (object_id,mainbody_id,body_id,username )"
                    + " SELECT object_id,mainbody_id,body_id,'"
                    + this.userView.getUserName().toLowerCase()
                    + "'"
                    + " FROM per_mainbody " + " WHERE plan_id=" + this.planid;
            if (this.compute_flag != 4) {
                rowSet = dao
                        .search("select sum(flag) flag ,sum(lead) lead from per_plan_body where plan_id="
                                + this.planid);
                boolean isLead = false;
                if (rowSet.next()) {

                    if (rowSet.getInt("lead") > 0) {
                        isLead = true;
                    }
                }
                String UnLeadSingleAvg = (String) ruleMap
                        .get("UnLeadSingleAvg"); // 对空票作废的主体类中单项未评分的，按该项总平均分值和赋分权重计分
                //目标考核没打分的考核主体模拟写入同一主体类别下打分主体的平均分。
                String zeroByNull = (String) ruleMap
                        .get("zeroByNull");
                if ((!"true".equalsIgnoreCase(zeroByNull) || isLead) && this.planVo.getInt("method") == 2 && !isLead && (UnLeadSingleAvg == null || !"true".equalsIgnoreCase(UnLeadSingleAvg))) {
                    sql += " AND (" + Sql_switcher.isnull("status", "0") + " in(0,2,3)) ";
                } else {
                    sql += " AND (status in(2,3)) ";
                }
            }

            if (this.batchComput != null
                    && this.batchComput.trim().length() > 0
                    && "True".equalsIgnoreCase(this.batchComput)) {
                sql += " AND (status=2 or status=3 or mainbody_id='"
                        + this.presentMainbody_id + "' ) ";
            }
            dao.update(sql);

            ArrayList dynaBodyrankList = getDynaBodyrank(); // 取得考核主体动态权重
            HashMap dynamicMainbodyRank = getDynaMainbodyRankMap(); // 取得考核主体动态权重
            ArrayList bodyRankList = getPerPlanBody(); // 取得考核主体权重
            // bodyRank = getBodyRank(b0110, e0122, e01a1, object_id,
            // dynaBodyrankList, bodyRankList);

            sql = "insert into absRankTable2 (id,b0110,e0122,e01a1,object_id,body_id,objbody_id,pnum,nrank,username)"
                    + "select a.id, a.B0110, a.E0122, a.E01A1, a.object_id, b.body_id, a.body_id, b.pNum, 1.0000 ,'"
                    + this.userView.getUserName().toLowerCase()
                    + "'"
                    + " from per_object a, (select object_id, body_id, count(*) AS pNum  from per_mainbody where plan_id="
                    + this.planid
                    + " group by object_id, body_id) b "
                    + " where  a.plan_id="
                    + this.planid
                    + " and a.object_id=b.object_id ";
            dao.update(sql);

            LazyDynaBean abean = null;
            for (int i = 0; i < bodyRankList.size(); i++) {
                abean = (LazyDynaBean) bodyRankList.get(i);
                String body_id = (String) abean.get("body_id");
                String rank = (String) abean.get("rank");
                dao.update("update absRankTable2 set nrank=" + rank
                        + " where body_id=" + body_id + " and username='"
                        + this.userView.getUserName().toLowerCase() + "'");
            }
            if (dynaBodyrankList.size() > 0) {

                ArrayList absRankTable2List = getAbsRankTable2Rank();
                for (int i = 0; i < absRankTable2List.size(); i++) {
                    abean = (LazyDynaBean) absRankTable2List.get(i);
                    String id = (String) abean.get("id");
                    String b0110 = (String) abean.get("b0110");
                    String e0122 = (String) abean.get("e0122");
                    String e01a1 = (String) abean.get("e01a1");
                    String object_id = (String) abean.get("object_id");
                    String body_id = (String) abean.get("body_id");
                    String objbody_id = (String) abean.get("objbody_id");
                    String username = (String) abean.get("username");

                    boolean flag = false;
                    String rank = "0.0";
                    // 人>考核对象类别>组织机构节点
                    if (dynamicMainbodyRank.get(body_id + "_" + object_id) != null) {
                        rank = (String) dynamicMainbodyRank.get(body_id + "_"
                                + object_id); // 人
                        flag = true;
                    } else if (dynamicMainbodyRank.get(body_id + "_"
                            + objbody_id) != null) {
                        rank = (String) dynamicMainbodyRank.get(body_id + "_"
                                + objbody_id); // 考核对象类别
                        flag = true;
                    } else if (dynamicMainbodyRank.get(body_id + "_" + e01a1) != null) {
                        rank = (String) dynamicMainbodyRank.get(body_id + "_"
                                + e01a1); // 岗位
                        flag = true;
                    } else if (dynamicMainbodyRank.get(body_id + "_" + e0122) != null) {
                        rank = (String) dynamicMainbodyRank.get(body_id + "_"
                                + e0122); // 部门
                        flag = true;
                    } else if (dynamicMainbodyRank.get(body_id + "_" + b0110) != null) {
                        rank = (String) dynamicMainbodyRank.get(body_id + "_"
                                + b0110); // 单位
                        flag = true;
                    }
                    if (flag) {
                        sql = "update absRankTable2 set nrank=" + rank
                                + " where id=" + id + " and body_id=" + body_id
                                + " and username='" + username + "'";
                        dao.update(sql);
                    }
                }

                /*
                 * for (int i = 0; i < dynaBodyrankList.size(); i++) { abean =
                 * (LazyDynaBean) dynaBodyrankList.get(i); String body_id =
                 * (String) abean.get("body_id"); String dyna_obj_type =
                 * (String) abean.get("dyna_obj_type"); String dyna_obj =
                 * (String) abean.get("dyna_obj"); String rank = (String)
                 * abean.get("rank"); boolean flag=false;
                 * if(dyna_obj_type.equals("4")) { flag=true;
                 * sql="update absRankTable2 set nrank="
                 * +rank+" where body_id="+body_id
                 * +" and object_id='"+dyna_obj+"'  and username='"
                 * +this.userView.getUserName().toLowerCase()+"'"; } else
                 * if(dyna_obj_type.equals("3")) { flag=true;
                 * sql="update absRankTable2 set nrank="
                 * +rank+" where body_id="+body_id
                 * +" and e01a1 like '"+dyna_obj+"%'  and username='"
                 * +this.userView.getUserName().toLowerCase()+"'"; } else
                 * if(dyna_obj_type.equals("2")) { flag=true;
                 * sql="update absRankTable2 set nrank="
                 * +rank+" where body_id="+body_id
                 * +" and e0122 like '"+dyna_obj+"%'  and username='"
                 * +this.userView.getUserName().toLowerCase()+"'"; } else
                 * if(dyna_obj_type.equals("1")) { flag=true;
                 * sql="update absRankTable2 set nrank="
                 * +rank+" where body_id="+body_id
                 * +" and b0110 like '"+dyna_obj+"%'  and username='"
                 * +this.userView.getUserName().toLowerCase()+"'"; } if(flag)
                 * dao.update(sql); }
                 */
            }
            sql = " UPDATE absRankTable1 SET  absRank =(SELECT absRankTable2.nRank/absRankTable2.pNum FROM absRankTable2  WHERE absRankTable1.object_id=absRankTable2.object_id  and absRankTable2.username='"
                    + this.userView.getUserName().toLowerCase()
                    + "' and absRankTable1.body_id=absRankTable2.body_id) "
                    + " where absRankTable1.username='"
                    + this.userView.getUserName().toLowerCase() + "'";
            dao.update(sql);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            PubFunc.closeResource(rowSet);
        }
    }

    /**
     * 取得项目项得分
     *
     * @param item_id
     * @param obj_pointScore
     * @param dynaPointRankList
     * @param KeepDecimal
     * @param UseWeight
     * @param item_pointMap
     * @return
     */
    public String getItemScore(HashMap ruleMap, LazyDynaBean obj,
                               String item_id, LazyDynaBean obj_pointScore,
                               ArrayList dynaPointRankList, int KeepDecimal, String UseWeight,
                               HashMap item_pointMap, HashMap objPointRanks) {

        double score = 0;
        HashMap totalPointMap = new HashMap();
        if (!isPosHasPoint) {
            totalPointMap = getTotalScorePointList(this.template_id); // 取得统一打分指标s
        }
        String b0110 = (String) obj.get("b0110");
        String e0122 = (String) obj.get("e0122");
        String e01a1 = (String) obj.get("e01a1");
        String body_id = (String) obj.get("body_id");
        String object_id = (String) obj.get("object_id");
        String status = "";
        if (isPosHasPoint) {
            status = "1";
        } else {
            status = this.templateVo.getString("status"); // 0:分值 1:权重
        }
        if (item_pointMap.get(item_id) != null) {
            ArrayList pointList = (ArrayList) item_pointMap.get(item_id);

            if (this.planVo.getInt("method") == 2) // 目标
            {
                pointList = getPointList_goal(pointList, object_id);
            }

            LazyDynaBean abean = null;
            LazyDynaBean a_bean = null;
            for (int i = 0; i < pointList.size(); i++) {
                abean = (LazyDynaBean) pointList.get(i);
                String point_id = (String) abean.get("point_id");
                String pointkind = (String) abean.get("pointkind");
                String _status = (String) abean.get("status");
                String ascore = obj_pointScore.get(point_id) != null ? (String) obj_pointScore
                        .get(point_id) : "0";

                if ("1".equals(pointkind) && "1".equalsIgnoreCase(_status)) // 定量统一打分指标
                {
                    if (ruleMap.get("isvalidate") != null
                            && "true"
                            .equalsIgnoreCase((String) ruleMap.get("isvalidate"))) // 启用分值范围控制
                    {
                        if (ruleMap.get("scoreRangeList") != null) {
                            ArrayList scoreRangeList = (ArrayList) ruleMap
                                    .get("scoreRangeList");
                            LazyDynaBean bean = null;
                            for (int r = 0; r < scoreRangeList.size(); r++) {
                                bean = (LazyDynaBean) scoreRangeList.get(r);
                                String id = (String) bean.get("id");

                                if (id.equalsIgnoreCase(point_id)) {
                                    String maxscore = (String) bean
                                            .get("maxscore");
                                    String minscore = (String) bean
                                            .get("minscore");
                                    if (maxscore != null
                                            && maxscore.trim().length() > 0) {
                                        if (Double.parseDouble(ascore) > Double
                                                .parseDouble(maxscore)) {
                                            ascore = maxscore;
                                        }
                                    }
                                    if (minscore != null
                                            && minscore.trim().length() > 0) {
                                        if (Double.parseDouble(ascore) < Double
                                                .parseDouble(minscore)) {
                                            ascore = minscore;
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }

                String CalcMenScoreRefDept = (String) this.planParamSet
                        .get("CalcMenScoreRefDept"); // 本次评分=个人指标得分*部门指标得分的权重和（目标考核和360°）
                // True, False, 默认为
                // False
                if ("True".equalsIgnoreCase(CalcMenScoreRefDept)) {
                    if (UMPointScoreMap.size() > 0
                            && UMPointScoreMap.get(e0122) != null) {
                        LazyDynaBean _bean = (LazyDynaBean) UMPointScoreMap
                                .get(e0122);
                        if (_bean.get(point_id) != null) {
                            String _scroe = (String) _bean.get(point_id);
                            ascore = PubFunc.multiple(ascore, _scroe, 6);
                        }
                    }
                }

                Object mobRank = abean.get("rank");// 模板中的标准权重
                String rank = String.valueOf(mobRank);

                // 人>考核对象类别>组织机构节点
                String objRank = (String) objPointRanks.get(point_id + "_"
                        + object_id);
                String bodRank = (String) objPointRanks.get(point_id + "_"
                        + body_id);
                String e01Rank = (String) objPointRanks.get(point_id + "_"
                        + e01a1);
                String e02Rank = (String) objPointRanks.get(point_id + "_"
                        + e0122);
                String b01Rank = (String) objPointRanks.get(point_id + "_"
                        + b0110);
                if (objRank != null && objRank.trim().length() > 0
                        && !"0".equalsIgnoreCase(objRank)
                        && !"0.0".equalsIgnoreCase(objRank)) {
                    rank = (String) objPointRanks.get(point_id + "_"
                            + object_id); // 人
                } else if (bodRank != null && bodRank.trim().length() > 0
                        && !"0".equalsIgnoreCase(bodRank)
                        && !"0.0".equalsIgnoreCase(bodRank)) {
                    rank = (String) objPointRanks.get(point_id + "_" + body_id); // 考核对象类别
                } else if (e01Rank != null && e01Rank.trim().length() > 0
                        && !"0".equalsIgnoreCase(e01Rank)
                        && !"0.0".equalsIgnoreCase(e01Rank)) {
                    rank = (String) objPointRanks.get(point_id + "_" + e01a1); // 岗位
                } else if (e02Rank != null && e02Rank.trim().length() > 0
                        && !"0".equalsIgnoreCase(e02Rank)
                        && !"0.0".equalsIgnoreCase(e02Rank)) {
                    rank = (String) objPointRanks.get(point_id + "_" + e0122); // 部门
                } else if (b01Rank != null && b01Rank.trim().length() > 0
                        && !"0".equalsIgnoreCase(b01Rank)
                        && !"0.0".equalsIgnoreCase(b01Rank)) {
                    rank = (String) objPointRanks.get(point_id + "_" + b0110); // 单位
                }

                if (UseWeight != null && "true".equalsIgnoreCase(UseWeight)) // 使用权重
                {
                    boolean flag = false;
                    for (int j = 0; j < dynaPointRankList.size(); j++) {
                        a_bean = (LazyDynaBean) dynaPointRankList.get(j);
                        String pointid = (String) a_bean.get("point_id");
                        String dynaobjtype = (String) a_bean
                                .get("dyna_obj_type");
                        String dynaobj = (String) a_bean.get("dyna_obj");
                        String arank = (String) a_bean.get("rank");
                        if (!flag && pointid.equals(point_id)) {
                            if ("4".equals(dynaobjtype)
                                    && dynaobj.equals(object_id)) {
                                score += Double.parseDouble(PubFunc.multiple(
                                        ascore, arank, 6));// Float.parseFloat(ascore)
                                // *
                                // Float.parseFloat(arank);
                                flag = true;
                                break;
                            } else if ("5".equals(dynaobjtype)
                                    && dynaobj.equals(body_id)) // 考核对象类别权重
                            // JinChunhai
                            // 2012.09.20
                            {
                                score += Double.parseDouble(PubFunc.multiple(
                                        ascore, arank, 6));// Float.parseFloat(ascore)
                                // *
                                // Float.parseFloat(arank);
                                flag = true;
                                break;
                            } else if ("3".equals(dynaobjtype)
                                    && e01a1 != null
                                    && e01a1.length() >= dynaobj.length()
                                    && e01a1.substring(0, dynaobj.length())
                                    .equals(dynaobj)) {
                                score += Double.parseDouble(PubFunc.multiple(
                                        ascore, arank, 6));// Float.parseFloat(ascore)
                                // *
                                // Float.parseFloat(arank);
                                flag = true;
                                break;
                            } else if ("2".equals(dynaobjtype)
                                    && e01a1 != null
                                    && e0122.length() >= dynaobj.length()
                                    && e0122.substring(0, dynaobj.length())
                                    .equals(dynaobj)) {
                                score += Double.parseDouble(PubFunc.multiple(
                                        ascore, arank, 6));// Float.parseFloat(ascore)
                                // *
                                // Float.parseFloat(arank);
                                flag = true;
                                break;
                            } else if ("1".equals(dynaobjtype)
                                    && e01a1 != null
                                    && b0110.length() >= dynaobj.length()
                                    && b0110.substring(0, dynaobj.length())
                                    .equals(dynaobj)) {
                                score += Double.parseDouble(PubFunc.multiple(
                                        ascore, arank, 6));// Float.parseFloat(ascore)
                                // *
                                // Float.parseFloat(arank);
                                flag = true;
                                break;
                            }
                        }
                    }

                    if (!flag) {
                        if ("0".equals(status)) {
                            score += Float.parseFloat(ascore);
                        } else if ("1".equals(status)) {
                            if (totalPointMap.get(point_id) != null)// 定量统一打分指标
                            // 权重模板 不乘权重
                            {
                                score += Float.parseFloat(ascore);
                            } else {
                                score += Double.parseDouble(PubFunc.multiple(
                                        ascore, rank, 6));
                            }
                        }
                    }
                } else {
                    if ("0".equals(status)) {
                        score += Float.parseFloat(ascore);
                    } else if ("1".equals(status)) {
                        if (totalPointMap.get(point_id) != null)// 定量统一打分指标 权重模板
                        // 不乘权重
                        {
                            score += Float.parseFloat(ascore);
                        } else {
                            score += Double.parseDouble(PubFunc.multiple(
                                    ascore, rank, 6));
                        }
                    }
                }
            }
        }
        return String.valueOf(score);
        // return PubFunc.round(String.valueOf(score), KeepDecimal);
    }

    public ArrayList getPointList_goal(ArrayList pointList, String object_id) {
        ArrayList list = new ArrayList();
        if (pointList.size() == 0) {
            return list;
        }
        try {
            LazyDynaBean abean = null;
            StringBuffer str = new StringBuffer("");
            for (int i = 0; i < pointList.size(); i++) {
                abean = (LazyDynaBean) pointList.get(i);
                String point_id = (String) abean.get("point_id");
                str.append(",'" + point_id.toLowerCase() + "'");
            }
            ContentDAO dao = new ContentDAO(this.conn);
            String itemid = "a0100";
            if (this.planVo.getInt("object_type") != 2) {
                itemid = "b0110";
            }
            String sql = "select p04.*,pp.pointkind,pp.status from p04,per_point pp where lower(p0401)=lower(pp.point_id) and "
                    + itemid
                    + "='"
                    + object_id
                    + "' and lower(p0401) in ("
                    + str.substring(1) + ") and plan_id=" + this.planid;
            RowSet rowSet = dao.search(sql);
            while (rowSet.next()) {
                abean = new LazyDynaBean();
                abean.set("point_id", rowSet.getString("p0401"));
                abean.set("rank", rowSet.getString("p0415"));
                abean.set("pointkind", rowSet.getString("pointkind"));
                abean.set("status", rowSet.getString("status"));

                list.add(abean);
            }
            if (rowSet != null) {
                rowSet.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * 取得模版下共性项目直接对应的指标/权重
     *
     * @return
     */
    public HashMap getItemPoints(ArrayList itemList) {

        HashMap map = new HashMap();
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            map = getItemToPointMap(); //
        } catch (Exception e) {
            e.printStackTrace();
        }

        return map;
    }

    /**
     * 取得模版下各项目(包括项目的子项目)对应的指标和指标权重 加扣分使用此方法
     *
     * @return
     */
    public HashMap getItemPoints2(ArrayList itemList) {

        HashMap map = new HashMap();
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            HashMap itemPointMap = getItemToPointMap(); // 取得模版下共性项目直接对应的指标/权重
            for (int i = 0; i < itemList.size(); i++) {
                LazyDynaBean aabean = (LazyDynaBean) itemList.get(i);
                String a_itemid = (String) aabean.get("item_id");
                getItemToPoint(itemList, new ArrayList(), a_itemid,
                        itemPointMap, map);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return map;
    }

    public void getItemToPoint(ArrayList itemList, ArrayList tempList,
                               String itemid, HashMap itemPointMap, HashMap map) {

        LazyDynaBean abean = null;
        LazyDynaBean aabean = null;
        if (tempList.size() == 0) {
            for (int j = 0; j < itemList.size(); j++) {
                aabean = (LazyDynaBean) itemList.get(j);
                String a_itemid = (String) aabean.get("item_id");
                String a_parent = (String) aabean.get("parent_id");
                if (a_parent.equals(itemid)) {
                    tempList.add(aabean);
                }
            }

            if (itemPointMap.get(itemid) != null) {
                ArrayList list = (ArrayList) itemPointMap.get(itemid);
                ArrayList alist = new ArrayList();
                if (map.get(itemid) != null) {
                    alist = (ArrayList) map.get(itemid);
                }
                alist.addAll(list);
                map.put(itemid, alist);
            }
        }

        ArrayList subList = new ArrayList();
        for (int i = 0; i < tempList.size(); i++) {
            abean = (LazyDynaBean) tempList.get(i);
            String item_id = (String) abean.get("item_id");

            for (int j = 0; j < itemList.size(); j++) {
                aabean = (LazyDynaBean) itemList.get(j);
                String a_itemid = (String) aabean.get("item_id");
                String a_parent = (String) aabean.get("parent_id");
                if (a_parent.equals(item_id)) {
                    subList.add(aabean);
                }
            }
            if (itemPointMap.get(item_id) != null) {
                ArrayList list = (ArrayList) itemPointMap.get(item_id);
                ArrayList alist = new ArrayList();
                if (map.get(itemid) != null) {
                    alist = (ArrayList) map.get(itemid);
                }
                alist.addAll(list);
                map.put(itemid, alist);
            }
        }
        if (subList.size() > 0) {
            getItemToPoint(itemList, subList, itemid, itemPointMap, map);

        }

    }

    /**
     * 取得模版下各指标项直接对应的指标/权重
     *
     * @return
     */
    public HashMap getItemToPointMap() {

        HashMap map = new HashMap();
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            String sql = "select pp.item_id,pp.point_Id,pp.rank,pp.seq,pp.score,po.pointkind,po.status from  per_template_item pi,per_template_point pp,per_point po "
                    + " where pi.item_id=pp.item_id and pp.point_id=po.point_id and pi.template_id='"
                    + this.template_id + "' order by pp.item_id, pp.seq ";
            RowSet rowSet = dao.search(sql);
            String item_id = "";
            LazyDynaBean abean = null;
            ArrayList tempList = new ArrayList();
            while (rowSet.next()) {
                String itemid = rowSet.getString("item_id");
                String pointid = rowSet.getString("point_id");
                String rank = rowSet.getString("rank");
                String score = rowSet.getString("score") != null ? rowSet
                        .getString("score") : "0";
                if (item_id.length() == 0) {
                    item_id = itemid;
                }
                if (!item_id.equals(itemid)) {
                    map.put(item_id, tempList);
                    tempList = new ArrayList();
                    item_id = itemid;
                }
                abean = new LazyDynaBean();
                abean.set("point_id", pointid);
                abean.set("rank", rank);
                abean.set("score", score);
                abean.set("pointkind", rowSet.getString("pointkind"));
                abean.set("status", rowSet.getString("status"));
                tempList.add(abean);
            }
            map.put(item_id, tempList);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 判断是否有 绩效评估得分明细表
     */
    public void isPerScoreDetailTable() {

        try {
            DbWizard dbWizard = new DbWizard(this.conn);
            String tabname = "Per_ScoreDetail";
            ContentDAO dao = new ContentDAO(this.conn);
            if (!dbWizard.isExistTable(tabname, false)) {
                Table table = new Table(tabname);
                table.addField(getField("id", "I", 10, false));
                table.addField(getField("object_id", "A", 30, false));
                table.addField(getField("body_id", "I", 10, false));
                table.addField(getField("point_id", "A", 30, false));
                table.addField(getField("item_id", "I", 10, false));
                table.addField(getField("allscore", "N", 12, false));
                table.addField(getField("score", "N", 12, false));
                table.addField(getField("body_rank", "N", 12, false));
                table.addField(getField("point_rank", "N", 12, false));
                table.addField(getField("plan_id", "I", 10, false));
                dbWizard.createTable(table);
                DBMetaModel dbmodel = new DBMetaModel(this.conn);
                dbmodel.reloadTableModel(tabname);
            } else {
                dao.delete("delete from Per_ScoreDetail where plan_id="
                        + this.planid, new ArrayList());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * 获得各对象指标的 加扣分值
     *
     * @param pointList
     * @param planid
     * @return
     */
    public HashMap getObjPointScoreMap_key(ArrayList pointList, String planid,
                                           Set pointSet) {
        HashMap map = new HashMap();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            LazyDynaBean abean = null;
            StringBuffer _str = new StringBuffer("");
            for (int i = 0; i < pointList.size(); i++) {
                abean = (LazyDynaBean) pointList.get(i);
                String point_id = (String) abean.get("point_id");
                _str.append(",'" + point_id.toLowerCase() + "'");
            }

            String str = "";
            if (this.planVo.getInt("object_type") != 2) // 团队
            {
                str = " b0110,point_id";
            } else {
                str = " a0100,point_id";
            }
            StringBuffer sql = new StringBuffer(
                    "select "
                            + str
                            + ",sum(score) from per_key_event where   (status is null or status='03') and lower(point_id) in ("
                            + _str.substring(1) + ") " + getMatchingTimeSql());
            if (this.planVo.getInt("object_type") != 2) // 团队
            {
                sql.append(" and  Object_type=1 and b0110 in (select object_id from per_object where plan_id="
                        + this.planid + ")");
            } else {
                sql.append(" and Object_type=2 and a0100 in (select object_id from per_object where plan_id="
                        + this.planid + ")");
            }

            sql.append(" group by " + str);
            RowSet rowSet = dao.search(sql.toString());
            while (rowSet.next()) {
                pointSet.add(rowSet.getString(2).toLowerCase());
                map.put(rowSet.getString(1) + "/"
                                + rowSet.getString(2).toLowerCase(),
                        rowSet.getString(3));

            }

            if (rowSet != null) {
                rowSet.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 计算单项指标分值 (同时兼顾 Per_ScoreDetail (绩效评估得分明细表)里的数据 )
     *
     * @param ruleMap
     * @param point_firstItemMap 取得每个指标 对应的第一层指标项
     */
    public void calPointScore(ArrayList itemList, HashMap ruleMap,
                              ArrayList pointList, ArrayList objectList,
                              HashMap point_firstItemMap) throws GeneralException {

        ContentDAO dao = new ContentDAO(this.conn);
        HashMap totalPointMap = getTotalScorePointList(this.template_id); // 取得统一打分指标s
        try {
            String PointScoreFromKeyEvent = (String) ruleMap
                    .get("PointScoreFromKeyEvent"); // 指标评分优先取自关键事件
            HashMap objPointScoreMap_key = new HashMap();
            Set pointSet = new HashSet();
            HashMap pointScore = new HashMap();
            if (PointScoreFromKeyEvent != null
                    && "True".equalsIgnoreCase(PointScoreFromKeyEvent)) {
                objPointScoreMap_key = getObjPointScoreMap_key(pointList,
                        this.planid, pointSet);
            }

            /** 判断是否有 绩效评估得分明细表 必须要清除该计划下的所有数据*/
            isPerScoreDetailTable();
            HashMap object_score = getObjectPointScore(itemList, ruleMap,
                    point_firstItemMap, pointList, totalPointMap);
            StringBuffer new_sql = new StringBuffer("update per_result_"
                    + this.planid + " set b0110=?");
            LazyDynaBean abean = null;
            for (int i = 0; i < pointList.size(); i++) {
                abean = (LazyDynaBean) pointList.get(i);
                String point_id = (String) abean.get("point_id");
                pointScore.put(point_id.toLowerCase(),
                        (String) abean.get("score"));
                if (totalPointMap.get(point_id) != null) // 统一打分不计算
                {
                    continue;
                }

                new_sql.append(",C_" + point_id + "=?");
            }
            new_sql.append(" where object_id=?");
            if (this.priv_where != null && this.priv_where.trim().length() > 0) {
                new_sql.append(this.priv_where);
            }

            ArrayList list = new ArrayList();
            ArrayList tempList = new ArrayList();
            LazyDynaBean a_bean = null;
            for (int i = 0; i < objectList.size(); i++) {
                tempList = new ArrayList();
                a_bean = (LazyDynaBean) objectList.get(i);

                String object_id = (String) a_bean.get("object_id");

                HashMap AdjustPointOrItemMap = new HashMap(); // 考核对象单个指标是否调整过
                // 评分调整模块临时计算用到
                if (this.compute_flag == 4) {
                    AdjustPointOrItemMap = getAdjustPointOrItem(object_id);
                }

                String b0110 = (String) a_bean.get("b0110");
                tempList.add(b0110);
                /*
                 * String e0122 = (String) a_bean.get("e0122"); String e01a1 =
                 * (String) a_bean.get("e01a1"); String object_id = (String)
                 * a_bean.get("object_id"); String b0110 = (String)
                 * a_bean.get("b0110"); String a0101 = (String)
                 * a_bean.get("a0101"); String a0000 = (String)
                 * a_bean.get("a0000"); tempList.add(new Integer(i + 1));
                 * tempList.add(b0110); tempList.add(e0122);
                 * tempList.add(e01a1); tempList.add(object_id);
                 * tempList.add(a0101); tempList.add(new Integer(a0000));
                 */
                LazyDynaBean scoreBean = null;
                if (object_score.get(object_id) != null) {
                    scoreBean = (LazyDynaBean) object_score.get(object_id);
                }
                for (int j = 0; j < pointList.size(); j++) {
                    abean = (LazyDynaBean) pointList.get(j);
                    String point_id = (String) abean.get("point_id");

                    if (totalPointMap.get(point_id) != null) // 统一打分不计算
                    {
                        continue;
                    }
                    if (this.compute_flag == 4
                            && AdjustPointOrItemMap.get(point_id.toLowerCase()) != null) // 评分调整临时计算，如果指标调整过则不参于计算
                    {
                        tempList.add(new Float((String) AdjustPointOrItemMap
                                .get(point_id.toLowerCase())));
                    } else {
                        if (scoreBean == null) {
                            tempList.add(new Float(0));
                        } else {
                            if (scoreBean.get(point_id) != null) {
                                tempList.add(new Float((String) scoreBean
                                        .get(point_id)));
                            } else {
                                tempList.add(new Float(0));
                            }
                        }
                    }

                }
                tempList.add(object_id);
                list.add(tempList);
            }
            dao.batchUpdate(new_sql.toString(), list);

            // 折算统一打分
            Set keySet = totalPointMap.keySet();
            HashMap map_temp = new HashMap();
            for (Iterator t = keySet.iterator(); t.hasNext(); ) {
                String key = (String) t.next();
                LazyDynaBean aabean = (LazyDynaBean) totalPointMap.get(key);
                String Pointctrl = (String) aabean.get("Pointctrl");
                HashMap map = PointCtrlXmlBo.getAttributeValues(Pointctrl);
                String convert = (String) map.get("convert"); // //0|1,等于1按折算计分
                if (convert != null && "1".equals(convert)) {
                    String point_id = (String) aabean.get("point_id");
                    String score = (String) aabean.get("score");
                    String sql = "update per_result_" + this.planid + " set C_"
                            + point_id + "=(C_" + point_id
                            + "/(select distinct NULLIF(max(C_" + point_id
                            + "),0) from per_result_" + this.planid + " ))*"
                            + score;
                    if (this.priv_where != null
                            && this.priv_where.trim().length() > 0) {
                        sql += " where 1=1 " + this.priv_where;
                    }
                    dao.update(sql);

                }
                map_temp.put(key.toLowerCase(), "1");
            }

            if (PointScoreFromKeyEvent != null
                    && "True".equalsIgnoreCase(PointScoreFromKeyEvent)) {
                for (Iterator t = pointSet.iterator(); t.hasNext(); ) {
                    String pointid = (String) t.next();
                    for (int i = 0; i < objectList.size(); i++) {
                        tempList = new ArrayList();
                        a_bean = (LazyDynaBean) objectList.get(i);
                        String object_id = (String) a_bean.get("object_id");
                        if (objPointScoreMap_key.get(object_id + "/" + pointid) != null) {
                            String score = "0";
                            if (pointScore.get(pointid) != null) {
                                score = (String) pointScore.get(pointid);
                            }
                            dao.update("update per_result_"
                                    + this.planid
                                    + " set C_"
                                    + pointid
                                    + "="
                                    + (String) objPointScoreMap_key
                                    .get(object_id + "/" + pointid)
                                    + "+" + score + " where object_id='"
                                    + object_id + "'");
                        }
                    }
                }

            }

            if (ruleMap.get("isvalidate") != null
                    && "true"
                    .equalsIgnoreCase((String) ruleMap.get("isvalidate"))) // 启用分值范围控制
            {
                if (ruleMap.get("scoreRangeList") != null) {
                    DbWizard dbWizard = new DbWizard(this.conn);

                    ArrayList scoreRangeList = (ArrayList) ruleMap
                            .get("scoreRangeList");
                    LazyDynaBean bean = null;
                    for (int i = 0; i < scoreRangeList.size(); i++) {
                        bean = (LazyDynaBean) scoreRangeList.get(i);
                        String id = (String) bean.get("id");
                        if (map_temp.get(id.toLowerCase()) != null) // 统一打分不计算
                        {
                            continue;
                        }
                        if (dbWizard.isExistField("per_result_" + this.planid,
                                "c_" + id, false)) {
                            String maxscore = (String) bean.get("maxscore");
                            String minscore = (String) bean.get("minscore");
                            if (maxscore != null
                                    && maxscore.trim().length() > 0) {
                                dao.update("update per_result_" + this.planid
                                        + " set C_" + id + "=" + maxscore
                                        + " where C_" + id + ">" + maxscore
                                        + "");
                            }
                            if (minscore != null
                                    && minscore.trim().length() > 0) {
                                dao.update("update per_result_" + this.planid
                                        + " set C_" + id + "=" + minscore
                                        + " where C_" + id + "<" + minscore
                                        + "");
                            }
                        }
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            throw GeneralExceptionHandler.Handle(e);
        }
    }

    /**
     * 计算单项指标分值
     */
    public void calPointScoreByModel(ArrayList itemList, HashMap ruleMap,
                                     ArrayList pointList, ArrayList objectList,
                                     HashMap point_firstItemMap) throws GeneralException {
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            HashMap totalPointMap = new HashMap(); // 取得统一打分指标s
            //String PointScoreFromKeyEvent = (String) ruleMap.get("PointScoreFromKeyEvent"); // 指标评分优先取自关键事件
            //HashMap objPointScoreMap_key = new HashMap();
            //Set pointSet = new HashSet();
            HashMap pointScore = new HashMap();//指标id和分数的映射

            HashMap object_score = getObjectPointScore(itemList, ruleMap, point_firstItemMap, pointList, totalPointMap);
            StringBuffer new_sql = new StringBuffer("");
            new_sql.append("insert into per_history_result (id,plan_id,point_id,b0110,e0122,e01a1,object_id,a0101,score,amount,archive_date,status)");
            new_sql.append(" values (?,?,?,?,?,?,?,?,?,?,?,?)");
            LazyDynaBean abean = null;

            ArrayList list = new ArrayList();//存储要插入的数据 外层
            ArrayList tempList = new ArrayList();//存储要插入的数据 内层
            LazyDynaBean a_bean = null;
            a_bean = (LazyDynaBean) objectList.get(0);//a_bean存放的数据有：b0110,e0122,e01a1,object_id,a0101,a0000,body_id
            String object_id = (String) a_bean.get("object_id");
            String b0110 = (String) a_bean.get("b0110");
            String e0122 = (String) a_bean.get("e0122");
            String e01a1 = (String) a_bean.get("e01a1");
            String a0101 = (String) a_bean.get("a0101");

            HashMap AdjustPointOrItemMap = new HashMap(); // 考核对象单个指标是否调整过
            if (this.compute_flag == 4) {
                AdjustPointOrItemMap = getAdjustPointOrItem(object_id);// 评分调整模块临时计算用到
            }
            LazyDynaBean scoreBean = null;
            if (object_score.get(object_id) != null) {
                scoreBean = (LazyDynaBean) object_score.get(object_id);
            }

            for (int j = 0; j < pointList.size(); j++) {
                tempList = new ArrayList();
                IDGenerator idg = new IDGenerator(2, this.conn);
                String id = idg.getId("per_history_result.id");
                tempList.add(id);
                tempList.add(this.planid);
                abean = (LazyDynaBean) pointList.get(j);
                String point_id = (String) abean.get("point_id");
                tempList.add(point_id);
                tempList.add(b0110);
                tempList.add(e0122);
                tempList.add(e01a1);
                tempList.add(object_id);
                tempList.add(a0101);
                if (this.compute_flag == 4
                        && AdjustPointOrItemMap.get(point_id.toLowerCase()) != null) // 评分调整临时计算，如果指标调整过则不参于计算
                {
                    tempList.add(new Float((String) AdjustPointOrItemMap
                            .get(point_id.toLowerCase())));
                } else {
                    if (scoreBean == null) {
                        tempList.add(new Float(0));
                    } else {
                        if (scoreBean.get(point_id) != null) {
                            tempList.add(new Float((String) scoreBean
                                    .get(point_id)));
                        } else {
                            tempList.add(new Float(0));
                        }
                    }
                }
                tempList.add(null);
                tempList.add(null);
                tempList.add("0");
                list.add(tempList);
            } //for end
            dao.batchUpdate(new_sql.toString(), list);//更新数据

        } catch (Exception e) {
            e.printStackTrace();
            throw GeneralExceptionHandler.Handle(e);
        }
    }

    // 取得 (绩效评估得分明细表)里的数据
    public ArrayList getScoreDetailList(HashMap ruleMap,
                                        ArrayList dynaPointRankList, HashMap point_firstItemMap,
                                        ArrayList dynaBodyrankList, ArrayList bodyRankList) {

        ArrayList detailList = new ArrayList();
        String tableName = "t#" + this.userView.getUserName() + "_per_2"; // "t_"+this.userView.getUserId()
        // +
        // "evaluationTable";
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            String sql = "select p.id,p.b0110,p.e0122,p.e01a1,p.body_id objBody_id,t.object_id,t.point_id,t.body_id,sum(t.score)/count(t.mainbody_id) score "
                    + " from "
                    + tableName
                    + " t,per_object p where t.object_id=p.object_id and p.plan_id="
                    + this.planid
                    // 去掉未提交的考核对象的数据
                    + " and p.object_id in (select object_id  from per_mainbody where plan_id="
                    + this.planid;
            if (this.compute_flag != 4) {
                sql += " and (status=2  or status=3)";
            }
            if (this.batchComput != null
                    && this.batchComput.trim().length() > 0
                    && "True".equalsIgnoreCase(this.batchComput)) {
                sql += " and (status=2  or status=3 or mainbody_id='"
                        + this.presentMainbody_id + "' ) ";
            }
            sql += " ) group by p.id,t.object_id,t.point_id,t.body_id,p.body_id,p.b0110,p.e0122,p.e01a1 "
                    + " order by t.object_id ,t.point_Id,t.body_id ";
            RowSet rowSet = dao.search(sql);
            HashMap PointMap = new HashMap();// 考核对象指标权重
            HashMap objDynaRankMap = new HashMap(); // 考核对象主体权重
            HashMap bodyRank = new HashMap(); // 取得考核对象对应的主体权重
            int i = 0;
            String UseWeight = "false";
            if (ruleMap.get("UseWeight") != null) {
                UseWeight = (String) ruleMap.get("UseWeight");
            }
            String status = "0";
            status = this.templateVo.getString("status");
            int KeepDecimal = Integer.parseInt((String) ruleMap
                    .get("KeepDecimal")); // 保留小数位
            LazyDynaBean a_bean = null;
            while (rowSet.next()) {
                ArrayList tempList = new ArrayList();
                int id = rowSet.getInt("id");
                String object_id = rowSet.getString("object_id");
                String point_id = rowSet.getString("point_id");
                String score = rowSet.getString("score");
                String body_id = rowSet.getString("body_id") != null ? rowSet
                        .getString("body_id") : "";
                String b0110 = rowSet.getString("b0110");
                String e0122 = rowSet.getString("e0122");
                String e01a1 = rowSet.getString("e01a1");
                String objBody_id = rowSet.getString("objBody_id");
                if (isByModelFlag && isPosHasPoint) {
                    PointMap = getPointMapByModel(object_id);
                } else {
                    PointMap = getPointMap();
                }
                if (objDynaRankMap.get(object_id) == null) {
                    bodyRank = getBodyRank(b0110, e0122, e01a1, objBody_id,
                            object_id, dynaBodyrankList, bodyRankList);
                    objDynaRankMap.put(object_id, bodyRank);
                }
                bodyRank = (HashMap) objDynaRankMap.get(object_id);

                tempList.add(new Integer(id));
                tempList.add(object_id);
                if (body_id != null && body_id.trim().length() > 0) {
                    tempList.add(new Integer(body_id));
                } else {
                    tempList.add(body_id);
                }
                tempList.add(point_id);
                if (point_firstItemMap.get(point_id) != null) {
                    tempList.add(new Integer((String) point_firstItemMap
                            .get(point_id))); // 考核指标所在的最上级的项目编号
                } else {
                    tempList.add(new Integer(-1));
                }

                if (bodyRank.get(body_id) != null && UseWeight != null
                        && "true".equalsIgnoreCase(UseWeight)) // 使用权重((注意动态主体权重)
                {
                    // String ascore = String.valueOf(Float.parseFloat(score) *
                    // Float.parseFloat((String) bodyRank.get(body_id)));
                    // tempList.add(new Float(PubFunc.round(ascore,
                    // KeepDecimal))); // score

                    tempList.add(new Float(PubFunc.round(score, KeepDecimal))); // score
                    // Per_ScoreDetail表的score字段不管是否使用主体权重
                    // 按原始分值保存
                    // fzg修改
                    tempList.add(new Float((String) bodyRank.get(body_id))); // 主体类别权重
                } else {
                    tempList.add(new Float(PubFunc.round(score, KeepDecimal))); // score
                    tempList.add(new Float(1)); // 主体类别权重
                }

                LazyDynaBean aa_bean = (LazyDynaBean) PointMap.get(point_id);
                float rank = 1;
                if (aa_bean != null && aa_bean.get("rank") != null) {
                    rank = Float.parseFloat((String) aa_bean.get("rank"));
                }
                // 指标劝重
                if (UseWeight != null && "true".equalsIgnoreCase(UseWeight)) // 使用权重((注意动态主体权重)
                {
                    boolean flag = false;
                    for (int j = 0; j < dynaPointRankList.size(); j++) {
                        a_bean = (LazyDynaBean) dynaPointRankList.get(j);
                        String pointid = (String) a_bean.get("point_id");
                        String dynaobjtype = (String) a_bean
                                .get("dyna_obj_type");
                        String dynaobj = (String) a_bean.get("dyna_obj");
                        String arank = (String) a_bean.get("rank");
                        if (!flag && pointid.equals(point_id)) {
                            if ("4".equals(dynaobjtype)
                                    && dynaobj.equals(object_id)) {
                                tempList.add(new Float(arank));
                                flag = true;
                                break;
                            } else if ("5".equals(dynaobjtype)
                                    && dynaobj.equals(body_id)) {
                                tempList.add(new Float(arank));
                                flag = true;
                                break;
                            } else if ("3".equals(dynaobjtype)
                                    && e01a1 != null
                                    && e01a1.length() >= dynaobj.length()
                                    && e01a1.substring(0, dynaobj.length())
                                    .equals(dynaobj)) {
                                tempList.add(new Float(arank));
                                flag = true;
                                break;
                            } else if ("2".equals(dynaobjtype)
                                    && e01a1 != null
                                    && e0122.length() >= dynaobj.length()
                                    && e0122.substring(0, dynaobj.length())
                                    .equals(dynaobj)) {
                                tempList.add(new Float(arank));
                                flag = true;
                                break;
                            } else if ("1".equals(dynaobjtype)
                                    && e01a1 != null
                                    && b0110.length() >= dynaobj.length()
                                    && b0110.substring(0, dynaobj.length())
                                    .equals(dynaobj)) {
                                tempList.add(new Float(arank));
                                flag = true;
                                break;
                            }
                        }
                    }

                    if (!flag) {
                        tempList.add(new Float(rank));
                    }
                } else {
                    if ("0".equals(status)) {
                        tempList.add(new Float(1));
                    } else if ("1".equals(status)) {
                        tempList.add(new Float(rank));
                    }
                }
                tempList.add(new Integer(this.planid));
                detailList.add(tempList);
                i++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return detailList;
    }

    // 取得 (绩效评估得分明细表)里目标任务的数据
    public ArrayList getScoreDetailList_self(ArrayList itemList,
                                             HashMap ruleMap, ArrayList dynaBodyrankList, ArrayList bodyRankList) {

        ArrayList detailList = new ArrayList();

        try {
            ContentDAO dao = new ContentDAO(this.conn);
            HashMap itemMap = new HashMap();
            HashMap rankMap = new HashMap();
            StringBuffer sqlBuf = new StringBuffer();
            sqlBuf.append("select p0400,item_id,p0415 from p04 where plan_id=");
            sqlBuf.append(this.planid);
            RowSet rowSet = dao.search(sqlBuf.toString());
            while (rowSet.next()) {
                rankMap.put(rowSet.getString(1), new Float(rowSet.getFloat(3)));
                itemMap.put(rowSet.getString(1), rowSet.getString(2));
            }

            String _str = "pte.score";
            if (this.task_score_str.trim().length() > 0) {
                _str = "("
                        + this.task_score_str.trim().replaceAll(
                        "per_target_evaluation", "pte") + ")";
            }

            sqlBuf.setLength(0);
            sqlBuf.append("select po.id,po.b0110,po.e0122,po.e01a1,po.body_id objBody_id,pte.object_id,p04.p0400 point_id,pm.body_id,");
            sqlBuf.append("sum(" + Sql_switcher.isnull(_str, "0") + "+"
                    + Sql_switcher.isnull("pte.stdScore", "0")
                    + ")/count(pm.mainbody_id) score ");
            sqlBuf.append(" from per_target_evaluation pte,p04,per_mainbody pm,per_object po  where pte.p0400=p04.p0400  and pte.object_id=pm.object_id ");
            sqlBuf.append(" and pte.mainbody_id=pm.mainbody_id ");
            if (this.compute_flag != 4) {
                sqlBuf.append(" and (pm.status=2 or pm.status=3 ) ");
            }
            if (this.batchComput != null
                    && this.batchComput.trim().length() > 0
                    && "True".equalsIgnoreCase(this.batchComput)) {
                sqlBuf.append(" and (pm.status=2 or pm.status=3 or pm.mainbody_id='"
                        + this.presentMainbody_id + "' ) ");
            }
            sqlBuf.append(" and po.plan_id=" + this.planid);
            sqlBuf.append(" and pm.plan_id=po.plan_id and p04.plan_id=po.plan_id and pte.plan_id=po.plan_id");
            sqlBuf.append(" and po.object_id=pte.object_id ");
            // 个性项目
            StringBuffer whlBuf = new StringBuffer();
            for (int j = 0; j < itemList.size(); j++) {
                LazyDynaBean abean = (LazyDynaBean) itemList.get(j);
                String item_id = (String) abean.get("item_id");
                String kind = (String) abean.get("kind");
                if ("2".equals(kind)) {
                    whlBuf.append("p04.item_id=" + item_id + " or ");
                }
            }

            if (whlBuf.length() > 0) {
                sqlBuf.append(" and (");
                whlBuf.setLength(whlBuf.length() - 4);
                sqlBuf.append(whlBuf.toString());
                sqlBuf.append(")");
            } else {
                sqlBuf.append(" and 1=2 ");
            }

            sqlBuf.append(" group by po.id,po.body_id,po.b0110,po.e0122,po.e01a1,pte.object_id,p04.p0400 ,pm.body_id");
            sqlBuf.append(" order by po.id,po.body_id,po.b0110,po.e0122,po.e01a1,pte.object_id,p04.p0400 ,pm.body_id");
            rowSet = dao.search(sqlBuf.toString());

            HashMap PointMap = getPointMap();
            HashMap objDynaRankMap = new HashMap(); // 考核对象主体权重
            HashMap bodyRank = new HashMap(); // 取得考核对象对应的主体权重
            String UseWeight = "false";
            if (ruleMap.get("UseWeight") != null) {
                UseWeight = (String) ruleMap.get("UseWeight");
            }
            String status = "0";
            status = this.templateVo.getString("status");
            int KeepDecimal = Integer.parseInt((String) ruleMap
                    .get("KeepDecimal")); // 保留小数位
            while (rowSet.next()) {
                ArrayList tempList = new ArrayList();
                int id = rowSet.getInt("id");
                String object_id = rowSet.getString("object_id");
                String point_id = rowSet.getString("point_id");
                String item_id = itemMap.get(point_id) != null ? (String) itemMap
                        .get(point_id) : "-1";
                String score = rowSet.getString("score");
                String body_id = rowSet.getString("body_id") != null ? rowSet
                        .getString("body_id") : "";
                String b0110 = rowSet.getString("b0110");
                String e0122 = rowSet.getString("e0122");
                String e01a1 = rowSet.getString("e01a1");
                String objBody_id = rowSet.getString("objBody_id");

                if (objDynaRankMap.get(object_id) == null) {
                    bodyRank = getBodyRank(b0110, e0122, e01a1, objBody_id,
                            object_id, dynaBodyrankList, bodyRankList);
                    objDynaRankMap.put(object_id, bodyRank);
                }
                bodyRank = (HashMap) objDynaRankMap.get(object_id);

                tempList.add(new Integer(id));
                tempList.add(object_id);
                if (body_id != null && body_id.trim().length() > 0) {
                    tempList.add(new Integer(body_id));
                } else {
                    tempList.add(body_id);
                }
                tempList.add(point_id);
                tempList.add(new Integer(item_id));

                if (bodyRank.get(body_id) != null && UseWeight != null
                        && "true".equalsIgnoreCase(UseWeight)) // 使用权重((注意动态主体权重)
                {
                    // String ascore = String.valueOf(Float.parseFloat(score) *
                    // Float.parseFloat((String) bodyRank.get(body_id)));
                    // tempList.add(new Float(PubFunc.round(ascore,
                    // KeepDecimal))); // score

                    tempList.add(new Float(PubFunc.round(score, KeepDecimal))); // score
                    // Per_ScoreDetail表的score字段不管是否使用主体权重
                    // 按原始分值保存
                    // fzg修改
                    tempList.add(new Float((String) bodyRank.get(body_id))); // 主体类别权重
                } else {
                    tempList.add(new Float(PubFunc.round(score, KeepDecimal))); // score
                    tempList.add(new Float(1)); // 主体类别权重
                }

                if ("0".equals(status)) {
                    tempList.add(new Float(1));
                } else if ("1".equals(status)) {
                    tempList.add(rankMap.get(point_id));
                }
                tempList.add(new Integer(this.planid));
                detailList.add(tempList);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return detailList;
    }

    /**
     * 写入(绩效评估得分明细表)数据
     *
     * @param scoreDetailList
     */
    public void insertScoreDetail(ArrayList scoreDetailList) {

        ContentDAO dao = new ContentDAO(this.conn);
        try {

            //能力素质时，只删除当前的考核对象记录 chent 20160921 start
            String deleteSql = "delete from Per_ScoreDetail where plan_id="
                    + this.planid;

            if (String.valueOf(this.planVo.getInt("busitype")) != null
                    && String.valueOf(this.planVo.getInt("busitype")).trim().length() > 0
                    && this.planVo.getInt("busitype") == 1) {

                List list = (ArrayList) scoreDetailList.get(0);
                String object_id = (String) list.get(1);
                deleteSql += (" and object_id='" + object_id + "'");
            }
            dao.delete(deleteSql, new ArrayList());
            //能力素质时，只删除当前的考核对象记录 chent 20160921 end

            String sql = "insert into Per_ScoreDetail(id,object_id,body_id,point_id,item_id,score,body_rank,point_rank,plan_id) "
                    + " values (?,?,?,?,?,?,?,?,?)";
            dao.batchInsert(sql, scoreDetailList);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * 获得引入部门计划的指标结果值
     *
     * @param pointList
     * @param totalPointMap
     * @return
     */
    public HashMap getUMPointScore_object(ArrayList itemList,
                                          ArrayList pointList, HashMap totalPointMap) {
        HashMap map = new HashMap();
        LazyDynaBean abean = null;
        LazyDynaBean abean2 = null;
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            String MenRefDeptTmpl = (String) this.planParamSet
                    .get("MenRefDeptTmpl"); // 本次评分=个人指标得分*部门指标得分的权重和时，部门模板。为空表示与当前计划相同。
            if (MenRefDeptTmpl.trim().length() == 0) {
                MenRefDeptTmpl = this.planVo.getString("template_id");
            }

            HashMap relaPointMap = this.getPointMap2(MenRefDeptTmpl);
            HashMap relaItemMap = this.getItemMap2(MenRefDeptTmpl);
            RowSet rowSet = null;
            int cycle = this.planVo.getInt("cycle");
            String sql = "select * from per_plan where status in (4,5,6,7)  and object_type in (1,4) and template_id='"
                    + MenRefDeptTmpl + "' and cycle=" + cycle;
            if (cycle == 0) {
                sql += " and Theyear='" + this.planVo.getString("theyear")
                        + "'";
            } else if (cycle == 1 || cycle == 2)// 半年|季度
            {
                sql += " and Theyear='" + this.planVo.getString("theyear")
                        + "' and Thequarter='"
                        + this.planVo.getString("thequarter") + "'";
            } else if (cycle == 3) // 月度
            {
                sql += " and Theyear='" + this.planVo.getString("theyear")
                        + "' and Themonth='"
                        + this.planVo.getString("themonth") + "'";
            } else {
                sql += " and 1=2";
            }
            sql += " and plan_id in (select plan_id from per_object where object_id in (select e0122 from per_object where plan_id="
                    + this.planid + "))";
            RowSet rowSet2 = dao.search(sql);
            while (rowSet2.next()) {
                String id = rowSet2.getString("plan_id");
                rowSet = dao.search("select * from per_result_" + id);
                while (rowSet.next()) {
                    String objectid = rowSet.getString("object_id");
                    LazyDynaBean _abean = new LazyDynaBean();
                    if (map.get(objectid) != null) {
                        _abean = (LazyDynaBean) map.get(objectid);
                    }
                    for (int j = 0; j < pointList.size(); j++) {
                        abean = (LazyDynaBean) pointList.get(j);
                        String point_id = (String) abean.get("point_id");
                        String pointname = (String) abean.get("pointname");
                        if (totalPointMap.get(point_id) != null) {
                            continue;
                        }

                        String relaPointId = "";
                        if (relaPointMap.get(point_id.toUpperCase()) != null) {
                            relaPointId = point_id;
                        } else if (relaPointMap.get(pointname) != null) {
                            relaPointId = (String) relaPointMap.get(pointname);
                        }
                        if (relaPointId != null
                                && relaPointId.trim().length() > 0) {
                            String value = rowSet.getString("C_" + relaPointId) != null ? rowSet
                                    .getString("C_" + relaPointId) : "0";
                            if (_abean.get(point_id) != null) {
                                String temp = (String) _abean.get(point_id);
                                value = PubFunc.multiple(temp, value, 4);
                            }
                            _abean.set(point_id, value);
                        } else {
                            String value = "1";
                            if (_abean.get(point_id) != null) {
                                String temp = (String) _abean.get(point_id);
                                value = PubFunc.multiple(temp, value, 4);
                            }
                            _abean.set(point_id, value);
                        }
                    }

                    for (int j = 0; j < itemList.size(); j++) {
                        abean2 = (LazyDynaBean) itemList.get(j);
                        String item_id = (String) abean2.get("item_id");
                        String kind = (String) abean2.get("kind");
                        String itemdesc = (String) abean2.get("itemdesc");
                        if ("2".equals(kind)) {
                            String relaItemId = "";
                            if (relaItemMap.get(item_id) != null) {
                                relaItemId = item_id;
                            } else if (relaItemMap.get(itemdesc) != null) {
                                relaItemId = (String) relaItemMap.get(itemdesc);
                            }

                            if (relaItemId != null
                                    && relaItemId.trim().length() > 0) {
                                String value = rowSet.getString("T_"
                                        + relaItemId) != null ? rowSet
                                        .getString("T_" + relaItemId) : "0";
                                if (_abean.get(item_id) != null) {
                                    String temp = (String) _abean.get(item_id);
                                    value = PubFunc.multiple(temp, value, 4);
                                }
                                _abean.set(item_id, value);
                            } else {
                                String value = "1";
                                if (_abean.get(item_id) != null) {
                                    String temp = (String) _abean.get(item_id);
                                    value = PubFunc.multiple(temp, value, 4);
                                }
                                _abean.set(item_id, value);
                            }
                        }
                    }

                    map.put(objectid.trim(), _abean);
                }
            }
            if (rowSet != null) {
                rowSet.close();
            }
            if (rowSet2 != null) {
                rowSet2.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 取得考核对象指标分数
     *
     * @param ruleMap
     * @return
     */
    public HashMap getObjectPointScore(ArrayList itemList, HashMap ruleMap,
                                       HashMap point_firstItemMap, ArrayList pointList,
                                       HashMap totalPointMap) throws GeneralException {

        HashMap map = new HashMap();
        String tableName = "t#" + this.userView.getUserName() + "_per_2"; // "t_"+this.userView.getUserId()
        // +
        // "evaluationTable";
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            String UseWeight = (String) ruleMap.get("UseWeight");
            int KeepDecimal = Integer.parseInt((String) ruleMap
                    .get("KeepDecimal")); // 保留小数位
            ArrayList dynaPointRankList = getDynaPointrank(); // 取得考核指标动态权重
            ArrayList dynaBodyrankList = getDynaBodyrank(); // 取得考核主体动态权重
            ArrayList bodyRankList = getPerPlanBody(); // 取得考核主体权重
            if (UseWeight != null && "true".equalsIgnoreCase(UseWeight)) // 使用权重
            {
                BigDecimal a_rank = new BigDecimal("0");
                for (int i = 0; i < bodyRankList.size(); i++) {
                    LazyDynaBean _bean = (LazyDynaBean) bodyRankList.get(i);
                    String rank = (String) _bean.get("rank");
                    a_rank = a_rank.add(new BigDecimal(rank));
                }
                if (Float.parseFloat(a_rank.toString()) != 1) {
                    throw GeneralExceptionHandler.Handle(new Exception(
                            "计划主体类别的权重之和不为1,请设置权重或不使用权重计算."));
                }

            }

            ArrayList scoreDetailList = getScoreDetailList(ruleMap,
                    dynaPointRankList, point_firstItemMap, dynaBodyrankList,
                    bodyRankList); // Per_ScoreDetail
            // 目标管理计划在此继续取得 目标任务的打分数据
            if (this.planVo.getInt("method") == 2) {
                ArrayList list = getScoreDetailList_self(itemList, ruleMap,
                        dynaBodyrankList, bodyRankList);
                scoreDetailList.addAll(list);
            }
            /** 写入(绩效评估得分明细表)数据 */
            if (scoreDetailList.size() > 0) {
                insertScoreDetail(scoreDetailList);
            }
            String CalcMenScoreRefDept = (String) this.planParamSet
                    .get("CalcMenScoreRefDept"); // 本次评分=个人指标得分*部门指标得分的权重和（目标考核和360°）
            // True, False, 默认为 False
            if ("True".equalsIgnoreCase(CalcMenScoreRefDept)) {
                this.UMPointScoreMap = getUMPointScore_object(itemList,
                        pointList, totalPointMap); // 获得考核对象所属部门作为考核对象的计划的指标结果值
            }

            if (UseWeight != null && "true".equalsIgnoreCase(UseWeight)) // 使用权重
            // ((注意动态主体权重)
            {

                String sql = "select p.b0110,p.e0122,p.e01a1,p.body_id objBody_id,t.object_id,t.point_id,t.body_id,sum(t.score)/count(t.mainbody_id) score "
                        + " from "
                        + tableName
                        + " t,per_object p where t.object_id=p.object_id and p.plan_id="
                        + this.planid
                        + " group by t.object_id,t.point_id,t.body_id,p.body_id,p.b0110,p.e0122,p.e01a1 "
                        + " order by t.object_id ,t.point_Id,t.body_id ";
                RowSet rowSet = dao.search(sql);
                String objectid = "";
                String pointid = "";
                LazyDynaBean abean = new LazyDynaBean();
                LazyDynaBean a_bean = null;
                ArrayList tempList = new ArrayList();
                int i = 0;
                HashMap objDynaRankMap = new HashMap(); // 考核对象主体权重
                HashMap bodyRank = new HashMap(); // 取得考核对象对应的主体权重
                String _e0122 = "";
                while (rowSet.next()) {

                    String object_id = rowSet.getString("object_id");
                    String point_id = rowSet.getString("point_id");
                    String score = rowSet.getString("score") != null
                            && rowSet.getString("score").trim().length() > 0 ? rowSet
                            .getString("score").trim() : "0";
                    String body_id = isNull(rowSet.getString("body_id"));
                    String b0110 = rowSet.getString("b0110");
                    String e0122 = isNull(rowSet.getString("e0122"));
                    _e0122 = e0122;
                    String e01a1 = isNull(rowSet.getString("e01a1"));
                    String objBody_id = isNull(rowSet.getString("objBody_id"));

                    if (objectid.length() == 0) {
                        objectid = object_id;
                        pointid = point_id;
                    }

                    if (objDynaRankMap.get(object_id) == null) {
                        bodyRank = getBodyRank(b0110, e0122, e01a1, objBody_id,
                                object_id, dynaBodyrankList, bodyRankList);
                        objDynaRankMap.put(object_id, bodyRank);
                    }
                    bodyRank = (HashMap) objDynaRankMap.get(objectid);

                    if (i != 0
                            && (!pointid.equals(point_id) || !objectid
                            .equals(object_id))) {
                        String a_score = getDynaRankScore(tempList, bodyRank);
                        if (Float.parseFloat(a_score) == 0) {
                            abean.set(pointid, "0");
                        } else {
                            // if(UMPointScoreMap.size()>0&&UMPointScoreMap.get(e0122)!=null)
                            // {
                            // LazyDynaBean
                            // _bean=(LazyDynaBean)UMPointScoreMap.get(e0122);
                            // if(_bean.get(pointid)!=null)
                            // {
                            // String _scroe=(String)_bean.get(pointid);
                            // a_score=PubFunc.multiple(a_score,_scroe,6);
                            // }
                            // }
                            abean.set(pointid,
                                    PubFunc.round(a_score, KeepDecimal));
                        }
                        tempList = new ArrayList();
                        pointid = point_id;

                        if (!objectid.equals(object_id)) {
                            map.put(objectid, abean);
                            abean = new LazyDynaBean();
                            objectid = object_id;
                            pointid = point_id;
                        }
                    }
                    a_bean = new LazyDynaBean();
                    a_bean.set("object_id", object_id);
                    a_bean.set("point_id", point_id);
                    a_bean.set("score", score);// PubFunc.round(score,KeepDecimal));
                    a_bean.set("body_id", body_id);
                    a_bean.set("b0110", b0110);
                    a_bean.set("e0122", e0122);
                    a_bean.set("e01a1", e01a1);
                    tempList.add(a_bean);
                    i++;
                }
                String a_score = getDynaRankScore(tempList, bodyRank);
                if (Float.parseFloat(a_score) == 0) {
                    abean.set(pointid, "0");
                } else {
                    // if(UMPointScoreMap.size()>0&&UMPointScoreMap.get(_e0122)!=null)
                    // {
                    // LazyDynaBean
                    // _bean=(LazyDynaBean)UMPointScoreMap.get(_e0122);
                    // if(_bean.get(pointid)!=null)
                    // {
                    // String _scroe=(String)_bean.get(pointid);
                    // a_score=PubFunc.multiple(a_score,_scroe,6);
                    // }
                    // }
                    abean.set(pointid, PubFunc.round(a_score, KeepDecimal));

                }
                map.put(objectid, abean);

            } else {
                String sql = "select per_object.e0122,"
                        + tableName
                        + ".object_id,"
                        + tableName
                        + ".point_id,"
                        + Sql_switcher.isnull("sum(" + tableName
                        + ".score)/count(" + tableName
                        + ".mainbody_id)", "0")
                        + " score from "
                        + tableName
                        // 去掉未提交的考核对象的数据
                        + ",per_object where per_object.plan_id="
                        + this.planid
                        + "  and "
                        + tableName
                        + ".object_id=per_object.object_id and  "
                        + tableName
                        + ".object_id in (select object_id  from per_mainbody where plan_id="
                        + this.planid;
                if (this.compute_flag != 4) {
                    sql += " and (status=2  or status=3) ";
                }
                if (this.batchComput != null
                        && this.batchComput.trim().length() > 0
                        && "True".equalsIgnoreCase(this.batchComput)) {
                    sql += " and (status=2  or status=3 or mainbody_id='"
                            + this.presentMainbody_id + "' ) ";
                }
                sql += " ) group by per_object.e0122," + tableName
                        + ".object_id," + tableName + ".point_id order by "
                        + tableName + ".object_id," + tableName + ".point_id";
                RowSet rowSet = dao.search(sql);
                String objectid = "";
                LazyDynaBean abean = new LazyDynaBean();
                while (rowSet.next()) {
                    String object_id = rowSet.getString("object_id");
                    String point_id = rowSet.getString("point_id");
                    String score = rowSet.getString("score");
                    String e0122 = rowSet.getString("e0122");
                    if (objectid.length() == 0) {
                        objectid = object_id;
                    }
                    if (!objectid.equals(object_id)) {
                        map.put(objectid, abean);
                        abean = new LazyDynaBean();
                        objectid = object_id;
                    }
                    if (Float.parseFloat(score) == 0) {
                        abean.set(point_id, "0");
                    } else {
                        // if(UMPointScoreMap.size()>0&&UMPointScoreMap.get(e0122)!=null)
                        // {
                        // LazyDynaBean
                        // _bean=(LazyDynaBean)UMPointScoreMap.get(e0122);
                        // if(_bean.get(point_id)!=null)
                        // {
                        // String _scroe=(String)_bean.get(point_id);
                        // score=PubFunc.multiple(score,_scroe,6);
                        // }
                        // }

                        abean.set(point_id, PubFunc.round(score, KeepDecimal));

                    }
                }
                map.put(objectid, abean);
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw GeneralExceptionHandler.Handle(e);
        }
        return map;
    }

    /**
     * 取得对象对应的主体权重  2013.11.14 pjf 如果既有考核对象类别又有组织机构优先组织机构
     *
     * @param b0110
     * @param e0122
     * @param e01a1
     * @param object_id
     * @param dynaBodyrankList
     * @param bodyRankList
     * @return
     */
    public HashMap getBodyRank(String b0110, String e0122, String e01a1,
                               String objBody_id, String object_id, ArrayList dynaBodyrankList,
                               ArrayList bodyRankList) {

        HashMap map = new HashMap();
        boolean flag = false;
        LazyDynaBean abean = null;
        String dynaObjType = "";
        if (dynaBodyrankList.size() > 0) {
            for (int i = 0; i < dynaBodyrankList.size(); i++) {
                abean = (LazyDynaBean) dynaBodyrankList.get(i);
                String body_id = (String) abean.get("body_id");
                String dyna_obj_type = (String) abean.get("dyna_obj_type");
                String dyna_obj = (String) abean.get("dyna_obj");
                String rank = (String) abean.get("rank");

                if ((dynaObjType == null || dynaObjType.length() <= 0 || "4"
                        .equals(dynaObjType))
                        && (dyna_obj_type != null && "4".equals(dyna_obj_type))
                        && dyna_obj.equals(object_id)) {
                    map.put(body_id, rank);
                    dynaObjType = "4";
                    flag = true;
                } else if ((dynaObjType == null || dynaObjType.length() <= 0 || "5"
                        .equals(dynaObjType))
                        && (dyna_obj_type != null && "5".equals(dyna_obj_type))
                        && dyna_obj.equals(objBody_id)) {
                    map.put(body_id, rank);
                    dynaObjType = "5";
                    flag = true;
                } else if ((dynaObjType == null || dynaObjType.length() <= 0 || "3"
                        .equals(dynaObjType))
                        && (dyna_obj_type != null && "3".equals(dyna_obj_type))
                        && e01a1 != null
                        && e01a1.length() >= dyna_obj.length()
                        && e01a1.substring(0, dyna_obj.length()).equals(
                        dyna_obj)) {
                    map.put(body_id, rank);
                    dynaObjType = "3";
                    flag = true;
                } else if ((dynaObjType == null || dynaObjType.length() <= 0 || "2"
                        .equals(dynaObjType))
                        && (dyna_obj_type != null && "2".equals(dyna_obj_type))
                        && ((e01a1 != null && e0122 != null
                        && e0122.length() >= dyna_obj.length() && e0122
                        .substring(0, dyna_obj.length()).equals(
                                dyna_obj)) || (dyna_obj != null && dyna_obj
                        .equals(object_id)))) {
                    map.put(body_id, rank);
                    dynaObjType = "2";
                    flag = true;
                } else if ((dynaObjType == null || dynaObjType.length() <= 0 || "1"
                        .equals(dynaObjType))
                        && (dyna_obj_type != null && "1".equals(dyna_obj_type))
                        && ((b0110 != null
                        && b0110.length() >= dyna_obj.length() && b0110
                        .substring(0, dyna_obj.length()).equals(
                                dyna_obj)) || (dyna_obj != null && dyna_obj
                        .equals(object_id)))) {
                    map.put(body_id, rank);
                    dynaObjType = "1";
                    flag = true;
                }

            }

        }

        if (bodyRankList.size() > 0 && !flag) {
            for (int i = 0; i < bodyRankList.size(); i++) {
                abean = (LazyDynaBean) bodyRankList.get(i);
                String body_id = (String) abean.get("body_id");
                String rank = (String) abean.get("rank");
                map.put(body_id, rank);
            }
        }

        if (flag) {
            for (int i = 0; i < bodyRankList.size(); i++) {
                abean = (LazyDynaBean) bodyRankList.get(i);
                String body_id = (String) abean.get("body_id");
                String rank = (String) abean.get("rank");
                if (map.get(body_id) == null) {
                    map.put(body_id, rank);
                }
            }
        }

        return map;
    }

    /**
     * 取得对象指标权重分值
     *
     * @param tempList
     * @param bodyRank
     * @param dynaPointRankList 考核对象动态指标权重
     * @return
     */
    public String getDynaRankScore(ArrayList tempList, HashMap bodyRank) {

        // double score = 0.0f;
        String score = "0";
        boolean flag = false;
        LazyDynaBean abean = null;
        LazyDynaBean aa_bean = null;

        for (int j = 0; j < tempList.size(); j++) {
            aa_bean = (LazyDynaBean) tempList.get(j);
            String ascore = (String) aa_bean.get("score");
            String abodyid = (String) aa_bean.get("body_id");
            String object_id = (String) aa_bean.get("object_id");
            String point_id = (String) aa_bean.get("point_id");
            String e0122 = (String) aa_bean.get("e0122");
            if (bodyRank.get(abodyid) != null) {
                String temp = PubFunc.multiple(ascore,
                        (String) bodyRank.get(abodyid), 6);
                score = PubFunc.add(score, temp, 6);
                // score +=Double.parseDouble(PubFunc.multiple(ascore,(String)
                // bodyRank.get(abodyid),6)); //Float.parseFloat(ascore) *
                // Float.parseFloat((String) bodyRank.get(abodyid));
            }

        }
        return String.valueOf(score);
    }

    // 去最值
    public void moveBestValue(HashMap ruleMap) {

        ContentDAO dao = new ContentDAO(this.conn);
        try {
            String tableName = "t#" + this.userView.getUserName() + "_per_2"; // "t_"+this.userView.getUserId()
            // +
            // "evaluationTable";
            String estBodyText = (String) ruleMap.get("EstBodyText"); // 去值主体类别
            int ThrowBaseNum = 0;
            int ThrowHighCount = 0;
            int ThrowLowCount = 0;
            if (ruleMap.get("ThrowBaseNum") != null
                    && ((String) ruleMap.get("ThrowBaseNum")).trim().length() > 0) {
                ThrowBaseNum = Integer.parseInt((String) ruleMap
                        .get("ThrowBaseNum")); // 主体类别人数大于
            }
            if (ruleMap.get("ThrowHighCount") != null
                    && ((String) ruleMap.get("ThrowHighCount")).trim().length() > 0) {
                ThrowHighCount = Integer.parseInt((String) ruleMap
                        .get("ThrowHighCount")); // 去掉最高分
            }
            if (ruleMap.get("ThrowLowCount") != null
                    && ((String) ruleMap.get("ThrowLowCount")).trim().length() > 0) {
                ThrowLowCount = Integer.parseInt((String) ruleMap
                        .get("ThrowLowCount")); // 去掉最低分
            }

            if (estBodyText != null && estBodyText.trim().length() > 0) {
                String sql = "select object_id,count(mainbody_id) num from per_mainbody where plan_id="
                        + this.planid
                        + " and  body_id in ("
                        + estBodyText
                        + ") ";
                if (this.compute_flag != 4) {
                    sql += " and (status=2 or status=3) ";
                }
                if (this.batchComput != null
                        && this.batchComput.trim().length() > 0
                        && "True".equalsIgnoreCase(this.batchComput)) {
                    sql += " and (status=2 or status=3 or mainbody_id='"
                            + this.presentMainbody_id + "' ) ";
                }
                sql += " group by object_id  order by object_id";

                RowSet rowSet = dao.search(sql);
                HashMap obj_bodyNum_map = new HashMap();
                while (rowSet.next()) {
                    String object_id = rowSet.getString("object_id");
                    String num = rowSet.getString("num");
                    obj_bodyNum_map.put(object_id, num);
                }

                rowSet = dao.search("select * from " + tableName
                        + " where body_id in (" + estBodyText
                        + ") order by  object_id,point_id,score desc");
                String object_id = "";
                String point_id = "";
                ArrayList delList = new ArrayList();

                ArrayList tempList = new ArrayList();
                LazyDynaBean abean = null;
                while (rowSet.next()) {
                    String a_objectid = rowSet.getString("object_id");
                    String a_pointid = rowSet.getString("point_id");
                    String a_mainbodyid = rowSet.getString("mainbody_id");
                    String a_score = rowSet.getString("score");

                    String key = a_objectid;
                    if (obj_bodyNum_map.get(key) != null) {
                        int num = Integer.parseInt((String) obj_bodyNum_map
                                .get(key));
                        if (num <= ThrowBaseNum) {
                            continue;
                        }

                    }

                    if (object_id.length() == 0 || point_id.length() == 0) {
                        object_id = a_objectid;
                        point_id = a_pointid;
                    }

                    if (!a_objectid.equals(object_id)
                            || !a_pointid.equals(point_id)) {
                        removeRecord(tempList, ThrowHighCount, ThrowLowCount,
                                delList);
                        object_id = a_objectid;
                        point_id = a_pointid;
                        tempList = new ArrayList();
                    }
                    abean = new LazyDynaBean();
                    abean.set("a_objectid", a_objectid);
                    abean.set("a_pointid", a_pointid);
                    abean.set("a_mainbodyid", a_mainbodyid);
                    abean.set("a_score", a_score);
                    tempList.add(abean);
                }
                removeRecord(tempList, ThrowHighCount, ThrowLowCount, delList);
                // 去最值
                sql = "delete from "
                        + tableName
                        + " where object_id=? and mainbody_id=?  and point_id=?";
                ArrayList list = new ArrayList();
                LazyDynaBean a_bean = null;
                for (int i = 0; i < delList.size(); i++) {
                    a_bean = (LazyDynaBean) delList.get(i);
                    ArrayList atempList = new ArrayList();
                    atempList.add((String) a_bean.get("a_objectid"));
                    atempList.add((String) a_bean.get("a_mainbodyid"));
                    atempList.add((String) a_bean.get("a_pointid"));
                    list.add(atempList);
                }
                dao.batchUpdate(sql, list);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 筛选去最值的记录
     *
     * @param tempList
     * @param ThrowHighCount
     * @param ThrowLowCount
     * @param delList
     */
    public void removeRecord(ArrayList tempList, int ThrowHighCount,
                             int ThrowLowCount, ArrayList delList) {

        ArrayList a_tempList = (ArrayList) tempList.clone();
        if (ThrowHighCount > 0) {
            for (int i = 1; i <= ThrowHighCount; i++) {
                if (a_tempList.size() - 1 >= 1) {
                    LazyDynaBean abean = (LazyDynaBean) a_tempList.get(0);
                    LazyDynaBean a_bean = new LazyDynaBean();
                    a_bean.set("a_objectid", (String) abean.get("a_objectid"));
                    a_bean.set("a_pointid", (String) abean.get("a_pointid"));
                    a_bean.set("a_mainbodyid",
                            (String) abean.get("a_mainbodyid"));
                    a_bean.set("a_score", (String) abean.get("a_score"));
                    a_bean.set("a_body_id", (String) abean.get("a_body_id"));
                    delList.add(a_bean);
                    a_tempList.remove(0);
                } else {
                    break;
                }
            }
        }
        if (ThrowLowCount > 0) {
            for (int i = 1; i <= ThrowLowCount; i++) {
                if (a_tempList.size() - 1 >= 1) {
                    LazyDynaBean abean = (LazyDynaBean) a_tempList
                            .get(a_tempList.size() - 1);
                    LazyDynaBean a_bean = new LazyDynaBean();
                    a_bean.set("a_objectid", (String) abean.get("a_objectid"));
                    a_bean.set("a_pointid", (String) abean.get("a_pointid"));
                    a_bean.set("a_mainbodyid",
                            (String) abean.get("a_mainbodyid"));
                    a_bean.set("a_score", (String) abean.get("a_score"));
                    a_bean.set("a_body_id", (String) abean.get("a_body_id"));
                    delList.add(a_bean);
                    a_tempList.remove(a_tempList.size() - 1);
                } else {
                    break;
                }
            }
        }
    }


    ArrayList addList = new ArrayList(); //目标考核没打分的考核主体模拟写入同一主体类别下打分主体的平均分。

    /**
     * 根据计算规则，建立评分临时表（处理空票不作废、此类有分、空票作废单项未评分的处理）
     *
     * @param ruleMap
     */
    public void dealWithEvaluationTable(HashMap ruleMap, ArrayList pointList,
                                        ArrayList objectList) {

        String tableName = "t#" + this.userView.getUserName() + "_per_2"; // "t_"+this.userView.getUserId()
        // +
        // "evaluationTable";
        ContentDAO dao = new ContentDAO(this.conn);
        String method = this.planVo.getString("method");
        if (method == null || method.trim().length() == 0) {
            method = "1";
        }
        RowSet rowSet = null;
        try {
            String CheckInvalidGrade = (String) ruleMap
                    .get("CheckInvalidGrade");
            String InvalidGrade = (String) ruleMap.get("InvalidGrade"); // 是否选择使用无效票数,
            // (True,
            // False；默认为False)
            String where_str = "";
            if ("1".equalsIgnoreCase(method) && CheckInvalidGrade != null
                    && "True".equalsIgnoreCase(CheckInvalidGrade)
                    && InvalidGrade != null && InvalidGrade.trim().length() > 0) {
                where_str = " and ( pt.degree_id is null or lower(pt.degree_id)<>'"
                        + InvalidGrade.toLowerCase() + "' )";
            }

            // 删除没有权限的打分纪录(能力素质按岗位素质模型测评的指标都是有权限的)
            if (!isByModelFlag) {
                delNoPrivRecord(pointList);
            }
            // 如果 为目标管理 ,将共性指标的考核结果插入 per_table_XXXX
            if (this.planVo.getInt("method") == 2) {
                createPerTableXXX();

                //

            }

            if (objectList.size() == 1 && isByModelFlag) {
                LazyDynaBean tempbean = (LazyDynaBean) objectList.get(0);
                String temp_object_id = (String) tempbean.get("object_id");
                where_str += " and pt.object_id='" + temp_object_id + "'";
            }

            createTempEvaluationTable(tableName, where_str);

            // 过滤统计范围
            if (ruleMap.get("NodeKnowDegree") != null) {
                String NodeKnowDegree = (String) ruleMap.get("NodeKnowDegree");
                String UseKnow = (String) ruleMap.get("UseKnow");
                if ("true".equalsIgnoreCase(NodeKnowDegree)
                        && "True".equalsIgnoreCase(UseKnow)) // 是否有了解程度
                {
                    String KnowText = ((String) ruleMap.get("KnowText")).trim();
                    dao.delete("delete from " + tableName
                            + " where know_id not in (" + KnowText
                            + ") or know_id is null", new ArrayList());
                }
            }
            String zeroByNull = (String) ruleMap.get("zeroByNull"); // 空票按零分计算
            if ("true".equals(zeroByNull)) {
                StringBuffer sql = new StringBuffer(
                        "INSERT INTO "
                                + tableName
                                + "(object_id, mainbody_id, point_id, score, body_id, know_id) ");
                sql.append(" select M.object_id, mainbody_id, S.point_id, S.score, M.body_id, M.know_id from ");
                if ("1".equals(method)) {
                    sql.append(" (select pt.object_id, pt.point_id, 0 AS score from per_table_"
                            + this.planid
                            + " pt,per_mainbody pm where pt.mainbody_id=pm.mainbody_id ");
                    sql.append(where_str);
                    sql.append(" and pt.object_id=pm.object_id and plan_id="
                            + this.planid + " ");
                    //if (this.compute_flag != 4)
                    //sql.append(" and (pm.status=2 or pm.status=3 ) ");
                    if (ruleMap.get("NodeKnowDegree") != null) {
                        String NodeKnowDegree = (String) ruleMap
                                .get("NodeKnowDegree");
                        String UseKnow = (String) ruleMap.get("UseKnow");
                        if ("true".equalsIgnoreCase(NodeKnowDegree)
                                && "True".equalsIgnoreCase(UseKnow)) // 是否有了解程度
                        {
                            String KnowText = ((String) ruleMap.get("KnowText"))
                                    .trim();
                            sql.append(" and ( pm.know_id  in (" + KnowText
                                    + ") or pm.know_id is null ) ");
                        }
                    }
                    sql.append(" group by pt.object_id, pt.point_id) S, ");

                } else if ("2".equals(method)) {
                    String _str = "pt.score";
                    if (this.task_score_str.trim().length() > 0) {
                        _str = "("
                                + this.task_score_str.trim().replaceAll(
                                "per_target_evaluation", "pt") + ")";
                    }

                    sql.append(" (select p04.p0401 point_id,0 score,pt.object_id from per_target_evaluation pt,p04,per_mainbody pm  where pt.plan_id="
                            + this.planid
                            + " and p04.plan_id="
                            + this.planid
                            + " and pt.p0400=p04.p0400 ");
                    sql.append("  and p04.Fromflag=2  and pt.mainbody_id=pm.mainbody_id and pt.object_id=pm.object_id and pm.plan_id="
                            + this.planid + " ");
                    //if (this.compute_flag != 4)
                    //sql.append(" and (pm.status=2 or pm.status=3 ) ");
                    if (ruleMap.get("NodeKnowDegree") != null) {
                        String NodeKnowDegree = (String) ruleMap
                                .get("NodeKnowDegree");
                        String UseKnow = (String) ruleMap.get("UseKnow");
                        if ("true".equalsIgnoreCase(NodeKnowDegree)
                                && "True".equalsIgnoreCase(UseKnow)) // 是否有了解程度
                        {
                            String KnowText = ((String) ruleMap.get("KnowText"))
                                    .trim();
                            sql.append(" and ( pm.know_id  in (" + KnowText
                                    + ") or pm.know_id is null ) ");
                        }
                    }

                    sql.append(" group by p04.p0401,pt.object_id) S, ");

                }
                sql.append(" per_mainbody M, per_plan_body B");
                sql.append(" where M.body_id=B.body_id AND M.plan_id="
                        + this.planid + " AND B.plan_id=" + this.planid
                        + " AND (B.lead Is NUll or B.lead<>1) ");
                sql.append(" AND M.object_id=S.object_id ");
                //if (this.compute_flag != 4)
                //sql.append(" AND (M.status in (2,3)) ");
                if ("1".equals(method)) {
                    sql.append(" AND NOT EXISTS(SELECT null FROM per_table_"
                            + this.planid
                            + " pt ,per_mainbody pm WHERE pt.mainbody_id=pm.mainbody_id   and pt.object_id=pm.object_id and  pm.plan_id="
                            + this.planid);
                    sql.append(where_str);
                    sql.append(" and ");
                    //if (this.compute_flag != 4)
                    //sql.append(" ( pm.status=2 or pm.status=3 )  and ");
                } else if ("2".equals(method)) {
                    sql.append(" AND NOT EXISTS(SELECT  null FROM per_target_evaluation  pt,per_mainbody pm,p04 WHERE pt.mainbody_id=pm.mainbody_id   and pt.object_id=pm.object_id and pm.plan_id="
                            + this.planid);
                    //if (this.compute_flag != 4)
                    //sql.append(" and (pm.status=2 or pm.status=3 ) ");
                    sql.append("  and p04.plan_id="
                            + this.planid
                            + " and pt.p0400=p04.p0400 and p04.Fromflag=2   and  pt.plan_id="
                            + this.planid + " and ");
                }
                sql.append(" M.object_id=pt.object_id AND M.mainbody_id=pt.mainbody_id ");
                if ("1".equals(method)) {
                    sql.append(" AND S.point_id = pt.point_id and pm.status=2)");
                } else {
                    sql.append(" AND S.point_id = p04.p0401 and pm.status=2)");
                }

                sql.append(" ORDER BY M.object_id, mainbody_id, S.point_id, M.body_id ");
                dao.update(sql.toString());
            }
            // if(this.planVo.getInt("method")!=2)
            {
                String UseWeight = (String) ruleMap.get("UseWeight");
                String UnLeadSingleAvg = (String) ruleMap
                        .get("UnLeadSingleAvg"); // 对空票作废的主体类中单项未评分的，按该项总平均分值和赋分权重计分
                if (UseWeight != null && "true".equalsIgnoreCase(UseWeight)) {
                    rowSet = dao
                            .search("select sum(flag) flag ,sum(lead) lead from per_plan_body where plan_id="
                                    + this.planid);
                    boolean isLead = false;
                    boolean isFlag = false;
                    if (rowSet.next()) {
                        if (rowSet.getInt("flag") > 0) {
                            isFlag = true;
                        }
                        if (rowSet.getInt("lead") > 0) {
                            isLead = true;
                        }
                    }

                    //空票按零计算的参数不勾时：目标考核没打分的考核主体模拟写入同一主体类别下打分主体的平均分。
                    if ((!"true".equalsIgnoreCase(zeroByNull) || isLead) && this.planVo.getInt("method") == 2 && !isLead && (UnLeadSingleAvg == null || !"true".equalsIgnoreCase(UnLeadSingleAvg))) {

                        String sql = "select d.object_id,d.body_id,d.mainbody_id from "
                                + "(  select a.object_id,b.body_id from per_target_evaluation a,per_mainbody b "
                                + " where a.plan_id=b.plan_id and a.mainbody_id=b.mainbody_id and a.plan_id=" + this.planid
                                + " group by a.object_id,b.body_id ) c,per_mainbody d "
                                + " where c.object_id=d.object_id and c.body_id=d.body_id and  d.plan_id=" + this.planid + " and nullif(d.status,0) is null "
                                + " and not exists (select null from per_target_evaluation where plan_id=" + this.planid + " and d.object_id=per_target_evaluation.object_id and "
                                + " d.mainbody_id=per_target_evaluation.mainbody_id    ) order by  d.object_id,d.body_id";
                        rowSet = dao.search(sql);
                        String key = "";
                        ArrayList list = new ArrayList();
                        HashMap noScoreMap = new HashMap();
                        while (rowSet.next()) {
                            String object_id = rowSet.getString("object_id");
                            String body_id = rowSet.getString("body_id");
                            String mainbody_id = rowSet.getString("mainbody_id");
                            if (key.length() == 0) {
                                key = object_id + "_" + body_id;
                            }
                            if (key.equals(object_id + "_" + body_id)) {
                                list.add(mainbody_id);
                            } else {
                                noScoreMap.put(key, list);
                                key = object_id + "_" + body_id;
                                list = new ArrayList();
                                list.add(mainbody_id);
                            }
                        }
                        noScoreMap.put(key, list);


                        sql = "select a.object_id,a.p0400,b.body_id,avg(a.score) avgscore from per_target_evaluation a,per_mainbody b "
                                + " where a.plan_id=b.plan_id and a.mainbody_id=b.mainbody_id and a.plan_id=" + this.planid
                                + " group by a.object_id,a.p0400,b.body_id";
                        rowSet = dao.search(sql);
                        while (rowSet.next()) {
                            String object_id = rowSet.getString("object_id");
                            String p0400 = rowSet.getString("p0400");
                            String body_id = rowSet.getString("body_id");
                            String avgscore = rowSet.getString("avgscore");


                            if (noScoreMap.get(object_id + "_" + body_id) != null) {
                                ArrayList tmpList = (ArrayList) noScoreMap.get(object_id + "_" + body_id);
                                for (int i = 0; i < tmpList.size(); i++) {
                                    String mainbody_id = (String) tmpList.get(i);

                                    ArrayList valueList = new ArrayList();
                                    IDGenerator idg = new IDGenerator(2, this.conn);
                                    String id = idg.getId("per_target_evaluation.id");
                                    valueList.add(new Integer(id));
                                    valueList.add(new Integer(this.planid));
                                    valueList.add(object_id);
                                    valueList.add(mainbody_id);
                                    valueList.add(p0400);
                                    valueList.add(PubFunc.round(avgscore, 4));
                                    valueList.add("~");
                                    addList.add(valueList);
                                }
                            }

                        }
                        if (addList.size() > 0) {
                            String _sql = "insert into per_target_evaluation(id,plan_id,object_id,mainbody_id,p0400,score,degree_id) values (?,?,?,?,?,?,?)";
                            dao.batchInsert(_sql, addList);
                        }

                    }


                    // 打分数据360计划保存在per_table_xxx中 目标计划保存在per_target_evaluation
                    if (isLead) // 空票不作废
                    {
                        StringBuffer sql = new StringBuffer(
                                "INSERT INTO "
                                        + tableName
                                        + "(object_id, mainbody_id, point_id, score, body_id, know_id) ");
                        sql.append(" select M.object_id, mainbody_id, S.point_id, S.score, M.body_id, M.know_id ");
                        if ("1".equals(method)) {
                            sql.append(" from (select pt.object_id, pt.point_id, avg("
                                    + Sql_switcher.isnull("pt.score", "0")
                                    + ") AS score from per_table_"
                                    + this.planid
                                    + " pt,per_mainbody pm where pt.mainbody_id=pm.mainbody_id ");
                            sql.append(" and pt.object_id=pm.object_id and plan_id="
                                    + this.planid);
                            sql.append(where_str);
                            if (this.compute_flag != 4) {
                                sql.append(" and (pm.status=2 or pm.status=3) ");
                            }
                            if (this.batchComput != null
                                    && this.batchComput.trim().length() > 0
                                    && "True"
                                    .equalsIgnoreCase(this.batchComput)) {
                                sql.append(" and (pm.status=2 or pm.status=3 or pm.mainbody_id='"
                                        + this.presentMainbody_id + "' ) ");
                            }
                            if (ruleMap.get("NodeKnowDegree") != null) {
                                String NodeKnowDegree = (String) ruleMap
                                        .get("NodeKnowDegree");
                                String UseKnow = (String) ruleMap
                                        .get("UseKnow");
                                if ("true".equalsIgnoreCase(NodeKnowDegree)
                                        && "True".equalsIgnoreCase(UseKnow)) // 是否有了解程度
                                {
                                    String KnowText = ((String) ruleMap
                                            .get("KnowText")).trim();
                                    sql.append(" and ( pm.know_id  in ("
                                            + KnowText
                                            + ") or pm.know_id is null ) ");
                                }
                            }

                            sql.append(" group by pt.object_id, pt.point_id) S, ");

                        } else if ("2".equals(method)) {
                            // sql.append(" from (select p04.p0401 point_id,avg(pt.score) score,pt.object_id from per_target_evaluation pt,p04 where pt.plan_id="+this.planid+" and p04.plan_id="+this.planid+" and pt.p0400=p04.p0400 ");
                            // sql.append(" group by p04.p0401,pt.object_id) S, ");
                            String _str = "pt.score";
                            if (this.task_score_str.trim().length() > 0) {
                                _str = "("
                                        + this.task_score_str
                                        .trim()
                                        .replaceAll(
                                                "per_target_evaluation",
                                                "pt") + ")";
                            }

                            sql.append(" from (select p04.p0401 point_id,avg("
                                    + Sql_switcher.isnull(_str, "0")
                                    + ") score,pt.object_id from per_target_evaluation pt,p04,per_mainbody pm where pt.plan_id="
                                    + this.planid + " and p04.plan_id="
                                    + this.planid + " and pt.p0400=p04.p0400 ");
                            sql.append(" and p04.Fromflag=2  and pt.mainbody_id=pm.mainbody_id and pt.object_id=pm.object_id and pm.plan_id="
                                    + this.planid);
                            if (this.compute_flag != 4) {
                                sql.append(" and (pm.status=2 or pm.status=3 )");
                            }
                            if (this.batchComput != null
                                    && this.batchComput.trim().length() > 0
                                    && "True"
                                    .equalsIgnoreCase(this.batchComput)) {
                                sql.append(" and (pm.status=2 or pm.status=3 or pm.mainbody_id='"
                                        + this.presentMainbody_id + "' ) ");
                            }
                            if (ruleMap.get("NodeKnowDegree") != null) {
                                String NodeKnowDegree = (String) ruleMap
                                        .get("NodeKnowDegree");
                                String UseKnow = (String) ruleMap
                                        .get("UseKnow");
                                if ("true".equalsIgnoreCase(NodeKnowDegree)
                                        && "True".equalsIgnoreCase(UseKnow)) // 是否有了解程度
                                {
                                    String KnowText = ((String) ruleMap
                                            .get("KnowText")).trim();
                                    sql.append(" and ( pm.know_id  in ("
                                            + KnowText
                                            + ") or pm.know_id is null ) ");
                                }
                            }

                            sql.append(" group by p04.p0401,pt.object_id) S, ");

                        }
                        sql.append(" per_mainbody M, per_plan_body B ");
                        sql.append(" where M.body_id=B.body_id AND M.plan_id="
                                + this.planid + " AND B.plan_id=" + this.planid);
                        sql.append(" AND M.object_id=S.object_id AND B.lead=1");
                        if ("1".equals(method)) {
                            sql.append(" AND NOT EXISTS(SELECT null FROM per_table_"
                                    + this.planid
                                    + " pt,per_mainbody pm WHERE pt.mainbody_id=pm.mainbody_id   and pt.object_id=pm.object_id and  pm.plan_id="
                                    + this.planid);
                            sql.append(where_str);
                            sql.append(" and ");
                            if (this.compute_flag != 4) {
                                sql.append(" (pm.status=2 or pm.status=3 ) and ");
                            }
                            if (this.batchComput != null
                                    && this.batchComput.trim().length() > 0
                                    && "True"
                                    .equalsIgnoreCase(this.batchComput)) {
                                sql.append(" (pm.status=2 or pm.status=3 or pm.mainbody_id='"
                                        + this.presentMainbody_id + "' ) and ");
                            }
                        } else if ("2".equals(method)) {
                            sql.append(" AND NOT EXISTS(SELECT null FROM per_target_evaluation pt,p04,per_mainbody pm WHERE pt.mainbody_id=pm.mainbody_id   and pt.object_id=pm.object_id and pm.plan_id="
                                    + this.planid);
                            if (this.compute_flag != 4) {
                                sql.append(" and (pm.status=2  or pm.status=3 ) ");
                            }
                            if (this.batchComput != null
                                    && this.batchComput.trim().length() > 0
                                    && "True"
                                    .equalsIgnoreCase(this.batchComput)) {
                                sql.append(" and (pm.status=2  or pm.status=3 or pm.mainbody_id='"
                                        + this.presentMainbody_id + "' ) ");
                            }
                            sql.append(" and p04.plan_id="
                                    + this.planid
                                    + " and pt.p0400=p04.p0400 and p04.Fromflag=2  and  pt.plan_id="
                                    + this.planid + " and ");
                        }
                        sql.append("  M.object_id=pt.object_id AND M.mainbody_id=pt.mainbody_id ");
                        if ("1".equals(method)) {
                            sql.append(" AND S.point_id = pt.point_id)");
                        } else {
                            sql.append(" AND S.point_id = p04.p0401)");
                        }

                        sql.append(" ORDER BY M.object_id, mainbody_id, S.point_id, M.body_id ");
                        dao.update(sql.toString());
                    }
                    if (isFlag) // 此类有分
                    {

                        StringBuffer sql = new StringBuffer(
                                "INSERT INTO "
                                        + tableName
                                        + "(object_id, mainbody_id, point_id, score, body_id )"); // ,
                        // know_id)
                        // ");
                        sql.append(" select B.object_id, 'x' AS mainbody_id, S.point_id, S.score, B.body_id "); // ,
                        // 1
                        // AS
                        // know_id
                        // ");
                        sql.append(" FROM (select O.object_id, B.body_id ");
                        sql.append(" from per_object O, per_plan_body B ");
                        sql.append(" where O.plan_id=" + this.planid
                                + " AND B.plan_id=" + this.planid
                                + " AND B.flag=1) B , ");
                        if ("1".equals(method)) {
                            // sql.append(" (select object_id, point_id, avg(score) as score ");
                            // sql.append(" from per_table_" + this.planid);
                            // sql.append(" GROUP BY object_id, point_id) S ");

                            sql.append(" (select pt.object_id, pt.point_id, avg("
                                    + Sql_switcher.isnull("pt.score", "0")
                                    + ") AS score from per_table_"
                                    + this.planid
                                    + " pt,per_mainbody pm where pt.mainbody_id=pm.mainbody_id ");
                            sql.append(" and pt.object_id=pm.object_id and plan_id="
                                    + this.planid);
                            sql.append(where_str);
                            if (this.compute_flag != 4) {
                                sql.append(" and (pm.status=2 or pm.status=3 )");
                            }
                            if (this.batchComput != null
                                    && this.batchComput.trim().length() > 0
                                    && "True"
                                    .equalsIgnoreCase(this.batchComput)) {
                                sql.append(" and (pm.status=2 or pm.status=3 or pm.mainbody_id='"
                                        + this.presentMainbody_id + "' ) ");
                            }

                            if (ruleMap.get("NodeKnowDegree") != null) {
                                String NodeKnowDegree = (String) ruleMap
                                        .get("NodeKnowDegree");
                                String UseKnow = (String) ruleMap
                                        .get("UseKnow");
                                if ("true".equalsIgnoreCase(NodeKnowDegree)
                                        && "True".equalsIgnoreCase(UseKnow)) // 是否有了解程度
                                {
                                    String KnowText = ((String) ruleMap
                                            .get("KnowText")).trim();
                                    sql.append(" and ( pm.know_id  in ("
                                            + KnowText
                                            + ") or pm.know_id is null ) ");
                                }
                            }

                            sql.append(" group by pt.object_id, pt.point_id) S ");

                        } else if ("2".equals(method)) {
                            // sql.append(" (select p04.p0401 point_id,avg(pt.score) score,pt.object_id from per_target_evaluation pt,p04 where pt.plan_id="+this.planid+" and p04.plan_id="+this.planid+" and pt.p0400=p04.p0400 ");
                            // sql.append(" group by p04.p0401,pt.object_id) S ");

                            String _str = "pt.score";
                            if (this.task_score_str.trim().length() > 0) {
                                _str = "("
                                        + this.task_score_str
                                        .trim()
                                        .replaceAll(
                                                "per_target_evaluation",
                                                "pt") + ")";
                            }

                            sql.append(" (select p04.p0401 point_id,avg("
                                    + Sql_switcher.isnull(_str, "0")
                                    + ") score,pt.object_id from per_target_evaluation pt,p04,per_mainbody pm where pt.plan_id="
                                    + this.planid + " and p04.plan_id="
                                    + this.planid + " and pt.p0400=p04.p0400 ");
                            sql.append("  and p04.Fromflag=2  and pt.mainbody_id=pm.mainbody_id and pt.object_id=pm.object_id and pm.plan_id="
                                    + this.planid + " ");
                            if (this.compute_flag != 4) {
                                sql.append(" and ( pm.status=2  or pm.status=3 ) ");
                            }
                            if (this.batchComput != null
                                    && this.batchComput.trim().length() > 0
                                    && "True"
                                    .equalsIgnoreCase(this.batchComput)) {
                                sql.append(" and ( pm.status=2  or pm.status=3 or pm.mainbody_id='"
                                        + this.presentMainbody_id + "' ) ");
                            }
                            if (ruleMap.get("NodeKnowDegree") != null) {
                                String NodeKnowDegree = (String) ruleMap
                                        .get("NodeKnowDegree");
                                String UseKnow = (String) ruleMap
                                        .get("UseKnow");
                                if ("true".equalsIgnoreCase(NodeKnowDegree)
                                        && "True".equalsIgnoreCase(UseKnow)) // 是否有了解程度
                                {
                                    String KnowText = ((String) ruleMap
                                            .get("KnowText")).trim();
                                    sql.append(" and ( pm.know_id  in ("
                                            + KnowText
                                            + ") or pm.know_id is null ) ");
                                }
                            }
                            sql.append(" group by p04.p0401,pt.object_id) S ");
                        }

                        sql.append(" WHERE B.object_id=s.object_id ");
                        sql.append(" AND not Exists (select null from "
                                + tableName);
                        sql.append(" where object_id=B.object_id AND body_id=B.body_id AND point_id=S.point_id) ");
                        sql.append(" ORDER BY B.object_id, S.point_id, B.body_id ");
                        dao.update(sql.toString());
                    }
                    if (UnLeadSingleAvg != null
                            && "true".equalsIgnoreCase(UnLeadSingleAvg)) // 对空票作废的主体类中单项未评分的，按该项总平均分值和赋分权重计分
                    {

                        StringBuffer sql = new StringBuffer(
                                "INSERT INTO "
                                        + tableName
                                        + "(object_id, mainbody_id, point_id, score, body_id, know_id) ");
                        sql.append(" select M.object_id, mainbody_id, S.point_id, S.score, M.body_id, M.know_id from ");
                        if ("1".equals(method)) {
                            // sql.append(" (select object_id, point_id, avg(score) AS score ");
                            // sql.append(" from per_table_" + this.planid +
                            // " group by object_id, point_id) S, ");

                            sql.append(" (select pt.object_id, pt.point_id, avg("
                                    + Sql_switcher.isnull("pt.score", "0")
                                    + ") AS score from per_table_"
                                    + this.planid
                                    + " pt,per_mainbody pm where pt.mainbody_id=pm.mainbody_id ");
                            sql.append(where_str);
                            sql.append(" and pt.object_id=pm.object_id and plan_id="
                                    + this.planid + " ");
                            if (this.compute_flag != 4) {
                                sql.append(" and (pm.status=2 or pm.status=3 ) ");
                            }
                            if (this.batchComput != null
                                    && this.batchComput.trim().length() > 0
                                    && "True"
                                    .equalsIgnoreCase(this.batchComput)) {
                                sql.append(" and (pm.status=2 or pm.status=3 or pm.mainbody_id='"
                                        + this.presentMainbody_id + "' ) ");
                            }
                            if (ruleMap.get("NodeKnowDegree") != null) {
                                String NodeKnowDegree = (String) ruleMap
                                        .get("NodeKnowDegree");
                                String UseKnow = (String) ruleMap
                                        .get("UseKnow");
                                if ("true".equalsIgnoreCase(NodeKnowDegree)
                                        && "True".equalsIgnoreCase(UseKnow)) // 是否有了解程度
                                {
                                    String KnowText = ((String) ruleMap
                                            .get("KnowText")).trim();
                                    sql.append(" and ( pm.know_id  in ("
                                            + KnowText
                                            + ") or pm.know_id is null ) ");
                                }
                            }
                            sql.append(" group by pt.object_id, pt.point_id) S, ");

                        } else if ("2".equals(method)) {
                            // sql.append(" (select p04.p0401 point_id,avg(pt.score) score,pt.object_id from per_target_evaluation pt,p04 where pt.plan_id="+this.planid+" and p04.plan_id="+this.planid+" and pt.p0400=p04.p0400 ");
                            // sql.append(" group by p04.p0401,pt.object_id) S, ");
                            String _str = "pt.score";
                            if (this.task_score_str.trim().length() > 0) {
                                _str = "("
                                        + this.task_score_str
                                        .trim()
                                        .replaceAll(
                                                "per_target_evaluation",
                                                "pt") + ")";
                            }

                            sql.append(" (select p04.p0401 point_id,avg("
                                    + Sql_switcher.isnull(_str, "0")
                                    + ") score,pt.object_id from per_target_evaluation pt,p04,per_mainbody pm  where pt.plan_id="
                                    + this.planid + " and p04.plan_id="
                                    + this.planid + " and pt.p0400=p04.p0400 ");
                            //sql.append("  and p04.Fromflag=2  and pt.mainbody_id=pm.mainbody_id and pt.object_id=pm.object_id and pm.plan_id="
                            sql.append(" and pt.mainbody_id=pm.mainbody_id and pt.object_id=pm.object_id and pm.plan_id="
                                    + this.planid + " ");
                            if (this.compute_flag != 4) {
                                sql.append(" and (pm.status=2 or pm.status=3 ) ");
                            }
                            if (this.batchComput != null
                                    && this.batchComput.trim().length() > 0
                                    && "True"
                                    .equalsIgnoreCase(this.batchComput)) {
                                sql.append(" and (pm.status=2 or pm.status=3 or pm.mainbody_id='"
                                        + this.presentMainbody_id + "' ) ");
                            }
                            if (ruleMap.get("NodeKnowDegree") != null) {
                                String NodeKnowDegree = (String) ruleMap
                                        .get("NodeKnowDegree");
                                String UseKnow = (String) ruleMap
                                        .get("UseKnow");
                                if ("true".equalsIgnoreCase(NodeKnowDegree)
                                        && "True".equalsIgnoreCase(UseKnow)) // 是否有了解程度
                                {
                                    String KnowText = ((String) ruleMap
                                            .get("KnowText")).trim();
                                    sql.append(" and ( pm.know_id  in ("
                                            + KnowText
                                            + ") or pm.know_id is null ) ");
                                }
                            }

                            sql.append(" group by p04.p0401,pt.object_id) S, ");

                        }
                        sql.append(" per_mainbody M, per_plan_body B");
                        sql.append(" where M.body_id=B.body_id AND M.plan_id="
                                + this.planid + " AND B.plan_id=" + this.planid
                                + " AND (B.lead Is NUll or B.lead<>1) ");
                        sql.append(" AND M.object_id=S.object_id ");
                        if (this.compute_flag != 4) {
                            sql.append(" AND (M.status in (2,3)) ");
                        }
                        if (this.batchComput != null
                                && this.batchComput.trim().length() > 0
                                && "True".equalsIgnoreCase(this.batchComput)) {
                            sql.append(" AND (M.status=2 or M.status=3 or M.mainbody_id='"
                                    + this.presentMainbody_id + "' ) ");
                        }
                        if ("1".equals(method)) {
                            sql.append(" AND NOT EXISTS(SELECT null FROM per_table_"
                                    + this.planid
                                    + " pt ,per_mainbody pm WHERE pt.mainbody_id=pm.mainbody_id   and pt.object_id=pm.object_id and  pm.plan_id="
                                    + this.planid);
                            sql.append(where_str);
                            sql.append(" and ");
                            if (this.compute_flag != 4) {
                                sql.append(" ( pm.status=2 or pm.status=3 )  and ");
                            }
                            if (this.batchComput != null
                                    && this.batchComput.trim().length() > 0
                                    && "True"
                                    .equalsIgnoreCase(this.batchComput)) {
                                sql.append(" ( pm.status=2 or pm.status=3 or pm.mainbody_id='"
                                        + this.presentMainbody_id + "' ) and ");
                            }
                        } else if ("2".equals(method)) {
                            sql.append(" AND NOT EXISTS(SELECT  null FROM per_target_evaluation  pt,per_mainbody pm,p04 WHERE pt.mainbody_id=pm.mainbody_id   and pt.object_id=pm.object_id and pm.plan_id="
                                    + this.planid);
                            if (this.compute_flag != 4) {
                                sql.append(" and (pm.status=2 or pm.status=3 ) ");
                            }
                            if (this.batchComput != null
                                    && this.batchComput.trim().length() > 0
                                    && "True"
                                    .equalsIgnoreCase(this.batchComput)) {
                                sql.append(" and (pm.status=2 or pm.status=3 or pm.mainbody_id='"
                                        + this.presentMainbody_id + "' ) ");
                            }
                            sql.append("  and p04.plan_id="
                                    + this.planid
                                    + " and pt.p0400=p04.p0400 and p04.Fromflag=2   and  pt.plan_id="
                                    + this.planid + " and ");
                        }
                        sql.append(" M.object_id=pt.object_id AND M.mainbody_id=pt.mainbody_id ");
                        if ("1".equals(method)) {
                            sql.append(" AND S.point_id = pt.point_id)");
                        } else {
                            sql.append(" AND S.point_id = p04.p0401)");
                        }

                        sql.append(" ORDER BY M.object_id, mainbody_id, S.point_id, M.body_id ");
                        dao.update(sql.toString());

                        // 删除没有权限的打分纪录
                        if (!isByModelFlag) {
                            delNoPrivRecord1(pointList, tableName);
                        }
                    }
                }

                if (rowSet != null) {
                    rowSet.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void delNoPrivRecord1(ArrayList pointList, String tableName) {
        LazyDynaBean abean = null;
        StringBuffer subSql = new StringBuffer("");
        ContentDAO dao = new ContentDAO(this.conn);
        String method = this.planVo.getString("method");
        if (method == null) {
            method = "1";
        }
        RowSet rowSet = null;
        try {
            if ("1".equals(method)) // 360计划删除没有指标权限的打分纪录
            {
                for (int i = 0; i < pointList.size(); i++) {
                    abean = (LazyDynaBean) pointList.get(i);
                    String point_id = (String) abean.get("point_id");
                    subSql.append(",sum(C_" + point_id + ")/count(id)  C_"
                            + point_id);
                }
                rowSet = dao.search("select " + subSql.substring(1)
                        + " from per_pointpriv_" + this.planid);
                ArrayList a_pointlist = new ArrayList();
                if (rowSet.next()) {
                    for (int i = 0; i < pointList.size(); i++) {
                        abean = (LazyDynaBean) pointList.get(i);
                        String point_id = (String) abean.get("point_id");
                        if (rowSet.getInt("C_" + point_id) == 0) {
                            a_pointlist.add(abean);
                        }
                    }
                }
                for (int i = 0; i < a_pointlist.size(); i++) {
                    abean = (LazyDynaBean) a_pointlist.get(i);
                    String point_id = (String) abean.get("point_id");

                    StringBuffer sql = new StringBuffer("delete from "
                            + tableName + "  where exists ( ");
                    sql.append(" select null from (select object_id,mainbody_id from per_pointpriv_"
                            + this.planid
                            + " where C_"
                            + point_id
                            + "=0) temp ");
                    sql.append(" where " + tableName
                            + ".object_id=temp.object_id and " + tableName
                            + ".mainbody_id=temp.mainbody_id ");
                    sql.append(" and " + tableName + ".point_id='" + point_id
                            + "' )");
                    dao.update(sql.toString());

                }
            }
            if (rowSet != null) {
                rowSet.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 删除没有权限的打分纪录
     */
    public void delNoPrivRecord(ArrayList pointList) {
        LazyDynaBean abean = null;
        StringBuffer subSql = new StringBuffer("");
        ContentDAO dao = new ContentDAO(this.conn);
        String method = this.planVo.getString("method");
        if (method == null) {
            method = "1";
        }
        // method = method==null?"1":"2";
        RowSet rowSet = null;
        try {
            if ("1".equals(method)) // 360计划删除没有指标权限的打分纪录
            {
                for (int i = 0; i < pointList.size(); i++) {
                    abean = (LazyDynaBean) pointList.get(i);
                    String point_id = (String) abean.get("point_id");
                    subSql.append(",sum(C_" + point_id + ")/count(id)  C_"
                            + point_id);
                }
                rowSet = dao.search("select " + subSql.substring(1)
                        + " from per_pointpriv_" + this.planid);
                ArrayList a_pointlist = new ArrayList();
                if (rowSet.next()) {
                    for (int i = 0; i < pointList.size(); i++) {
                        abean = (LazyDynaBean) pointList.get(i);
                        String point_id = (String) abean.get("point_id");
                        if (rowSet.getInt("C_" + point_id) == 0) {
                            a_pointlist.add(abean);
                        }
                    }
                }
                for (int i = 0; i < a_pointlist.size(); i++) {
                    abean = (LazyDynaBean) a_pointlist.get(i);
                    String point_id = (String) abean.get("point_id");

                    StringBuffer sql = new StringBuffer(
                            "delete from per_table_" + this.planid
                                    + "  where exists ( ");
                    sql.append(" select null from (select object_id,mainbody_id from per_pointpriv_"
                            + this.planid
                            + " where C_"
                            + point_id
                            + "=0) temp ");
                    sql.append(" where per_table_" + this.planid
                            + ".object_id=temp.object_id and per_table_"
                            + this.planid + ".mainbody_id=temp.mainbody_id ");
                    sql.append(" and per_table_" + this.planid + ".point_id='"
                            + point_id + "' )");
                    dao.update(sql.toString());

                }
            } else if ("2".equals(method)) // 目标管理 删除没有项目权限的打分纪录
            {
                DbWizard dbWizard = new DbWizard(this.conn);
                if (dbWizard.isExistTable("PER_ITEMPRIV_" + planid, false)) {

                    String sqlStr = "select item_id from per_template_item where template_id = (select template_id from per_plan where plan_id="
                            + planid + ")   and  child_id is null ";
                    rowSet = dao.search(sqlStr);
                    ArrayList itemList = new ArrayList();
                    StringBuffer buf = new StringBuffer();
                    ArrayList noprivitemList = new ArrayList();
                    while (rowSet.next()) {
                        itemList.add(rowSet.getString("item_id"));
                        buf.append("C_" + rowSet.getString("item_id")
                                + "=0 or ");
                    }
                    sqlStr = "select * from per_itempriv_" + this.planid
                            + " where " + buf.substring(0, buf.length() - 3);
                    rowSet = dao.search(sqlStr);
                    while (rowSet.next()) {
                        String object_id = rowSet.getString("object_id");
                        String body_id = rowSet.getString("body_id");
                        for (int i = 0; i < itemList.size(); i++) {
                            String item_id = (String) itemList.get(i);
                            if (rowSet.getInt("C_" + item_id) == 0) {

                                // 李振伟2010-07-19
                                StringBuffer delBuf = new StringBuffer();
                                delBuf.append("delete from per_target_evaluation where per_target_evaluation.plan_id="
                                        + this.planid
                                        + " and per_target_evaluation.object_id='"
                                        + object_id + "' ");
                                delBuf.append("and mainbody_id in (select mainbody_id from per_mainbody where plan_id="
                                        + this.planid
                                        + " and body_id="
                                        + body_id
                                        + " and object_id='"
                                        + object_id + "' )");
                                delBuf.append("and exists(select null from p04 where per_target_evaluation.p0400=p04.p0400 and per_target_evaluation.plan_id="
                                        + this.planid
                                        + " and p04.plan_id="
                                        + this.planid
                                        + " and p04.item_id="
                                        + item_id + " )");
                                dao.update(delBuf.toString());

                            }
                        }
                    }
                }
            }
            if (rowSet != null) {
                rowSet.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 判断per_table_xxx结果表是否存在,不存在则新建 同时将 目标结果表里的共性指标结果值塞入其中
     */
    public void createPerTableXXX() {
        DbSecurityImpl dbS = new DbSecurityImpl();
        PreparedStatement ps = null;
        try {
            DbWizard dbWizard = new DbWizard(this.conn);
            ContentDAO dao = new ContentDAO(this.conn);
            String tabname = "per_table_" + this.planid;
            if (dbWizard.isExistTable(tabname, false)) {
                dao.delete("delete from " + tabname, new ArrayList());
            } else {
                Table table = new Table(tabname);
                table.addField(getField("id", "I", 10, true));
                table.addField(getField("object_id", "A", 30, false));
                table.addField(getField("mainbody_id", "A", 30, false));
                table.addField(getField("point_id", "A", 30, false));
                table.addField(getField("score", "N", 12, false));
                table.addField(getField("amount", "N", 12, false));
                table.addField(getField("degree_id", "A", 1, false));
                dbWizard.createTable(table);
                DBMetaModel dbmodel = new DBMetaModel(this.conn);
                dbmodel.reloadTableModel(tabname);
            }
            // task_score_str
            String sql = "select pte.object_id,pte.mainbody_id";
            if (this.task_score_str.trim().length() > 0) {
                sql += ",("
                        + this.task_score_str.trim().replaceAll(
                        "per_target_evaluation", "pte") + ") score";
            } else {
                sql += ",pte.score";
            }
            sql += ",pte.amount,pte.degree_id,p04.p0401 from per_target_evaluation pte,p04,per_mainbody pm "
                    + " where pte.p0400=p04.p0400  and pte.object_id=pm.object_id and pte.mainbody_id=pm.mainbody_id ";
            if (compute_flag != 4) {
                sql += " and (pm.status=2 or pm.status=3 ) ";
            }
            if (this.batchComput != null
                    && this.batchComput.trim().length() > 0
                    && "True".equalsIgnoreCase(this.batchComput)) {
                sql += " and (pm.status=2 or pm.status=3 or pm.mainbody_id='"
                        + this.presentMainbody_id + "' ) ";
            }
            sql += " and p04.Fromflag=2 " + " and  pte.plan_id=" + this.planid
                    + " and p04.plan_id=" + this.planid + "  and pm.plan_id="
                    + this.planid + " order by  pte.object_id,pte.mainbody_id";
            RowSet rowSet2 = dao.search(sql);
            String sql1 = "insert into "
                    + tabname
                    + " (id,object_id,mainbody_id,score,amount,point_id,degree_id) values (?,?,?,?,?,?,?)";
            ps = this.conn
                    .prepareStatement(sql1);
            while (rowSet2.next()) {
                IDGenerator idg = new IDGenerator(2, this.conn);
                String id = idg.getId("per_table_xxx.id");
                ps.setInt(1, Integer.parseInt(id));
                ps.setString(2, rowSet2.getString("object_id"));
                ps.setString(3, rowSet2.getString("mainbody_id"));
                ps.setFloat(4, rowSet2.getFloat("score"));
                ps.setFloat(5, rowSet2.getFloat("amount"));
                ps.setString(6, rowSet2.getString("p0401"));
                ps.setString(7, rowSet2.getString("degree_id"));
                ps.addBatch();
            }
            // 打开Wallet
            dbS.open(this.conn, sql1);
            ps.executeBatch();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            PubFunc.closeResource(ps);
            try {
                // 关闭Wallet
                dbS.close(this.conn);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public void inserGoalItemValue(String item_id, String object_id) {

        try {
            String itemid = "a0100";
            if (this.planVo.getInt("object_type") != 2) {
                itemid = "b0110";
            }

            String tabname = "absRankTable";
            String sql = " SELECT SUM(A.Score*P0415) AS Score FROM P04,"
                    + " (SELECT P0400, SUM(B.Score*abs_rank)/SUM(abs_Rank) AS Score FROM per_target_evaluation B, "
                    + tabname
                    + " C"
                    + " WHERE plan_id="
                    + this.planid
                    + " AND B.Object_id='"
                    + object_id
                    + "' "
                    + " AND B.object_id=C.object_id AND B.mainbody_id=C.mainbody_id GROUP BY P0400) A "
                    + " WHERE plan_id=" + this.planid + " AND " + itemid + "='"
                    + object_id + "' AND item_id=" + item_id
                    + " AND P04.P0400=A.P0400 ";
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = dao.search(sql);
            if (rowSet.next()) {
                String score = rowSet.getString(1);
                if (score != null) {
                    dao.update("update per_result_" + this.planid + " set T_"
                            + item_id + "=" + score + " where object_id='"
                            + object_id + "'");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    // 创建目标计划 考核对象的绝对权重
    public void createAbsRankP04Table() {
        try {
            String tabname = "absRankTable";
            DbWizard dbWizard = new DbWizard(this.conn);
            ContentDAO dao = new ContentDAO(this.conn);
            if (dbWizard.isExistTable(tabname, false)) {
                dao.delete("delete from " + tabname, new ArrayList());
            } else {
                Table table = new Table(tabname);
                table.addField(getField("object_id", "A", 30, false));
                table.addField(getField("mainbody_id", "A", 30, false));
                table.addField(getField("body_id", "I", 12, false));
                table.addField(getField("absRank", "N", 12, false));
                table.addField(getField("objid", "I", 12, false));

                dbWizard.createTable(table);
                DBMetaModel dbmodel = new DBMetaModel(this.conn);
                dbmodel.reloadTableModel(tabname);
            }
            String sql = "INSERT INTO " + tabname
                    + "(object_id, mainbody_id, body_id)"
                    + "SELECT object_id, mainbody_id, body_id "
                    + " FROM per_mainbody B " + " WHERE B.plan_id="
                    + this.planid;
            dao.update(sql);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 建立评分临时表
     */
    public void createTempEvaluationTable(String tabname, String where_str) {

        try {
            DbWizard dbWizard = new DbWizard(this.conn);
            ContentDAO dao = new ContentDAO(this.conn);
            if (dbWizard.isExistTable(tabname, false)) {
                dao.delete("delete from " + tabname, new ArrayList());
            } else {
                Table table = new Table(tabname);
                table.addField(getField("object_id", "A", 30, false));
                table.addField(getField("mainbody_id", "A", 30, false));
                table.addField(getField("point_id", "A", 30, false));
                table.addField(getField("score", "N", 12, false));
                table.addField(getField("body_id", "I", 10, false));
                table.addField(getField("know_id", "I", 10, false));
                dbWizard.createTable(table);
                DBMetaModel dbmodel = new DBMetaModel(this.conn);
                dbmodel.reloadTableModel(tabname);
            }
			/*

			if (dbWizard.isExistTable(tabname, false)) {
				dbWizard.dropTable(tabname);
				// dao.delete("delete from " + tabname, new ArrayList());
			}
			// else
			{
				Table table = new Table(tabname);
				table.addField(getField("object_id", "A", 30, false));
				table.addField(getField("mainbody_id", "A", 30, false));
				table.addField(getField("point_id", "A", 30, false));
				table.addField(getField("score", "N", 12, false));
				table.addField(getField("body_id", "I", 10, false));
				table.addField(getField("know_id", "I", 10, false));
				dbWizard.createTable(table);
				DBMetaModel dbmodel = new DBMetaModel(this.conn);
				dbmodel.reloadTableModel(tabname);
			}*/
            String sub_sql = "";

            if (this.planVo.getInt("method") == 2) {
                sub_sql = "select pt.object_id,pt.mainbody_id,p04.p0401,pt.score,pm.body_id,pm.know_id "
                        + " from per_target_evaluation pt,per_mainbody pm,p04 "
                        + " where pt.object_id=pm.object_id and pt.mainbody_id=pm.mainbody_id and pt.p0400=p04.p0400 ";
                if (this.compute_flag != 4) {
                    sub_sql += " and (pm.status=2 or pm.status=3 ) ";
                }
                if (this.batchComput != null
                        && this.batchComput.trim().length() > 0
                        && "True".equalsIgnoreCase(this.batchComput)) {
                    sub_sql += " and (pm.status=2 or pm.status=3 or pm.mainbody_id='"
                            + this.presentMainbody_id + "' ) ";
                }
                sub_sql += " and pm.plan_id=" + this.planid + " and pt.plan_id=" + this.planid + " and p04.plan_id=" + this.planid;
                sub_sql += where_str;

            } else {
                sub_sql = "select pt.object_id,pt.mainbody_id,pt.point_id,pt.score,pm.body_id,pm.know_id "
                        + " from per_table_"
                        + this.planid
                        + " pt,per_mainbody pm "
                        + " where pt.object_id=pm.object_id and pt.mainbody_id=pm.mainbody_id ";
                if (this.compute_flag != 4) {
                    sub_sql += " and (pm.status=2 or pm.status=3 ) ";
                }
                if (this.batchComput != null
                        && this.batchComput.trim().length() > 0
                        && "True".equalsIgnoreCase(this.batchComput)) {
                    sub_sql += " and (pm.status=2 or pm.status=3 or pm.mainbody_id='"
                            + this.presentMainbody_id + "' ) ";
                }
                sub_sql += " and pm.plan_id=" + this.planid;
                sub_sql += where_str;

            }
            String sql = "insert into "
                    + tabname
                    + " (object_id,mainbody_id,point_id,score,body_id,know_id) "
                    + sub_sql;
            //	if (this.planVo.getInt("method") != 2)
            dao.update(sql);

            if (this.compute_flag == 4) // 临时计算 删除无用对象数据,加快效率
            {
                dao.update("delete from "
                        + tabname
                        + " where object_id not in (select object_id from per_result_"
                        + this.planid + " where 1=1 " + this.priv_where + " )");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 生成表 生成PER_POINTVOTE_XXX表(主体选票统计表)
     */
    public void refreshPointVoteData(String bodyid) {
        String tabname = "PER_POINTVOTE_" + planid;
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            DbWizard dbWizard = new DbWizard(this.conn);
            if (dbWizard.isExistTable(tabname, false)) {
                dao.delete("delete from " + tabname, new ArrayList());
            }
            // else
            {
                Table table = new Table(tabname);
                table.addField(getField("id", "I", 10, true));
                table.addField(getField("A0000", "I", 10, false));
                table.addField(getField("B0110", "A", 30, false));
                table.addField(getField("E0122", "A", 30, false));
                table.addField(getField("E01A1", "A", 30, false));
                table.addField(getField("object_id", "A", 30, false));
                table.addField(getField("A0101", "A", 100, false));

                ArrayList pointlist = this.getPointList();
                ArrayList perGradeTemplateList = this.perGradeTemplateList;
                String col = "";
                for (int i = 0; i < pointlist.size(); i++) {
                    LazyDynaBean abean = (LazyDynaBean) pointlist.get(i);
                    String point_id = (String) abean.get("point_id");
                    for (int j = 0; j < this.perGradeTemplateList.size(); j++) {
                        LazyDynaBean abean2 = (LazyDynaBean) this.perGradeTemplateList
                                .get(j);
                        String grade = (String) abean2.get("grade_template_id");
                        col = "P_C_" + point_id + "_G_G" + grade;
                        table.addField(getField(col, "I", 10, false));
                    }
                    col = "V_C_" + point_id;
                    table.addField(getField(col, "I", 10, false));
                }
                for (int j = 0; j < this.perGradeTemplateList.size(); j++) {
                    LazyDynaBean abean2 = (LazyDynaBean) this.perGradeTemplateList
                            .get(j);
                    String grade = (String) abean2.get("grade_template_id");
                    col = "S_" + grade;
                    table.addField(getField(col, "N", 12, false));
                }

                dbWizard.createTable(table);
                DBMetaModel dbmodel = new DBMetaModel(this.conn);
                dbmodel.reloadTableModel(tabname);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            String sub_sql = "SELECT O.id, O.A0000, O.B0110, O.E0122, O.E01A1, O.object_id, O.A0101 FROM per_object O WHERE O.plan_id="
                    + this.planid;
            String sql = "insert into " + tabname
                    + "(id, A0000, B0110, E0122, E01A1, object_id, A0101 )"
                    + sub_sql;
            dao.update(sql);

            BatchGradeBo bb = new BatchGradeBo(this.conn, this.planid);
            // ArrayList list = bb.getPerformanceStencilList(template_id,false);
            ArrayList pointList = bb.getPerPointList(template_id, this.planid);

            ArrayList perPointList = (ArrayList) pointList.get(1);
            HashMap resultMap = getResultList(bodyid);

            ArrayList updateStrList = new ArrayList();

            sql = "select * from PER_POINTVOTE_" + this.planid;
            RowSet rowSet = dao.search(sql);
            while (rowSet.next()) {
                int id = rowSet.getInt("id");
                String object_id = rowSet.getString("object_id");
                LazyDynaBean a_bean = (LazyDynaBean) resultMap.get(object_id);
                if (a_bean == null) {
                    continue;
                }

                if (perPointList.size() > 0) {
                    StringBuffer buf = new StringBuffer();
                    buf.append("update " + tabname + " set ");
                    for (Iterator t = perPointList.iterator(); t.hasNext(); ) {
                        String[] temp = (String[]) t.next();
                        for (int j = 0; j < this.perGradeTemplateList.size(); j++) {
                            LazyDynaBean abean2 = (LazyDynaBean) perGradeTemplateList
                                    .get(j);
                            if (abean2 != null) {
                                String key = temp[0]
                                        + "_"
                                        + (String) abean2
                                        .get("grade_template_id");
                                if (a_bean.get(key) != null) {
                                    String col = "P_C_"
                                            + temp[0]
                                            + "_G_G"
                                            + (String) abean2
                                            .get("grade_template_id");
                                    buf.append(col + "="
                                            + (String) a_bean.get(key) + ",");
                                }
                            }
                        }
                        if (a_bean != null) {
                            String key = temp[0] + "_0";
                            if (a_bean.get(key) != null) {
                                String col = "V_C_" + temp[0];
                                buf.append(col + "=" + (String) a_bean.get(key)
                                        + ",");
                            }
                        }
                    }

                    buf.setLength(buf.length() - 1);
                    buf.append(" where id=" + Integer.toString(id));
                    updateStrList.add(buf.toString());

                }
            }

            for (int i = 0; i < updateStrList.size(); i++) {
                sql = (String) updateStrList.get(i);
                dao.update(sql);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public Field getField(String fieldname, String a_type, int length,
                          boolean key) {

        Field obj = new Field(fieldname, fieldname);
        if ("A".equals(a_type)) {
            obj.setDatatype(DataType.STRING);
            obj.setLength(length);
        } else if ("M".equals(a_type)) {
            obj.setDatatype(DataType.CLOB);
        } else if ("I".equals(a_type)) {
            obj.setDatatype(DataType.INT);
            obj.setLength(length);
        } else if ("N".equals(a_type)) {
            obj.setDatatype(DataType.FLOAT);
            obj.setLength(length);
            obj.setDecimalDigits(5);
        } else if ("D".equals(a_type)) {
            obj.setDatatype(DataType.DATE);
        } else {
            obj.setDatatype(DataType.STRING);
            obj.setLength(length);
        }
        if (key) {
            obj.setNullable(false);
        }
        obj.setKeyable(key);
        return obj;
    }

    public static void main(String[] args) {

        String dd = "0.234";
        System.out.println(dd + " " + new Float(dd).floatValue());
    }

    /** ******************* END *************************** */

    /**
     * ***** 生成excel ******
     */

    private HSSFWorkbook workbook = new HSSFWorkbook();

    private HSSFSheet sheet = null;

    private HSSFCellStyle centerstyle = null;

    private HSSFCellStyle style = null;
    private HSSFCellStyle style_l = null;
    private HSSFCellStyle style_r = null;
    private HSSFCellStyle style_title = null;

    private int rowNum = 0; // 行坐标

    private short colIndex = 0; // 纵坐标

    private HSSFRow row = null;

    private HSSFCell csCell = null;

    private int totalColNum = 0; // 评估表的总共列数

    private int tableHeadTotalLayNum = 0; // 表头总层数

    private int resultSize = 0;

    /**
     * 生成 考核评估 excel
     *
     * @param computeFashion   计算方式 1：得分统计 2:主体票数统计 3: 指标票数分统计
     * @param whl              人员显示条件
     * @param pointResultValue 指标结果值 1:分数 2:平均分比值 3:总分比值 4:单项比值
     * @param order            排序
     * @param bodyid           主体类别
     * @return
     */
    public String getEvaluationTableExcel(int computeFashion, String whl,
                                          String pointResultValue, String order, String bodyid,
                                          String busitype) {

        String outputFile = this.userView.getUserName() + "_perEvaluation" + PubFunc.getStrg() + ".xls";
        FileOutputStream fileOut = null;
        try {
            workbook = new HSSFWorkbook();
            sheet = workbook.createSheet("Sheet0");
            centerstyle = style(workbook, 1);
            this.style = getStyle("c", workbook, computeFashion);
            this.style_l = getStyle("l", workbook, computeFashion);
            this.style_r = getStyle("r", workbook, computeFashion);
            this.style_title = getStyle("title", workbook, computeFashion);
            ArrayList bodylist = this.getBodyList();
            this.mainbodySetList = getPerMainBodySetList(this.planid); // 主体类别列表
            this.rowNum = 1;
            sheet.setColumnWidth(1, 6000);
            String name = "";
            String showComment = (String) this.planParamSet.get("WholeEval");// 总体评价
            String gather_type = "";
            switch (computeFashion) {
                case 1: // 得分统计
                    writeScoreTableExcel(whl, pointResultValue, order,
                            computeFashion, busitype);
                    break;
                case 2: // 主体票数统计
                    writeMainBodyNumExcel(whl, pointResultValue, order);
                    break;
                case 3: // 指标票数统计
                    writePerPointNumExcel(whl, order, bodyid);
                    break;
                case 4: // 主体得分统计
                    writeBodyScoreExcel(whl, order);
                    break;
                case 5: // 开放性意见输出excel
                    outputFile = outputFile.replace("perEvaluation", "开放式意见输出明细表");
                    writeBodyOpenOpinionExcel(whl, order);
                    break;
                case 6:
                    name = writePointAbtainTable(this.a0100, this.template_id,
                            this.where, this.aband, this.showbenbu,
                            this.showmethod, bodyid, bodylist, gather_type,
                            showComment);
                    break;

            }

            HSSFCellStyle centerstyle_no = style(workbook, 0);
            if (computeFashion == 6) {

            } else {
                executeCell(0, (short) 0, 0,
                        Short.parseShort(String.valueOf(this.totalColNum)),
                        this.planVo.getString("name"), centerstyle_no);
            }

            if (computeFashion != 5) {
                resetSize(computeFashion, pointResultValue);
            }
            fileOut = new FileOutputStream(
                    System.getProperty("java.io.tmpdir")
                            + System.getProperty("file.separator") + outputFile);
            workbook.write(fileOut);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            PubFunc.closeResource(fileOut);
            PubFunc.closeResource(workbook);
        }
        outputFile = PubFunc.encrypt(outputFile);
        outputFile = SafeCode.encode(outputFile);

        return outputFile;
    }

    public String writePointAbtainTable(String a0100, String planid1,
                                        String where, String nullpoint, String showaband,
                                        String showmethod, String bodyid, ArrayList bodyList,
                                        String gather_type, String showComment) {

        KhTemplateBo bo = new KhTemplateBo(this.conn);
        String object_id = a0100.split("`")[0];
        String rownum = a0100.split("`")[1];
        String sql = "select * from PER_POINTVOTE_" + this.planid
                + " where 1=1  and object_id='";
        sql = sql + a0100 + "'";
        if (where != null && where.trim().length() != 0) {
            sql = sql + " " + where;
        }
        sql += " order by a0000";
        ContentDAO dao = new ContentDAO(this.conn);
        HashMap pointToGrade = new HashMap();
        LazyDynaBean beanforGrade = null;
        RowSet rowSet = null;
        ArrayList pointlist = this.getPointList();// 指标
        ArrayList perpointlist = this.getPerGradeTemplateList(this.template_id);// 标准标度

        String name = "";
        try {
            String a01001 = "";// 获取考核对象 第一次默认为安a0000顺序的第一个人
            HashMap pointPrivMap = this.getPrivForPoint(object_id, bodyid);
            HashMap benbu = this.getBenBu(object_id, pointlist, perpointlist);
            HashMap scaleMap = new HashMap();
            LazyDynaBean scalebean = null;
            HashMap mt = this.getGradeForBodyToPoint(object_id, rownum, bodyid,
                    perpointlist, pointlist, true, where);
            HashMap tt1 = new HashMap();
            HashMap t2 = new HashMap();
            String nexta0100 = "";
            String upa0100 = "";
            pointToGrade = (HashMap) mt.get("pointToGrade");
            a0100 = (String) mt.get("a0100");
            if (a0100 != null && a0100.trim().length() != 0) {
                a01001 = (String) mt.get("a01001");
                nexta0100 = (String) mt.get("nexta0100");
                upa0100 = (String) mt.get("upa0100");
                name = (String) mt.get("name");
                ArrayList comment = new ArrayList();
                if (showComment != null && "true".equalsIgnoreCase(showComment)) {
                    comment = this.getComment(a0100, planid, perpointlist,
                            bodyid, bodyList, nullpoint, showbenbu);
                }
                if (bodyid != null && "all1".equalsIgnoreCase(bodyid)) {
                    // String tt2=a01001.split("`")[1];
                    HashMap al = this.getGradeForBodyToPoint(object_id, "",
                            "all", perpointlist, pointlist, false, where);
                    tt1 = (HashMap) al.get("pointToGrade");
                    HashMap tt = this.getPrivForPoint(object_id, "all");
                    t2 = this.computeScale(object_id, "all", pointlist,
                            perpointlist, tt, tt1, nullpoint, bodyList,
                            gather_type);
                }

                scaleMap = this.computeScale(object_id, bodyid, pointlist,
                        perpointlist, pointPrivMap, pointToGrade, nullpoint,
                        bodyList, gather_type);
                HashMap ponitMain = this.getObjectForPriv(a0100, bodyid,
                        bodyList, planid);
                String totalnum = bo.writeTableLikeMoban(planid1, pointToGrade,
                        scaleMap, showmethod, aband, showbenbu, benbu,
                        this.workbook, bodyList, tt1, t2, bodyid, showComment,
                        comment, ponitMain);

                HSSFCellStyle centerstyle_no = style(workbook, 0);
                executeCell(0, (short) 0, 0, Short.parseShort(totalnum),
                        this.planVo.getString("name") + "-票数及占比反馈表(" + name
                                + ")", centerstyle_no);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return name;
    }

    /**
     * 取得 指标票数分统计 excel
     *
     * @return
     */
    public void writePerPointNumExcel(String whl, String order, String bodyid) {
        whl = PubFunc.keyWord_reback(whl);
        try {
            BatchGradeBo bb = new BatchGradeBo(this.conn, this.planid);
            ArrayList list = bb.getPerformanceStencilList(template_id, false);
            ArrayList pointList = bb.getPerPointList(template_id, this.planid);
            ArrayList perPointList = (ArrayList) pointList.get(1);
            HashMap resultMap = getResultList(bodyid);

            /*-- 20141024 dengcan  增加参与情况列输出    */
            ContentDAO dao = new ContentDAO(this.conn);
            String _sql = "";
            String bodysql = "";
            if (!"all".equals(bodyid)) {
                bodysql = " and pmb.body_id =" + bodyid;
            }

            _sql = "select a.object_id ,b.mainbody,c.votecount from PER_OBJECT "
                    + " a "
                    + " left join (select pmb.object_id ,COUNT(pmb.mainbody_id) mainbody from per_mainbody pmb "
                    + " where plan_id="
                    + this.planid
                    + bodysql
                    + " group by pmb.object_id) b "
                    + " on a.object_id=b.object_id left join (select pmb.object_id ,COUNT(pmb.mainbody_id) votecount from per_mainbody pmb "
                    + " where plan_id="
                    + this.planid
                    + bodysql
                    + " and (pmb.status=2 or status=3) group by pmb.object_id) c "
                    + " on a.object_id=c.object_id where  a.plan_id=" + this.planid;
            RowSet rowSet = dao.search(_sql);
            while (rowSet.next()) {
                String _object_id = rowSet.getString("object_id");
                int mainbody = rowSet.getInt("mainbody");
                int votecount = rowSet.getInt("votecount");
                float rate = (float) votecount / mainbody * 100;
                DecimalFormat df = new DecimalFormat("0.0");
                String voterate = df.format(rate);

                if (resultMap.get(_object_id) != null) {
                    LazyDynaBean abean = (LazyDynaBean) resultMap.get(_object_id);
                    abean.set("mainbodycount", String.valueOf(mainbody));
                    abean.set("voterate", voterate + "%");

                    abean.set("votecount", String.valueOf(votecount));
                } else {
                    LazyDynaBean bean = new LazyDynaBean();
                    bean.set("mainbodycount", String.valueOf(mainbody));
                    resultMap.put(_object_id, bean);
                }

            }

            // 表头
            getTableHeadExcel(list, pointList);
            // 表体

            String sql = "select object_id,a0101,B0110,e0122,e01a1,body_id from per_object where plan_id="
                    + this.planid;
            if (whl != null && whl.length() > 0) {
                sql += whl;
            }
            if (order != null && order.length() > 0) {
                sql += order;
            } else {
                sql += " order by a0000";
            }
            rowSet = dao.search(sql);
            int num = 0;
            boolean flag = isProAppraise();
            HashMap setMap = new HashMap();
            String setsql = "select body_id,name from per_mainbodyset";
            RowSet rs = dao.search(setsql);
            while (rs.next()) {
                setMap.put(rs.getString("body_id"), rs.getString("name"));
            }
            HashMap _pointDescMap = getTemplatePointDetail();//zhaoxg add
            while (rowSet.next()) {
                num++;
                this.rowNum++;
                this.colIndex = 0;
                row = sheet.createRow(this.rowNum);

                String object_id = rowSet.getString("object_id");
                String a0101 = rowSet.getString("a0101");
                LazyDynaBean a_bean = (LazyDynaBean) resultMap.get(object_id);

                writeCell(colIndex, String.valueOf(num));
                colIndex++;

                /***********显示对象详情表头 zhaoxg add 2014-12-19**************/
                if ("true".equals(this.showDetails)) {
                    if ("2".equals(this.object_type)) {
                        String b0110 = rowSet.getString("B0110");
                        String e0122 = rowSet.getString("e0122");
                        String e01a1 = rowSet.getString("e01a1");
                        this.writeCell2(colIndex, AdminCode.getCode("UN", b0110) != null ? AdminCode.getCode("UN", b0110).getCodename() : "", "l", "");//单位名称
                        colIndex++;
                        this.writeCell2(colIndex, AdminCode.getCode("UM", e0122) != null ? AdminCode.getCode("UM", e0122).getCodename() : "", "l", "");//部门
                        colIndex++;
                        this.writeCell2(colIndex, AdminCode.getCode("@K", e01a1) != null ? AdminCode.getCode("@K", e01a1).getCodename() : "", "l", "");//岗位名称
                        colIndex++;
                    }
                    String body_id = (String) setMap.get(rowSet.getString("body_id"));
                    this.writeCell2(colIndex, body_id == null ? "" : body_id, "l", "");//对象类别
                    colIndex++;
                }
                /***********end**************/

                this.writeCell2(colIndex, a0101, "l", "");
                colIndex++;

                String mainbodycount = "";
                if (a_bean != null && a_bean.get("mainbodycount") != null) {
                    mainbodycount = (String) a_bean.get("mainbodycount");
                }
                this.writeCell2(colIndex, mainbodycount, "l", "");
                colIndex++;

                String votecount = "";
                if (a_bean != null && a_bean.get("votecount") != null) {
                    votecount = (String) a_bean.get("votecount");
                }
                this.writeCell2(colIndex, votecount, "l", "");
                colIndex++;

                String voterate = "";
                if (a_bean != null && a_bean.get("voterate") != null) {
                    voterate = (String) a_bean.get("voterate");
                }
                this.writeCell2(colIndex, voterate, "l", "");
                colIndex++;


                for (Iterator t = perPointList.iterator(); t.hasNext(); ) {
                    String[] temp = (String[]) t.next();
                    ArrayList _list = (ArrayList) _pointDescMap.get(temp[0].toLowerCase());
                    String all = "";
                    if (a_bean != null) {
                        String key = temp[0] + "_0";
                        all = (String) a_bean.get(key);
                    }
                    if (_list != null && _list.size() > 0) {
                        for (int j = 0; j < _list.size(); j++) {
                            LazyDynaBean abean = (LazyDynaBean) _list.get(j);
                            if (a_bean != null) {
                                String key = temp[0] + "_"
                                        + (String) abean.get("gradecode");
                                if (a_bean.get(key) != null) {
                                    // writeCell(colIndex, (String)
                                    // a_bean.get(key));
                                    this.writeCell2(colIndex, (String) a_bean.get(key), "r", "N");
                                    colIndex++;
                                    if (flag) {
                                        String theVal = (String) a_bean.get(key);
                                        BigDecimal a = new BigDecimal(theVal == null || "".equals(theVal) ? "0" : theVal);
                                        BigDecimal b = new BigDecimal(all == null || "".equals(all) ? "0" : all);
                                        String _num = "";
                                        if ("0".equals(theVal) || "0".equals(all) || "".equals(theVal) || "".equals(all)) {
                                            _num = "";
                                        } else {

                                            _num = a.divide(b, 4, BigDecimal.ROUND_HALF_UP).toString();
                                            _num = Double.parseDouble(_num) * 100 + "%";
                                        }
                                        this.writeCell2(colIndex, _num, "r", "A");
                                        colIndex++;
                                    }
                                } else {
                                    writeCell(colIndex, "");
                                    colIndex++;
                                    if (flag) {
                                        writeCell(colIndex, "");
                                        colIndex++;
                                    }
                                }
                            } else {
                                writeCell(colIndex, "");
                                colIndex++;
                                if (flag) {
                                    writeCell(colIndex, "");
                                    colIndex++;
                                }
                            }
                        }

                        if (a_bean != null) {
                            String key = temp[0] + "_0";
                            if (a_bean.get(key) != null) {
                                // writeCell(colIndex, (String) a_bean.get(key));
                                writeCell2(colIndex, (String) a_bean.get(key), "r",
                                        "N");
                                colIndex++;
                            } else {
                                writeCell(colIndex, "");
                                colIndex++;
                            }
                        } else {
                            writeCell(colIndex, "");
                            colIndex++;
                        }
                    }

                }
            }
            this.resultSize = num;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 判断是否定义了“描述性评议项”
     *
     * @return
     */
    public boolean isProAppraise() {
        boolean flag = false;
        try {
            ExamPlanBo bo = new ExamPlanBo(this.planid, this.conn);
            String extpro = bo.getExtpro();
            if (extpro == null || "".equals(extpro)) {
                flag = false;
            } else {
                Document doc = PubFunc.generateDom(extpro);
                String xpath = "//descriptive_evaluate";
                XPath xpath_ = XPath.newInstance(xpath);
                Element ele = (Element) xpath_.selectSingleNode(doc);
                if (ele != null) {
                    List list = (List) ele.getChildren("option");
                    if (list != null && list.size() > 0) {
                        flag = true;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return flag;
    }

    /**
     * @param list
     * @param pointList
     * @return
     * @throws GeneralException
     */
    public void getTableHeadExcel(ArrayList list, ArrayList pointList) {

        ArrayList items = (ArrayList) list.get(0); // 模版项目列表
        HashMap itemsCountMap = (HashMap) list.get(1); // 最底层项目的指标个数集合
        int lays = ((Integer) list.get(2)).intValue(); // 表头的总层数
        HashMap map = (HashMap) list.get(3); // 各项目的子项目或指标个数
        ArrayList bottomItemList = (ArrayList) list.get(4); // 模版最底层的项目
        try {
            ArrayList perPointList = (ArrayList) pointList.get(1);
            HashMap commonItems = getCommonItemsMap(perPointList);
            ArrayList tempColumnList = new ArrayList();
            /* 画第一层表头 */
            int alay = lays;
            boolean flag = isProAppraise();
            int lay = 1;//进出口银行需求   zhaoxg add 2014-8-13
            if (flag) {//进出口银行，对定义了“描述性评议项”的民主测评计划，展现各指标的评价票数和占比  zhaoxg add 2014-8-11
                lay = 2;
                alay++;
            }
            alay++;

            this.tableHeadTotalLayNum = alay;

            colIndex = 0;
            executeCell(this.rowNum, colIndex, alay, colIndex,
                    ResourceFactory.getProperty("conlumn.mediainfo.info_id"),
                    this.centerstyle);
            /***********显示对象详情表头 zhaoxg add 2014-12-19**************/
            short xx = 0;
            if ("true".equals(this.showDetails)) {
                if ("2".equals(this.object_type)) {
                    colIndex++;
                    xx++;
                    executeCell(this.rowNum, colIndex, alay, colIndex, ResourceFactory.getProperty("column.sys.org"), this.centerstyle);//单位名称
                    colIndex++;
                    xx++;
                    executeCell(this.rowNum, colIndex, alay, colIndex, ResourceFactory.getProperty("column.sys.dept"), this.centerstyle);//部门
                    colIndex++;
                    xx++;
                    executeCell(this.rowNum, colIndex, alay, colIndex, ResourceFactory.getProperty("column.sys.pos"), this.centerstyle);//岗位名称
                }
                colIndex++;
                xx++;
                executeCell(this.rowNum, colIndex, alay, colIndex, ResourceFactory.getProperty("kpi.originalData.KpiTargetObjecType"), this.centerstyle);//对象类别
            }
            /***********end**************/
            colIndex++;
            executeCell(this.rowNum, colIndex, alay, colIndex,
                    this.getObjTitle(this.planVo.getInt("object_type")),
                    this.centerstyle);

            colIndex++;
            executeCell(this.rowNum, colIndex, alay - 1, Short.parseShort(String.valueOf(colIndex + 2)),
                    "参与情况",
                    this.centerstyle);

            colIndex++;
            colIndex++;


            for (Iterator t = items.iterator(); t.hasNext(); ) {
                String[] temp = (String[]) t.next();
                if (temp[1] == null && commonItems.get(temp[0].toLowerCase()) != null) {
                    colIndex++;

                    //-----------------------dengcan 20141024--------------------------
                    int totalNum = 0;
                    if (bottomItemList != null && bottomItemList.size() > 0) {
                        for (int i = 0; i < bottomItemList.size(); i++) {
                            String[] bottomitem = (String[]) bottomItemList.get(i);
                            String bottom = "";
                            if (bottomitem != null && bottomitem.length > 0) {
                                bottom = (String) bottomitem[0];
                                if ((bottomitem[0] != null && bottomitem[0].equals(temp[0])) || (bottomitem[1] != null && bottomitem[1].equals(temp[0]))) {
                                    totalNum += getNumByItem(bottom, lay);
                                }
                            }

                        }
                    }
                    short to_indwx = Short.parseShort(String.valueOf(colIndex + totalNum - 1));
                    executeCell(this.rowNum, colIndex, this.rowNum, to_indwx,
                            temp[3], this.centerstyle);
                    colIndex = to_indwx;
                    tempColumnList.add(temp);
                }
            }
            this.totalColNum = colIndex;
            this.tableHeadTotalLayNum = alay;

            // 画表头的中间层

            SingleGradeBo singleGradeBo = new SingleGradeBo(this.conn);
            HashMap pointItemMap = singleGradeBo.getPointItemList(
                    (ArrayList) pointList.get(1), items);
            getMidHeadExcel2(lays, tempColumnList, items, map, perPointList,
                    pointItemMap, lay, commonItems, xx);
            // 画指标列
            this.rowNum++;
            this.colIndex = (short) (5 + xx);

            HashMap _pointDescMap = getTemplatePointDetail();//zhaoxg add
            for (Iterator t = perPointList.iterator(); t.hasNext(); ) {
                String[] temp = (String[]) t.next();
                ArrayList _list = (ArrayList) _pointDescMap.get(temp[0].toLowerCase());
                if (_list != null && _list.size() > 0) {
                    short to_index = Short.parseShort(String.valueOf(colIndex
                            + _list.size() * lay));
                    if (_list != null && _list.size() > 0) {
                        executeCell(this.rowNum, colIndex, this.rowNum, to_index, temp[1],
                                this.centerstyle);
                        this.colIndex = to_index;
                        this.colIndex++;
                    }
                }
            }

            this.rowNum++;
            this.colIndex = (short) (2 + xx);
            row = sheet.getRow(this.rowNum);
            if (row == null) {
                row = sheet.createRow(this.rowNum);
            }
            int yy = 0;
            if (flag) {
                yy = 1;
            }
            executeCell(this.rowNum + yy, colIndex, this.rowNum + yy, colIndex, "主体人数", this.centerstyle);
            this.colIndex++;
            executeCell(this.rowNum + yy, colIndex, this.rowNum + yy, colIndex, "投票人数", this.centerstyle);
            this.colIndex++;
            executeCell(this.rowNum + yy, colIndex, this.rowNum + yy, colIndex, "投票率", this.centerstyle);
            this.colIndex++;


            for (Iterator t = perPointList.iterator(); t.hasNext(); ) {
                String[] temp = (String[]) t.next();
                ArrayList _list = (ArrayList) _pointDescMap.get(temp[0].toLowerCase());
                if (_list != null && _list.size() > 0) {
                    for (int j = 0; j < _list.size(); j++) {
                        LazyDynaBean abean = (LazyDynaBean) _list.get(j);
                        if (flag) {
                            short to_index = Short.parseShort(String.valueOf(colIndex + 1));
                            executeCell(this.rowNum, colIndex, this.rowNum, to_index, (String) abean.get("gradedesc"), this.centerstyle);
                            this.colIndex = to_index;
                            colIndex++;
                        } else {
                            writeCell(colIndex, (String) abean.get("gradedesc"));
                            colIndex++;
                        }
                    }
                    if (flag) {
                        short to_index = Short.parseShort(String.valueOf(colIndex + 1));
//					writeCell(colIndex,ResourceFactory.getProperty("lable.welcome.invtextresult.ballot"));
                        executeCell(this.rowNum, colIndex, this.rowNum + 1, colIndex, ResourceFactory.getProperty("lable.welcome.invtextresult.ballot"), this.centerstyle);
                        colIndex++;
                    } else {
                        writeCell(colIndex, ResourceFactory.getProperty("lable.welcome.invtextresult.ballot"));
                        colIndex++;
                    }
                }
            }
            if (flag) {
                this.rowNum++;
                this.colIndex = (short) (5 + xx);
                row = sheet.getRow(this.rowNum);
                if (row == null) {
                    row = sheet.createRow(this.rowNum);
                }
                for (Iterator t = perPointList.iterator(); t.hasNext(); ) {
                    String[] temp = (String[]) t.next();
                    ArrayList _list = (ArrayList) _pointDescMap.get(temp[0].toLowerCase());
                    if (_list != null && _list.size() > 0) {
                        for (int j = 0; j < _list.size(); j++) {
                            LazyDynaBean abean = (LazyDynaBean) _list.get(j);

                            writeCell(colIndex, "票数");
                            colIndex++;
                            writeCell(colIndex, "占比");
                            colIndex++;

                        }
//					writeCell(colIndex,ResourceFactory.getProperty("lable.welcome.invtextresult.ballot"));
                        colIndex++;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // 生成表头中间层html
    public void getMidHeadExcel2(int lays, ArrayList tempColumnList,
                                 ArrayList items, HashMap map, ArrayList perPointList,
                                 HashMap pointItemMap, int lay, HashMap commonItems, int xx) {
        HashMap pointDescMap = getTemplatePointDetail();

        for (int b = 2; b < lays; b++) {
            this.rowNum++;
            this.colIndex = (short) (5 + xx);

            ArrayList tempList = new ArrayList();
            int d = 0;
            for (int i = 0; i < tempColumnList.size(); i++) {

                String[] temp1 = (String[]) tempColumnList.get(i);
                if (temp1[0] == null) {
                    short to_index = Short.parseShort(String.valueOf(colIndex
                            + this.perGradeTemplateList.size() * 2));
                    executeCell(this.rowNum, colIndex, this.rowNum, to_index,
                            "", this.centerstyle);
                    this.colIndex = to_index;
                    this.colIndex++;
                    tempList.add(temp1);
                    d++;
                } else {
                    int pointNum = Integer.parseInt((String) map.get(temp1[0]));
                    int isNullItem = 0;
                    for (Iterator t1 = items.iterator(); t1.hasNext(); ) {
                        String[] temp2 = (String[]) t1.next();
                        if (temp2[1] != null && temp2[1].equals(temp1[0]) && commonItems.get(temp2[0].toLowerCase()) != null) {
                            int pointNum2 = Integer.parseInt((String) map
                                    .get(temp2[0]));
                            int selfnum = 0;
                            isNullItem++;
                            for (d = 0; d < perPointList.size(); d++) {
                                String[] point = (String[]) perPointList.get(d);
                                ArrayList pointItemList = (ArrayList) pointItemMap
                                        .get(point[0]);
                                ArrayList gradeList = (ArrayList) pointDescMap.get(point[0].toLowerCase());
                                int flag = 0;
                                for (Iterator t2 = pointItemList.iterator(); t2
                                        .hasNext(); ) {
                                    String[] tempItem = (String[]) t2.next();
                                    if (tempItem[0].equals(temp2[0])) {
                                        flag++;
                                    }
                                }

                                if (flag == 0) {
                                    short to_index = Short.parseShort(String
                                            .valueOf(colIndex + gradeList.size() * lay));
                                    executeCell(this.rowNum, colIndex,
                                            this.rowNum, to_index, "",
                                            this.centerstyle);
                                    this.colIndex = to_index;
                                    this.colIndex++;

                                    String[] ttt = new String[5];
                                    tempList.add(ttt);
                                    d++;
                                    selfnum++;
                                } else {
                                    short to_index = Short
                                            .parseShort(String.valueOf(colIndex
                                                    + Integer.parseInt((String) map.get(temp2[0])) * (gradeList.size() * lay + 1) - 1));
                                    executeCell(this.rowNum, colIndex,
                                            this.rowNum, to_index, temp2[3],
                                            this.centerstyle);
                                    this.colIndex = to_index;
                                    this.colIndex++;

                                    d += pointNum2;
                                    selfnum += pointNum2;
                                    tempList.add(temp2);
                                    break;

                                }
                            }

                        } else if (commonItems.get(temp2[0].toLowerCase()) != null) {
                            for (d = 0; d < perPointList.size(); d++) {
                                String[] point = (String[]) perPointList.get(d);
                                if (point[3] != null && temp2[0].equals(temp1[0]) && point[3].equals(temp2[0]) && temp2[1] == null) {//中间层是空的情况,如果有子节点那么不加空  zhaoxg add 2014-12-23

                                    ArrayList gradeList = (ArrayList) pointDescMap.get(point[0].toLowerCase());
                                    short to_index = Short.parseShort(String.valueOf(colIndex + gradeList.size() * lay));
                                    executeCell(this.rowNum, colIndex, this.rowNum, to_index, "", this.centerstyle);
                                    this.colIndex = to_index;
                                    this.colIndex++;
                                    isNullItem++;
                                    break;
                                }
                            }
                        }
                    }
                    if (isNullItem == 0) {
                        for (int a = 0; a < pointNum; a++) {
                            short to_index = Short
                                    .parseShort(String.valueOf(this.colIndex
                                            + this.perGradeTemplateList.size() * lay));
                            executeCell(this.rowNum, colIndex, this.rowNum,
                                    to_index, "", this.centerstyle);
                            this.colIndex = to_index;
                            this.colIndex++;
                            String[] ttt = new String[5];
                            tempList.add(ttt);
                            d++;
                        }
                    }
                }
            }
            tempColumnList = tempList;
        }

    }

    /**
     * 取得 主体票数统计 excel
     *
     * @return
     */
    public void writeMainBodyNumExcel(String whl, String pointResultValue,
                                      String order) {

        colIndex = 0;
        executeCell(this.rowNum, colIndex, this.rowNum + 1, colIndex,
                ResourceFactory.getProperty("conlumn.mediainfo.info_id"),
                this.centerstyle);
        colIndex++;
        executeCell(this.rowNum, colIndex, this.rowNum + 1, colIndex,
                this.getObjTitle(this.planVo.getInt("object_type")),
                this.centerstyle);
        colIndex++;
        for (int i = 0; i < mainbodySetList.size(); i++) {
            LazyDynaBean abean = (LazyDynaBean) mainbodySetList.get(i);
            short t_index = Short.parseShort(String.valueOf(colIndex
                    + this.perGradeTemplateList.size()));
            executeCell(this.rowNum, colIndex, this.rowNum, t_index,
                    (String) abean.get("name"), this.centerstyle);
            this.colIndex = t_index;
            this.colIndex++;
        }
        short t_index = Short.parseShort(String.valueOf(colIndex
                + this.perGradeTemplateList.size()));
        executeCell(this.rowNum, colIndex, this.rowNum, t_index,
                ResourceFactory.getProperty("label.kh.template.total"),
                this.centerstyle);
        this.totalColNum = t_index;

        this.rowNum++;
        this.colIndex = 2;
        for (int i = 0; i < mainbodySetList.size() + 1; i++) {
            for (int j = 0; j < this.perGradeTemplateList.size(); j++) {
                LazyDynaBean abean = (LazyDynaBean) perGradeTemplateList.get(j);
                executeCell(this.rowNum, colIndex, this.rowNum, this.colIndex,
                        (String) abean.get("gradedesc"), this.centerstyle);
                this.colIndex++;
            }
            executeCell(this.rowNum, colIndex, this.rowNum, this.colIndex,
                    ResourceFactory
                            .getProperty("lable.welcome.invtextresult.ballot"),
                    this.centerstyle);
            this.colIndex++;
        }
        getMainbody_bodyExcel(whl, order);
        this.tableHeadTotalLayNum = 2;
    }

    /**
     * 取得主体票数表体html
     *
     * @return
     */
    public void getMainbody_bodyExcel(String whl, String order) {
        whl = PubFunc.keyWord_reback(whl);
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            int i = 0;
            DbWizard dbWizard = new DbWizard(this.conn);
            String tablname = "per_bodyVote_" + this.planid;
            if (dbWizard.isExistTable(tablname, false)) {
                StringBuffer sql = new StringBuffer(
                        "select * from per_bodyVote_" + this.planid
                                + " where 1=1 ");
                if (whl != null && whl.length() > 0) {
                    sql.append(" " + whl);
                }
                if (order != null && order.length() > 0) {
                    sql.append(order);
                } else {
                    sql.append(" order by a0000");
                }
                RowSet rowSet = dao.search(sql.toString());

                while (rowSet.next()) {
                    this.rowNum++;
                    this.colIndex = 0;
                    row = sheet.createRow(this.rowNum);

                    writeCell(colIndex, String.valueOf(i + 1));
                    colIndex++;
                    this.writeCell2(colIndex, rowSet.getString("a0101"), "l",
                            "");
                    // writeCell(colIndex, rowSet.getString("a0101"));
                    colIndex++;
                    for (int j = 0; j < mainbodySetList.size(); j++) {
                        LazyDynaBean bodyBean = (LazyDynaBean) mainbodySetList
                                .get(j);
                        String body_id = (String) bodyBean.get("body_id");
                        body_id = "-1".equals(body_id) ? "X1" : body_id;
                        for (int e = 0; e < this.perGradeTemplateList.size(); e++) {
                            LazyDynaBean abean = (LazyDynaBean) perGradeTemplateList
                                    .get(e);
                            String grade_template_id = (String) abean
                                    .get("grade_template_id");
                            String value = rowSet.getString("B_B" + body_id
                                    + "_G" + grade_template_id); // (String)obj_body_grade.get(object_id+"_"+body_id+"_"+grade_template_id);
                            if (value != null && !"0".equals(value)) {
                                // writeCell(colIndex, value);
                                this.writeCell2(colIndex, value, "r", "N");
                                colIndex++;
                            } else {
                                writeCell(colIndex, "");
                                colIndex++;
                            }
                        }
                        // 票数
                        String value = rowSet.getString("V_" + body_id);
                        if (value != null && !"0".equals(value)) {
                            // writeCell(colIndex, value);
                            this.writeCell2(colIndex, value, "r", "N");
                            colIndex++;
                        } else {
                            writeCell(colIndex, "");
                            colIndex++;
                        }

                    }

                    for (int e = 0; e < this.perGradeTemplateList.size(); e++) {
                        LazyDynaBean abean = (LazyDynaBean) perGradeTemplateList
                                .get(e);
                        String grade_template_id = (String) abean
                                .get("grade_template_id");
                        String value = rowSet.getString("S_"
                                + grade_template_id);
                        if (value != null && !"0".equals(value)) {
                            // writeCell(colIndex, PubFunc.round(value, 0));
                            this.writeCell2(colIndex, PubFunc.round(value, 0),
                                    "r", "N");
                            colIndex++;
                        } else {
                            writeCell(colIndex, "");
                            colIndex++;
                        }
                    }
                    // 票数
                    String value = rowSet.getString("VoteNum"); // (String)obj_body_num.get(object_id+"_-1");
                    if (value != null && !"0".equals(value)) {
                        // writeCell(colIndex, value);
                        this.writeCell2(colIndex, value, "r", "N");
                        colIndex++;
                    } else {
                        writeCell(colIndex, "");
                        colIndex++;
                    }

                    i++;
                }
                this.resultSize = i;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * 调整尺寸
     *
     * @param pointResultValue 指标结果值 1:分数 2:平均分比值 3:总分比值 4:单项比值
     * @param computeFashion   计算方式 1：得分统计 2:主体票数统计 3: 指标票数分统计
     */
    public void resetSize(int computeFashion, String pointResultValue) {

        HSSFRow row = sheet.getRow(0);
        if (row == null) {
            row = sheet.createRow(0);
        }
        row.setHeight((short) 800);
        if (computeFashion == 1) {
            if ("1".equals(pointResultValue)) {
                for (int i = 0; i < this.tableHeadTotalLayNum - 1; i++) {
                    row = sheet.getRow(i + 1);
                    if (row == null) {
                        row = sheet.createRow(i + 1);
                    }

                    row.setHeight((short) 700);
                }
                row = sheet.getRow(this.tableHeadTotalLayNum);
                if (row == null) {
                    row = sheet.createRow(this.tableHeadTotalLayNum);
                }

                row.setHeight((short) 1500);
            } else {
                for (int i = 0; i < this.tableHeadTotalLayNum - 2; i++) {
                    row = sheet.getRow(i + 1);
                    if (row == null) {
                        row = sheet.createRow(i + 1);
                    }

                    row.setHeight((short) 700);
                }
                row = sheet.getRow(this.tableHeadTotalLayNum - 1);
                if (row == null) {
                    row = sheet.createRow(this.tableHeadTotalLayNum - 1);
                }
                row.setHeight((short) 1500);
            }
        } else if (computeFashion == 2 || computeFashion == 3) {
            for (int i = 0; i < this.tableHeadTotalLayNum; i++) {
                row = sheet.getRow(i + 1);
                if (row == null) {
                    row = sheet.createRow(i + 1);
                }

                row.setHeight((short) 700);
            }
        }

        for (int i = 0; i < resultSize; i++) {
            row = sheet.getRow(this.tableHeadTotalLayNum + 1 + i);
            if (row == null) {
                row = sheet.createRow(this.tableHeadTotalLayNum + 1 + i);
            }

            row.setHeight((short) 400);
        }

    }

    /**
     * 生成 得分统计 excel
     *
     * @param whl
     * @param pointResultValue 指标结果值 1:分数 2:平均分比值 3:总分比值 4:单项比值
     * @param order
     * @param computeFashion   计算方式 1：得分统计 2:主体票数统计 3: 指标票数分统计
     */
    public void writeScoreTableExcel(String whl, String pointResultValue,
                                     String order, int computeFashion, String busitype) {

        try {
            BatchGradeBo bb = new BatchGradeBo(this.conn, this.planid);
            ArrayList list = bb.getPerformanceStencilList(template_id, false);
            ArrayList pointList = bb.getPerPointList(template_id, this.planid);
            HashMap map = new HashMap();
            if (this.planParamSet.get("WholeEval") != null) {
                map.put("WholeEval",
                        (String) this.planParamSet.get("WholeEval"));
            }
            //总体评价的的等级分类ID，默认为0，表示用GradeClass的值
            if (this.planParamSet.get("EvalClass") == null
                    || ((String) this.planParamSet.get("EvalClass")).trim()
                    .length() <= 0
                    || "0"
                    .equals(((String) this.planParamSet.get("EvalClass")).trim())) {
                map.put("GradeClass", (String) this.planParamSet.get("GradeClass"));
            } else {
                map.put("GradeClass", (String) this.planParamSet.get("EvalClass"));
            }

            this.gradeTempList = getGradeList(map);
            // 表头
            getTableHeadExcel(list, pointList, computeFashion,
                    pointResultValue, busitype);
            // 表体

            ArrayList a_pointList = (ArrayList) pointList.get(1);
            a_pointList = getPerPointList(a_pointList);
            ArrayList plan_list = loadxml.getRelatePlanValue("Plan");
            ArrayList planlist = loadxml.getRelatePlanValue("Plan", "ID");
            // 如果计划已经删除就不要算关联计划了
            ExamPlanBo bo = new ExamPlanBo(this.conn);
            ArrayList tempList = new ArrayList();
            for (int i = 0; i < planlist.size(); i++) {
                String plan_id = (String) planlist.get(i);
                if (bo.isExist(plan_id)) {
                    tempList.add(plan_id);
                }
            }
            planlist = tempList;

            HashMap planObjectScoreMap = getPlan_objectScore(planlist);

            String GrpMenu1 = (String) this.planParamSet.get("GrpMenu1"); // 排名指标1，格式：字段名;层级
            String GrpMenu2 = (String) this.planParamSet.get("GrpMenu2"); // 排名指标2，格式：字段名;层级

            ArrayList resultList = getScoreResultList(whl, pointResultValue,
                    order, (ArrayList) pointList.get(1), planlist, busitype);
            resultSize = resultList.size();

            // body_id对应的描述(per_mainbodyset),避免在循环中查询数据库 lium
            Map bodyMap = new HashMap(); // -1=团队负责人....
            String bodySql = "SELECT body_id,name FROM per_mainbodyset";
            RowSet rs = null;
            try {
                rs = new ContentDAO(this.conn).search(bodySql);
                while (rs.next()) {
                    int body_id = rs.getInt("body_id");
                    String name = rs.getString("name");
                    name = name != null ? name : "";

                    bodyMap.put(Integer.valueOf(body_id), name);
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (rs != null) {
                    rs.close();
                }
            }

            for (int i = 0; i < resultList.size(); i++) {
                LazyDynaBean abean = (LazyDynaBean) resultList.get(i);
                String object_id = (String) abean.get("object_id");
                String a0101 = (String) abean.get("a0101");
                String original_score = (String) abean.get("original_score");
                String score = (String) abean.get("score");
                String resultdesc = (String) abean.get("resultdesc");
                String score_adjust = (String) abean.get("score_adjust");

                this.rowNum++;
                colIndex = (short) 0;

                row = sheet.getRow(this.rowNum);
                if (row == null) {
                    row = sheet.createRow(this.rowNum);
                }

                writeCell(colIndex, String.valueOf(i + 1));
                colIndex++;

                // 详情列 lium
                if ("true".equalsIgnoreCase(showDetails)) {
                    if ("2".equalsIgnoreCase(object_type)) { // 人员
                        String b0110 = (String) abean.get("b0110");
                        String _b0110 = AdminCode.getCode("UN", b0110) != null ? AdminCode.getCode("UN", b0110).getCodename() : "";
                        this.writeCell2(colIndex, _b0110, "l", "");
                        colIndex++;

                        String e0122 = (String) abean.get("e0122");
                        String _e0122 = AdminCode.getCode("UM", e0122) != null ? AdminCode.getCode("UM", e0122).getCodename() : "";
                        this.writeCell2(colIndex, _e0122, "l", "");
                        colIndex++;

                        String e01a1 = (String) abean.get("e01a1");
                        String _e01a1 = AdminCode.getCode("@K", e01a1) != null ? AdminCode.getCode("@K", e01a1).getCodename() : "";
                        this.writeCell2(colIndex, _e01a1, "l", "");
                        colIndex++;
                    }

                    // 对象类别
                    String body_id = (String) abean.get("body_id");
                    String _body_id = "";
                    if (body_id != null && !"".equals(body_id)) {
                        Object name = bodyMap.get(Integer.valueOf(body_id));
                        _body_id = name == null ? "" : (String) name;
                    } else {
                        _body_id = ""; // 没有设置对象类别
                    }
                    this.writeCell2(colIndex, _body_id, "l", "");
                    colIndex++;
                }

                // writeCell(colIndex, a0101);
                this.writeCell2(colIndex, a0101, "l", "");
                colIndex++;

                String subsetMenus = loadxml.getRelatePlanSubSetMenuValue();// 引入的子集
                if (subsetMenus != null && subsetMenus.trim().length() > 0) {
                    String[] temps = subsetMenus.split(",");
                    for (int j = 0; j < temps.length; j++) {
                        String temp = temps[j].trim();
                        if (temp.length() == 0) {
                            continue;
                        }
                        FieldItem fielditem = DataDictionary.getFieldItem(temp);
                        String itemid = fielditem.getItemid();
                        this.writeCell2(colIndex, (String) abean.get(itemid),
                                "c", fielditem.getItemtype());
                        colIndex++;
                    }
                }
                if (!isByModelFlag) {//如果不是按岗位素质模型测评，打印excel时才打印指标列
                    for (int j = 0; j < a_pointList.size(); j++) {
                        String[] temp = (String[]) a_pointList.get(j);
                        // writeCell(colIndex, (String) abean.get(temp[0]));
                        this.writeCell2(colIndex, (String) abean.get(temp[0]), "r",
                                "N");
                        colIndex++;
                    }
                }

                // 引入关联计划的字段
                for (int m = 0; m < plan_list.size(); m++) {
                    LazyDynaBean tempBean = (LazyDynaBean) plan_list.get(m);
                    String id = (String) tempBean.get("id");

                    String Menus = (String) tempBean.get("Menus");
                    if (Menus != null && Menus.trim().length() > 0) {
                        String[] temps = Menus.split(",");
                        for (int j = 0; j < temps.length; j++) {
                            String temp = temps[j].trim();
                            if (temp.length() == 0) {
                                continue;
                            }
                            if ("score".equalsIgnoreCase(temp)) {
                                this.writeCell2(colIndex,
                                        (String) abean.get("G_" + id), "r", "N");
                                colIndex++;
                            } else if ("Grade".equalsIgnoreCase(temp)) {
                                this.writeCell2(colIndex, (String) abean
                                        .get("G_" + id + "_Grade"), "c", "");
                                colIndex++;
                            } else if ("Avg".equalsIgnoreCase(temp)) {
                                this.writeCell2(colIndex,
                                        (String) abean.get("G_" + id + "_Avg"),
                                        "r", "N");
                                colIndex++;
                            } else if ("Max".equalsIgnoreCase(temp)) {
                                this.writeCell2(colIndex,
                                        (String) abean.get("G_" + id + "_Max"),
                                        "r", "N");
                                colIndex++;
                            } else if ("Min".equalsIgnoreCase(temp)) {
                                this.writeCell2(colIndex,
                                        (String) abean.get("G_" + id + "_Min"),
                                        "r", "N");
                                colIndex++;
                            } else if ("XiShu".equalsIgnoreCase(temp)) {
                                this.writeCell2(colIndex, (String) abean
                                        .get("G_" + id + "_XiShu"), "r", "N");
                                colIndex++;
                            } else if ("Order".equalsIgnoreCase(temp)) {
                                this.writeCell2(colIndex, (String) abean
                                        .get("G_" + id + "_Order"), "r", "N");
                                colIndex++;
                            } else if ("UMOrd".equalsIgnoreCase(temp)) {
                                this.writeCell2(colIndex, (String) abean
                                        .get("G_" + id + "_UMOrd"), "r", "N");
                                colIndex++;
                            } else if ("Mark".equalsIgnoreCase(temp)) {
                                this.writeCell2(
                                        colIndex,
                                        (String) abean.get("G_" + id + "_Mark"),
                                        "c", "");
                                colIndex++;
                            } else if (temp.indexOf("Body") != -1) {
                                String bodyid = temp.replaceAll("Body", "");
                                this.writeCell2(
                                        colIndex,
                                        (String) abean.get("G_" + id + "_B_"
                                                + ("-1".equals(bodyid) ? "X1" : bodyid)), "r", "N");
                                colIndex++;
                            } else if (temp.indexOf("Item") != -1) {
                                String itemid = temp.replaceAll("Item", "");
                                this.writeCell2(
                                        colIndex,
                                        (String) abean.get("G_" + id + "_Item"
                                                + itemid), "r", "N");
                                colIndex++;
                            } else {
                                this.writeCell2(
                                        colIndex,
                                        (String) abean.get("G_" + id + "_"
                                                + temp), "r", "N");
                                colIndex++;
                            }
                        }
                    } else {
                        this.writeCell2(colIndex,
                                (String) abean.get("G_" + id), "r", "N");
                        colIndex++;
                    }
                }

                // writeCell(colIndex, (String) abean.get("original_score"));
                this.writeCell2(colIndex, (String) abean.get("original_score"),
                        "r", "N");
                colIndex++;
                // writeCell(colIndex, (String) abean.get("score"));
                this.writeCell2(colIndex, (String) abean.get("score"), "r", "N");
                colIndex++;
                //纠偏总分  haosl start 2017-8-10
                Hashtable paramters = loadxml.getDegreeWhole();
                String deviationScoreUsed = (String) paramters.get("deviationScoreUsed");
                DbWizard dbWizard = new DbWizard(this.conn);
                if ("1".equals(deviationScoreUsed) && dbWizard.isExistField("per_result_" + this.planid, "reviseScore", false)) {
                    this.writeCell2(colIndex, (String) abean.get("reviseScore"), "r", "N");
                    colIndex++;
                }
                //纠偏总分  haosl end 2017-8-10
                if (busitype != null && busitype.trim().length() > 0
                        && "1".equals(busitype)) {
                    this.writeCell2(colIndex,
                            (String) abean.get("postRuleScore"), "r", "N");
                    colIndex++;

                    this.writeCell2(colIndex,
                            (String) abean.get("mateSurmise"), "r", "");
                    colIndex++;
                }

                if ((GrpMenu1 == null && GrpMenu1.trim().length() <= 0)
                        && (GrpMenu2 == null && GrpMenu2.trim().length() <= 0)) {
                    writeCell(colIndex, (String) abean.get("org_ordering")
                            + "/" + (String) abean.get("org_GrpNum"));
                    colIndex++;
                } else {
                    String[] str1 = GrpMenu1.split(";");
                    String[] str2 = GrpMenu2.split(";");
                    if ((str1[0] != null && str1[0].trim().length() > 0)
                            || (str2[0] != null && str2[0].trim().length() > 0)) {
                    } else {
                        writeCell(colIndex, (String) abean.get("org_ordering")
                                + "/" + (String) abean.get("org_GrpNum"));
                        colIndex++;
                    }
                }

                // writeCell(colIndex, (String) abean.get("exs_grpavg"));
                this.writeCell2(colIndex, (String) abean.get("exs_grpavg"),
                        "r", "N");
                colIndex++;

                if (computeFashion == 1) {
                    // writeCell(colIndex, (String) abean.get("exS_GrpMax"));
                    this.writeCell2(colIndex, (String) abean.get("exS_GrpMax"),
                            "r", "N");
                    colIndex++;
                    // writeCell(colIndex, (String) abean.get("exS_GrpMin"));
                    this.writeCell2(colIndex, (String) abean.get("exS_GrpMin"),
                            "r", "N");
                    colIndex++;
                    writeCell(colIndex, (String) abean.get("ordering") + "/"
                            + (String) abean.get("ex_GrpNum"));
                    colIndex++;
                }
                // writeCell(colIndex, (String) abean.get("exX_object"));
                if (busitype == null || busitype.trim().length() <= 0
                        || !"1".equals(busitype)) {
                    this.writeCell2(colIndex, (String) abean.get("exX_object"),
                            "r", "N");
                    colIndex++;
                }
                writeCell(colIndex, (String) abean.get("resultdesc"));
                colIndex++;

                if (computeFashion == 1) {
                    if (busitype == null || busitype.trim().length() <= 0
                            || !"1".equals(busitype)) {
                        this.writeCell2(colIndex,
                                (String) abean.get("addScore"), "r", "N");
                        colIndex++;
                        this.writeCell2(colIndex,
                                (String) abean.get("minusScore"), "r", "N");
                        colIndex++;
                    }
                    writeCell(colIndex, (String) abean.get("evalRemark"));
                    colIndex++;
                    if ("true"
                            .equalsIgnoreCase((String) this.planParamSet.get("ShowEvalDirector"))) {
                        writeCell(colIndex, (String) abean.get("director"));
                        colIndex++;
                    }
                    if ("true"
                            .equalsIgnoreCase((String) this.planParamSet
                                    .get("AllowAdjustEvalResult"))) {
                        writeCell(colIndex, (String) abean.get("score_adjust"));
                        colIndex++;
                    }
                }

                if ("1".equals(pointResultValue)
                        && this.gradeTempList.size() > 0
                        && this.planParamSet.get("WholeEval") != null
                        && "True"
                        .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                    if ("0".equals((String) this.planParamSet.get("WholeEvalMode"))) {
                        for (int j = 0; j < this.gradeTempList.size(); j++) {
                            LazyDynaBean a_bean = (LazyDynaBean) this.gradeTempList
                                    .get(j);
                            String id = (String) a_bean.get("id");
                            String value = abean.get("V_" + id) != null ? (String) abean
                                    .get("V_" + id) : "&nbsp;";
                            // writeCell(colIndex, value);
                            this.writeCell2(colIndex, value, "r", "N");
                            colIndex++;
                        }
                        String value = abean.get("V_SUM") != null ? (String) abean
                                .get("V_SUM") : "&nbsp;";
                        // writeCell(colIndex, value);
                        this.writeCell2(colIndex, value, "r", "N");
                    } else if ("1".equals((String) this.planParamSet.get("WholeEvalMode"))) {
                        String whole_score = abean.get("whole_score") != null ? (String) abean
                                .get("whole_score") : "&nbsp;";
                        this.writeCell2(colIndex, whole_score, "r", "N");
                    }
                    colIndex++;
                }
                writeCell(colIndex, (String) abean.get("confirmFlag"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @param list
     * @param pointList
     * @param opt       计算方式 1：得分统计 2:主体票数统计 3: 指标票数分统计
     * @return
     */
    public void getTableHeadExcel(ArrayList list, ArrayList pointList, int opt,
                                  String pointResultValue, String busitype) {
        ArrayList items = (ArrayList) list.get(0); // 模版项目列表
        HashMap itemsCountMap = (HashMap) list.get(1); // 最底层项目的指标个数集合
        int lays = ((Integer) list.get(2)).intValue(); // 表头的总层数
        HashMap map = (HashMap) list.get(3); // 各项目的子项目或指标个数
        ArrayList bottomItemList = (ArrayList) list.get(4); // 模版最底层的项目

        String GrpMenu1 = (String) this.planParamSet.get("GrpMenu1"); // 排名指标1，格式：字段名;层级
        String GrpMenu2 = (String) this.planParamSet.get("GrpMenu2"); // 排名指标2，格式：字段名;层级
        ArrayList tempColumnList = new ArrayList();
        /* 画第一层表头 */
        if (isByModelFlag) {
            lays = 1;
        }
        int alay = lays;
        if (opt == 3
                || (opt == 1 && ("2".equals(pointResultValue)
                || "3".equals(pointResultValue) || "4"
                .equals(pointResultValue)))) {
            alay++;
        }
        this.tableHeadTotalLayNum = alay;

        executeCell(this.rowNum, colIndex, alay, colIndex,
                ResourceFactory.getProperty("conlumn.mediainfo.info_id"),
                this.centerstyle);
        colIndex++;

        int subsetNum = 0; // 表头第二行的起始横坐标(猜测),如果显示详情，则应做如下更改 lium
        if ("true".equalsIgnoreCase(this.showDetails)) {
            if ("2".equals(this.object_type)) {
                // 单位名称
                executeCell(rowNum, colIndex, alay, colIndex, ResourceFactory.getProperty("column.sys.org"), centerstyle);
                colIndex++;
                subsetNum++;

                // 部门
                executeCell(rowNum, colIndex, alay, colIndex, ResourceFactory.getProperty("column.sys.dept"), centerstyle);
                colIndex++;
                subsetNum++;

                // 岗位名称
                executeCell(rowNum, colIndex, alay, colIndex, ResourceFactory.getProperty("column.sys.pos"), centerstyle);
                colIndex++;
                subsetNum++;
            }

            // 对象类别
            executeCell(rowNum, colIndex, alay, colIndex, ResourceFactory.getProperty("kpi.originalData.KpiTargetObjecType"), centerstyle);
            colIndex++;
            subsetNum++;
        }

        executeCell(this.rowNum, colIndex, alay, colIndex,
                this.getObjTitle(this.planVo.getInt("object_type")),
                this.centerstyle);
        colIndex++;

        String subsetMenus = loadxml.getRelatePlanSubSetMenuValue(); // 引入的子集
        if (subsetMenus != null && subsetMenus.trim().length() > 0) {
            String[] temps = subsetMenus.split(",");
            for (int j = 0; j < temps.length; j++) {
                String temp = temps[j].trim();
                if (temp.length() == 0) {
                    continue;
                }
                FieldItem fielditem = DataDictionary.getFieldItem(temp);
                String itemdesc = fielditem.getItemdesc();
                executeCell(this.rowNum, colIndex, alay, colIndex, itemdesc,
                        this.centerstyle);
                colIndex++;
                subsetNum++;
            }
        }

        int n = 0;
        int countNum = 0;
        boolean lastItemIsSel = false;// 最后一个项目是个性项目
        if (!isByModelFlag) {
            for (Iterator t = items.iterator(); t.hasNext(); ) {
                n++;
                String[] temp = (String[]) t.next();
                if (temp[1] == null) {
                    short to_col = 0;
                    if ("2".equals(temp[5])) {
                        to_col = colIndex;
                        executeCell(this.rowNum, colIndex, this.rowNum + lays - 1,
                                to_col, temp[3], this.centerstyle);
                        if (n == items.size()) {
                            lastItemIsSel = true;
                        }
                    } else {
                        to_col = Short.parseShort(String.valueOf(colIndex
                                + Short.parseShort((String) map.get(temp[0])) - 1));
                        executeCell(this.rowNum, colIndex, this.rowNum, to_col,
                                temp[3], this.centerstyle);
                    }
                    colIndex = to_col;
                    colIndex++;
                    tempColumnList.add(temp);
                }
                if ("2".equals(temp[5])) {
                    countNum++;
                }
            }
        }

        /*
         * ArrayList planlist = loadxml.getRelatePlanValue("Plan","ID");
         * ArrayList planList=getPlanNameList(planlist); for(int
         * i=0;i<planList.size();i++) { executeCell(this.rowNum, colIndex, alay,
         * colIndex,(String)planList.get(i), this.centerstyle); colIndex++; }
         */
        ArrayList planlist = loadxml.getRelatePlanValue("Plan");
        LazyDynaBean zbean = null;
        for (int i = 0; i < planlist.size(); i++) {
            zbean = (LazyDynaBean) planlist.get(i);
            String id = (String) zbean.get("id");
            String Name = (String) zbean.get("Name");
            // String Type=(String)zbean.get("Type");

            int colspanValue = 0;
            String Menus = (String) zbean.get("Menus");
            if (Menus != null && Menus.trim().length() > 0) {
                String[] temps = Menus.split(",");
                for (int j = 0; j < temps.length; j++) {
                    String temp = temps[j].trim();
                    if (temp.length() == 0) {
                        continue;
                    }
                    colspanValue++;
                }
            } else {
                colspanValue++;
            }
            // 引入计划的名称
            executeCell(this.rowNum, colIndex, this.rowNum,
                    Short.parseShort(String
                            .valueOf(colIndex + colspanValue - 1)), Name,
                    this.centerstyle);
            colIndex += colspanValue;
        }

        executeCell(
                this.rowNum,
                colIndex,
                alay,
                colIndex,
                ResourceFactory
                        .getProperty("lable.performance.evaluation.computeTotal"),
                this.centerstyle);
        colIndex++;
        executeCell(this.rowNum, colIndex, alay, colIndex,
                ResourceFactory.getProperty("label.kh.template.total"),
                this.centerstyle);
        colIndex++;
        //是否使用纠偏总分 0不是  1是
        Hashtable paramters = loadxml.getDegreeWhole();
        String deviationScoreUsed = (String) paramters.get("deviationScoreUsed");
        DbWizard dbWizard = new DbWizard(this.conn);
        if ("1".equals(deviationScoreUsed) && dbWizard.isExistField("per_result_" + this.planid, "reviseScore", false)) {
            executeCell(this.rowNum, colIndex, alay, colIndex, "纠偏总分", this.centerstyle);
            colIndex++;
        }
        if (busitype != null && busitype.trim().length() > 0
                && "1".equals(busitype)) {
            executeCell(this.rowNum, colIndex, alay, colIndex, "岗位标准分值",
                    this.centerstyle);
            colIndex++;
            executeCell(this.rowNum, colIndex, alay, colIndex, "匹配度",
                    this.centerstyle);
            colIndex++;
        }

        if ((GrpMenu1 == null && GrpMenu1.trim().length() <= 0)
                && (GrpMenu2 == null && GrpMenu2.trim().length() <= 0)) {
            executeCell(this.rowNum, colIndex, alay, colIndex, "部门排名",
                    this.centerstyle);
            colIndex++;
        } else {
            String[] str1 = GrpMenu1.split(";");
            String[] str2 = GrpMenu2.split(";");
            if ((str1[0] != null && str1[0].trim().length() > 0)
                    || (str2[0] != null && str2[0].trim().length() > 0)) {
            } else {
                executeCell(this.rowNum, colIndex, alay, colIndex, "部门排名",
                        this.centerstyle);
                colIndex++;
            }
        }

        executeCell(this.rowNum, colIndex, alay, colIndex, "组内平均分",
                this.centerstyle);
        colIndex++;
        if (opt == 1) {
            executeCell(this.rowNum, colIndex, alay, colIndex, "组内最高分",
                    this.centerstyle);
            colIndex++;
            executeCell(this.rowNum, colIndex, alay, colIndex, "组内最低分",
                    this.centerstyle);
            colIndex++;

            if ((GrpMenu1 == null && GrpMenu1.trim().length() <= 0)
                    && (GrpMenu2 == null && GrpMenu2.trim().length() <= 0)) {
            } else {
                String[] str1 = GrpMenu1.split(";");
                String[] str2 = GrpMenu2.split(";");
                if ((str1[0] != null && str1[0].trim().length() > 0)
                        || (str2[0] != null && str2[0].trim().length() > 0)) {
                    executeCell(this.rowNum, colIndex, alay, colIndex, "排名",
                            this.centerstyle);
                    colIndex++;
                }
            }

            if ((GrpMenu1 == null && GrpMenu1.trim().length() <= 0)
                    && (GrpMenu2 == null && GrpMenu2.trim().length() <= 0)) {
                executeCell(this.rowNum, colIndex, alay, colIndex, "组内排名",
                        this.centerstyle);
                colIndex++;
            } else {
                String[] str1 = GrpMenu1.split(";");
                String[] str2 = GrpMenu2.split(";");
                if ((str1[0] != null && str1[0].trim().length() > 0)
                        || (str2[0] != null && str2[0].trim().length() > 0)) {
                } else {
                    executeCell(this.rowNum, colIndex, alay, colIndex, "组内排名",
                            this.centerstyle);
                    colIndex++;
                }
            }
        }
        if (busitype == null || busitype.trim().length() <= 0
                || !"1".equals(busitype)) {
            executeCell(this.rowNum, colIndex, alay, colIndex, "等级系数",
                    this.centerstyle);
            colIndex++;
        }
        executeCell(this.rowNum, colIndex, alay, colIndex,
                ResourceFactory.getProperty("jx.param.dengji"),
                this.centerstyle);

        if (opt == 1) {
            if (busitype == null || busitype.trim().length() <= 0
                    || !"1".equals(busitype)) {
                colIndex++;
                executeCell(this.rowNum, colIndex, alay, colIndex, "关键事件加分",
                        this.centerstyle);
                colIndex++;
                executeCell(this.rowNum, colIndex, alay, colIndex, "关键事件扣分",
                        this.centerstyle);
            }

            colIndex++;
            executeCell(this.rowNum, colIndex, alay, colIndex, "备注",
                    this.centerstyle);
            if ("true"
                    .equalsIgnoreCase((String) this.planParamSet.get("ShowEvalDirector"))) {
                colIndex++;
                executeCell(this.rowNum, colIndex, alay, colIndex, "负责人",
                        this.centerstyle);
            }
            if ("true"
                    .equalsIgnoreCase((String) this.planParamSet.get("AllowAdjustEvalResult"))) {
                colIndex++;
                executeCell(this.rowNum, colIndex, alay, colIndex, "评分调整",
                        this.centerstyle);
            }
        }
        if ("1".equals(pointResultValue)
                && opt == 1
                && this.gradeTempList.size() > 0
                && this.planParamSet.get("WholeEval") != null
                && "True"
                .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
            colIndex++;
            if ("0".equals((String) this.planParamSet.get("WholeEvalMode"))) {
                short to_col = Short.parseShort(String.valueOf(colIndex
                        + gradeTempList.size() - 1));
                executeCell(this.rowNum, colIndex, this.rowNum, to_col,
                        ResourceFactory.getProperty("org.performance.zt"),
                        this.centerstyle);
                colIndex++;
                executeCell(this.rowNum, Short.parseShort(String.valueOf(colIndex
                                + gradeTempList.size() - 1)), alay, Short.parseShort(String
                                .valueOf(colIndex + gradeTempList.size() - 1)),
                        ResourceFactory
                                .getProperty("lable.welcome.invtextresult.ballot"),
                        this.centerstyle);
                totalColNum = colIndex + gradeTempList.size() - 1;
            } else if ("1".equals((String) this.planParamSet.get("WholeEvalMode"))) {
                executeCell(this.rowNum, colIndex, alay, colIndex, "总体评价得分",
                        this.centerstyle);
                totalColNum = colIndex;
            }
        } else {
            totalColNum = colIndex;
        }

        totalColNum++;
        executeCell(this.rowNum, Short.parseShort(String.valueOf(totalColNum)), alay, Short.parseShort(String.valueOf(totalColNum)), "考核确认",
                this.centerstyle);

        if (!isByModelFlag) {
            // 画表头的中间层
            ArrayList perPointList = (ArrayList) pointList.get(1);
            SingleGradeBo singleGradeBo = new SingleGradeBo(this.conn);
            HashMap pointItemMap = singleGradeBo.getPointItemList(
                    (ArrayList) pointList.get(1), items);
            getMidHeadExcel(lays, tempColumnList, items, map, perPointList,
                    pointItemMap, opt, pointResultValue, subsetNum, GrpMenu1, GrpMenu2, busitype);

            // 画指标列
            StringBuffer sequence = new StringBuffer("");
            this.rowNum++;
            colIndex = (short) (2 + subsetNum);
            int itemIndex = 0;
            int pointCout = 0;
            HSSFCellStyle pointStyle = style(this.workbook, 2);
            for (int j = 0; j < perPointList.size(); j++) {
                String[] temp = (String[]) perPointList.get(j);
                String itemid = getTopParentItem(temp[3]);// 指标对应的顶层项目
                // String itemid = temp[3];//指标对应的顶层项目
                for (; itemIndex < items.size(); itemIndex++) {
                    String[] temp1 = (String[]) items.get(itemIndex);
                    if (temp1[1] != null) {
                        continue;
                    }
                    if (!temp1[0].equals(itemid)) {
                        colIndex++;
                    } else {
                        if (pointCout == 0) {
                            pointCout = new Integer((String) map.get(itemid))
                                    .intValue();
                        }
                        break;
                    }
                }
                if (pointCout > 0) {
                    pointCout--;
                }
                if (pointCout == 0) {
                    itemIndex++;
                }
                executeCell(this.rowNum, colIndex, this.rowNum, colIndex, temp[1],
                        pointStyle);
                colIndex++;
            }

            /** 20150310 dengcan
             // JinChunhai 2011.08.17
             if (perPointList == null || perPointList.size() <= 0)
             colIndex += items.size() - 1;
             if (lastItemIsSel)
             colIndex += countNum;
             */
            colIndex += countNum; // 20150310 取消无用的操作，直接追加个性化项目(数目) lium

            if (lays == 2) {
                LazyDynaBean relaBean = this.getRelaList();
                HashMap bodyMap = (HashMap) relaBean.get("bodyMap");
                HashMap itemMap = (HashMap) relaBean.get("itemMap");
                HashMap pointMap = (HashMap) relaBean.get("pointMap");

                for (int i = 0; i < planlist.size(); i++) {
                    zbean = (LazyDynaBean) planlist.get(i);
                    String id = (String) zbean.get("id");
                    // String Name=(String)zbean.get("Name");
                    // String Type=(String)zbean.get("Type");

                    String Menus = (String) zbean.get("Menus");
                    if (Menus != null && Menus.trim().length() > 0) {
                        String[] temps = Menus.split(",");
                        for (int j = 0; j < temps.length; j++) {
                            String temp = temps[j].trim();
                            if (temp.length() == 0) {
                                continue;
                            }
                            if ("score".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum,
                                        colIndex, "得分", this.centerstyle);
                                colIndex++;
                            } else if ("Grade".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum,
                                        colIndex, "等级", this.centerstyle);
                                colIndex++;
                            } else if ("Avg".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum,
                                        colIndex, "组平均分", this.centerstyle);
                                colIndex++;
                            } else if ("Max".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum,
                                        colIndex, "组最高分", this.centerstyle);
                                colIndex++;
                            } else if ("Min".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum,
                                        colIndex, "组最低分", this.centerstyle);
                                colIndex++;
                            } else if ("XiShu".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum,
                                        colIndex, "等级系数", this.centerstyle);
                                colIndex++;
                            } else if ("Order".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum,
                                        colIndex, "组内排名", this.centerstyle);
                                colIndex++;
                            } else if ("UMOrd".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum,
                                        colIndex, "部门排名", this.centerstyle);
                                colIndex++;
                            } else if ("Mark".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum,
                                        colIndex, "备注", this.centerstyle);
                                colIndex++;
                            } else if (temp.indexOf("Body") != -1) {
                                String bodyid = temp.replaceAll("Body", "");
                                executeCell(this.rowNum, colIndex, this.rowNum,
                                        colIndex,
                                        (String) bodyMap.get(bodyid.toLowerCase())
                                                + "评分", this.centerstyle);
                                colIndex++;
                            } else if (temp.indexOf("Item") != -1) {
                                String itemid = temp.replaceAll("Item", "");
                                executeCell(this.rowNum, colIndex, this.rowNum,
                                        colIndex, (String) itemMap.get(itemid),
                                        this.centerstyle);
                                colIndex++;
                            } else {
                                executeCell(this.rowNum, colIndex, this.rowNum,
                                        colIndex,
                                        (String) pointMap.get(temp.toLowerCase()),
                                        this.centerstyle);
                                colIndex++;
                            }
                        }
                    } else {
                        executeCell(this.rowNum, colIndex, this.rowNum, colIndex,
                                "得分", this.centerstyle);
                        colIndex++;
                    }
                }

                if ("1".equals(pointResultValue)
                        && opt == 1
                        && this.gradeTempList.size() > 0
                        && this.planParamSet.get("WholeEval") != null
                        && "True"
                        .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {

                    // 以下是固定列 计算总分 总分 组平均分 组最高分 组最低分 组内排名 等级系数 等级 关键事件加分 关键事件扣分 部门排名 考核结果确认
                    colIndex++;
                    colIndex++;
                    colIndex++;
                    colIndex++;

                    if ((GrpMenu1 == null && GrpMenu1.trim().length() <= 0)
                            && (GrpMenu2 == null && GrpMenu2.trim().length() <= 0)) {
                        colIndex++;
                    } else {
                        String[] str1 = GrpMenu1.split(";");
                        String[] str2 = GrpMenu2.split(";");
                        if ((str1[0] != null && str1[0].trim().length() > 0)
                                || (str2[0] != null && str2[0].trim().length() > 0)) {
                        } else {
                            colIndex++;
                        }
                    }
                    colIndex++;
                    colIndex++;
                    colIndex++;
                    colIndex++;
                    colIndex++;
                    colIndex++;
                    if (busitype == null || busitype.trim().length() <= 0
                            || !"1".equals(busitype)) {

                    } else {
                        colIndex--;
                    }
                    // 备注
                    if (opt == 1) {
                        colIndex++;
                        if ("true"
                                .equalsIgnoreCase((String) this.planParamSet.get("ShowEvalDirector")))// 负责人
                        {
                            colIndex++;
                        }
                        if ("true"
                                .equalsIgnoreCase((String) this.planParamSet
                                        .get("AllowAdjustEvalResult"))) // 评分调整
                        {
                            colIndex++;
                        }
                    }
                    if ("0".equals((String) this.planParamSet.get("WholeEvalMode"))) {
                        for (int i = 0; i < this.gradeTempList.size(); i++) {
                            LazyDynaBean abean = (LazyDynaBean) this.gradeTempList
                                    .get(i);
                            String itemname = (String) abean.get("itemname");
                            executeCell(this.rowNum, colIndex, this.rowNum + lays - 2,
                                    colIndex, itemname, this.centerstyle);
                            colIndex++;
                        }
                    }
                    colIndex++;// 考核结果确认
                    // executeCell(this.rowNum, colIndex, this.rowNum + lays - 2,
                    // colIndex,
                    // ResourceFactory.getProperty("lable.welcome.invtextresult.ballot"),
                    // this.centerstyle);
                }
            } else if (lays == 3) {/*
				if (pointResultValue.equals("1")
						&& opt == 1
						&& this.gradeTempList.size() > 0
						&& this.planParamSet.get("WholeEval") != null
						&& ((String) this.planParamSet.get("WholeEval"))
								.equalsIgnoreCase("True")) {
					for (int i = 0; i < planlist.size(); i++) {
						zbean = (LazyDynaBean) planlist.get(i);
						String Menus = (String) zbean.get("Menus");
						if (Menus != null && Menus.trim().length() > 0) {
							String[] temps = Menus.split(",");
							for (int j = 0; j < temps.length; j++) {
								colIndex++;
							}
						} else
							colIndex++;
					}

					// for(int i=0;i<planList.size();i++)
					// colIndex++;

					// 以下是固定列 计算总分 总分 组平均分 组最高分 组最低分 组内排名 等级系数 等级 关键事件加分 关键事件扣分 部门排名 考核结果确认
					colIndex++;
					colIndex++;
					colIndex++;
					colIndex++;

					if ((GrpMenu1 == null && GrpMenu1.trim().length() <= 0)
							&& (GrpMenu2 == null && GrpMenu2.trim().length() <= 0)) {
						colIndex++;
					} else {
						String[] str1 = GrpMenu1.split(";");
						String[] str2 = GrpMenu2.split(";");
						if ((str1[0] != null && str1[0].trim().length() > 0)
                                    || (str2[0] != null && str2[0].trim().length() > 0)) {
						} else {
							colIndex++;
						}
					}
					colIndex++;
					colIndex++;
					colIndex++;
					colIndex++;
					colIndex++;
					colIndex++;
					if (busitype == null || busitype.trim().length() <= 0
							|| !busitype.equals("1")) {

					} else {
						colIndex--;
					}
					// 备注
					if (opt == 1) {
						colIndex++;
						if (((String) this.planParamSet.get("ShowEvalDirector"))
								.equalsIgnoreCase("true"))// 负责人
							colIndex++;
						if (((String) this.planParamSet
								.get("AllowAdjustEvalResult"))
								.equalsIgnoreCase("true")) // 评分调整
							colIndex++;
					}
					colIndex++;// 考核结果确认
					if("0".equals((String) this.planParamSet.get("WholeEvalMode"))) {
						for (int i = 0; i < this.gradeTempList.size(); i++) {
							LazyDynaBean abean = (LazyDynaBean) this.gradeTempList
									.get(i);
							String itemname = (String) abean.get("itemname");
							executeCell(this.rowNum - 1, colIndex, this.rowNum + lays
									- 3, colIndex, itemname, this.centerstyle);
							colIndex++;
						}
					}
					// executeCell(this.rowNum-1, colIndex, this.rowNum + lays - 3,
					// colIndex,
					// ResourceFactory.getProperty("lable.welcome.invtextresult.ballot"),
					// this.centerstyle);

				}
			*/
            }

            if (opt == 1
                    && ("2".equals(pointResultValue)
                    || "3".equals(pointResultValue) || "4"
                    .equals(pointResultValue))) {
                this.rowNum++;
                colIndex = (short) (2 + subsetNum);
                for (Iterator t = perPointList.iterator(); t.hasNext(); ) {
                    String[] temp = (String[]) t.next();
                    executeCell(this.rowNum, colIndex, this.rowNum, colIndex, "%",
                            this.centerstyle);
                    colIndex++;
                }
                for (Iterator t = items.iterator(); t.hasNext(); ) {
                    String[] temp = (String[]) t.next();
                    if (temp[1] == null) {
                        if ("2".equals(temp[5])) {
                            executeCell(this.rowNum, colIndex, this.rowNum,
                                    colIndex, "%", this.centerstyle);
                            colIndex++;
                        }
                    }
                }

            }
        }

    }

    // 获得模板项目的顶层项目
    public String getTopParentItem(String itemid) {
        String topParentItem = "";
        ContentDAO dao = new ContentDAO(this.conn);
        String sql = "select * from per_template_item where template_id='"
                + this.template_id + "' and item_id = '" + itemid + "'";
        try {
            RowSet rowSet = dao.search(sql);
            if (rowSet.next()) {
                String parenItem = rowSet.getString("parent_id");
                if (parenItem == null) {
                    topParentItem = itemid;
                } else {
                    topParentItem = getTopParentItem(parenItem);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return topParentItem;
    }

    // 生成表头中间层html
    public void getMidHeadExcel(int lays, ArrayList tempColumnList,
                                ArrayList items, HashMap map, ArrayList perPointList,
                                HashMap pointItemMap, int opt, String pointResultValue,
                                int subsetNum, String GrpMenu1, String GrpMenu2, String busitype) {

        //记录父级项目的colIndex,解决，项目中没有指标时导出格式错误的问题  haosl  2017-8-16
        HashMap parentGridColIndexMap = new HashMap();

        for (int b = 2; b < lays; b++) {
            ArrayList tempList = new ArrayList();
            this.rowNum++;
            colIndex = (short) (2 + subsetNum);
            int d = 0;

            for (int i = 0; i < tempColumnList.size(); i++) {
                String[] temp1 = (String[]) tempColumnList.get(i);
                if (temp1[0] == null) {
                    executeCell(this.rowNum, colIndex, this.rowNum, colIndex,
                            "", this.centerstyle);
                    colIndex++;
                    tempList.add(temp1);
                    d++;
                } else {
                    int pointNum = Integer.parseInt((String) map.get(temp1[0]));
                    int isNullItem = 0;
                    for (Iterator t1 = items.iterator(); t1.hasNext(); ) {
                        String[] temp2 = (String[]) t1.next();
                        if (temp2[1] != null && temp2[1].equals(temp1[0])) {
                            if ("2".equals(temp2[5])) {

                                if (parentGridColIndexMap.get(temp1[0]) != null) {
                                    colIndex = Short.parseShort((String) parentGridColIndexMap.get(temp1[0]));
                                    //当已经找到了父级项目的colIndex后，就不在找了，否则有多个子项目时，会写了相同位置上  haosl  2017-8-16
                                    parentGridColIndexMap.remove(temp1[0]);
                                }
                                executeCell(this.rowNum, colIndex, this.rowNum
                                                + lays - b, colIndex, temp2[3],
                                        this.centerstyle);
                                colIndex++;
                                isNullItem++;
                            } else {
                                int pointNum2 = Integer.parseInt((String) map
                                        .get(temp2[0]));
                                int selfnum = 0;
                                isNullItem++;
                                boolean isNull = true;
                                while (d < perPointList.size()) {
                                    String[] point = (String[]) perPointList
                                            .get(d);
                                    ArrayList pointItemList = (ArrayList) pointItemMap
                                            .get(point[0]);
                                    int flag = 0;
                                    for (Iterator t2 = pointItemList.iterator(); t2
                                            .hasNext(); ) {
                                        String[] tempItem = (String[]) t2
                                                .next();
                                        if (tempItem[0].equals(temp2[0])) {
                                            flag++;
                                            isNull = false;
                                        }
                                    }

                                    if (flag == 0) {
                                        executeCell(this.rowNum, colIndex,
                                                this.rowNum, colIndex, "",
                                                this.centerstyle);
                                        colIndex++;
                                        String[] ttt = new String[5];
                                        tempList.add(ttt);
                                        d++;
                                        selfnum++;

                                    } else {
                                        short to_col = Short
                                                .parseShort(String.valueOf(colIndex
                                                        + Integer
                                                        .parseInt((String) map
                                                                .get(temp2[0]))
                                                        - 1));
                                        executeCell(this.rowNum, colIndex,
                                                this.rowNum, to_col, temp2[3],
                                                this.centerstyle);
                                        colIndex = to_col;
                                        colIndex++;
                                        d += pointNum2;
                                        selfnum += pointNum2;
                                        tempList.add(temp2);
                                        break;
                                    }
                                }

                                if (isNull) {//当模板下无指标时
                                    short to_col = Short.parseShort(String.valueOf(colIndex + pointNum2 - 1));
                                    executeCell(this.rowNum, colIndex,
                                            this.rowNum, to_col, temp2[3],
                                            this.centerstyle);
                                    parentGridColIndexMap.put(temp2[0], colIndex + "");
                                    colIndex = ++to_col;
                                    tempList.add(temp2);
                                }

                            }
                        }
                    }

                    if (isNullItem == 0) {
                        for (int a = 0; a < pointNum; a++) {
                            executeCell(this.rowNum, colIndex, this.rowNum,
                                    colIndex, "", this.centerstyle);
                            colIndex++;
                            String[] ttt = new String[5];
                            tempList.add(ttt);
                            d++;
                        }
                    }

                }
            }

            if (b == 2) {
                ArrayList planlist = loadxml.getRelatePlanValue("Plan");
                LazyDynaBean zbean = null;
                LazyDynaBean relaBean = this.getRelaList();
                HashMap bodyMap = (HashMap) relaBean.get("bodyMap");
                HashMap itemMap = (HashMap) relaBean.get("itemMap");
                HashMap pointMap = (HashMap) relaBean.get("pointMap");

                for (int i = 0; i < planlist.size(); i++) {
                    zbean = (LazyDynaBean) planlist.get(i);
                    String id = (String) zbean.get("id");
                    // String Name=(String)zbean.get("Name");
                    // String Type=(String)zbean.get("Type");

                    String Menus = (String) zbean.get("Menus");
                    if (Menus != null && Menus.trim().length() > 0) {
                        String[] temps = Menus.split(",");
                        for (int j = 0; j < temps.length; j++) {
                            String temp = temps[j].trim();
                            if (temp.length() == 0) {
                                continue;
                            }
                            if ("score".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum
                                                + lays - 2, colIndex, "得分",
                                        this.centerstyle);
                                colIndex++;
                            } else if ("Grade".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum
                                                + lays - 2, colIndex, "等级",
                                        this.centerstyle);
                                colIndex++;
                            } else if ("Avg".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum
                                                + lays - 2, colIndex, "组平均分",
                                        this.centerstyle);
                                colIndex++;
                            } else if ("Max".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum
                                                + lays - 2, colIndex, "组最高分",
                                        this.centerstyle);
                                colIndex++;
                            } else if ("Min".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum
                                                + lays - 2, colIndex, "组最低分",
                                        this.centerstyle);
                                colIndex++;
                            } else if ("XiShu".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum
                                                + lays - 2, colIndex, "等级系数",
                                        this.centerstyle);
                                colIndex++;
                            } else if ("Order".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum
                                                + lays - 2, colIndex, "组内排名",
                                        this.centerstyle);
                                colIndex++;
                            } else if ("UMOrd".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum
                                                + lays - 2, colIndex, "部门排名",
                                        this.centerstyle);
                                colIndex++;
                            } else if ("Mark".equalsIgnoreCase(temp)) {
                                executeCell(this.rowNum, colIndex, this.rowNum
                                                + lays - 2, colIndex, "备注",
                                        this.centerstyle);
                                colIndex++;
                            } else if (temp.indexOf("Body") != -1) {
                                String bodyid = temp.replaceAll("Body", "");
                                executeCell(
                                        this.rowNum,
                                        colIndex,
                                        this.rowNum + lays - 2,
                                        colIndex,
                                        (String) bodyMap.get(bodyid
                                                .toLowerCase()) + "评分",
                                        this.centerstyle);
                                colIndex++;
                            } else if (temp.indexOf("Item") != -1) {
                                String itemid = temp.replaceAll("Item", "");
                                executeCell(this.rowNum, colIndex, this.rowNum
                                                + lays - 2, colIndex,
                                        (String) itemMap.get(itemid),
                                        this.centerstyle);
                                colIndex++;
                            } else {
                                executeCell(this.rowNum, colIndex, this.rowNum
                                                + lays - 2, colIndex,
                                        (String) pointMap.get(temp
                                                .toLowerCase()),
                                        this.centerstyle);
                                colIndex++;
                            }
                        }
                    } else {
                        executeCell(this.rowNum, colIndex, this.rowNum + lays
                                - 2, colIndex, "得分", this.centerstyle);
                        colIndex++;
                    }
                }

                if ("1".equals(pointResultValue)
                        && opt == 1
                        && this.gradeTempList.size() > 0
                        && this.planParamSet.get("WholeEval") != null
                        && "True"
                        .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                    // colIndex++;
                    // colIndex++;
                    // colIndex++;

                    // 以下是固定列 计算总分 总分 组平均分 组最高分 组最低分 组内排名 等级系数 等级 关键事件加分 关键事件扣分 部门排名 考核结果确认
                    colIndex++;
                    colIndex++;
                    colIndex++;
                    colIndex++;

                    if ((GrpMenu1 == null && GrpMenu1.trim().length() <= 0)
                            && (GrpMenu2 == null && GrpMenu2.trim().length() <= 0)) {
                        colIndex++;
                    } else {
                        String[] str1 = GrpMenu1.split(";");
                        String[] str2 = GrpMenu2.split(";");
                        if ((str1[0] != null && str1[0].trim().length() > 0)
                                || (str2[0] != null && str2[0].trim().length() > 0)) {
                        } else {
                            colIndex++;
                        }
                    }
                    colIndex++;
                    colIndex++;
                    colIndex++;
                    colIndex++;
                    colIndex++;
                    colIndex++;
                    if (busitype == null || busitype.trim().length() <= 0
                            || !"1".equals(busitype)) {

                    } else {
                        colIndex--;
                    }
                    // 备注
                    if (opt == 1) {
                        colIndex++;
                        if ("true"
                                .equalsIgnoreCase((String) this.planParamSet.get("ShowEvalDirector")))// 负责人
                        {
                            colIndex++;
                        }
                        if ("true"
                                .equalsIgnoreCase((String) this.planParamSet
                                        .get("AllowAdjustEvalResult"))) // 评分调整
                        {
                            colIndex++;
                        }
                    }
                    colIndex++;// 考核结果确认

                    for (int i = 0; i < this.gradeTempList.size(); i++) {
                        LazyDynaBean abean = (LazyDynaBean) this.gradeTempList
                                .get(i);
                        String itemname = (String) abean.get("itemname");
                        executeCell(this.rowNum, colIndex, this.rowNum + lays
                                - 2, colIndex, itemname, this.centerstyle);
                        colIndex++;
                    }
                    // executeCell(this.rowNum, colIndex, this.rowNum + lays -
                    // 2, colIndex,
                    // ResourceFactory.getProperty("lable.welcome.invtextresult.ballot"),
                    // this.centerstyle);
                }
            }
            tempColumnList = tempList;
        }

    }

    public void writeCell(short colIndex, String context) {

        csCell = row.getCell(colIndex);
        if (csCell == null) {
            csCell = row.createCell(colIndex);
        }
        HSSFRichTextString textstr = new HSSFRichTextString(context);
        csCell.setCellValue(textstr);
        csCell.setCellStyle(centerstyle);
    }

    public void writeCell2(short colIndex, String value, String style,
                           String type) {
        csCell = row.getCell(colIndex);
        if (csCell == null) {
            csCell = row.createCell(colIndex);
        }

        if ("c".equalsIgnoreCase(style)) {
            csCell.setCellStyle(this.style);
        } else if ("l".equalsIgnoreCase(style)) {
            csCell.setCellStyle(this.style_l);
        } else if ("R".equalsIgnoreCase(style)) {
            csCell.setCellStyle(this.style_r);
        }

        if ("N".equalsIgnoreCase(type)) {
            if (value == null || value.length() == 0) {
                value = "0.0";
            }
            csCell.setCellType(HSSFCell.CELL_TYPE_NUMERIC);
            csCell.setCellValue(Double.parseDouble(value));
        } else {
            if (value == null) {
                value = "";
            }
            HSSFRichTextString richTextString = new HSSFRichTextString(value);
            csCell.setCellValue(richTextString);
        }
    }

    public void writeNumberCell(short colIndex, String value,
                                HSSFCellStyle style) {
        csCell = row.getCell(colIndex);
        if (csCell == null) {
            csCell = row.createCell(colIndex);
        }

        csCell.setCellStyle(style);
        if (value == null || value.length() == 0) {
            value = "0.0";
        }
        csCell.setCellType(HSSFCell.CELL_TYPE_NUMERIC);
        csCell.setCellValue(Double.parseDouble(value));
    }

    public void executeNumberCell(int a, short b, int c, short d, String value,
                                  HSSFCellStyle style) {
        try {
            HSSFRow row = sheet.getRow(a);
            if (row == null) {
                row = sheet.createRow(a);
            }
            HSSFCell cell = row.getCell(b);
            if (cell == null) {
                cell = row.createCell(b);
            }

            cell.setCellStyle(style);
            cell.setCellType(HSSFCell.CELL_TYPE_NUMERIC);
            if (value.trim().length() == 0) {
                value = "0";
            }
            cell.setCellValue(Double.parseDouble(value));

            short b1 = b;
            while (++b1 <= d) {
                cell = row.getCell(b1);
                if (cell == null) {
                    cell = row.createCell(b1);
                }
                cell.setCellStyle(style);
            }
            for (int a1 = a + 1; a1 <= c; a1++) {
                row = sheet.getRow(a1);
                if (row == null) {
                    row = sheet.createRow(a1);
                }

                b1 = b;
                while (b1 <= d) {
                    cell = row.getCell(b1);
                    if (cell == null) {
                        cell = row.createCell(b1);
                    }
                    cell.setCellStyle(style);
                    b1++;
                }
            }

            ExportExcelUtil.mergeCell(sheet, a, b, c, d);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @param a          起始 x坐标
     * @param b          起始 y坐标
     * @param c          终止 x坐标
     * @param d          终止 y坐标
     * @param content    内容
     * @param style      表格样式
     * @param fontEffect 字体效果 =0,=1 正常式样 =2,粗体 =3,斜体 =4,斜粗体
     */
    public void executeCell(int a, short b, int c, short d, String content,
                            HSSFCellStyle aStyle) {
        try {
            HSSFRow row = sheet.getRow(a);
            if (row == null) {
                row = sheet.createRow(a);
            }
            HSSFCell cell = row.getCell(b);
            if (cell == null) {
                cell = row.createCell(b);
            }

            cell.setCellValue(new HSSFRichTextString(content));
            cell.setCellStyle(aStyle);
            short b1 = b;
            while (++b1 <= d) {
                cell = row.getCell(b1);
                if (cell == null) {
                    cell = row.createCell(b1);
                }

                cell.setCellStyle(aStyle);
            }
            for (int a1 = a + 1; a1 <= c; a1++) {
                row = sheet.getRow(a1);
                if (row == null) {
                    row = sheet.createRow(a1);
                }

                b1 = b;
                while (b1 <= d) {
                    cell = row.getCell(b1);
                    if (cell == null) {
                        cell = row.createCell(b1);
                    }

                    cell.setCellStyle(aStyle);
                    b1++;
                }
            }

            ExportExcelUtil.mergeCell(sheet, a, b, c, d);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void executeCell2(int a, short b, int c, short d, String value,
                             String aStyle, String type) {
        try {
            HSSFRow row = sheet.getRow(a);
            if (row == null) {
                row = sheet.createRow(a);
            }
            HSSFCell cell = row.getCell(b);
            if (cell == null) {
                cell = row.createCell(b);
            }

// cell.setCellValue(new HSSFRichTextString(content));
            // cell.setCellStyle(aStyle);

            if ("c".equalsIgnoreCase(aStyle)) {
                cell.setCellStyle(this.style);
            } else if ("l".equalsIgnoreCase(aStyle)) {
                cell.setCellStyle(this.style_l);
            } else if ("R".equalsIgnoreCase(aStyle)) {
                cell.setCellStyle(this.style_r);
            }

            if (value != null && value.trim().length() > 0
                    && "N".equalsIgnoreCase(type)) {
                cell.setCellType(HSSFCell.CELL_TYPE_NUMERIC);
                cell.setCellValue(Double.parseDouble(value));
            } else {
                if (value == null) {
                    value = "";
                }
                HSSFRichTextString richTextString = new HSSFRichTextString(value);
                cell.setCellValue(richTextString);
            }

            short b1 = b;
            while (++b1 <= d) {
                cell = row.getCell(b1);
                if (cell == null) {
                    cell = row.createCell(b1);
                }

                if ("c".equalsIgnoreCase(aStyle)) {
                    cell.setCellStyle(this.style);
                } else if ("l".equalsIgnoreCase(aStyle)) {
                    cell.setCellStyle(this.style_l);
                } else if ("R".equalsIgnoreCase(aStyle)) {
                    cell.setCellStyle(this.style_r);
                }
            }
            for (int a1 = a + 1; a1 <= c; a1++) {
                row = sheet.getRow(a1);
                if (row == null) {
                    row = sheet.createRow(a1);
                }

                b1 = b;
                while (b1 <= d) {
                    cell = row.getCell(b1);
                    if (cell == null) {
                        cell = row.createCell(b1);
                    }

                    if ("c".equalsIgnoreCase(aStyle)) {
                        cell.setCellStyle(this.style);
                    } else if ("l".equalsIgnoreCase(aStyle)) {
                        cell.setCellStyle(this.style_l);
                    } else if ("R".equalsIgnoreCase(aStyle)) {
                        cell.setCellStyle(this.style_r);
                    }
                    b1++;
                }
            }
            ExportExcelUtil.mergeCell(sheet, a, b, c, d);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 设置excel表格效果
     *
     * @param styles   设置不同的效果
     * @param workbook 新建的表格
     */
    public HSSFCellStyle style(HSSFWorkbook workbook, int styles) {

        HSSFCellStyle style = workbook.createCellStyle();

        switch (styles) {

            case 0:
                HSSFFont fonttitle = fonts(workbook,
                        ResourceFactory.getProperty("gz.gz_acounting.black.font"),
                        15);
                fonttitle.setBold(true);// 加粗
                style.setFont(fonttitle);
                style.setVerticalAlignment(VerticalAlignment.CENTER);
                style.setAlignment(HorizontalAlignment.CENTER);
                break;
            case 1:
                style.setFont(fonts(workbook,
                        ResourceFactory.getProperty("gz.gz_acounting.m.font"), 10));
                style.setBorderBottom(BorderStyle.THIN);
                style.setBorderLeft(BorderStyle.THIN);
                style.setBorderRight(BorderStyle.THIN);
                style.setBorderTop(BorderStyle.THIN);
                style.setVerticalAlignment(VerticalAlignment.CENTER);
                style.setAlignment(HorizontalAlignment.CENTER);
                break;
            case 2:
                style.setFont(fonts(workbook,
                        ResourceFactory.getProperty("gz.gz_acounting.m.font"), 10));
                style.setBorderBottom(BorderStyle.THIN);
                style.setBorderLeft(BorderStyle.THIN);
                style.setBorderRight(BorderStyle.THIN);
                style.setBorderTop(BorderStyle.THIN);
                style.setVerticalAlignment(VerticalAlignment.TOP);
                break;
            case 3:
                style.setFont(fonts(workbook,
                        ResourceFactory.getProperty("gz.gz_acounting.m.font"), 12));
                style.setBorderBottom(BorderStyle.THIN);
                style.setBorderLeft(BorderStyle.THIN);
                style.setBorderRight(BorderStyle.THIN);
                style.setBorderTop(BorderStyle.THIN);
                style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                style.setFillForegroundColor(HSSFColor.LIGHT_GREEN.index);
                break;
            case 4:
                style.setFont(fonts(workbook,
                        ResourceFactory.getProperty("gz.gz_acounting.m.font"), 12));
                style.setBorderBottom(BorderStyle.THIN);
                style.setBorderLeft(BorderStyle.THIN);
                style.setBorderRight(BorderStyle.THIN);
                style.setBorderTop(BorderStyle.THIN);
                style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                style.setFillForegroundColor(HSSFColor.LIGHT_CORNFLOWER_BLUE.index);
                break;
            default:
                style.setFont(fonts(workbook,
                        ResourceFactory.getProperty("gz.gz_acounting.m.font"), 12));
                style.setAlignment(HorizontalAlignment.LEFT);
                style.setBorderBottom(BorderStyle.THIN);
                style.setBorderLeft(BorderStyle.THIN);
                style.setBorderRight(BorderStyle.THIN);
                style.setBorderTop(BorderStyle.THIN);
                break;
        }
        style.setWrapText(true);
        return style;
    }

    public HSSFCellStyle getStyle(String align, HSSFWorkbook wb,
                                  int computeFashion) {
        HSSFCellStyle a_style = wb.createCellStyle();
        a_style.setBorderBottom(BorderStyle.THIN);
        a_style.setBottomBorderColor(HSSFColor.BLACK.index);
        a_style.setBorderLeft(BorderStyle.THIN);
        a_style.setLeftBorderColor(HSSFColor.BLACK.index);
        a_style.setBorderRight(BorderStyle.THIN);
        a_style.setRightBorderColor(HSSFColor.BLACK.index);
        a_style.setBorderTop(BorderStyle.THIN);
        a_style.setTopBorderColor(HSSFColor.BLACK.index);
        a_style.setVerticalAlignment(VerticalAlignment.CENTER);

        if ("c".equals(align)) {
            a_style.setAlignment(HorizontalAlignment.CENTER);
        } else if ("l".equals(align)) {
            a_style.setAlignment(HorizontalAlignment.LEFT);
        } else if ("r".equals(align)) {
            LoadXml parameter_content = new LoadXml(this.conn, this.planid);
            Hashtable params = parameter_content.getDegreeWhole();
            String voteScoreDecimal = (String) params.get("KeepDecimal");// 得到计算结果保留的小数位数
            voteScoreDecimal = voteScoreDecimal.trim().length() == 0 ? "0"
                    : voteScoreDecimal;
            if (computeFashion != 1) {
                voteScoreDecimal = "0";
            }
            HSSFDataFormat df = wb.createDataFormat();
            a_style.setDataFormat(df.getFormat(decimalwidth(Integer
                    .parseInt(voteScoreDecimal))));
            a_style.setAlignment(HorizontalAlignment.RIGHT);
        } else if ("title".equals(align)) {
            a_style.setAlignment(HorizontalAlignment.CENTER);
            a_style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            a_style.setFillForegroundColor(HSSFColor.LIGHT_GREEN.index);
        }
        return a_style;
    }

    /**
     * 指定小数位数的数值样式
     */
    public HSSFCellStyle getNumberStyle(HSSFWorkbook wb, int scoreDecimal) {
        HSSFCellStyle a_style = wb.createCellStyle();
        a_style.setBorderBottom(BorderStyle.THIN);
        a_style.setBottomBorderColor(HSSFColor.BLACK.index);
        a_style.setBorderLeft(BorderStyle.THIN);
        a_style.setLeftBorderColor(HSSFColor.BLACK.index);
        a_style.setBorderRight(BorderStyle.THIN);
        a_style.setRightBorderColor(HSSFColor.BLACK.index);
        a_style.setBorderTop(BorderStyle.THIN);
        a_style.setTopBorderColor(HSSFColor.BLACK.index);
        a_style.setVerticalAlignment(VerticalAlignment.CENTER);

        HSSFDataFormat df = wb.createDataFormat();
        a_style.setDataFormat(df.getFormat(decimalwidth(scoreDecimal)));
        a_style.setAlignment(HorizontalAlignment.RIGHT);
        return a_style;
    }

    public String decimalwidth(int len) {

        StringBuffer decimal = new StringBuffer("0");
        if (len > 0) {
            decimal.append(".");
        }
        for (int i = 0; i < len; i++) {
            decimal.append("0");
        }
        decimal.append("_ ");
        return decimal.toString();
    }

    /**
     * 设置excel字体效果
     *
     * @param fonts    设置不同的字体
     * @param size     设置字体的大小
     * @param workbook 新建的表格
     */
    public HSSFFont fonts(HSSFWorkbook workbook, String fonts, int size) {

        HSSFFont font = workbook.createFont();
        font.setFontHeightInPoints((short) size);
        font.setFontName(fonts);
        return font;
    }

    /** ************ end ********** */

    /**
     * 保存修正分值结果
     */
    public void insertCorrectRecord(String correctScore, String correctCause,
                                    String object_id, String planid) {

        try {
            ContentDAO dao = new ContentDAO(this.conn);
            dao.delete("delete from per_result_correct where plan_id=" + planid
                    + " and object_id='" + object_id + "'", new ArrayList());
            RowSet rowSet = dao.search("select "
                    + Sql_switcher.isnull("max(id)", "0")
                    + " from per_result_correct ");
            int id = 1;
            String b0110 = "";
            String e0122 = "";
            String e01a1 = "";
            String a0101 = "";
            if (rowSet.next()) {
                id = 1 + rowSet.getInt(1);
            }
            rowSet = dao.search("select * from per_object where plan_id="
                    + planid + " and object_id='" + object_id + "'");
            if (rowSet.next()) {
                b0110 = rowSet.getString("b0110") != null ? rowSet
                        .getString("b0110") : "";
                e0122 = rowSet.getString("e0122") != null ? rowSet
                        .getString("e0122") : "";
                e01a1 = rowSet.getString("e01a1") != null ? rowSet
                        .getString("e01a1") : "";
                a0101 = rowSet.getString("a0101") != null ? rowSet
                        .getString("a0101") : "";
            }
            RecordVo vo = new RecordVo("per_result_correct");
            vo.setInt("id", id);
            vo.setInt("plan_id", Integer.parseInt(planid));
            vo.setString("b0110", b0110);
            vo.setString("e0122", e0122);
            vo.setString("e01a1", e01a1);
            vo.setString("a0101", a0101);
            vo.setString("object_id", object_id);
            vo.setDouble("score", Double.parseDouble(correctScore));
            vo.setString("correct_reason", correctCause);
            dao.addValueObject(vo);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public RecordVo getTemplateVo(String templateid) {

        RecordVo vo = new RecordVo("per_template");
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            vo.setString("template_id", templateid);
            vo = dao.findByPrimaryKey(vo);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return vo;
    }

    /**
     * 取得考核计划信息
     *
     * @param planid
     * @return
     */
    public RecordVo getPerPlanVo(String planid) {

        RecordVo vo = new RecordVo("per_plan");
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            vo.setInt("plan_id", Integer.parseInt(planid));
            vo = dao.findByPrimaryKey(vo);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return vo;
    }

    public void initParamSet() {

        try {
            loadxml = new LoadXml(this.conn, this.planid);
            planParamSet = loadxml.getDegreeWhole();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 取得计划中的考核对象
     *
     * @param whl
     * @param order
     * @return
     */
    public ArrayList getObjectList(String whl, String order) {
        whl = PubFunc.keyWord_reback(whl);
        ArrayList objectList = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            StringBuffer sql = new StringBuffer(
                    "select * from per_object where plan_id=" + this.planid
                            + " and 1=1 ");
            if (whl != null && whl.length() > 0) {
                sql.append(" " + whl);
            }

            // 未提交分数的考核对象不参与计算
            // sql.append(" and object_id not in (select object_id from per_mainbody where plan_id="+this.planid+" and status=1) ");

            if (order != null && order.length() > 0) {
                sql.append(order);
            } else {
                sql.append(" order by a0000");
            }
            RowSet rowSet = dao.search(sql.toString());
            LazyDynaBean abean = null;
            while (rowSet.next()) {
                abean = new LazyDynaBean();
                abean.set(
                        "b0110",
                        rowSet.getString("b0110") != null ? rowSet
                                .getString("b0110") : "");
                abean.set(
                        "e0122",
                        rowSet.getString("e0122") != null ? rowSet
                                .getString("e0122") : "");
                abean.set(
                        "e01a1",
                        rowSet.getString("e01a1") != null ? rowSet
                                .getString("e01a1") : "");
                abean.set("object_id", rowSet.getString("object_id"));
                abean.set("a0101", rowSet.getString("a0101"));
                abean.set(
                        "a0000",
                        rowSet.getString("a0000") != null ? rowSet
                                .getString("a0000") : "0");
                abean.set(
                        "body_id",
                        rowSet.getString("body_id") != null ? rowSet
                                .getString("body_id") : "");
                objectList.add(abean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return objectList;
    }

    /**
     * 取得 考核评估列表
     *
     * @param computeFashion   计算方式 1：得分统计 2:主体票数统计 3: 指标票数分统计
     * @param whl              人员显示条件
     * @param pointResultValue 指标结果值 1:分数 2:平均分比值 3:总分比值 4:单项比值
     * @param order            排序
     * @param bodyid           主体类别
     * @param handScore        是否有手工录分
     * @return
     */
    public String getEvaluationTableHtml(String computeFashion, String whl,
                                         String pointResultValue, String order, String bodyid,
                                         String handScore, String busitype) throws GeneralException {

        // getEvaluationTableExcel(Integer.parseInt(computeFashion),whl,pointResultValue,order,bodyid);
        // //生成excel

        StringBuffer html = new StringBuffer("");
        this.mainbodySetList = getPerMainBodySetList(this.planid); // 主体类别列表
        html.append(getTableHtml(Integer.parseInt(computeFashion), whl,
                pointResultValue, order, bodyid, handScore, busitype)); // 取得考核评估
        // 表html
        return html.toString();
    }

    /**
     * 取得考核评估 表头html
     *
     * @param computeFashion 计算方式
     * @return
     * @throws GeneralException
     */
    public String getTableHtml(int computeFashion, String whl,
                               String pointResultValue, String order, String bodyid,
                               String handScore, String busitype) throws GeneralException {

        String headHtml = "";
        switch (computeFashion) {
            case 1: // 得分统计
                headHtml = getScoreTableHtml(whl, pointResultValue, order,
                        computeFashion, handScore, busitype);
                break;
            case 2: // 主体票数统计
                headHtml = getMainBodyNumHtml(whl, pointResultValue, order);
                break;
            case 3: // 指标票数分统计
                headHtml = getPerPointNumHtml(whl, order, bodyid);
                break;
            case 4: // 主体得分统计
                headHtml = getBodyScoreHtml(whl, order);
                break;
        }
        return headHtml;
    }

    /**
     * 取得 主体得分统计 excel
     *
     * @return
     */
    public void writeBodyScoreExcel(String whl, String order) {
        whl = PubFunc.keyWord_reback(whl);
        try {
            BatchGradeBo bb = new BatchGradeBo(this.conn, this.planid);
            ArrayList list = bb.getPerformanceStencilList(template_id, false);
            ArrayList items = (ArrayList) list.get(0); // 模版顶层项目列表
            colIndex = 0;
            executeCell(this.rowNum, colIndex, this.rowNum + 1, colIndex,
                    ResourceFactory.getProperty("conlumn.mediainfo.info_id"),
                    this.centerstyle);
            colIndex++;
            executeCell(this.rowNum, colIndex, this.rowNum + 1, colIndex,
                    this.getObjTitle(this.planVo.getInt("object_type")),
                    this.centerstyle);
            colIndex++;

            int items_size = 0;
            for (Iterator t = items.iterator(); t.hasNext(); ) {
                String[] temp = (String[]) t.next();
                if (temp[1] == null) {
                    items_size++;
                }
            }

            for (int i = 0; i < mainbodySetList.size(); i++) {
                LazyDynaBean abean = (LazyDynaBean) mainbodySetList.get(i);
                short t_index = Short.parseShort(String.valueOf(colIndex
                        + items_size + 1));
                executeCell(this.rowNum, colIndex, this.rowNum, t_index,
                        (String) abean.get("name"), this.centerstyle);
                this.colIndex = t_index;
                this.colIndex++;
            }

            executeCell(
                    this.rowNum,
                    colIndex,
                    this.rowNum + 1,
                    colIndex,
                    ResourceFactory
                            .getProperty("lable.performance.evaluation.computeTotal"),
                    this.centerstyle);
            colIndex++;
            executeCell(this.rowNum, colIndex, this.rowNum + 1, colIndex,
                    ResourceFactory.getProperty("label.zp_exam.sum_score"),
                    this.centerstyle);
            colIndex++;
            executeCell(this.rowNum, colIndex, this.rowNum + 1, colIndex,
                    ResourceFactory.getProperty("jx.param.degreepro"),
                    this.centerstyle);
            colIndex++;
            executeCell(this.rowNum, colIndex, this.rowNum + 1, colIndex,
                    ResourceFactory.getProperty("jx.param.degreepro")
                            + ResourceFactory.getProperty("jx.param.xishu"),
                    this.centerstyle);
            this.totalColNum = colIndex;
            this.rowNum++;
            this.colIndex = 2;
            for (int i = 0; i < mainbodySetList.size(); i++) {
                executeCell(this.rowNum, colIndex, this.rowNum, colIndex,
                        ResourceFactory.getProperty("train.job.manNumber"),
                        this.centerstyle);
                colIndex++;
                executeCell(
                        this.rowNum,
                        colIndex,
                        this.rowNum,
                        colIndex,
                        ResourceFactory
                                .getProperty("lable.welcome.invtextresult.ballot"),
                        this.centerstyle);
                colIndex++;
                for (Iterator t = items.iterator(); t.hasNext(); ) {
                    String[] temp = (String[]) t.next();
                    if (temp[1] == null) {
                        String itemid = temp[0];
                        String itemdesc = temp[3];
                        executeCell(this.rowNum, colIndex, this.rowNum,
                                colIndex, temp[3], this.centerstyle);
                        colIndex++;
                    }
                }
            }

            // 写数据
            // String sql="select * from per_bodyscorestatistics_"+this.planid
            // +" where 1=1";
            String sql = "select * from per_bodyscoretj_" + this.planid
                    + " where 1=1";
            if (whl != null && whl.length() > 0) {
                sql += whl;
            }
            if (order != null && order.length() > 0) {
                sql += order;
            } else {
                sql += " order by a0000";
            }
            ContentDAO dao = new ContentDAO(this.conn);

            int KeepDecimal = Integer.parseInt((String) this.planParamSet
                    .get("KeepDecimal"));
            //样式创建一次就够了，不应该在循环中创建样式，否则会导致Excel列没有边线的问题  haosl 2018年8月26日
            HSSFCellStyle numberStyle = this.getNumberStyle(this.workbook, 0);
            HSSFCellStyle numberStyle2 = this.getNumberStyle(this.workbook, KeepDecimal);
            RowSet rs = dao.search(sql);
            int xuhao = 0;
            while (rs.next()) {
                this.rowNum++;
                this.colIndex = 0;
                executeCell(this.rowNum, colIndex, this.rowNum, colIndex,
                        Integer.toString(++xuhao), this.centerstyle);
                colIndex++;
                executeCell2(this.rowNum, colIndex, this.rowNum, colIndex,
                        rs.getString("a0101"), "l", "");
                colIndex++;

                for (int i = 0; i < mainbodySetList.size(); i++) {
                    LazyDynaBean abean = (LazyDynaBean) mainbodySetList.get(i);
                    String body_id = (String) abean.get("body_id");
                    if ("-1".equals(body_id)) {
                        body_id = "X1";
                    }
                    String pcount1 = rs.getString("B" + body_id + "_PCount") == null ? ""
                            : rs.getString("B" + body_id + "_PCount");
                    String vcount1 = rs.getString("B" + body_id + "_VCount") == null ? ""
                            : rs.getString("B" + body_id + "_VCount");
                    // executeCell(this.rowNum, colIndex, this.rowNum, colIndex,
                    // pcount1, this.centerstyle);
                    // executeCell2(this.rowNum, colIndex, this.rowNum,
                    // colIndex, pcount1, "r","N");
                    this.executeNumberCell(this.rowNum, colIndex, this.rowNum,
                            colIndex, pcount1,
                            numberStyle);
                    colIndex++;
                    // executeCell(this.rowNum, colIndex, this.rowNum, colIndex,
                    // vcount1, this.centerstyle);
                    // executeCell2(this.rowNum, colIndex, this.rowNum,
                    // colIndex, vcount1, "r","N");
                    this.executeNumberCell(this.rowNum, colIndex, this.rowNum,
                            colIndex, vcount1,
                            numberStyle);
                    colIndex++;

                    for (Iterator t = items.iterator(); t.hasNext(); ) {
                        String[] temp = (String[]) t.next();
                        if (temp[1] == null) {
                            String itemid = temp[0];
                            String score1 = rs.getString("B" + body_id + "_I"
                                    + itemid) == null ? "0" : rs.getString("B"
                                    + body_id + "_I" + itemid);
                            score1 = PubFunc.round(score1, KeepDecimal);
                            // executeCell(this.rowNum, colIndex, this.rowNum,
                            // colIndex, score1, this.centerstyle);
                            // executeCell2(this.rowNum, colIndex, this.rowNum,
                            // colIndex, score1, "r","N");
                            this.executeNumberCell(this.rowNum, colIndex,
                                    this.rowNum, colIndex, score1, numberStyle2);
                            colIndex++;
                        }
                    }
                }
                String original_score = rs.getString("original_score") == null ? "0"
                        : rs.getString("original_score");
                String score2 = rs.getString("score") == null ? "0" : rs
                        .getString("score");
                String resultdesc = rs.getString("resultdesc") == null ? ""
                        : rs.getString("resultdesc");
                String exX_object = rs.getString("exX_object") == null ? "0"
                        : rs.getString("exX_object");

                // executeCell(this.rowNum, colIndex, this.rowNum, colIndex,
                // PubFunc.round(original_score, 2), this.centerstyle);
                // executeCell2(this.rowNum, colIndex, this.rowNum, colIndex,
                // PubFunc.round(original_score, 2), "r","N");
                this.executeNumberCell(this.rowNum, colIndex, this.rowNum,
                        colIndex, PubFunc.round(original_score, KeepDecimal),
                        numberStyle2);
                colIndex++;
                // executeCell(this.rowNum, colIndex, this.rowNum, colIndex,
                // PubFunc.round(score2, 2), this.centerstyle);
                // executeCell2(this.rowNum, colIndex, this.rowNum, colIndex,
                // PubFunc.round(score2, 2), "r","N");
                this.executeNumberCell(this.rowNum, colIndex, this.rowNum,
                        colIndex, PubFunc.round(score2, KeepDecimal),
                        numberStyle2);
                colIndex++;
                executeCell(this.rowNum, colIndex, this.rowNum, colIndex,
                        resultdesc, this.centerstyle);
                colIndex++;
                // executeCell(this.rowNum, colIndex, this.rowNum, colIndex,
                // PubFunc.round(exX_object, 2), this.centerstyle);
                // executeCell2(this.rowNum, colIndex, this.rowNum, colIndex,
                // PubFunc.round(exX_object, 2), "r","N");
                this.executeNumberCell(this.rowNum, colIndex, this.rowNum,
                        colIndex, PubFunc.round(exX_object, KeepDecimal),
                        numberStyle2);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 取得 主体得分统计 表头html
     *
     * @return
     * @throws GeneralException
     */
    public String getBodyScoreHtml(String whl, String order) {
        whl = PubFunc.keyWord_reback(whl);
        StringBuffer html = new StringBuffer(
                "<table id='tbl' class='ListTable' style='width: 100%; table-layout: fixed; word-break: break-all;'>");
        String htmlTitle = "";
        try {
            BatchGradeBo bb = new BatchGradeBo(this.conn, this.planid);
            ArrayList list = bb.getPerformanceStencilList(template_id, false);

            ArrayList items = (ArrayList) list.get(0); // 模版顶层项目列表
            int items_size = 0;
            for (Iterator t = items.iterator(); t.hasNext(); ) {
                String[] temp = (String[]) t.next();
                if (temp[1] == null) {
                    items_size++;
                }
            }

            html.append("<thead><TR style='background-color: #f4f7f7;'> ");
            html.append(getTh(
                    ResourceFactory.getProperty("conlumn.mediainfo.info_id"),
                    2, 1, "a", "cell_locked2 common_background_color common_border_color"));

            /***********显示对象详情表头**************/
            if ("true".equals(this.showDetails)) {
                if ("2".equals(this.object_type)) {
                    html.append(getTh(
                            ResourceFactory.getProperty("column.sys.org"), 2,
                            1, "a", "cell_locked2 common_background_color common_border_color"));//单位名称
                    html.append(getTh(
                            ResourceFactory.getProperty("column.sys.dept"), 2,
                            1, "a", "cell_locked2 common_background_color common_border_color"));//部门
                    html.append(getTh(
                            ResourceFactory.getProperty("column.sys.pos"), 2,
                            1, "a", "cell_locked2 common_background_color common_border_color"));//岗位名称
                }


                html.append(getTh(
                        ResourceFactory.getProperty("kpi.originalData.KpiTargetObjecType"), 2,
                        1, "a", "cell_locked2 common_background_color common_border_color"));//对象类别

            }
            html.append(getTh(
                    this.getObjTitle(this.planVo.getInt("object_type")), 2, 1,
                    "a", "cell_locked2 common_background_color common_border_color"));

            for (int i = 0; i < mainbodySetList.size(); i++) {
                LazyDynaBean abean = (LazyDynaBean) mainbodySetList.get(i);
                html.append(getTh((String) abean.get("name"), items_size + 2,
                        2, null, "header_locked common_background_color common_border_color"));
            }

            html.append(getTh(ResourceFactory
                            .getProperty("lable.performance.evaluation.computeTotal"),
                    2, 1, "a", "header_locked common_background_color common_border_color"));
            html.append(getTh(
                    ResourceFactory.getProperty("label.kh.template.total"), 2,
                    1, "a", "header_locked common_background_color common_border_color"));
            html.append(getTh(ResourceFactory.getProperty("jx.param.dengji"),
                    2, 1, "a", "header_locked common_background_color common_border_color"));
            html.append(getTh("等级系数", 2, 1, "a", "header_locked common_background_color common_border_color"));
            html.append("</tr>\n ");
            html.append("<tr style='background-color: #f4f7f7;'> ");

            for (int i = 0; i < mainbodySetList.size(); i++) {
                html.append(getTh(
                        ResourceFactory.getProperty("train.job.manNumber"), 0,
                        2, null, "header_locked common_background_color common_border_color"));
                html.append(getTh(ResourceFactory
                                .getProperty("lable.welcome.invtextresult.ballot"), 0,
                        2, null, "header_locked common_background_color common_border_color"));

                for (Iterator t = items.iterator(); t.hasNext(); ) {
                    String[] temp = (String[]) t.next();
                    if (temp[1] == null) {
                        String itemid = temp[0];
                        String itemdesc = temp[3];
                        html.append(getTh(itemdesc, 0, 2, null, "header_locked common_background_color common_border_color"));
                    }
                }
            }
            html.append("</TR></thead>\n ");
            htmlTitle = html.toString();

// 创建临时表
            try {
                DbWizard dbWizard = new DbWizard(this.conn);
                ContentDAO dao = new ContentDAO(this.conn);
                // String tabname="per_bodyscorestatistics_"+this.planid;
                String tabname = "per_bodyscoretj_" + this.planid;
                if (dbWizard.isExistTable(tabname, false)) {
                    dao.delete("delete from " + tabname, new ArrayList());
                } else {
                    Table table = new Table(tabname);
                    table.addField(getField("id", "I", 10, true));
                    table.addField(getField("B0110", "A", 30, false));
                    table.addField(getField("E0122", "A", 30, false));
                    table.addField(getField("E01A1", "A", 30, false));
                    table.addField(getField("object_id", "A", 30, false));
                    table.addField(getField("A0101", "A", 50, false));
                    table.addField(getField("A0000", "I", 10, false));

                    for (int i = 0; i < mainbodySetList.size(); i++) {
                        LazyDynaBean abean = (LazyDynaBean) mainbodySetList
                                .get(i);
                        String body_id = (String) abean.get("body_id");
                        if ("-1".equals(body_id)) {
                            body_id = "X1";
                        }
                        table.addField(getField("B" + body_id + "_PCount", "I",
                                10, false));
                        table.addField(getField("B" + body_id + "_VCount", "I",
                                10, false));

                        for (Iterator t = items.iterator(); t.hasNext(); ) {
                            String[] temp = (String[]) t.next();
                            if (temp[1] == null) {
                                String itemid = temp[0];
                                table.addField(getField("B" + body_id + "_I"
                                        + itemid, "N", 12, false));
                            }
                        }
                    }

                    table.addField(getField("score", "N", 12, false));
                    table.addField(getField("original_score", "N", 12, false));
                    table.addField(getField("grade_id", "I", 10, false));
                    table.addField(getField("resultdesc", "A", 50, false));
                    table.addField(getField("exX_object", "N", 12, false));
                    dbWizard.createTable(table);
                    DBMetaModel dbmodel = new DBMetaModel(this.conn);
                    dbmodel.reloadTableModel(tabname);
                }
                String sql = "insert into "
                        + tabname
                        + "(id,a0000,b0110,e0122,e01a1,object_id,a0101) select id,a0000,b0110,e0122,e01a1,object_id,a0101 from per_object where plan_id="
                        + this.planid;
                dao.insert(sql, new ArrayList());
                // sql="update "+tabname+" set "+tabname+".grade_id=a.grade_id,"+tabname+".score=a.score,"+tabname+".original_score=a.original_score,"+tabname+".resultdesc=a.resultdesc,"+tabname+".exX_object=a.exX_object from per_result_"+this.planid+" a";
                // sql+=" where "+tabname+".object_id=a.object_id";

                StringBuffer buf = new StringBuffer();
                buf.append("update " + tabname + " set ");
                buf.append("grade_id=");
                buf.append("(select grade_id from per_result_" + this.planid
                        + " a where a.object_id=" + tabname + ".object_id),");
                buf.append("score=");
                buf.append("(select score from per_result_" + this.planid
                        + " a where a.object_id=" + tabname + ".object_id),");
                buf.append("original_score=");
                buf.append("(select original_score from per_result_"
                        + this.planid + " a where a.object_id=" + tabname
                        + ".object_id),");
                buf.append("resultdesc=");
                buf.append("(select resultdesc from per_result_" + this.planid
                        + " a where a.object_id=" + tabname + ".object_id),");
                buf.append("exX_object=");
                buf.append("(select exX_object from per_result_" + this.planid
                        + " a where a.object_id=" + tabname + ".object_id)");
                dao.update(buf.toString());

                sql = "select object_id,body_id,count(body_id) n from per_mainbody where plan_id="
                        + this.planid;
                sql += " group by object_id,body_id order by object_id,body_id";
                HashMap pcount = new HashMap();
                HashMap vcount = new HashMap();
                RowSet rs = dao.search(sql);
                while (rs.next()) {
                    pcount.put(rs.getString(1) + ":" + rs.getString(2),
                            Integer.valueOf(rs.getString(3)));
                }

                sql = "select object_id,body_id,count(body_id) n from per_mainbody where plan_id="
                        + this.planid;
                sql += " AND status in (2,3) group by object_id,body_id order by object_id,body_id";
                rs = dao.search(sql);
                while (rs.next()) {
                    vcount.put(rs.getString(1) + ":" + rs.getString(2),
                            Integer.valueOf(rs.getString(3)));
                }

                sql = "select object_id,body_id,item_id,sum(score*body_rank*point_rank) from per_scoredetail where plan_id="
                        + this.planid;
                sql += " group by object_id,body_id,item_id order by object_id,body_id,item_id";
                HashMap score = new HashMap();
                rs = dao.search(sql);
                while (rs.next()) {
                    // 多级项目时，需将分数统计到顶级项目下
                    String itemId = rs.getString(3);
                    itemId = getTopLevelItem(items, itemId);
                    String objectId = rs.getString(1);
                    String bodyId = rs.getString(2);
                    float iscore = Float.valueOf(rs.getFloat(4));
                    if (score.containsKey(objectId + ":" + bodyId + ":" + itemId)) {
                        iscore = (Float) score.get(objectId + ":" + bodyId + ":" + itemId) + iscore;
                    }
                    score.put(objectId + ":" + bodyId + ":" + itemId, iscore);
                }

                ArrayList list1 = new ArrayList();
                sql = "select object_id from " + tabname;
                rs = dao.search(sql);
                while (rs.next()) {
                    ArrayList list2 = new ArrayList();
                    String object_id = rs.getString(1);
                    for (int i = 0; i < mainbodySetList.size(); i++) {
                        LazyDynaBean abean = (LazyDynaBean) mainbodySetList
                                .get(i);
                        String body_id = (String) abean.get("body_id");
                        list2.add(pcount.get(object_id + ":" + body_id));
                        list2.add(vcount.get(object_id + ":" + body_id));
                        for (Iterator t = items.iterator(); t.hasNext(); ) {
                            String[] temp = (String[]) t.next();
                            if (temp[1] == null) {
                                String itemid = temp[0];
                                list2.add(score.get(object_id + ":" + body_id
                                        + ":" + itemid));
                            }
                        }
                    }
                    list2.add(object_id);
                    list1.add(list2);
                }

                sql = "update " + tabname + " set ";
                for (int i = 0; i < mainbodySetList.size(); i++) {
                    LazyDynaBean abean = (LazyDynaBean) mainbodySetList.get(i);
                    String body_id = (String) abean.get("body_id");
                    if ("-1".equals(body_id)) {
                        body_id = "X1";
                    }
                    sql += "B" + body_id + "_PCount=?," + "B" + body_id
                            + "_VCount=?,";
                    for (Iterator t = items.iterator(); t.hasNext(); ) {
                        String[] temp = (String[]) t.next();
                        if (temp[1] == null) {
                            String itemid = temp[0];
                            sql += "B" + body_id + "_I" + itemid + "=?,";
                        }
                    }
                }
                sql = sql.substring(0, sql.length() - 1);
                sql += " where object_id=?";
                dao.batchUpdate(sql, list1);

                sql = "select * from " + tabname + " where 1=1 ";
                if (whl != null && whl.length() > 0) {
                    sql += whl;
                }
                if (order != null && order.length() > 0) {
                    order = order.replaceAll("-1", "X1");
                    sql += order;
                } else {
                    sql += " order by a0000";
                }

                rs = dao.search(sql);
                int xuhao = 0;
                this.dataList = new ArrayList();
                int KeepDecimal = Integer.parseInt((String) this.planParamSet
                        .get("KeepDecimal"));
                while (rs.next()) {
                    String className = "trShallow";
                    String className2 = "cell_locked_Shallow";
                    String color = "#F3F5FC";
                    if (xuhao % 2 == 1) {
                        className = "trDeep";
                        className2 = "cell_locked_Deep";
                        color = "#E4F2FC";
                    }
                    String object_id = rs.getString("object_id");
                    String a0101 = rs.getString("a0101");
                    html.append("<TR onClick='javascript:tr_onclick_self(this,\""
                            + color
                            + "\")' id='"
                            + object_id
                            + "' class='"
                            + className + "'  >");
                    html.append("<td id='a'  class='" + className2
                            + "'  width='" + columnWidth
                            + "'  align='center' nowrap >" + (++xuhao)
                            + "</td>");
                    html.append(" <td id='a'  class='" + className2
                            + "'   width='" + (columnWidth + 10)
                            + "'  align='center' nowrap >" + a0101 + "</td>");

                    /***********显示对象详细内容***********/
                    LazyDynaBean dataBean = new LazyDynaBean();
                    if ("true".equals(this.showDetails)) {
                        String b0110 = rs.getString("b0110");
                        String e0122 = rs.getString("e0122");
                        String e01a1 = rs.getString("e01a1");
                        String a0100 = rs.getString("object_id");
                        String body_id = "";
                        String aql = "select body_id,name from per_mainbodyset where body_id=" +
                                "(select body_id from per_object where  plan_id='" + this.planid + "' and object_id='" + a0100 + "')  ";
                        ResultSet res = null;
                        res = dao.search(aql);
                        if (res.next()) {
                            body_id = res.getString("name");
                        }
                        b0110 = AdminCode.getCode("UN", b0110) != null ? AdminCode.getCode("UN", b0110).getCodename() : "";
                        e0122 = AdminCode.getCode("UM", e0122) != null ? AdminCode.getCode("UM", e0122).getCodename() : "";
                        e01a1 = AdminCode.getCode("@K", e01a1) != null ? AdminCode.getCode("@K", e01a1).getCodename() : "";

                        dataBean.set("b0110", b0110);
                        dataBean.set("e0122", e0122);
                        dataBean.set("e01a1", e01a1);
                        dataBean.set("body_id", body_id);

                    }
                    dataBean.set("object_id", PubFunc.encrypt(object_id));
                    dataBean.set("a0101", a0101);
                    dataBean.set("mainbodySetList", mainbodySetList);
                    dataBean.set("items", items);
                    dataBean.set("columnWidth", String.valueOf(columnWidth));

                    for (int i = 0; i < mainbodySetList.size(); i++) {
                        LazyDynaBean abean = (LazyDynaBean) mainbodySetList
                                .get(i);
                        String body_id = (String) abean.get("body_id");
                        if ("-1".equals(body_id)) {
                            body_id = "X1";
                        }
                        String pcount1 = rs
                                .getString("B" + body_id + "_PCount") == null ? ""
                                : rs.getString("B" + body_id + "_PCount");
                        String vcount1 = rs
                                .getString("B" + body_id + "_VCount") == null ? ""
                                : rs.getString("B" + body_id + "_VCount");

                        dataBean.set("B" + body_id + "_PCount", pcount1);
                        dataBean.set("B" + body_id + "_VCount", vcount1);

                        html.append("<td id='a' width='" + columnWidth
                                + "' class='RecordRow' align='center' nowrap >"
                                + pcount1 + "</td>");
                        html.append("<td id='a' width='" + columnWidth
                                + "' class='RecordRow' align='center' nowrap >"
                                + vcount1 + "</td>");
                        for (Iterator t = items.iterator(); t.hasNext(); ) {
                            String[] temp = (String[]) t.next();
                            if (temp[1] == null) {
                                String itemid = temp[0];
                                String score1 = rs.getString("B" + body_id
                                        + "_I" + itemid) == null ? "0" : rs
                                        .getString("B" + body_id + "_I"
                                                + itemid);
                                score1 = PubFunc.round(score1, KeepDecimal);
                                html.append("<td id='a' width='"
                                        + columnWidth
                                        + "' class='RecordRow' align='center' nowrap >"
                                        + score1 + "</td>");
                                dataBean.set("B" + body_id + "_I" + itemid,
                                        score1);
                            }
                        }
                    }
                    String original_score = rs.getString("original_score") == null ? "0"
                            : rs.getString("original_score");
                    String score2 = rs.getString("score") == null ? "0" : rs
                            .getString("score");
                    String resultdesc = rs.getString("resultdesc") == null ? ""
                            : rs.getString("resultdesc");
                    String exX_object = rs.getString("exX_object") == null ? "0"
                            : rs.getString("exX_object");

                    html.append("<td id='a' width='" + columnWidth
                            + "' class='RecordRow' align='center' nowrap >"
                            + PubFunc.round(original_score, KeepDecimal)
                            + "</td>");
                    html.append("<td id='a' width='" + columnWidth
                            + "' class='RecordRow' align='center' nowrap >"
                            + PubFunc.round(score2, KeepDecimal) + "</td>");
                    html.append("<td id='a' name='desc' width='" + columnWidth
                            + "' class='RecordRow' align='center' nowrap >"
                            + resultdesc + "</td>");
                    html.append("<td id='a' name='exx_object' width='"
                            + columnWidth
                            + "' class='RecordRow' align='center' nowrap >"
                            + PubFunc.round(exX_object, KeepDecimal) + "</td>");
                    html.append("</tr>");

                    dataBean.set("original_score",
                            PubFunc.round(original_score, KeepDecimal));
                    dataBean.set("score", PubFunc.round(score2, KeepDecimal));
                    dataBean.set("resultdesc", resultdesc);
                    dataBean.set("exX_object",
                            PubFunc.round(exX_object, KeepDecimal));

                    this.dataList.add(dataBean);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            /*
             * ArrayList resultList=getMainBodyNumResult(whl,order); HashMap
             * obj_body_num=(HashMap)resultList.get(0); //考核对象＿类别＿票数 结果 HashMap
             * obj_grade=(HashMap)resultList.get(1); //考核对象＿等级 结果 HashMap
             * obj_body_grade=(HashMap)resultList.get(2); //考核对象＿类别＿等级 结果
             */
            // ArrayList objectList=getObjectList(whl,order);
            // html.append(getMainbody_bodyHtml(new HashMap(), new
            // HashMap(), new HashMap(), whl, order));
            html.append("</table>");
        } catch (Exception e) {
            e.printStackTrace();
        }
// return html.toString();
        return htmlTitle;
    }

    private String getTopLevelItem(ArrayList items, String itemdId) {
        for (int i = 0; i < items.size(); i++) {
            String[] item = (String[]) items.get(i);
            if (itemdId.equals(item[0])) {
                //找到顶级项目后直接返回
                if (StringUtils.isEmpty(item[1])) {
                    return item[0];
                } else {
                    return getTopLevelItem(items, item[1]);
                }
            }
        }
        return itemdId;
    }

    /**
     * 取得计划下各考核对象的分数
     *
     * @param planList
     * @return
     */
    public HashMap getPlan_objectScore(ArrayList planList) {
        HashMap map = new HashMap();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            DbWizard dbWizard = new DbWizard(this.conn);
            for (int i = 0; i < planList.size(); i++) {
                String plan_id = (String) planList.get(i);
                if (dbWizard.isExistTable("per_result_" + plan_id, false)) {
                    RowSet rowSet = dao
                            .search("select score,object_id from per_result_"
                                    + plan_id);
                    while (rowSet.next()) {
                        String object_id = rowSet.getString("object_id");
                        if (rowSet.getString("score") != null) {
                            map.put(plan_id + "_" + object_id,
                                    PubFunc.round(rowSet.getString("score"), 1));
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return map;
    }

    /**
     * 取得计划下修正分值的考核对象
     *
     * @param planList
     * @return
     */
    public HashMap getCorrectScoreObjs() {
        HashMap map = new HashMap();
        try {
            ContentDAO dao = new ContentDAO(this.conn);

            RowSet rowSet = dao
                    .search("select * from per_result_correct where plan_id="
                            + planid);
            while (rowSet.next()) {
                String object_id = rowSet.getString("object_id");
                if (rowSet.getDouble("score") != 0) {
                    map.put(object_id, "");
                }
            }
            if (rowSet != null) {
                rowSet.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return map;
    }

    /**
     * 取得得分统计表头html
     *
     * @param whl              人员显示条件
     * @param pointResultValue 指标结果值 1:分数 2:平均分比值 3:总分比值 4:单项比值
     * @param order            排序
     * @param computeFashion   计算方式 1：得分统计 2:主体票数统计 3: 指标票数分统计 4：主体得分统计
     * @return
     */
    private String getScoreTableHtml(String whl, String pointResultValue,
                                     String order, int computeFashion, String handScore, String busitype) throws GeneralException {

        StringBuffer html = new StringBuffer(
                "<table id='tbl' class='ListTable common_border_color' style='width: 100%; table-layout: fixed; word-break: break-all;' >");
        try {
            BatchGradeBo bb = new BatchGradeBo(this.conn, this.planid);
            ArrayList list = bb.getPerformanceStencilList(template_id, false);
            BatchGradeBo.getPlan_perPointMap().remove(this.planid);
            ArrayList pointList = bb.getPerPointList(template_id, this.planid);
            HashMap map = new HashMap();
            if (this.planParamSet.get("WholeEval") != null) {
                map.put("WholeEval",
                        (String) this.planParamSet.get("WholeEval"));
            }
            if (this.planParamSet.get("WholeEvalMode") != null) {
                map.put("WholeEvalMode",
                        (String) this.planParamSet.get("WholeEvalMode"));
            }
            String Geclass = "";
            if (this.planParamSet.get("EvalClass") == null
                    || ((String) this.planParamSet.get("EvalClass")).trim()
                    .length() <= 0
                    || "0"
                    .equals(((String) this.planParamSet.get("EvalClass")).trim())) {
                Geclass = (String) this.planParamSet.get("GradeClass");
            } else {
                Geclass = (String) this.planParamSet.get("EvalClass");
            }
            map.put("GradeClass", Geclass);
            this.gradeTempList = getGradeList(map);
            // 表头sss
            html.append(getTableHeadHtml(list, pointList, computeFashion,
                    pointResultValue, busitype));
            // 表体

            ArrayList a_pointList = (ArrayList) pointList.get(1);
            // if(this.planVo.getInt("method")==2)
            a_pointList = getPerPointList(a_pointList);
            ArrayList planlist = loadxml.getRelatePlanValue("Plan", "ID");
            HashMap planObjectScoreMap = getPlan_objectScore(planlist);
            HashMap correctScorreObjs = getCorrectScoreObjs();
            ArrayList resultList = getScoreResultList(whl, pointResultValue,
                    order, (ArrayList) pointList.get(1), planlist, busitype);
            this.dataList = new ArrayList();
            planlist = loadxml.getRelatePlanValue("Plan");

            // body_id对应的描述(per_mainbodyset),避免在循环中查询数据库 lium
            Map bodyMap = new HashMap(); // -1=团队负责人....
            String bodySql = "SELECT body_id,name FROM per_mainbodyset";
            RowSet rs = null;
            try {
                rs = new ContentDAO(this.conn).search(bodySql);
                while (rs.next()) {
                    int body_id = rs.getInt("body_id");
                    String name = rs.getString("name");
                    name = name != null ? name : "";

                    bodyMap.put(Integer.valueOf(body_id), name);
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (rs != null) {
                    rs.close();
                }
            }

            for (int i = 0; i < resultList.size(); i++) {
                LazyDynaBean abean = (LazyDynaBean) resultList.get(i);
                String object_id = (String) abean.get("object_id");
                String b0110 = (String) abean.get("b0110");
                String e0122 = (String) abean.get("e0122");
                String e01a1 = (String) abean.get("e01a1");
                String a0101 = (String) abean.get("a0101");
                String body_id = (String) abean.get("body_id");
                String original_score = (String) abean.get("original_score");
                String score = (String) abean.get("score");
                String reviseScore = (String) abean.get("reviseScore");
                String resultdesc = (String) abean.get("resultdesc");
                String score_adjust = (String) abean.get("score_adjust");
                String director = (String) abean.get("director");

                String className = "trShallow";
                String className2 = "cell_locked_Shallow";
                String color = "#F3F5FC";
                if (i % 2 == 1) {
                    className = "trDeep";
                    className2 = "cell_locked_Deep";
                    color = "#E4F2FC";
                }
                // html.append("<TR onClick='javascript:tr_onclick_self(this,\""+color+"\")' id='"
                // + object_id + "' class='"+className+"'  >");
                // html.append("<td id='a'  class='"+className2+"'  width='" +
                // columnWidth + "'  align='center' nowrap >" + (i + 1) +
                // "</td>");
                // html.append(" <td id='a'  class='"+className2+"'   width='" +
                // (columnWidth + 10) + "'  align='center' nowrap >" + a0101 +
                // "</td>");

                String isCorrectScoreObj = "0";
                if (correctScorreObjs.get(object_id) != null) {
                    isCorrectScoreObj = "1";
                }

                LazyDynaBean dataBean = new LazyDynaBean();
                /***********显示对象详细内容***********/
                if ("true".equals(this.showDetails)) {
                    dataBean.set("b0110", AdminCode.getCode("UN", b0110) != null ? AdminCode.getCode("UN", b0110).getCodename() : "");
                    dataBean.set("e0122", AdminCode.getCode("UM", e0122) != null ? AdminCode.getCode("UM", e0122).getCodename() : "");
                    dataBean.set("e01a1", AdminCode.getCode("@K", e01a1) != null ? AdminCode.getCode("@K", e01a1).getCodename() : "");
                    if (body_id != null && !"".equals(body_id)) {
                        Object name = bodyMap.get(Integer.valueOf(body_id));
                        dataBean.set("body_id", name == null ? "" : name);
                    } else {
                        dataBean.set("body_id", "");//没有设置对象类别
                    }

                }

                String confirmFlag = (String) abean.get("confirmFlag");
                dataBean.set("confirmFlag", confirmFlag);//这里做好处理，页面不用再进行判断，直接取该值就行
                dataBean.set("object_id", PubFunc.encrypt(object_id));
                dataBean.set("director", director);
                dataBean.set("a0101", a0101);
                dataBean.set("score_adjust", score_adjust);
                dataBean.set("a_pointList", a_pointList);
                dataBean.set("handScore", handScore);
                dataBean.set("handScorePointMap", this.handScorePointMap);
                dataBean.set("planid", this.planid);
                dataBean.set("planlist", planlist);
                dataBean.set("planObjectScoreMap", planObjectScoreMap);
                dataBean.set("columnWidth", String.valueOf(columnWidth));
                dataBean.set("isCorrectScoreObj", isCorrectScoreObj);

                ArrayList subsetfilds = new ArrayList();
                String subsetMenus = loadxml.getRelatePlanSubSetMenuValue();// 引入的子集
                if (subsetMenus != null && subsetMenus.trim().length() > 0) {
                    String[] temps = subsetMenus.split(",");
                    for (int j = 0; j < temps.length; j++) {
                        String temp = temps[j].trim();
                        if (temp.length() == 0) {
                            continue;
                        }
                        FieldItem fielditem = DataDictionary.getFieldItem(temp);
                        if (fielditem == null) {
                            continue;
                        }
                        String itemid = fielditem.getItemid();
                        dataBean.set(itemid, (String) abean.get(itemid));
                        subsetfilds.add(itemid);
                    }
                }
                dataBean.set("subsetfilds", subsetfilds);

                for (int j = 0; j < a_pointList.size(); j++) {
                    String[] temp = (String[]) a_pointList.get(j);

                    // html.append("<td id='a' width='" + columnWidth +
                    // "' class='RecordRow'  align='center' nowrap>");
                    if ("1".equals(handScore))// 在考核实施里面计划以[启动(录入结果)]方式启动
                    {
                        // if(this.handScorePointMap.get(temp[0])!=null)
                        // {

                        LazyDynaBean aabean = (LazyDynaBean) this.handScorePointMap
                                .get(temp[0]);
                        String pointScore = (String) aabean.get("score");
                        // html.append("<input type='text' value='"+(String)
                        // abean.get(temp[0])+"' onblur='autoValue(this)'  name='"+this.planid+"/"+object_id+"/"+temp[0]+"/"+(String)aabean.get("score")+"'  class='TEXT_NB' size='5'  />");
                        // html.append((String) abean.get(temp[0]));//none
                        // }//none
                        // else//none
                        // html.append((String) abean.get(temp[0]));//none

                        dataBean.set(this.planid + "/" + PubFunc.encrypt(object_id) + "/"
                                        + temp[0] + "/" + (String) aabean.get("score"),
                                (String) abean.get(temp[0]));
                    } else// 在考核实施里面计划以[启动(打分)]方式启动
                    {
                        if (this.handScorePointMap.get(temp[0]) != null)// 如果为打分指标的话还是在考核评估里面以录入方式打分
                        {
                            LazyDynaBean aabean = (LazyDynaBean) this.handScorePointMap
                                    .get(temp[0]);
                            // html.append("<input type='text' value='"+(String)
                            // abean.get(temp[0])+"' onblur='autoValue(this)'  name='"+this.planid+"/"+object_id+"/"+temp[0]+"/"+(String)aabean.get("score")+"'  class='TEXT_NB' size='5'  />");

                            // 判断定量统一打分指标对考核对象来说是否有权限
                            boolean right = true;
                            if (this.planVo.getInt("object_type") != 2) {
                                right = this.pointPrivBean.getPrivPoint("",
                                        object_id, temp[0]);
                            } else {
                                right = this.pointPrivBean.getPrivPoint(b0110,
                                        e0122, temp[0]);
                            }
                            dataBean.set(this.planid + "/" + PubFunc.encrypt(object_id) + "/"
                                            + temp[0] + "/pointPriv",
                                    right == true ? "1" : "0");
                            dataBean.set(
                                    this.planid + "/" + PubFunc.encrypt(object_id) + "/"
                                            + temp[0] + "/"
                                            + (String) aabean.get("score"),
                                    (String) abean.get(temp[0]));
                        } else {
                            // html.append((String) abean.get(temp[0]));
                            dataBean.set(temp[0], (String) abean.get(temp[0]));
                        }
                    }

                    // html.append("</td>");

                }
                // 引入关联计划的字段
                for (int m = 0; m < planlist.size(); m++) {
                    LazyDynaBean tempBean = (LazyDynaBean) planlist.get(m);
                    String id = (String) tempBean.get("id");

                    String Menus = (String) tempBean.get("Menus");
                    if (Menus != null && Menus.trim().length() > 0) {
                        String[] temps = Menus.split(",");
                        for (int j = 0; j < temps.length; j++) {
                            String temp = temps[j].trim();
                            if (temp.length() == 0) {
                                continue;
                            }
                            if ("score".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id,
                                        (String) abean.get("G_" + id));
                            } else if ("Grade".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + "_Grade",
                                        (String) abean
                                                .get("G_" + id + "_Grade"));
                            } else if ("Avg".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + "_Avg",
                                        (String) abean.get("G_" + id + "_Avg"));
                            } else if ("Max".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + "_Max",
                                        (String) abean.get("G_" + id + "_Max"));
                            } else if ("Min".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + "_Min",
                                        (String) abean.get("G_" + id + "_Min"));
                            } else if ("XiShu".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + "_XiShu",
                                        (String) abean
                                                .get("G_" + id + "_XiShu"));
                            } else if ("Order".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + "_Order",
                                        (String) abean
                                                .get("G_" + id + "_Order"));
                            } else if ("UMOrd".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + "_UMOrd",
                                        (String) abean
                                                .get("G_" + id + "_UMOrd"));
                            } else if ("Mark".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + "_Mark",
                                        (String) abean.get("G_" + id + "_Mark"));
                            } else if (temp.indexOf("Body") != -1) {
                                String bodyid = temp.replaceAll("Body", "");
                                dataBean.set(
                                        "G_" + id + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid),
                                        (String) abean.get("G_" + id + "_B_"
                                                + ("-1".equals(bodyid) ? "X1" : bodyid)));
                            } else if (temp.indexOf("Item") != -1) {
                                String itemid = temp.replaceAll("Item", "");
                                dataBean.set(
                                        "G_" + id + "_Item" + itemid,
                                        (String) abean.get("G_" + id + "_Item"
                                                + itemid));
                            } else {
                                dataBean.set(
                                        "G_" + id + "_" + temp,
                                        (String) abean.get("G_" + id + "_"
                                                + temp));
                            }
                        }
                    } else {
                        dataBean.set("G_" + id, (String) abean.get("G_" + id));
                    }
                    String temp2 = "";
                    String HZMenus = (String) tempBean.get("HZMenus");
                    if (HZMenus != null && HZMenus.trim().length() > 0) {
                        String[] temps = HZMenus.split(",");
                        for (int j = 0; j < temps.length; j++) {
                            String temp = temps[j].trim();
                            String temphz = temps[j].trim();
                            if (temp.indexOf(":") != -1) {
                                temp = temp.substring(0, temp.indexOf(":"));
                                temp2 = "_Z"
                                        + temphz.substring(temphz.indexOf(":") + 1);
                            }
                            if (temp.length() == 0) {
                                continue;
                            }
                            if ("score".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + temp2,
                                        (String) abean.get("G_" + id + temp2));
                            } else if ("Grade".equalsIgnoreCase(temp)) {
                                dataBean.set(
                                        "G_" + id + "_Grade" + temp2,
                                        (String) abean.get("G_" + id + "_Grade"
                                                + temp2));
                            } else if ("Avg".equalsIgnoreCase(temp)) {
                                dataBean.set(
                                        "G_" + id + "_Avg" + temp2,
                                        (String) abean.get("G_" + id + "_Avg"
                                                + temp2));
                            } else if ("Max".equalsIgnoreCase(temp)) {
                                dataBean.set(
                                        "G_" + id + "_Max" + temp2,
                                        (String) abean.get("G_" + id + "_Max"
                                                + temp2));
                            } else if ("Min".equalsIgnoreCase(temp)) {
                                dataBean.set(
                                        "G_" + id + "_Min" + temp2,
                                        (String) abean.get("G_" + id + "_Min"
                                                + temp2));
                            } else if ("XiShu".equalsIgnoreCase(temp)) {
                                dataBean.set(
                                        "G_" + id + "_XiShu" + temp2,
                                        (String) abean.get("G_" + id + "_XiShu"
                                                + temp2));
                            } else if ("Order".equalsIgnoreCase(temp)) {
                                dataBean.set(
                                        "G_" + id + "_Order" + temp2,
                                        (String) abean.get("G_" + id + "_Order"
                                                + temp2));
                            } else if ("UMOrd".equalsIgnoreCase(temp)) {
                                dataBean.set(
                                        "G_" + id + "_UMOrd" + temp2,
                                        (String) abean.get("G_" + id + "_UMOrd"
                                                + temp2));
                            } else if ("Mark".equalsIgnoreCase(temp)) {
                                dataBean.set(
                                        "G_" + id + "_Mark" + temp2,
                                        (String) abean.get("G_" + id + "_Mark"
                                                + temp2));
                            } else if (temp.indexOf("Body") != -1) {
                                String bodyid = temp.replaceAll("Body", "");
                                dataBean.set(
                                        "G_" + id + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid) + temp2,
                                        (String) abean.get("G_" + id + "_B_"
                                                + ("-1".equals(bodyid) ? "X1" : bodyid) + temp2));
                            } else if (temp.indexOf("Item") != -1) {
                                String itemid = temp.replaceAll("Item", "");
                                dataBean.set(
                                        "G_" + id + "_Item" + itemid + temp2,
                                        (String) abean.get("G_" + id + "_Item"
                                                + itemid + temp2));
                            } else {
                                dataBean.set(
                                        "G_" + id + "_" + temp + temp2,
                                        (String) abean.get("G_" + id + "_"
                                                + temp + temp2));
                            }
                        }
                    } else {
                        dataBean.set("G_" + id + temp2,
                                (String) abean.get("G_" + id + temp2));
                    }

                }

                // for(int j=0;j<planlist.size();j++)
                // {
                // String plan_id=(String)planlist.get(j);
                // dataBean.set("G_"+plan_id, (String) abean.get("G_"+plan_id));

                // if(planObjectScoreMap.get(plan_id+"_"+object_id)!=null)
                // {
                // html.append("<td id='a' width='" + columnWidth +
                // "' class='RecordRow' align='center' nowrap >" +
                // (String)planObjectScoreMap.get(plan_id+"_"+object_id) +
                // "</td>");
                // dataBean.set(plan_id+"_"+object_id,
                // planObjectScoreMap.get(plan_id+"_"+object_id));
                // }
                // else
                // {
                // html.append("<td id='a' width='" + columnWidth +
                // "' class='RecordRow' align='center' nowrap >&nbsp;</td>");
                // dataBean.set(plan_id+"_"+object_id, "");
                // }
                // }
                /*
                 * html.append("<td id='a' width='" + columnWidth +
                 * "' class='RecordRow' align='center' nowrap >" + (String)
                 * abean.get("original_score") + "</td>");
                 * html.append("<td id='a' width='" + columnWidth +
                 * "' class='RecordRow' align='center' nowrap >" + (String)
                 * abean.get("score") + "</td>");
                 * html.append("<td id='a' name='exs_grpavg' width='" +
                 * columnWidth + "' class='RecordRow' align='center' nowrap >" +
                 * (String) abean.get("exs_grpavg") + "</td>");
                 *
                 * html.append("<td id='a' name='exs_grpmax' width='" +
                 * columnWidth + "' class='RecordRow' align='center' nowrap >" +
                 * (String) abean.get("exS_GrpMax") + "</td>");
                 * html.append("<td id='a' name='exs_grpmin' width='" +
                 * columnWidth + "' class='RecordRow' align='center' nowrap >" +
                 * (String) abean.get("exS_GrpMin") + "</td>");
                 * html.append("<td id='a' name='ordering' width='" +
                 * columnWidth + "' class='RecordRow' align='center' nowrap >" +
                 * (String) abean.get("ordering")+"/"+(String)
                 * abean.get("ex_GrpNum") + "</td>");
                 *
                 * html.append("<td id='a' name='exx_object' width='" +
                 * columnWidth + "' class='RecordRow' align='center' nowrap >" +
                 * (String) abean.get("exX_object") + "</td>");
                 * html.append("<td id='a' name='desc' width='" + columnWidth +
                 * "' class='RecordRow' align='center' nowrap >" + (String)
                 * abean.get("resultdesc") + "</td>");
                 * html.append("<td id='a' name='evalremark' width='" +
                 * columnWidth + "' class='RecordRow' align='center' nowrap >"
                 * ); html.append(
                 * "<img src='/images/view.gif' BORDER='0' style='cursor:hand;' onclick='QueryRemark(\""
                 * +a0101+"\",\""+object_id+"\")'>"); html.append("</td>");
                 */
                dataBean.set("original_score",
                        (String) abean.get("original_score"));
                dataBean.set("score", (String) abean.get("score"));
                dataBean.set("reviseScore", (String) abean.get("reviseScore"));
                if (busitype != null && busitype.trim().length() > 0
                        && "1".equals(busitype)) {
                    dataBean.set("postRuleScore",
                            (String) abean.get("postRuleScore"));
                    dataBean.set("mateSurmise",
                            (String) abean.get("mateSurmise"));
                }

                dataBean.set("umPaiMing", (String) abean.get("org_ordering")
                        + "/" + (String) abean.get("org_GrpNum"));
                dataBean.set("exs_grpavg", (String) abean.get("exs_grpavg"));

                dataBean.set("exS_GrpMax", (String) abean.get("exS_GrpMax"));
                dataBean.set("exS_GrpMin", (String) abean.get("exS_GrpMin"));
                dataBean.set("paiming", (String) abean.get("ordering") + "/"
                        + (String) abean.get("ex_GrpNum"));

                dataBean.set("exx_object", (String) abean.get("exX_object"));
                dataBean.set("desc", (String) abean.get("resultdesc"));
                dataBean.set("addScore", (String) abean.get("addScore"));
                dataBean.set("minusScore", (String) abean.get("minusScore"));
                dataBean.set("evalremark", "");

                if ("1".equals(pointResultValue)
                        && this.planParamSet.get("WholeEval") != null
                        && "True"
                        .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                    dataBean.set("gradedisp", "true");
                    if ("0".equals((String) this.planParamSet.get("WholeEvalMode"))) {
                        if (this.gradeTempList.size() > 0) {
                            dataBean.set("wholeEvalMode", "0");
                            dataBean.set("gradeTempList", gradeTempList);
                            for (int j = 0; j < this.gradeTempList.size(); j++) {
                                LazyDynaBean a_bean = (LazyDynaBean) this.gradeTempList
                                        .get(j);
                                String id = (String) a_bean.get("id");
                                String value = abean.get("V_" + id) != null ? (String) abean
                                        .get("V_" + id) : "&nbsp;";
                                // html.append("<td id='a' width='" + columnWidth +
                                // "' class='RecordRow' align='center' nowrap >" + value
                                // + "</td>");

                                dataBean.set("V_" + id, value);
                            }
                            String value = abean.get("V_SUM") != null ? (String) abean
                                    .get("V_SUM") : "&nbsp;";
                            // html.append("<td id='a' width='" + columnWidth +
                            // "' class='RecordRow' align='center' nowrap >" + value +
                            // "</td>");

                            dataBean.set("V_SUM", value);
                        }
                    } else if ("1".equals((String) this.planParamSet.get("WholeEvalMode"))) {
                        dataBean.set("wholeEvalMode", "1");
                        dataBean.set("wholeEvalScore", (String) abean.get("whole_score"));
                    }
                } else {
                    dataBean.set("gradedisp", "false");
                }

                // html.append("</TR>");
                this.dataList.add(dataBean);
            }

            if (resultList.size() == 0) {

                LazyDynaBean dataBean = new LazyDynaBean();
                /***********显示对象详细内容***********/
                if ("true".equals(this.showDetails)) {
                    dataBean.set("b0110", "");
                    dataBean.set("e0122", "");
                    dataBean.set("e01a1", "");
                    dataBean.set("body_id", "");//没有设置对象类别
                }
                dataBean.set("object_id", "");
                dataBean.set("director", "");
                dataBean.set("a0101", "");
                dataBean.set("score_adjust", "0");
                dataBean.set("a_pointList", a_pointList);
                dataBean.set("handScore", handScore);
                dataBean.set("handScorePointMap", this.handScorePointMap);
                dataBean.set("planid", this.planid);
                dataBean.set("planlist", planlist);
                dataBean.set("planObjectScoreMap", planObjectScoreMap);
                dataBean.set("columnWidth", String.valueOf(columnWidth));
                dataBean.set("isCorrectScoreObj", "0");

                ArrayList subsetfilds = new ArrayList();
                String subsetMenus = loadxml.getRelatePlanSubSetMenuValue();// 引入的子集
                if (subsetMenus != null && subsetMenus.trim().length() > 0) {
                    String[] temps = subsetMenus.split(",");
                    for (int j = 0; j < temps.length; j++) {
                        String temp = temps[j].trim();
                        if (temp.length() == 0) {
                            continue;
                        }
                        FieldItem fielditem = DataDictionary.getFieldItem(temp);
                        String itemid = fielditem.getItemid();
                        dataBean.set(itemid, "");
                        subsetfilds.add(itemid);
                    }
                }
                dataBean.set("subsetfilds", subsetfilds);

                /*
                 * html.append("<TR   class='trShallow'  >");
                 * html.append("<td id='a'  class='cell_locked_Deep'  width='" +
                 * columnWidth + "'  align='center' nowrap >&nbsp;</td>");
                 * html.append(" <td id='a'  class='cell_locked_Deep'   width='"
                 * + (columnWidth + 10) +
                 * "'  align='center' nowrap >&nbsp;</td>");
                 */
                for (int j = 0; j < a_pointList.size(); j++) {
                    String[] temp = (String[]) a_pointList.get(j);
                    // html.append("<td id='a' width='" + columnWidth +
                    // "' class='RecordRow' align='center' nowrap >&nbsp;</td>");
                    dataBean.set(temp[0], "");
                }/*
                 * html.append("<td id='a' width='" + columnWidth +
                 * "' class='RecordRow' align='center' nowrap >&nbsp;</td>");
                 * html.append("<td id='a' width='" + columnWidth +
                 * "' class='RecordRow' align='center' nowrap >&nbsp;</td>");
                 * html.append("<td id='a' name='desc' width='" + columnWidth +
                 * "' class='RecordRow' align='center' nowrap >&nbsp;</td>");
                 * html.append("<td id='a' width='" + columnWidth +
                 * "' class='RecordRow' align='center' nowrap >&nbsp;</td>");
                 * html.append("<td id='a' width='" + columnWidth +
                 * "' class='RecordRow' align='center' nowrap >&nbsp;</td>");
                 *
                 * html.append("<td id='a' width='" + columnWidth +
                 * "' class='RecordRow' align='center' nowrap >&nbsp;</td>");
                 * html.append("<td id='a' width='" + columnWidth +
                 * "' class='RecordRow' align='center' nowrap >&nbsp;</td>");
                 * html.append("<td id='a' width='" + columnWidth +
                 * "' class='RecordRow' align='center' nowrap >&nbsp;</td>");
                 * html.append("<td id='a' width='" + columnWidth +
                 * "' class='RecordRow' align='center' nowrap >&nbsp;</td>");
                 */

                for (int m = 0; m < planlist.size(); m++) {
                    LazyDynaBean tempBean = (LazyDynaBean) planlist.get(m);
                    String id = (String) tempBean.get("id");

                    String Menus = (String) tempBean.get("Menus");
                    if (Menus != null && Menus.trim().length() > 0) {
                        String[] temps = Menus.split(",");
                        for (int j = 0; j < temps.length; j++) {
                            String temp = temps[j].trim();
                            if (temp.length() == 0) {
                                continue;
                            }
                            if ("score".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id, "");
                            } else if ("Grade".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + "_Grade", "");
                            } else if ("Avg".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + "_Avg", "");
                            } else if ("Max".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + "_Max", "");
                            } else if ("Min".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + "_Min", "");
                            } else if ("XiShu".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + "_XiShu", "");
                            } else if ("Order".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + "_Order", "");
                            } else if ("UMOrd".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + "_UMOrd", "");
                            } else if ("Mark".equalsIgnoreCase(temp)) {
                                dataBean.set("G_" + id + "_Mark", "");
                            } else if (temp.indexOf("Body") != -1) {
                                String bodyid = temp.replaceAll("Body", "");
                                dataBean.set("G_" + id + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid), "");
                            } else if (temp.indexOf("Item") != -1) {
                                String itemid = temp.replaceAll("Item", "");
                                dataBean.set("G_" + id + "_Item" + itemid, "");
                            } else {
                                dataBean.set("G_" + id + "_" + temp, "");
                            }
                        }
                    } else {
                        dataBean.set("G_" + id, "");
                    }
                }

                dataBean.set("original_score", "");
                dataBean.set("score", "");

                if (busitype != null && busitype.trim().length() > 0
                        && "1".equals(busitype)) {
                    dataBean.set("postRuleScore", "");
                    dataBean.set("mateSurmise", "");
                }

                dataBean.set("umPaiMing", "");
                dataBean.set("exs_grpavg", "");

                dataBean.set("exS_GrpMax", "");
                dataBean.set("exS_GrpMin", "");
                dataBean.set("paiming", "");

                dataBean.set("exx_object", "");
                dataBean.set("desc", "");
                dataBean.set("addScore", "");
                dataBean.set("minusScore", "");
                dataBean.set("evalremark", "");

                if ("1".equals(pointResultValue)
                        && this.gradeTempList.size() > 0
                        && this.planParamSet.get("WholeEval") != null
                        && "True"
                        .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                    dataBean.set("gradedisp", "true");
                    if ("0".equals((String) this.planParamSet.get("WholeEvalMode"))) {
                        dataBean.set("wholeEvalMode", "0");
                        dataBean.set("gradeTempList", gradeTempList);
                        for (int j = 0; j < this.gradeTempList.size(); j++) {
                            LazyDynaBean a_bean = (LazyDynaBean) this.gradeTempList
                                    .get(j);
                            String id = (String) a_bean.get("id");
                            dataBean.set("V_" + id, "");
                        }
                        dataBean.set("V_SUM", "");
                        // html.append("<td id='a' width='" + columnWidth +
                        // "' class='RecordRow' align='center' nowrap >&nbsp;</td>");
                    } else if ("1".equals((String) this.planParamSet.get("WholeEvalMode"))) {
                        dataBean.set("wholeEvalMode", "1");
                        dataBean.set("wholeEvalScore", "");
                    }
                    // html.append("<td id='a' width='" + columnWidth +
                    // "' class='RecordRow' align='center' nowrap >&nbsp;</td>");
                } else {
                    dataBean.set("gradedisp", "false");
                }
                // this.dataList.add(dataBean);
                // html.append("</TR>");
            }

            // html.append("</table>");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return html.toString();
    }

    /**
     * 取得得分统计结果
     *
     * @param whl
     * @param pointResultValue 指标结果值 1:分数 2:平均分比值 3:总分比值 4:单项比值
     * @param order
     * @param pointList
     * @return
     */
    public ArrayList getScoreResultList(String whl, String pointResultValue,
                                        String order, ArrayList pointList, ArrayList relaPlans,
                                        String busitype) {
        ArrayList list = new ArrayList();
        try {
            DbWizard dbWizard = new DbWizard(this.conn);
            ContentDAO dao = new ContentDAO(this.conn);
            String WholeEvalMode = (String) this.planParamSet.get("WholeEvalMode");
            if ("1".equals(WholeEvalMode)) {
                if (!dbWizard.isExistField("per_result_" + this.planid, "whole_score",
                        false)) {
                    Table table = new Table("per_result_" + this.planid);
                    table.addField(getField("whole_score", "N", 12, false));
                    dbWizard.addColumns(table);
                }
            }
            if (!dbWizard.isExistField("per_result_" + this.planid, "confirmflag",
                    false)) {
                Table table = new Table("per_result_" + this.planid);
                Field field = new Field("confirmflag", "confirmflag");
                field.setDatatype(DataType.INT);
                field.setLength(2);
                table.addField(field);
                dbWizard.addColumns(table);
            }
            String sql = getScoreResultSql(whl, pointResultValue, order,
                    pointList, relaPlans, busitype);
            RowSet rowSet = dao.search(sql);
            LazyDynaBean abean = null;
            int KeepDecimal = Integer.parseInt((String) this.planParamSet
                    .get("KeepDecimal"));
            ArrayList planlist = loadxml.getRelatePlanValue("Plan");
            while (rowSet.next()) {
                abean = new LazyDynaBean();
                if ("1".equals(pointResultValue)) {//指标结果值 1:分数 2:平均分比值 3:总分比值 4:单项比值
                    abean.set("b0110", isNull(rowSet.getString("b0110")));
                    abean.set("e0122", isNull(rowSet.getString("e0122")));
                    abean.set("e01a1", isNull(rowSet.getString("e01a1")));
                    abean.set("body_id", isNull(rowSet.getString("body_id")));//考核对象类别号
                    if ("1".equals(WholeEvalMode)) {
                        abean.set("whole_score", PubFunc.round(
                                isNull(rowSet.getString("whole_score")), KeepDecimal));
                    }
                } else {
                    abean.set("b0110", isNull(rowSet.getString("b0110")));
                    abean.set("e0122", isNull(rowSet.getString("e0122")));
                    abean.set("e01a1", isNull(rowSet.getString("e01a1")));
                    abean.set("body_id", isNull(rowSet.getString("body_id")));//考核对象类别号
                }
                abean.set("confirmFlag", "2".equalsIgnoreCase(isNull(rowSet.getString("ConfirmFlag"))) ? "已确认" : "");//这里做好处理，页面不用再进行判断，直接取该值就行

                abean.set("object_id", isNull(rowSet.getString("object_id")));
                abean.set("a0101", isNull(rowSet.getString("a0101")));
                // if(pointResultValue.equals("1"))
                {
                    String score_adjust = rowSet.getString("score_adjust") == null ? "0"
                            : rowSet.getString("score_adjust");
                    if ("0".equals(score_adjust)
                            || score_adjust.trim().length() == 0) {
                        score_adjust = "未调整";
                    } else if ("1".equals(score_adjust)) {
                        score_adjust = "正调整";
                    } else if ("2".equals(score_adjust)) {
                        score_adjust = "已调整";
                    }

                    abean.set("score_adjust", score_adjust);
                }
                if (dbWizard.isExistField("per_result_" + this.planid,
                        "director", false)) {
                    String director = rowSet.getString("director") == null ? ""
                            : rowSet.getString("director");
                    abean.set("director", director);
                }

                String subsetMenus = loadxml.getRelatePlanSubSetMenuValue();// 引入的子集
                if (subsetMenus != null && subsetMenus.trim().length() > 0) {
                    String[] temps = subsetMenus.split(",");
                    for (int j = 0; j < temps.length; j++) {
                        String temp = temps[j].trim();
                        if (temp.length() == 0) {
                            continue;
                        }
                        FieldItem fielditem = DataDictionary.getFieldItem(temp);
                        if (fielditem == null) {
                            continue;
                        }
                        String itemid = fielditem.getItemid();
                        String itemtype = fielditem.getItemtype();
                        String codesetid = fielditem.getCodesetid();
                        int itemlength = fielditem.getItemlength();
                        int decimalwidth = fielditem.getDecimalwidth();

                        if (rowSet.getObject(itemid) == null) {
                            abean.set(itemid, "");
                        } else {
                            if ("N".equalsIgnoreCase(itemtype)) {
                                abean.set(itemid, PubFunc.round(
                                        rowSet.getString(itemid), decimalwidth));
                            } else if ("A".equalsIgnoreCase(itemtype)
                                    || "M".equalsIgnoreCase(itemtype)) {
                                if (!"0".equals(codesetid)
                                        && codesetid.trim().length() > 0) {
                                    abean.set(
                                            itemid,
                                            AdminCode.getCode(codesetid,
                                                    rowSet.getString(itemid)) != null ? AdminCode
                                                    .getCode(
                                                            codesetid,
                                                            rowSet.getString(itemid))
                                                    .getCodename()
                                                    : "");
                                } else {
                                    abean.set(itemid, rowSet.getString(itemid));
                                }
                            } else if ("D".equalsIgnoreCase(itemtype)) {
                                SimpleDateFormat format1 = new SimpleDateFormat(
                                        "yyyy.MM.dd");
                                Date dateVal = rowSet.getDate(itemid);
                                String value = format1.format(dateVal);
                                abean.set(itemid, value);
                            }
                        }
                    }
                }

                if (rowSet.getString("original_score") == null) {
                    abean.set("original_score", "");
                } else {
                    abean.set("original_score", PubFunc.round(
                            rowSet.getString("original_score"), KeepDecimal));
                }

                if (rowSet.getString("score") == null) {
                    abean.set("score", "");
                } else {
                    abean.set("score", PubFunc.round(rowSet.getString("score"),
                            KeepDecimal));
                }
                Hashtable paramters = loadxml.getDegreeWhole();
                String deviationScoreUsed = (String) paramters.get("deviationScoreUsed");//是否使用纠偏总分 0不是  1是
                // pointResultValue        指标结果值 1:分数 2:平均分比值 3:总分比值 4:单项比值
                if ("1".equals(deviationScoreUsed) && dbWizard.isExistField("per_result_" + this.planid, "reviseScore", false)) {//&&"1".equals(pointResultValue)
                    if (rowSet.getString("reviseScore") == null) {
                        abean.set("reviseScore", "");
                    } else {
                        abean.set("reviseScore", PubFunc.round(rowSet.getString("reviseScore"),
                                KeepDecimal));
                    }
                }

                if (busitype != null && busitype.trim().length() > 0
                        && "1".equals(busitype)) {
                    if (rowSet.getString("postRuleScore") == null) {
                        abean.set("postRuleScore", "");
                    } else {
                        abean.set("postRuleScore", PubFunc.round(
                                rowSet.getString("postRuleScore"), KeepDecimal));
                    }

                    if (rowSet.getString("mateSurmise") == null) {
                        abean.set("mateSurmise", "");
                    } else {
                        abean.set(
                                "mateSurmise",
                                PubFunc.multiple(
                                        rowSet.getString("mateSurmise"), "100",
                                        KeepDecimal) + "%");
                    }
                }

                abean.set(
                        "resultdesc",
                        rowSet.getString("resultdesc") != null ? rowSet
                                .getString("resultdesc") : "");

                if (!isByModelFlag) {
                    for (int i = 0; i < pointList.size(); i++) {
                        String[] temp = (String[]) pointList.get(i);
                        if (rowSet.getString("c_" + temp[0]) == null) {
                            abean.set(temp[0], "");
                        } else {
                            if ("1".equals(pointResultValue)) {
                                abean.set(temp[0], PubFunc.round(
                                        rowSet.getString("c_" + temp[0]),
                                        KeepDecimal));
                            } else {
                                String value = rowSet.getString("c_" + temp[0]);
                                abean.set(temp[0], PubFunc.round(String
                                                .valueOf(Float.parseFloat(value) * 100),
                                        KeepDecimal));
                            }
                        }
                    }

                    for (int i = 0; i < selfItemList.size(); i++) {
                        String item_id = (String) selfItemList.get(i);
                        String value = rowSet.getString("T_" + item_id) != null ? rowSet
                                .getString("T_" + item_id) : "";
                        if (value.length() > 0) {
                            if ("1".equals(pointResultValue)) {
                                abean.set("T_" + item_id, PubFunc.round(
                                        String.valueOf(Float.parseFloat(value)),
                                        KeepDecimal));
                            } else {
                                abean.set("T_" + item_id, PubFunc.round(String
                                                .valueOf(Float.parseFloat(value) * 100),
                                        KeepDecimal));
                            }
                        } else {
                            abean.set("T_" + item_id, "");
                        }
                    }

                }

                if ("1".equals(pointResultValue)
                        && this.planParamSet.get("WholeEval") != null
                        && "True"
                        .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                    for (int i = 0; i < this.gradeTempList.size(); i++) {
                        LazyDynaBean a_bean = (LazyDynaBean) this.gradeTempList
                                .get(i);
                        String id = (String) a_bean.get("id");
                        String value = rowSet.getString("V_" + id) != null ? rowSet
                                .getString("V_" + id) : "";
                        if ("".equals(value)) {
                            abean.set("V_" + id, "");
                        } else {
                            abean.set("V_" + id, PubFunc.round(
                                    String.valueOf(Float.parseFloat(value)), 2));
                        }
                    }

                    String value = rowSet.getString("V_SUM") != null ? rowSet
                            .getString("V_SUM") : "";
                    if ("".equals(value)) {
                        abean.set("V_SUM", "");
                    } else {
                        abean.set("V_SUM", PubFunc.round(
                                String.valueOf(Float.parseFloat(value)), 2));
                    }
                }

                if (rowSet.getString("exX_object") != null) {
                    String value = PubFunc.round(String.valueOf(Float
                                    .parseFloat(rowSet.getString("exX_object"))),
                            KeepDecimal);
                    abean.set("exX_object", value);
                } else {
                    abean.set("exX_object", "");
                }

                if (rowSet.getString("exs_grpavg") != null) {
                    String value = PubFunc.round(String.valueOf(Float
                                    .parseFloat(rowSet.getString("exs_grpavg"))),
                            KeepDecimal);
                    abean.set("exs_grpavg", value);
                } else {
                    abean.set("exs_grpavg", "");
                }

                if (rowSet.getString("exS_GrpMax") != null) {
                    String value = PubFunc.round(rowSet.getString("exS_GrpMax"),
                            KeepDecimal);
                    abean.set("exS_GrpMax", value);
                } else {
                    abean.set("exS_GrpMax", "");
                }

                if (rowSet.getString("exS_GrpMin") != null) {
                    String value = PubFunc.round(rowSet.getString("exS_GrpMin"),
                            KeepDecimal);
                    abean.set("exS_GrpMin", value);
                } else {
                    abean.set("exS_GrpMin", "");
                }

                if (rowSet.getString("ex_GrpNum") != null) {
                    String value = PubFunc.round(String.valueOf(Float
                            .parseFloat(rowSet.getString("ex_GrpNum"))), 0);
                    abean.set("ex_GrpNum", value);
                } else {
                    abean.set("ex_GrpNum", "");
                }

                if (rowSet.getString("ordering") != null) {
                    String value = PubFunc.round(String.valueOf(Float
                            .parseFloat(rowSet.getString("ordering"))), 0);
                    abean.set("ordering", value);
                } else {
                    abean.set("ordering", "");
                }

                if (rowSet.getString("org_GrpNum") != null) {
                    String value = PubFunc.round(String.valueOf(Float
                            .parseFloat(rowSet.getString("org_GrpNum"))), 0);
                    abean.set("org_GrpNum", value);
                } else {
                    abean.set("org_GrpNum", "");
                }

                if (rowSet.getString("org_ordering") != null) {
                    String value = PubFunc.round(String.valueOf(Float
                            .parseFloat(rowSet.getString("org_ordering"))), 0);
                    abean.set("org_ordering", value);
                } else {
                    abean.set("org_ordering", "");
                }

                if (rowSet.getString("addScore") != null) {
                    String value = PubFunc.round(String.valueOf(Float
                                    .parseFloat(rowSet.getString("addScore"))),
                            KeepDecimal);
                    abean.set("addScore", value);
                } else {
                    abean.set("addScore", "");
                }

                if (rowSet.getString("minusScore") != null) {
                    String value = PubFunc.round(String.valueOf(Float
                                    .parseFloat(rowSet.getString("minusScore"))),
                            KeepDecimal);
                    abean.set("minusScore", value);
                } else {
                    abean.set("minusScore", "");
                }

                abean.set(
                        "evalRemark",
                        rowSet.getString("evalRemark") != null ? rowSet
                                .getString("evalRemark") : "");

                for (int i = 0; i < planlist.size(); i++) {
                    LazyDynaBean tempBean = (LazyDynaBean) planlist.get(i);
                    String id = (String) tempBean.get("id");

                    String Menus = (String) tempBean.get("Menus");
                    if (Menus != null && Menus.trim().length() > 0) {
                        String[] temps = Menus.split(",");
                        for (int j = 0; j < temps.length; j++) {
                            String temp = temps[j].trim();
                            if (temp.length() == 0) {
                                continue;
                            }
                            if ("score".equalsIgnoreCase(temp)) {
                                if (rowSet.getString("G_" + id) != null) {
                                    String value = PubFunc.round(String
                                                    .valueOf(Float.parseFloat(rowSet
                                                            .getString("G_" + id))),
                                            KeepDecimal);
                                    abean.set("G_" + id, value);
                                } else {
                                    abean.set("G_" + id, "");
                                }
                            } else if ("Grade".equalsIgnoreCase(temp)) {
                                if (rowSet.getString("G_" + id + "_Grade") != null) {
                                    String value = rowSet.getString("G_" + id
                                            + "_Grade");
                                    RowSet rs = null;
                                    if (value != null && !"".equals(value)) {
                                        rs = dao.search("select resultdesc from per_result_" + id + " where grade_id=" + value);
                                    }
                                    while (rs.next()) {
                                        value = rs.getString("resultdesc");
                                    }
                                    abean.set("G_" + id + "_Grade", value);
                                } else {
                                    abean.set("G_" + id + "_Grade", "");
                                }
                            } else if ("Avg".equalsIgnoreCase(temp)) {
                                if (rowSet.getString("G_" + id + "_Avg") != null) {
                                    String value = PubFunc.round(String
                                                    .valueOf(Float.parseFloat(rowSet
                                                            .getString("G_" + id
                                                                    + "_Avg"))),
                                            KeepDecimal);
                                    abean.set("G_" + id + "_Avg", value);
                                } else {
                                    abean.set("G_" + id + "_Avg", "");
                                }
                            } else if ("Max".equalsIgnoreCase(temp)) {
                                if (rowSet.getString("G_" + id + "_Max") != null) {
                                    String value = PubFunc.round(String
                                                    .valueOf(Float.parseFloat(rowSet
                                                            .getString("G_" + id
                                                                    + "_Max"))),
                                            KeepDecimal);
                                    abean.set("G_" + id + "_Max", value);
                                } else {
                                    abean.set("G_" + id + "_Max", "");
                                }
                            } else if ("Min".equalsIgnoreCase(temp)) {
                                if (rowSet.getString("G_" + id + "_Min") != null) {
                                    String value = PubFunc.round(String
                                                    .valueOf(Float.parseFloat(rowSet
                                                            .getString("G_" + id
                                                                    + "_Min"))),
                                            KeepDecimal);
                                    abean.set("G_" + id + "_Min", value);
                                } else {
                                    abean.set("G_" + id + "_Min", "");
                                }
                            } else if ("XiShu".equalsIgnoreCase(temp)) {
                                if (rowSet.getString("G_" + id + "_XiShu") != null) {
                                    String value = PubFunc.round(String
                                                    .valueOf(Float.parseFloat(rowSet
                                                            .getString("G_" + id
                                                                    + "_XiShu"))),
                                            KeepDecimal);
                                    abean.set("G_" + id + "_XiShu", value);
                                } else {
                                    abean.set("G_" + id + "_XiShu", "");
                                }
                            } else if ("Order".equalsIgnoreCase(temp)) {
                                if (rowSet.getString("G_" + id + "_Order") != null) {
                                    String value = rowSet.getString("G_" + id
                                            + "_Order");
                                    abean.set("G_" + id + "_Order", value);
                                } else {
                                    abean.set("G_" + id + "_Order", "");
                                }
                            } else if ("UMOrd".equalsIgnoreCase(temp)) {
                                if (rowSet.getString("G_" + id + "_UMOrd") != null) {
                                    String value = rowSet.getString("G_" + id
                                            + "_UMOrd");
                                    abean.set("G_" + id + "_UMOrd", value);
                                } else {
                                    abean.set("G_" + id + "_UMOrd", "");
                                }
                            } else if ("Mark".equalsIgnoreCase(temp)) {
                                if (rowSet.getString("G_" + id + "_Mark") != null) {
                                    String value = rowSet.getString("G_" + id
                                            + "_Mark");
                                    abean.set("G_" + id + "_Mark", value);
                                } else {
                                    abean.set("G_" + id + "_Mark", "");
                                }
                            } else if (temp.indexOf("Body") != -1) {
                                String bodyid = temp.replaceAll("Body", "");
                                if (rowSet
                                        .getString("G_" + id + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid)) != null) {
                                    String value = PubFunc
                                            .round(String.valueOf(Float
                                                            .parseFloat(rowSet
                                                                    .getString("G_"
                                                                            + id
                                                                            + "_B_"
                                                                            + ("-1".equals(bodyid) ? "X1" : bodyid)))),
                                                    KeepDecimal);
                                    abean.set("G_" + id + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid), value);
                                } else {
                                    abean.set("G_" + id + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid), "");
                                }
                            } else if (temp.indexOf("Item") != -1) {
                                String itemid = temp.replaceAll("Item", "");
                                if (rowSet.getString("G_" + id + "_Item"
                                        + itemid) != null) {
                                    String value = PubFunc
                                            .round(String.valueOf(Float
                                                            .parseFloat(rowSet
                                                                    .getString("G_"
                                                                            + id
                                                                            + "_Item"
                                                                            + itemid))),
                                                    KeepDecimal);
                                    abean.set("G_" + id + "_Item" + itemid,
                                            value);
                                } else {
                                    abean.set("G_" + id + "_Item" + itemid, "");
                                }
                            } else {
                                if (rowSet.getString("G_" + id + "_" + temp) != null) {
                                    String value = PubFunc.round(String
                                                    .valueOf(Float.parseFloat(rowSet
                                                            .getString("G_" + id + "_"
                                                                    + temp))),
                                            KeepDecimal);
                                    abean.set("G_" + id + "_" + temp, value);
                                } else {
                                    abean.set("G_" + id + "_" + temp, "");
                                }
                            }
                        }
                    } else {
                        if (rowSet.getString("G_" + id) != null) {
                            String value = PubFunc.round(String.valueOf(Float
                                            .parseFloat(rowSet.getString("G_" + id))),
                                    KeepDecimal);
                            abean.set("G_" + id, value);
                        } else {
                            abean.set("G_" + id, "");
                        }
                    }

                    String HZMenus = (String) tempBean.get("HZMenus");

                    String temp2 = "";
                    if (HZMenus != null && HZMenus.trim().length() > 0) {
                        String[] temps = HZMenus.split(",");
                        for (int j = 0; j < temps.length; j++) {
                            String temp = temps[j].trim();
                            String temphz = temps[j].trim();
                            if (temp.indexOf(":") != -1) {
                                temp = temp.substring(0, temp.indexOf(":"));
                                temp2 = "_Z"
                                        + temphz.substring(temphz.indexOf(":") + 1);
                            }
                            if (temp.length() == 0) {
                                continue;
                            }
                            if ("score".equalsIgnoreCase(temp)) {
                                if (rowSet.getString("G_" + id + temp2) != null) {
                                    String value = PubFunc.round(String
                                                    .valueOf(Float.parseFloat(rowSet
                                                            .getString("G_" + id
                                                                    + temp2))),
                                            KeepDecimal);
                                    abean.set("G_" + id + temp2, value);
                                } else {
                                    abean.set("G_" + id + temp2, "");
                                }
                            } else if ("Grade".equalsIgnoreCase(temp)) {
                                if (rowSet.getString("G_" + id + "_Grade"
                                        + temp2) != null) {
                                    String value = rowSet.getString("G_" + id
                                            + "_Grade" + temp2);
                                    abean.set("G_" + id + "_Grade" + temp2,
                                            value);
                                } else {
                                    abean.set("G_" + id + "_Grade" + temp2, "");
                                }
                            } else if ("Avg".equalsIgnoreCase(temp)) {
                                if (rowSet
                                        .getString("G_" + id + "_Avg" + temp2) != null) {
                                    String value = PubFunc.round(
                                            String.valueOf(Float
                                                    .parseFloat(rowSet
                                                            .getString("G_"
                                                                    + id
                                                                    + "_Avg"
                                                                    + temp2))),
                                            KeepDecimal);
                                    abean.set("G_" + id + "_Avg" + temp2, value);
                                } else {
                                    abean.set("G_" + id + "_Avg" + temp2, "");
                                }
                            } else if ("Max".equalsIgnoreCase(temp)) {
                                if (rowSet
                                        .getString("G_" + id + "_Max" + temp2) != null) {
                                    String value = PubFunc.round(
                                            String.valueOf(Float
                                                    .parseFloat(rowSet
                                                            .getString("G_"
                                                                    + id
                                                                    + "_Max"
                                                                    + temp2))),
                                            KeepDecimal);
                                    abean.set("G_" + id + "_Max" + temp2, value);
                                } else {
                                    abean.set("G_" + id + "_Max" + temp2, "");
                                }
                            } else if ("Min".equalsIgnoreCase(temp)) {
                                if (rowSet
                                        .getString("G_" + id + "_Min" + temp2) != null) {
                                    String value = PubFunc.round(
                                            String.valueOf(Float
                                                    .parseFloat(rowSet
                                                            .getString("G_"
                                                                    + id
                                                                    + "_Min"
                                                                    + temp2))),
                                            KeepDecimal);
                                    abean.set("G_" + id + "_Min" + temp2, value);
                                } else {
                                    abean.set("G_" + id + "_Min" + temp2, "");
                                }
                            } else if ("XiShu".equalsIgnoreCase(temp)) {
                                if (rowSet.getString("G_" + id + "_XiShu"
                                        + temp2) != null) {
                                    String value = PubFunc.round(
                                            String.valueOf(Float
                                                    .parseFloat(rowSet
                                                            .getString("G_"
                                                                    + id
                                                                    + "_XiShu"
                                                                    + temp2))),
                                            KeepDecimal);
                                    abean.set("G_" + id + "_XiShu" + temp2,
                                            value);
                                } else {
                                    abean.set("G_" + id + "_XiShu" + temp2, "");
                                }
                            } else if ("Order".equalsIgnoreCase(temp)) {
                                if (rowSet.getString("G_" + id + "_Order"
                                        + temp2) != null) {
                                    String value = rowSet.getString("G_" + id
                                            + "_Order" + temp2);
                                    abean.set("G_" + id + "_Order" + temp2,
                                            value);
                                } else {
                                    abean.set("G_" + id + "_Order" + temp2, "");
                                }
                            } else if ("UMOrd".equalsIgnoreCase(temp)) {
                                if (rowSet.getString("G_" + id + "_UMOrd"
                                        + temp2) != null) {
                                    String value = rowSet.getString("G_" + id
                                            + "_UMOrd" + temp2);
                                    abean.set("G_" + id + "_UMOrd" + temp2,
                                            value);
                                } else {
                                    abean.set("G_" + id + "_UMOrd" + temp2, "");
                                }
                            } else if ("Mark".equalsIgnoreCase(temp)) {
                                if (rowSet.getString("G_" + id + "_Mark"
                                        + temp2) != null) {
                                    String value = rowSet.getString("G_" + id
                                            + "_Mark" + temp2);
                                    abean.set("G_" + id + "_Mark" + temp2,
                                            value);
                                } else {
                                    abean.set("G_" + id + "_Mark" + temp2, "");
                                }
                            } else if (temp.indexOf("Body") != -1) {
                                String bodyid = temp.replaceAll("Body", "");
                                if (rowSet.getString("G_" + id + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid)
                                        + temp2) != null) {
                                    String value = PubFunc.round(String
                                                    .valueOf(Float.parseFloat(rowSet
                                                            .getString("G_" + id
                                                                    + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid)
                                                                    + temp2))),
                                            KeepDecimal);
                                    abean.set("G_" + id + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid)
                                            + temp2, value);
                                } else {
                                    abean.set("G_" + id + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid)
                                            + temp2, "");
                                }
                            } else if (temp.indexOf("Item") != -1) {
                                String itemid = temp.replaceAll("Item", "");
                                if (rowSet.getString("G_" + id + "_Item"
                                        + itemid + temp2) != null) {
                                    String value = PubFunc.round(String
                                                    .valueOf(Float.parseFloat(rowSet
                                                            .getString("G_" + id
                                                                    + "_Item" + itemid
                                                                    + temp2))),
                                            KeepDecimal);
                                    abean.set("G_" + id + "_Item" + itemid
                                            + temp2, value);
                                } else {
                                    abean.set("G_" + id + "_Item" + itemid
                                            + temp2, "");
                                }
                            } else {
                                if (rowSet.getString("G_" + id + "_" + temp
                                        + temp2) != null) {
                                    String value = PubFunc.round(String
                                                    .valueOf(Float.parseFloat(rowSet
                                                            .getString("G_" + id + "_"
                                                                    + temp + temp2))),
                                            KeepDecimal);
                                    abean.set("G_" + id + "_" + temp + temp2,
                                            value);
                                } else {
                                    abean.set("G_" + id + "_" + temp + temp2,
                                            "");
                                }
                            }
                        }
                    }
                    // else{
                    // if(rowSet.getString("G_"+id)!=null)
                    // {
                    // String value =
                    // PubFunc.round(String.valueOf(Float.parseFloat(rowSet.getString("G_"+id))),
                    // KeepDecimal);
                    // abean.set("G_"+id,value);
                    // }else
                    // abean.set("G_"+id,"");
                    // }

                }

                // for(int j=0;j<relaPlans.size();j++)
                // {
                // String plan_id=(String)relaPlans.get(j);
                // if(rowSet.getString("G_"+plan_id)!=null)
                // {
                // String value =
                // PubFunc.round(String.valueOf(Float.parseFloat(rowSet.getString("G_"+plan_id))),
                // KeepDecimal);
                // abean.set("G_"+plan_id,value);
                // }else
                // abean.set("G_"+plan_id,"");
                //
                // }

                list.add(abean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    // 获得各指标的动态权重
    private HashMap getPointsRank() {
        HashMap map = new HashMap();
        ContentDAO dao = new ContentDAO(this.conn);
        StringBuffer buf = new StringBuffer();
        buf.append("select point_id,rank from per_template_point where item_id in ");
        buf.append("(select item_id from per_template_item where template_id='");
        buf.append(this.template_id);
        buf.append("')");
        try {
            RowSet rowSet = dao.search(buf.toString());
            while (rowSet.next()) {
                map.put(rowSet.getString("point_id").toUpperCase(),
                        rowSet.getString("rank") == null ? "0" : rowSet
                                .getString("rank"));
            }
            rowSet.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return map;
    }

    // 取得得分统计结果 sql
    private String getScoreResultSql(String whl, String pointResultValue,
                                     String order, ArrayList pointList, ArrayList relaPlans,
                                     String busitype) {
        whl = PubFunc.keyWord_reback(whl);
        StringBuffer sql = new StringBuffer("");

        // 引入子集字段
        String subsetStr = "";
        String subsetMenus = loadxml.getRelatePlanSubSetMenuValue();// 引入的子集
        if (subsetMenus != null && subsetMenus.trim().length() > 0) {
            String[] temps = subsetMenus.split(",");
            for (int j = 0; j < temps.length; j++) {
                String temp = temps[j].trim();
                if (temp.length() == 0) {
                    continue;
                }
                FieldItem fielditem = DataDictionary.getFieldItem(temp);
                if (fielditem == null) {
                    continue;
                }
                subsetStr += "," + fielditem.getItemid();
            }
        }
        // 引入关联计划的字段
        String relaPlanStr = "";
        ArrayList planlist = loadxml.getRelatePlanValue("Plan");
        for (int m = 0; m < planlist.size(); m++) {
            LazyDynaBean tempBean = (LazyDynaBean) planlist.get(m);
            String id = (String) tempBean.get("id");

            String Menus = (String) tempBean.get("Menus");
            if (Menus != null && Menus.trim().length() > 0) {
                String[] temps = Menus.split(",");
                for (int j = 0; j < temps.length; j++) {
                    String temp = temps[j].trim();
                    if (temp.length() == 0) {
                        continue;
                    }
                    if ("score".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id;
                    } else if ("Grade".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + "_Grade";
                    } else if ("Avg".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + "_Avg";
                    } else if ("Max".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + "_Max";
                    } else if ("Min".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + "_Min";
                    } else if ("XiShu".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + "_XiShu";
                    } else if ("Order".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + "_Order";
                    } else if ("UMOrd".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + "_UMOrd";
                    } else if ("Mark".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + "_Mark";
                    } else if (temp.indexOf("Body") != -1) {
                        String bodyid = temp.replaceAll("Body", "");
                        relaPlanStr += ",G_" + id + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid);
                    } else if (temp.indexOf("Item") != -1) {
                        String itemid = temp.replaceAll("Item", "");
                        relaPlanStr += ",G_" + id + "_Item" + itemid;
                    } else {
                        relaPlanStr += ",G_" + id + "_" + temp;
                    }
                }
            } else {
                relaPlanStr += ",G_" + id;
            }

            String HZMenus = (String) tempBean.get("HZMenus");
            String temp2 = "";
            if (HZMenus != null && HZMenus.trim().length() > 0) {
                String[] temps = HZMenus.split(",");
                for (int j = 0; j < temps.length; j++) {
                    String temp = temps[j].trim();
                    String temphz = temps[j].trim();

                    if (temp.indexOf(":") != -1) {
                        temp = temp.substring(0, temp.indexOf(":"));
                        temp2 = "_Z"
                                + temphz.substring(temphz.indexOf(":") + 1);
                    }
                    if (temp.length() == 0) {
                        continue;
                    }
                    if ("score".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + temp2;
                    } else if ("Grade".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + "_Grade" + temp2;
                    } else if ("Avg".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + "_Avg" + temp2;
                    } else if ("Max".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + "_Max" + temp2;
                    } else if ("Min".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + "_Min" + temp2;
                    } else if ("XiShu".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + "_XiShu" + temp2;
                    } else if ("Order".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + "_Order" + temp2;
                    } else if ("UMOrd".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + "_UMOrd" + temp2;
                    } else if ("Mark".equalsIgnoreCase(temp)) {
                        relaPlanStr += ",G_" + id + "_Mark" + temp2;
                    } else if (temp.indexOf("Body") != -1) {
                        String bodyid = temp.replaceAll("Body", "");
                        relaPlanStr += ",G_" + id + "_B_" + ("-1".equals(bodyid) ? "X1" : bodyid) + temp2;
                    } else if (temp.indexOf("Item") != -1) {
                        String itemid = temp.replaceAll("Item", "");
                        relaPlanStr += ",G_" + id + "_Item" + itemid + temp2;
                    } else {
                        relaPlanStr += ",G_" + id + "_" + temp;
                    }
                }

            }
        }
        DbWizard dbWizard = new DbWizard(this.conn);
        String director = "";
        if (dbWizard.isExistField("per_result_" + this.planid, "director",
                false)) {
            director = ",director ";
        }
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = dao
                    .search("select item_id,parent_id,kind,rank,score from per_template_item where template_id='"
                            + this.template_id + "' order by seq");
            LazyDynaBean abean = null;
            ArrayList itemList = new ArrayList();
            while (rowSet.next()) {
                abean = new LazyDynaBean();
                abean.set("item_id", rowSet.getString("item_id"));
                abean.set(
                        "parent_id",
                        rowSet.getString("parent_id") != null ? rowSet
                                .getString("parent_id") : "");
                abean.set(
                        "kind",
                        rowSet.getString("kind") != null ? rowSet
                                .getString("kind") : "1");
                abean.set(
                        "rank",
                        rowSet.getString("rank") != null ? rowSet
                                .getString("rank") : "1");
                abean.set(
                        "score",
                        rowSet.getString("score") != null ? rowSet
                                .getString("score") : "0");
                itemList.add(abean);
            }

            // 如果考核结果表中没有考核实施的对象，将考核实施中的考核对象写入考核结果表
            ArrayList ObjList = this.getObjectList(this.planid);
            String insertSql = "insert into per_result_"
                    + this.planid
                    + "(a0000,id,b0110,e0122,e01a1,object_id,a0101,body_id)"
                    + "select a0000,id,b0110,e0122,e01a1,object_id,a0101,body_id from per_object where plan_id="
                    + this.planid
                    + " and object_id not in (select object_id from per_result_"
                    + this.planid + ")";
            dao.insert(insertSql, new ArrayList());

            String competency = "";
            Hashtable paramters = loadxml.getDegreeWhole();
            String deviationScoreUsed = (String) paramters.get("deviationScoreUsed");//是否使用纠偏总分 0不是  1是
            String reviseScore = "";
            String total_score = "score";
            if ("1".equals(deviationScoreUsed)) {
                reviseScore = ",reviseScore";
                total_score = "reviseScore";
            }
            if (busitype != null && busitype.trim().length() > 0
                    && "1".equals(busitype)) {
                competency = ",postRuleScore,mateSurmise";
            }
            // pointResultValue指标结果值 1:分数 2:平均分比值 3:总分比值 4:单项比值
            if ("1".equals(pointResultValue)) {
                sql.append("select * from per_result_" + this.planid
                        + " where 1=1 ");
                if (whl != null && whl.length() > 0) {
                    sql.append(whl);
                }
                if (order != null && order.length() > 0) {
                    sql.append(order);
                } else {
                    sql.append(" order by a0000");
                }

            } else if ("2".equals(pointResultValue)) {
                sql.append("select object_id,a0101,b0110,e0122,e01a1,body_id");
                StringBuffer subSql = new StringBuffer("");
                for (int i = 0; i < pointList.size(); i++) {
                    String[] temp = (String[]) pointList.get(i);
                    sql.append(",c_" + temp[0] + "/nullif((" + temp[0]
                            + "/nullif(a_count" + temp[0] + ",0)),0) c_"
                            + temp[0]);
                    subSql.append(",sum(c_" + temp[0] + ") " + temp[0]);
                }
                for (int i = 0; i < itemList.size(); i++) {
                    LazyDynaBean aabean = (LazyDynaBean) itemList.get(i);
                    String item_id = (String) aabean.get("item_id");
                    String kind = (String) aabean.get("kind");
                    if ("2".equals(kind)) {
                        sql.append(",T_" + item_id + "/nullif((S_" + item_id
                                + "/nullif(a_count,0)),0) T_" + item_id);
                        subSql.append(",sum(T_" + item_id + ") S_" + item_id);
                    }
                }

                sql.append(subsetStr
                        + relaPlanStr
                        + ",original_score,score" + reviseScore
                        + competency
                        + ",resultdesc,exX_object,exs_grpavg,exS_GrpMax,exS_GrpMin,ex_GrpNum,ordering,evalRemark,score_adjust,org_GrpNum,org_ordering,addScore,minusScore,confirmflag"
                        + director + " from ");
                if (whl != null && whl.length() > 0) {
                    sql.append(" (select * from  per_result_" + this.planid
                            + " where 1=1 " + whl + " ) ");
                }
                sql.append("per_result_" + this.planid);
                sql.append(",(select " + subSql.substring(1)
                        + " from per_result_" + this.planid);
                if (whl != null && whl.length() > 0) {
                    sql.append(" where 1=1 " + whl);
                }
                sql.append(" ) a");

                for (int i = 0; i < pointList.size(); i++) {
                    String[] temp = (String[]) pointList.get(i);

                    sql.append(",(select count(object_id) a_count" + temp[0]
                            + "  from per_result_" + this.planid
                            + " where 1=1 and c_" + temp[0] + " is not null ");
                    // sql.append(" where  object_id in (select distinct object_id from per_mainbody where plan_id="+this.planid+" and ( status=2  or status=3))");
                    // 先不限制打分状态了 有几个对象算几个
                    if (whl != null && whl.length() > 0) {
                        sql.append(whl);
                    }
                    sql.append(" ) b" + i);

                }
                sql.append(",(select count(object_id) a_count from per_result_"
                        + this.planid);
                if (whl != null && whl.length() > 0) {
                    sql.append("  where 1=1  " + whl);
                }
                sql.append(" ) b");

                if (order != null && order.length() > 0) {
                    sql.append(order);
                } else {
                    sql.append(" order by per_result_" + this.planid + ".a0000");
                }

            } else if ("3".equals(pointResultValue)) {
                HashMap pointsRank = getPointsRank();
                sql.append("select object_id,a0101,b0110,e0122,e01a1,body_id");
                for (int i = 0; i < pointList.size(); i++) {
                    String[] temp = (String[]) pointList.get(i);
                    sql.append(",(c_" + temp[0] + " * "
                            + (String) pointsRank.get(temp[0].toUpperCase())
                            + ")/nullif(" + total_score + ",0) c_" + temp[0]);

                }
                for (int i = 0; i < itemList.size(); i++) {
                    LazyDynaBean aabean = (LazyDynaBean) itemList.get(i);
                    String item_id = (String) aabean.get("item_id");
                    String kind = (String) aabean.get("kind");
                    String rank = (String) aabean.get("rank");
                    if ("2".equals(kind)) {
                        sql.append(",(T_" + item_id + " * " + rank
                                + ")/nullif(" + total_score + ",0) T_" + item_id);
                    }
                }

                sql.append(subsetStr
                        + relaPlanStr
                        + ",original_score,score"
                        + reviseScore
                        + competency
                        + ",resultdesc,exX_object,exs_grpavg,exS_GrpMax,exS_GrpMin,ex_GrpNum,ordering,evalRemark,score_adjust,org_GrpNum,org_ordering,addScore,minusScore,confirmflag"
                        + director + " from per_result_" + this.planid);
                if (whl != null && whl.length() > 0) {
                    sql.append(" where 1=1 " + whl);
                }
                if (order != null && order.length() > 0) {
                    sql.append(order);
                } else {
                    sql.append(" order by a0000");
                }

            } else if ("4".equals(pointResultValue)) {
                sql.append("select object_id,a0101,b0110,e0122,e01a1,body_id");
                for (int i = 0; i < pointList.size(); i++) {
                    String[] temp = (String[]) pointList.get(i);
                    sql.append(",c_" + temp[0] + "/nullif(" + temp[8]
                            + ",0) c_" + temp[0]);
                }
                for (int i = 0; i < itemList.size(); i++) {
                    LazyDynaBean aabean = (LazyDynaBean) itemList.get(i);
                    String item_id = (String) aabean.get("item_id");
                    String score = (String) aabean.get("score");
                    String kind = (String) aabean.get("kind");
                    if ("2".equals(kind)) {
                        sql.append(",T_" + item_id + "/nullif(" + score
                                + ",0) T_" + item_id);
                    }
                }

                sql.append(subsetStr
                        + relaPlanStr
                        + ",original_score,score"
                        + reviseScore
                        + competency
                        + ",resultdesc, exX_object,exs_grpavg,exS_GrpMax,exS_GrpMin,ex_GrpNum,ordering,evalRemark,score_adjust,org_GrpNum,org_ordering,addScore,minusScore,confirmflag"
                        + director + " from per_result_" + this.planid);
                if (whl != null && whl.length() > 0) {
                    sql.append(" where 1=1 " + whl);
                }
                if (order != null && order.length() > 0) {
                    sql.append(order);
                } else {
                    sql.append(" order by a0000");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return sql.toString();
    }

    /**
     * 根据考核计划id取得考核计划名称
     *
     * @param planIDs
     * @return
     */
    public ArrayList getPlanNameList(ArrayList planIDs) {
        ArrayList list = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            for (int i = 0; i < planIDs.size(); i++) {
                RowSet rowSet = dao
                        .search("select * from per_plan where plan_id="
                                + (String) planIDs.get(i));
                if (rowSet.next()) {
                    list.add(rowSet.getString("name"));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    public String getObjTitle(int object_type) {
        String name = "";
        switch (object_type) {
            case 2:
                name = ResourceFactory.getProperty("label.title.name");
                break;
            case 1:
                name = ResourceFactory.getProperty("org.performance.unorum");
                break;
            case 3:
                name = ResourceFactory.getProperty("tree.unroot.undesc");
                break;
            case 4:
                name = ResourceFactory.getProperty("column.sys.dept");
                break;
            default:
                break;
        }
        return name;
    }

    /**
     * @param list
     * @param pointList
     * @param opt       计算方式 1：得分统计 2:主体票数统计 3: 指标票数分统计 4:主体得分统计
     * @return
     */
    public String getTableHeadHtml(ArrayList list, ArrayList pointList,
                                   int opt, String pointResultValue, String busitype) {
        Hashtable paramters = loadxml.getDegreeWhole();
        String deviationScoreUsed = (String) paramters.get("deviationScoreUsed");//是否使用纠偏总分 0不是  1是
        StringBuffer a_tableHtml = new StringBuffer("");
        ArrayList items = (ArrayList) list.get(0); // 模版项目列表
        HashMap itemsCountMap = (HashMap) list.get(1); // 最底层项目的指标个数集合
        int lays = ((Integer) list.get(2)).intValue(); // 表头的总层数
        HashMap map = (HashMap) list.get(3); // 各项目的子项目或指标个数
        ArrayList bottomItemList = (ArrayList) list.get(4); // 模版最底层的项目
        ArrayList tempColumnList = new ArrayList();

        String GrpMenu1 = (String) this.planParamSet.get("GrpMenu1"); // 排名指标1，格式：字段名;层级
        String GrpMenu2 = (String) this.planParamSet.get("GrpMenu2"); // 排名指标2，格式：字段名;层级
        /* 画第一层表头 */
        a_tableHtml.append("<thead><tr style='background-color: #f4f7f7;'> ");
        int alay = lays;
        int num = lays;
        if (opt == 3
                || (opt == 1 && ("2".equals(pointResultValue)
                || "3".equals(pointResultValue) || "4"
                .equals(pointResultValue)))) {
            alay++;
        }
        a_tableHtml.append(getTh(
                ResourceFactory.getProperty("conlumn.mediainfo.info_id"), alay,
                1, "a", "cell_locked2 common_background_color common_border_color"));//序号
        /***********显示对象详情表头**************/
        if ("true".equals(this.showDetails)) {
            if ("2".equals(this.object_type)) {
                a_tableHtml.append(getTh(
                        ResourceFactory.getProperty("column.sys.org"), alay,
                        1, "a", "cell_locked2 common_background_color common_border_color"));//单位名称
                a_tableHtml.append(getTh(
                        ResourceFactory.getProperty("column.sys.dept"), alay,
                        1, "a", "cell_locked2 common_background_color common_border_color"));//部门
                a_tableHtml.append(getTh(
                        ResourceFactory.getProperty("column.sys.pos"), alay,
                        1, "a", "cell_locked2 common_background_color common_border_color"));//岗位名称
            }
            a_tableHtml.append(getTh(
                    ResourceFactory.getProperty("kpi.originalData.KpiTargetObjecType"), alay,
                    1, "a", "cell_locked2 common_background_color common_border_color"));//对象类别

        }


        a_tableHtml.append(getTh(
                this.getObjTitle(this.planVo.getInt("object_type")), alay, 1,
                "a", "cell_locked2 common_background_color common_border_color"));//姓名
        initParamSet();
        String subsetMenus = loadxml.getRelatePlanSubSetMenuValue();// 引入的子集
        if (subsetMenus != null && subsetMenus.trim().length() > 0) {
            String[] temps = subsetMenus.split(",");
            for (int j = 0; j < temps.length; j++) {
                String temp = temps[j].trim();
                if (temp.length() == 0) {
                    continue;
                }
                FieldItem fielditem = DataDictionary.getFieldItem(temp);
                if (fielditem == null) {
                    continue;
                }
                String itemdesc = fielditem.getItemdesc();
                a_tableHtml.append(getTh(itemdesc, alay, 1, "a",
                        "header_locked common_background_color common_border_color"));
            }
        }
        // “按岗位素质模型测评” 不显示指标名称
        if (!isByModelFlag) {
            for (Iterator t = items.iterator(); t.hasNext(); ) {
                String[] temp = (String[]) t.next();
                if (temp[1] == null) {
                    if ("2".equals(temp[5])) {
                        a_tableHtml.append(getTh(temp[3] + "*", num, 1, null,
                                "header_locked common_background_color common_border_color"));
                    } else {
                        //如果考核项目下没有任务的话就不要显示了 haosl 2020-1-16
                        int chidllength = Integer.parseInt((String) map.get(temp[0]));
                        if (chidllength > 0) {
                            a_tableHtml.append(getTh(temp[3], chidllength, 2, null, "header_locked common_background_color common_border_color"));
                            tempColumnList.add(temp);
                        }
                    }

                }
            }
        }

        // ArrayList planlist = loadxml.getRelatePlanValue("Plan","ID");
        // ArrayList planList=loadxml.getRelatePlanValue("Plan","Name");
        // ArrayList planList=getPlanNameList(planlist);
        // for(int i=0;i<planList.size();i++)
        // {
        // a_tableHtml.append(getTh((String)planList.get(i), alay, 1,
        // "a","header_locked"));
        // }

        ArrayList planlist = loadxml.getRelatePlanValue("Plan");
        LazyDynaBean abean = null;
        for (int i = planlist.size() - 1; i >= 0; i--) {
            abean = (LazyDynaBean) planlist.get(i);
            String id = (String) abean.get("id");
            String Name = (String) abean.get("Name");
            // String Type=(String)abean.get("Type");

            int colspanValue = 0;
            String Menus = (String) abean.get("Menus");
            String HZMenus = (String) abean.get("HZMenus");
            if (Menus != null && Menus.trim().length() > 0) {
                String[] temps = Menus.split(",");
                for (int j = 0; j < temps.length; j++) {
                    String temp = temps[j].trim();
                    if (temp.length() == 0) {
                        continue;
                    }
                    if (!"UMNum".equalsIgnoreCase(temp)
                            && !"GrpNum".equalsIgnoreCase(temp)) {
                        colspanValue++;
                    }
                }
            } else {
                colspanValue++;
            }

            if (HZMenus != null && HZMenus.trim().length() > 0) {
                String[] temps = HZMenus.split(",");
                for (int j = 0; j < temps.length; j++) {
                    String temp = temps[j].trim();
                    if (temp.length() == 0) {
                        continue;
                    }
                    colspanValue++;
                }

            } else {

            }

            a_tableHtml.append(getTh(Name, colspanValue, 2, null,
                    "header_locked common_background_color common_border_color"));// 引入计划的名称
        }

        a_tableHtml.append(getNumberTh(ResourceFactory
                        .getProperty("lable.performance.evaluation.computeTotal"),
                alay, 1, "a", "header_locked common_background_color common_border_color"));//计算总分
        a_tableHtml.append(getNumberTh(
                ResourceFactory.getProperty("label.kh.template.total"), alay,
                1, "a", "header_locked common_background_color common_border_color"));//总分
        /**纠偏总分**/
        if ("1".equals(deviationScoreUsed)) {
            a_tableHtml.append(getNumberTh(
                    "纠偏总分", alay,
                    1, "a", "header_locked common_background_color common_border_color"));//纠偏总分
        }

        if (busitype != null && busitype.trim().length() > 0
                && "1".equals(busitype)) {
            a_tableHtml.append(getTh("岗位标准分值", alay, 1, "a", "header_locked common_background_color common_border_color"));
            a_tableHtml
                    .append(getNumberTh("匹配度", alay, 1, "a", "header_locked common_background_color common_border_color"));
        }

        if ((GrpMenu1 == null && GrpMenu1.trim().length() <= 0)
                && (GrpMenu2 == null && GrpMenu2.trim().length() <= 0)) {
            a_tableHtml.append(getNumberTh("部门排名", alay, 1, "a",
                    "header_locked common_background_color common_border_color"));
        } else {
            String[] str1 = GrpMenu1.split(";");
            String[] str2 = GrpMenu2.split(";");
            if ((str1[0] != null && str1[0].trim().length() > 0)
                    || (str2[0] != null && str2[0].trim().length() > 0)) {
            } else {
                a_tableHtml.append(getNumberTh("部门排名", alay, 1, "a",
                        "header_locked common_background_color common_border_color"));
            }
        }
        a_tableHtml.append(getNumberTh("组内平均分", alay, 1, "a", "header_locked common_background_color common_border_color"));
        a_tableHtml.append(getNumberTh("组内最高分", alay, 1, "a", "header_locked common_background_color common_border_color"));
        a_tableHtml.append(getNumberTh("组内最低分", alay, 1, "a", "header_locked common_background_color common_border_color"));

        if ((GrpMenu1 == null && GrpMenu1.trim().length() <= 0)
                && (GrpMenu2 == null && GrpMenu2.trim().length() <= 0)) {
        } else {
            String[] str1 = GrpMenu1.split(";");
            String[] str2 = GrpMenu2.split(";");
            if ((str1[0] != null && str1[0].trim().length() > 0)
                    || (str2[0] != null && str2[0].trim().length() > 0)) {
                a_tableHtml.append(getNumberTh("分组排名", alay, 1, "a",
                        "header_locked common_background_color common_border_color"));
            }
        }

        if ((GrpMenu1 == null && GrpMenu1.trim().length() <= 0)
                && (GrpMenu2 == null && GrpMenu2.trim().length() <= 0)) {
            a_tableHtml.append(getNumberTh("组内排名", alay, 1, "a",
                    "header_locked common_background_color common_border_color"));
        } else {
            String[] str1 = GrpMenu1.split(";");
            String[] str2 = GrpMenu2.split(";");
            if ((str1[0] != null && str1[0].trim().length() > 0)
                    || (str2[0] != null && str2[0].trim().length() > 0)) {
            } else {
                a_tableHtml.append(getNumberTh("组内排名", alay, 1, "a",
                        "header_locked common_background_color common_border_color"));
            }
        }
        if (busitype == null || busitype.trim().length() <= 0
                || !"1".equals(busitype)) {
            a_tableHtml.append(getNumberTh("等级系数", alay, 1, "a",
                    "header_locked common_background_color common_border_color"));
        }
        a_tableHtml.append(getNumberTh(
                ResourceFactory.getProperty("jx.param.dengji"), alay, 1, "a",
                "header_locked common_background_color common_border_color"));

        if (busitype == null || busitype.trim().length() <= 0
                || !"1".equals(busitype)) {
            a_tableHtml.append(getTh("关键事件加分", alay, 1, "a", "header_locked common_background_color common_border_color"));
            a_tableHtml.append(getTh("关键事件扣分", alay, 1, "a", "header_locked common_background_color common_border_color"));
        }
        a_tableHtml.append(getTh("备注", alay, 1, "a", "header_locked common_background_color common_border_color"));

        if (("true"
                .equalsIgnoreCase((String) this.planParamSet.get("ShowEvalDirector")))
                && (!"2".equalsIgnoreCase(this.planVo.getString("object_type")))) {
            a_tableHtml.append(getTh("负责人", alay, 1, "a", "header_locked common_background_color common_border_color"));
        }
        if ("true"
                .equalsIgnoreCase((String) this.planParamSet.get("AllowAdjustEvalResult"))) {
            a_tableHtml.append(getTh("评分调整", alay, 1, "a", "header_locked common_background_color common_border_color"));
        }
        if ("1".equals(pointResultValue)
                && opt == 1
                && this.planParamSet.get("WholeEval") != null
                && "True"
                .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
            if ("0".equals((String) this.planParamSet.get("WholeEvalMode"))) {
                // haosl update 总体评价录入等级才需要判断等级列表 20200305
                if (this.gradeTempList.size() > 0) {
                    a_tableHtml.append(getTh(
                            ResourceFactory.getProperty("org.performance.zt"),
                            gradeTempList.size(), 2, "a", "header_locked common_background_color common_border_color"));
                    a_tableHtml.append(getTh(ResourceFactory
                                    .getProperty("lable.welcome.invtextresult.ballot"), alay,
                            1, "a", "header_locked common_background_color common_border_color"));
                }
            } else if ("1".equals((String) this.planParamSet.get("WholeEvalMode"))) {
                a_tableHtml.append(getTh("总体评价得分", alay, 1, "a", "header_locked common_background_color common_border_color"));
            }
        }
        a_tableHtml.append(getTh("结果确认", alay, 1, "a", "header_locked common_background_color common_border_color"));
        a_tableHtml.append("</tr> \n ");

        if (isByModelFlag) {
            if ("1".equals(pointResultValue)
                    && opt == 1
                    && this.gradeTempList.size() > 0
                    && this.planParamSet.get("WholeEval") != null
                    && "True"
                    .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                if ("0".equals((String) this.planParamSet.get("WholeEvalMode"))) {
                    for (int i = 0; i < this.gradeTempList.size(); i++) {
                        abean = (LazyDynaBean) this.gradeTempList.get(i);
                        String itemname = (String) abean.get("itemname");
                        a_tableHtml.append(getTh(itemname, lays, 1, "a",
                                "header_locked common_background_color common_border_color"));
                    }
                }
            }
        }

        if (!isByModelFlag) {
            // 画表头的中间层
            ArrayList perPointList = (ArrayList) pointList.get(1);
            SingleGradeBo singleGradeBo = new SingleGradeBo(this.conn);
            HashMap pointItemMap = singleGradeBo.getPointItemList(
                    (ArrayList) pointList.get(1), items);
            a_tableHtml.append(getMidHeadHtml(list, tempColumnList, perPointList,
                    pointItemMap, opt, pointResultValue));
            // 画指标列
            StringBuffer sequence = new StringBuffer("");
            a_tableHtml.append("<tr  style='background-color: #f4f7f7;'>");

            // 分析指标高度
            int character_num = 0;
            for (Iterator t = perPointList.iterator(); t.hasNext(); ) {
                String[] temp = (String[]) t.next();
                if (temp[1].length() > character_num) {
                    character_num = temp[1].length();
                }
            }
            int hs = 1;
            if (character_num > 4) {
                hs = character_num / 4;
                if (hs % 4 != 0) {
                    hs++;
                }
            }
            for (Iterator t = perPointList.iterator(); t.hasNext(); ) {
                String[] temp = (String[]) t.next();
                a_tableHtml
                        .append("<td valign='top' class='header_locked common_background_color common_border_color'  style='background:none !important;' align='center' id='"
                                + temp[0] + "' ");
                //表头字符超出后省略号显示，鼠标悬停给提示
                if (temp[1].length() > 100) {
                    a_tableHtml.append(" title='" + temp[1] + "' ");
                }
                a_tableHtml.append(" width='" + columnWidth + "' height='" + hs
                        * 5 + "'   >");
                temp[1] = temp[1].length() > 100 ? temp[1].substring(0, 100) + "..." : temp[1];
                if (temp[1].length() > 100) {
                    //只能通过这种方式撑开td了，如果只是对td设置width 是无法奏效的
                    a_tableHtml.append("<div style='width:200px'>" + temp[1] + "</div>");
                } else {
                    a_tableHtml.append(temp[1]);
                }
                a_tableHtml.append("</td>");
            }
            if (lays == 2) {
                LazyDynaBean relaBean = this.getRelaList();
                HashMap bodyMap = (HashMap) relaBean.get("bodyMap");
                HashMap itemMap = (HashMap) relaBean.get("itemMap");
                HashMap pointMap = (HashMap) relaBean.get("pointMap");

                for (int i = 0; i < planlist.size(); i++) {
                    abean = (LazyDynaBean) planlist.get(i);
                    String id = (String) abean.get("id");
                    // String Name=(String)abean.get("Name");
                    // String Type=(String)abean.get("Type");

                    String Menus = (String) abean.get("Menus");
                    if (Menus != null && Menus.trim().length() > 0) {
                        String[] temps = Menus.split(",");
                        for (int j = 0; j < temps.length; j++) {
                            String temp = temps[j].trim();
                            if (temp.length() == 0) {
                                continue;
                            }
                            if ("score".equalsIgnoreCase(temp)) {
                                a_tableHtml.append(getTh("得分", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if ("Grade".equalsIgnoreCase(temp)) {
                                a_tableHtml.append(getTh("等级", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if ("Avg".equalsIgnoreCase(temp)) {
                                a_tableHtml.append(getTh("组平均分", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if ("Max".equalsIgnoreCase(temp)) {
                                a_tableHtml.append(getTh("组最高分", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if ("Min".equalsIgnoreCase(temp)) {
                                a_tableHtml.append(getTh("组最低分", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if ("XiShu".equalsIgnoreCase(temp)) {
                                a_tableHtml.append(getTh("等级系数", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if ("Order".equalsIgnoreCase(temp)) {
                                a_tableHtml.append(getTh("组内排名", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if ("UMOrd".equalsIgnoreCase(temp)) {
                                a_tableHtml.append(getTh("部门排名", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if ("Mark".equalsIgnoreCase(temp)) {
                                a_tableHtml.append(getTh("备注", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if (temp.indexOf("Body") != -1) {
                                String bodyid = temp.replaceAll("Body", "");
                                a_tableHtml
                                        .append(getTh(
                                                ((String) bodyMap.get(bodyid
                                                        .toLowerCase())) + "评分",
                                                lays, 1, "a", "header_locked common_background_color common_border_color"));
                            } else if (temp.indexOf("Item") != -1) {
                                String itemid = temp.replaceAll("Item", "");
                                a_tableHtml.append(getTh(
                                        (String) itemMap.get(itemid), lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if (!"UMNum".equalsIgnoreCase(temp)
                                    && !"GrpNum".equalsIgnoreCase(temp)) {
                                a_tableHtml.append(getTh(
                                        (String) pointMap.get(temp.toLowerCase()),
                                        lays, 1, "a", "header_locked common_background_color common_border_color"));
                            }
                        }
                    } else {
                        a_tableHtml.append(getTh("得分", lays, 1, "a",
                                "header_locked common_background_color common_border_color"));
                    }
                    String temp2 = "";
                    String HZMenus = (String) abean.get("HZMenus");
                    if (HZMenus != null && HZMenus.trim().length() > 0) {
                        String[] temps = HZMenus.split(",");
                        for (int j = 0; j < temps.length; j++) {
                            String temp = temps[j].trim();
                            String temp1 = "";

                            if (temp.indexOf(":") != -1) {
                                temp1 = temp.substring(0, temp.indexOf(":"));
                                temp2 = temp.substring(temp.indexOf(":") + 1);
                            }
                            if (temp1.length() == 0) {
                                continue;
                            }

                            if ("score".equalsIgnoreCase(temp1)) {
                                a_tableHtml.append(getTh("得分" + getHZMenus(temp2)
                                        + "", lays, 1, "a", "header_locked common_background_color common_border_color"));
                            } else if ("Avg".equalsIgnoreCase(temp1)) {
                                a_tableHtml.append(getTh("组平均分" + getHZMenus(temp2)
                                        + "", lays, 1, "a", "header_locked common_background_color common_border_color"));
                            } else if ("Max".equalsIgnoreCase(temp1)) {
                                a_tableHtml.append(getTh("组最高分" + getHZMenus(temp2)
                                        + "", lays, 1, "a", "header_locked common_background_color common_border_color"));
                            } else if ("Min".equalsIgnoreCase(temp1)) {
                                a_tableHtml.append(getTh("组最低分" + getHZMenus(temp2)
                                        + "", lays, 1, "a", "header_locked common_background_color common_border_color"));
                            } else if ("XiShu".equalsIgnoreCase(temp1)) {
                                a_tableHtml.append(getTh("等级系数" + getHZMenus(temp2)
                                        + "", lays, 1, "a", "header_locked common_background_color common_border_color"));
                            } else if ("Order".equalsIgnoreCase(temp1)) {
                                a_tableHtml.append(getTh("组内排名" + getHZMenus(temp2)
                                        + "", lays, 1, "a", "header_locked common_background_color common_border_color"));
                            } else if ("UMOrd".equalsIgnoreCase(temp1)) {
                                a_tableHtml.append(getTh("部门排名" + getHZMenus(temp2)
                                        + "", lays, 1, "a", "header_locked common_background_color common_border_color"));
                            } else if (temp1.equalsIgnoreCase("Mark"
                                    + getHZMenus(temp2) + "")) {
                                a_tableHtml.append(getTh("备注" + getHZMenus(temp2)
                                        + "", lays, 1, "a", "header_locked common_background_color common_border_color"));
                            } else if (temp1.indexOf("Body") != -1) {
                                String bodyid = temp1.replaceAll("Body", "");
                                a_tableHtml
                                        .append(getTh(
                                                ((String) bodyMap.get(bodyid
                                                        .toLowerCase()))
                                                        + "评分"
                                                        + getHZMenus(temp2), lays,
                                                1, "a", "header_locked common_background_color common_border_color"));
                            } else if (temp1.indexOf("Item") != -1) {
                                String itemid = temp1.replaceAll("Item", "");
                                a_tableHtml.append(getTh(
                                        (String) itemMap.get(itemid)
                                                + getHZMenus(temp2), lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else {
                                a_tableHtml.append(getTh(
                                        (String) pointMap.get(temp1.toLowerCase())
                                                + getHZMenus(temp2), lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            }

                        }
                    }

                    // ---------------------------------------------

                }
                if ("1".equals(pointResultValue)
                        && opt == 1
                        && this.gradeTempList.size() > 0
                        && this.planParamSet.get("WholeEval") != null
                        && "True"
                        .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                    if ("0".equals((String) this.planParamSet.get("WholeEvalMode"))) {
                        for (int i = 0; i < this.gradeTempList.size(); i++) {
                            abean = (LazyDynaBean) this.gradeTempList.get(i);
                            String itemname = (String) abean.get("itemname");
                            a_tableHtml.append(getTh(itemname, lays, 1, "a",
                                    "header_locked common_background_color common_border_color"));
                        }
                    }
                }
            }
            a_tableHtml.append("</tr>\n");

            if (opt == 1
                    && ("2".equals(pointResultValue)
                    || "3".equals(pointResultValue) || "4"
                    .equals(pointResultValue))) {
                a_tableHtml.append("<tr>");
                for (Iterator t = perPointList.iterator(); t.hasNext(); ) {
                    String[] temp = (String[]) t.next();
                    a_tableHtml.append("<td valign='top' align='center' id='"
                            + temp[0] + "' ");
                    a_tableHtml.append("  class='header_locked common_background_color common_border_color'  width='"
                            + columnWidth + "'    >%</td>");
                }

                for (Iterator t = items.iterator(); t.hasNext(); ) {
                    String[] temp = (String[]) t.next();
                    if (temp[1] == null) {
                        if ("2".equals(temp[5])) {
                            a_tableHtml
                                    .append("<td valign='top' align='center' id='"
                                            + temp[0] + "' ");
                            a_tableHtml.append("  class='header_locked common_background_color common_border_color' width='"
                                    + columnWidth + "' >%</td>");
                        }
                    }
                }

                a_tableHtml.append("</tr>\n");
            }
        }
        a_tableHtml.append("</thead>\n");
        return a_tableHtml.toString();
    }

    // 生成表头中间层html
    // public String getMidHeadHtml(int lays, ArrayList tempColumnList,
    // ArrayList items, HashMap map, ArrayList perPointList, HashMap
    // pointItemMap, int opt, String pointResultValue)
    public String getMidHeadHtml(ArrayList list, ArrayList tempColumnList,
                                 ArrayList perPointList, HashMap pointItemMap, int opt,
                                 String pointResultValue) {
        ArrayList items = (ArrayList) list.get(0); // 模版项目列表
        HashMap itemsCountMap = (HashMap) list.get(1); // 最底层项目的指标个数集合
        int lays = ((Integer) list.get(2)).intValue(); // 表头的总层数
        HashMap map = (HashMap) list.get(3); // 各项目的子项目或指标个数

        StringBuffer tableHtml = new StringBuffer("");
        for (int b = 2; b < lays; b++) {
            ArrayList tempList = new ArrayList();
            tableHtml.append("<tr>");
            int d = 0;
            for (int i = 0; i < tempColumnList.size(); i++) {
                String[] temp1 = (String[]) tempColumnList.get(i);
                if (temp1[0] == null) {
                    tableHtml.append(getTh("&nbsp;", 1, 2, null,
                            "header_locked common_background_color common_border_color"));
                    tempList.add(temp1);
                    d++;
                } else {
                    int isNullItem = 0;
                    if (itemsCountMap.get(temp1[0]) != null)// 第一层项目下有指标时候在子项目行上空出单元格来
                    {
                        int pointCount = Integer
                                .parseInt((String) itemsCountMap.get(temp1[0]));
                        while (pointCount-- > 0) {
                            tableHtml.append(getTh("&nbsp;", 1, 2, null,
                                    "header_locked common_background_color common_border_color"));
                            isNullItem++;
                            d++;
                        }
                    }

                    int pointNum = Integer.parseInt((String) map.get(temp1[0]));

                    for (Iterator t1 = items.iterator(); t1.hasNext(); ) {
                        String[] temp2 = (String[]) t1.next();
                        if (temp2[1] != null && temp2[1].equals(temp1[0])) {
                            if ("2".equals(temp2[5])) {
                                if (opt == 3
                                        || (opt == 1 && ("2"
                                        .equals(pointResultValue)
                                        || "3".equals(pointResultValue) || "4"
                                        .equals(pointResultValue)))) {
                                    tableHtml.append(getTh(temp2[3] + "*", lays
                                            - b + 2, 1, null, "header_locked common_background_color common_border_color"));
                                } else {
                                    tableHtml.append(getTh(temp2[3] + "*", lays
                                            - b + 1, 1, null, "header_locked common_background_color common_border_color"));
                                }
                            } else {
                                int pointNum2 = Integer.parseInt((String) map
                                        .get(temp2[0]));
                                int selfnum = 0;
                                isNullItem++;

                                boolean isNull = true;
                                while (d < perPointList.size()) {
                                    String[] point = (String[]) perPointList
                                            .get(d);
                                    ArrayList pointItemList = (ArrayList) pointItemMap
                                            .get(point[0]);
                                    int flag = 0;
                                    for (Iterator t2 = pointItemList.iterator(); t2
                                            .hasNext(); ) {
                                        String[] tempItem = (String[]) t2
                                                .next();
                                        if (tempItem[0].equals(temp2[0])) {
                                            flag++;
                                            isNull = false;
                                        }
                                    }

                                    if (flag == 0) {
                                        tableHtml.append(getTh("&nbsp;", 1, 2,
                                                null, "header_locked common_background_color common_border_color"));
                                        String[] ttt = new String[5];
                                        tempList.add(ttt);
                                        d++;
                                        selfnum++;
                                    } else {
                                        tableHtml.append(getTh(temp2[3],
                                                Integer.parseInt((String) map
                                                        .get(temp2[0])), 2,
                                                null, "header_locked common_background_color common_border_color"));
                                        d += pointNum2;
                                        selfnum += pointNum2;
                                        tempList.add(temp2);
                                        break;
                                    }
                                }

                                if (isNull)//当模板下无指标时
                                {
                                    tableHtml.append(getTh(temp2[3] + "*", pointNum2, 2, null, "header_locked"));
                                    tempList.add(temp2);
                                }
                            }
                        }
                    }
                    // if (isNullItem == 0&&temp1[5].equals("1")) {
                    if (isNullItem == 0 && "1".equals(temp1[5])
                            && temp1[2] == null) {
                        for (int a = 0; a < pointNum; a++) {
                            tableHtml.append(getTh("&nbsp;", 1, 2, null,
                                    "header_locked common_background_color common_border_color"));
                            String[] ttt = new String[5];
                            tempList.add(ttt);
                            d++;
                        }
                    }
                }
            }

            if (b == 2)// 只有指标结果按分数显示时候显示总体评价有意义
            {
                ArrayList planlist = loadxml.getRelatePlanValue("Plan");
                LazyDynaBean abean = null;
                LazyDynaBean relaBean = this.getRelaList();
                HashMap bodyMap = (HashMap) relaBean.get("bodyMap");
                HashMap itemMap = (HashMap) relaBean.get("itemMap");
                HashMap pointMap = (HashMap) relaBean.get("pointMap");

                for (int i = 0; i < planlist.size(); i++) {
                    abean = (LazyDynaBean) planlist.get(i);
                    String id = (String) abean.get("id");
                    // String Name=(String)abean.get("Name");
                    // String Type=(String)abean.get("Type");

                    String Menus = (String) abean.get("Menus");
                    if (Menus != null && Menus.trim().length() > 0) {
                        String[] temps = Menus.split(",");
                        for (int j = 0; j < temps.length; j++) {
                            String temp = temps[j].trim();
                            if (temp.length() == 0) {
                                continue;
                            }
                            if ("score".equalsIgnoreCase(temp)) {
                                tableHtml.append(getTh("得分", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if ("Grade".equalsIgnoreCase(temp)) {
                                tableHtml.append(getTh("等级", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if ("Avg".equalsIgnoreCase(temp)) {
                                tableHtml.append(getTh("组平均分", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if ("Max".equalsIgnoreCase(temp)) {
                                tableHtml.append(getTh("组最高分", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if ("Min".equalsIgnoreCase(temp)) {
                                tableHtml.append(getTh("组最低分", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if ("XiShu".equalsIgnoreCase(temp)) {
                                tableHtml.append(getTh("等级系数", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if ("Order".equalsIgnoreCase(temp)) {
                                tableHtml.append(getTh("组内排名", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if ("UMOrd".equalsIgnoreCase(temp)) {
                                tableHtml.append(getTh("部门排名", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if ("Mark".equalsIgnoreCase(temp)) {
                                tableHtml.append(getTh("备注", lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            } else if (temp.indexOf("Body") != -1) {
                                String bodyid = temp.replaceAll("Body", "");
                                tableHtml.append(getTh(
                                        (String) bodyMap.get(bodyid
                                                .toLowerCase()) + "评分", lays,
                                        1, "a", "header_locked common_background_color common_border_color"));
                            } else if (temp.indexOf("Item") != -1) {
                                String itemid = temp.replaceAll("Item", "");
                                tableHtml.append(getTh(
                                        (String) itemMap.get(itemid), lays, 1,
                                        "a", "header_locked common_background_color common_border_color"));
                            } else {
                                tableHtml.append(getTh((String) pointMap
                                                .get(temp.toLowerCase()), lays, 1, "a",
                                        "header_locked common_background_color common_border_color"));
                            }
                        }
                    } else {
                        tableHtml.append(getTh("得分", lays, 1, "a",
                                "header_locked common_background_color common_border_color"));
                    }
                }

                if ("1".equals(pointResultValue)
                        && opt == 1
                        && this.gradeTempList.size() > 0
                        && this.planParamSet.get("WholeEval") != null
                        && "True"
                        .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                    if ("0".equals((String) this.planParamSet.get("WholeEvalMode"))) {
                        for (int i = 0; i < this.gradeTempList.size(); i++) {
                            abean = (LazyDynaBean) this.gradeTempList.get(i);
                            String itemname = (String) abean.get("itemname");
                            tableHtml.append(getTh(itemname, lays, 1, "a",
                                    "header_locked common_background_color common_border_color"));
                        }
                    }
                    // tableHtml.append(getTh(ResourceFactory.getProperty("lable.welcome.invtextresult.ballot"),
                    // lays, 1, "a","header_locked"));
                }

            }

            tableHtml.append("</tr>");
            tempColumnList = tempList;
        }
        return tableHtml.toString();
    }

    public LazyDynaBean getRelaList() {
        LazyDynaBean abean = new LazyDynaBean();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            HashMap itemMap = new HashMap();
            RowSet frowset = dao.search("select * from per_template_item");
            while (frowset.next()) {
                itemMap.put(frowset.getString("item_id"),
                        frowset.getString("itemdesc"));
            }
            HashMap pointMap = new HashMap();
            String sql = "select * from per_point";
            frowset = dao.search(sql);
            while (frowset.next()) {
                pointMap.put(frowset.getString("point_id").toLowerCase(),
                        frowset.getString("pointname"));
            }
            HashMap bodyMap = new HashMap();
            sql = "select * from per_mainbodyset ";
            frowset = dao.search(sql);
            while (frowset.next()) {
                bodyMap.put(frowset.getString("body_id").toLowerCase(),
                        frowset.getString("name"));
            }
            abean.set("bodyMap", bodyMap);
            abean.set("itemMap", itemMap);
            abean.set("pointMap", pointMap);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return abean;

    }

    /**
     * 取得 主体票数结果列表
     *
     * @param whl
     * @param order
     * @param bodyid 主体类别 all:全部
     * @return
     */
    public ArrayList getMainBodyNumResult(String whl, String order) {

        ArrayList resultList = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            // 取得 考核对象＿类别＿票数 结果
            HashMap obj_body_num = new HashMap();
            StringBuffer sql = new StringBuffer(
                    "select object_id,"
                            + Sql_switcher.isnull("body_id", "-10")
                            + " body_id,count(mainbody_id) num from per_mainbody where plan_id="
                            + this.planid);
            sql.append(" and ( status=2 or status=3 ) ");// 已经提交的才计算入内
            if (Sql_switcher.searchDbServer() == Constant.ORACEL
                    || Sql_switcher.searchDbServer() == Constant.DB2) {
                sql.append(" group by rollup(object_id,body_id)");
            } else {
                sql.append(" group by object_id,body_id with rollup  ");
            }
            sql.append(" having object_id is not null order by object_id ");
            RowSet rowSet = dao.search(sql.toString());
            while (rowSet.next()) {
                String object_id = rowSet.getString(1);
                String body_id = rowSet.getString(2);
                if (body_id != null && body_id.trim().length() > 0
                        && "-1".equals(body_id)) {
                    body_id = "X1";
                }
                String num = rowSet.getString(3);
                obj_body_num.put(object_id + "_" + body_id, num);
            }
            resultList.add(obj_body_num);

            // 取得 考核对象＿等级 结果
            HashMap obj_grade = new HashMap();
            sql.setLength(0);
            sql.append("select pt.object_id,pt.degree_id,count(pt.degree_id) num");
            sql.append(" from per_table_"
                    + this.planid
                    + " pt,per_mainbody  pm where pt. mainbody_id=pm.mainbody_id and pt.object_id=pm.object_id  and  pm.plan_id="
                    + this.planid + " ");
            sql.append(" and ( pm.status=2  or pm.status=3) ");// 已经提交的才计算入内
            sql.append(" group by pt.object_id,pt.degree_id  order by pt.object_id ");
            rowSet = dao.search(sql.toString());
            while (rowSet.next()) {
                String object_id = rowSet.getString(1);
                String degree_id = rowSet.getString(2);
                String num = rowSet.getString(3);
                obj_grade.put(object_id + "_" + degree_id, num);
            }
            resultList.add(obj_grade);

            // 取得 考核对象＿类别＿等级 结果
            HashMap obj_body_grade = new HashMap();
            sql.setLength(0);
            sql.append("select pt.object_id,pm.body_id,pt.degree_id,count(pt.degree_id) num ");
            sql.append(" from per_table_"
                    + this.planid
                    + " pt,per_mainbody  pm where pt. mainbody_id=pm.mainbody_id and pt.object_id=pm.object_id  and  pm.plan_id="
                    + this.planid + " ");
            sql.append(" and ( pm.status=2  or pm.status=3 )");// 已经提交的才计算入内
            sql.append(" group by pt.object_id,pm.body_id,pt.degree_id  ");
            rowSet = dao.search(sql.toString());
            while (rowSet.next()) {
                String object_id = rowSet.getString(1);
                String body_id = rowSet.getString(2);
                if (body_id != null && body_id.trim().length() > 0
                        && "-1".equals(body_id)) {
                    body_id = "X1";
                }
                String degree_id = rowSet.getString(3);
                String num = rowSet.getString(4);
                obj_body_grade.put(object_id + "_" + body_id + "_" + degree_id,
                        num);
            }
            resultList.add(obj_body_grade);

        } catch (Exception e) {
            e.printStackTrace();
        }
        return resultList;
    }

    /**
     * 取得 主体票数统计 表头html
     *
     * @return
     */
    public String getMainBodyNumHtml(String whl, String pointResultValue,
                                     String order) {

        StringBuffer html = new StringBuffer(
                "<table id='tbl' class='ListTable' style='width: 100%; table-layout: fixed; word-break: break-all;'>");
        html.append("<thead><TR style='background-color: #f4f7f7;'> ");
        html.append(getTh(
                ResourceFactory.getProperty("conlumn.mediainfo.info_id"), 2, 1,
                "a", "cell_locked2 common_background_color common_border_color"));
        /***********显示对象详情表头**************/
        if ("true".equals(this.showDetails)) {
            if ("2".equals(this.object_type)) {
                html.append(getTh(
                        ResourceFactory.getProperty("column.sys.org"), 2,
                        1, "a", "cell_locked2  common_background_color common_border_color"));//单位名称
                html.append(getTh(
                        ResourceFactory.getProperty("column.sys.dept"), 2,
                        1, "a", "cell_locked2 common_background_color common_border_color"));//部门
                html.append(getTh(
                        ResourceFactory.getProperty("column.sys.pos"), 2,
                        1, "a", "cell_locked2 common_background_color common_border_color"));//岗位名称
            }
            html.append(getTh(
                    ResourceFactory.getProperty("kpi.originalData.KpiTargetObjecType"), 2,
                    1, "a", "cell_locked2 common_background_color common_border_color"));//对象类别

        }
        html.append(getTh(this.getObjTitle(this.planVo.getInt("object_type")),
                2, 1, "a", "cell_locked2 common_background_color common_border_color"));
        for (int i = 0; i < mainbodySetList.size(); i++) {
            LazyDynaBean abean = (LazyDynaBean) mainbodySetList.get(i);
            html.append(getTh((String) abean.get("name"),
                    this.perGradeTemplateList.size() + 1, 2, null,
                    "header_locked common_background_color common_border_color"));
        }
        html.append(getTh(
                ResourceFactory.getProperty("label.kh.template.total"),
                this.perGradeTemplateList.size() + 1, 2, null, "header_locked common_background_color common_border_color"));
        html.append("</tr>\n ");
        html.append("<tr style='background-color: #f4f7f7;'> ");
        for (int i = 0; i < mainbodySetList.size() + 1; i++) {
            for (int j = 0; j < this.perGradeTemplateList.size(); j++) {
                LazyDynaBean abean = (LazyDynaBean) perGradeTemplateList.get(j);
                html.append(getTh((String) abean.get("gradedesc"), 0, 2, null,
                        "header_locked common_background_color common_border_color"));
            }
            html.append(getTh(ResourceFactory
                            .getProperty("lable.welcome.invtextresult.ballot"), 0, 2,
                    null, "header_locked common_background_color common_border_color"));
        }
        html.append("</TR></thead>\n ");

        /*
         * ArrayList resultList=getMainBodyNumResult(whl,order); HashMap
         * obj_body_num=(HashMap)resultList.get(0); //考核对象＿类别＿票数 结果 HashMap
         * obj_grade=(HashMap)resultList.get(1); //考核对象＿等级 结果 HashMap
         * obj_body_grade=(HashMap)resultList.get(2); //考核对象＿类别＿等级 结果
         */
        // ArrayList objectList=getObjectList(whl,order);--none
        // html.append(getMainbody_bodyHtml(new HashMap(), new HashMap(), new
        // HashMap(), whl, order));
        // html.append("</table>");

        getMainbody_bodyHtml(new HashMap(), new HashMap(), new HashMap(), whl,
                order);
        return html.toString();
    }

    /**
     * 取得主体票数表体html
     *
     * @param obj_body_num   考核对象＿类别＿票数 结果
     * @param obj_grade      考核对象＿等级 结果
     * @param obj_body_grade 考核对象＿类别＿等级 结果
     * @param objectList
     * @return
     */
    public String getMainbody_bodyHtml(HashMap obj_body_num, HashMap obj_grade,
                                       HashMap obj_body_grade, String whl, String order) {
        whl = PubFunc.keyWord_reback(whl);
        StringBuffer bodyHtml = new StringBuffer("");
        try {
            LoadXml parameter_content = new LoadXml(this.conn, planid);
            Hashtable params = parameter_content.getDegreeWhole();
            String voteScoreDecimal = (String) params.get("voteScoreDecimal");
            voteScoreDecimal = voteScoreDecimal.trim().length() == 0 ? "0"
                    : voteScoreDecimal;

            ContentDAO dao = new ContentDAO(this.conn);
            int i = 0;
            DbWizard dbWizard = new DbWizard(this.conn);
            String tablname = "per_bodyVote_" + this.planid;
            if (dbWizard.isExistTable(tablname, false)) {
                StringBuffer sql = new StringBuffer(
                        "select * from per_bodyVote_" + this.planid
                                + " where 1=1 ");
                if (whl != null && whl.length() > 0) {
                    sql.append(" " + whl);
                }
                if (order != null && order.length() > 0) {
                    order = order.trim().replaceAll("-1", "X1");
                    sql.append(order);
                } else {
                    sql.append(" order by a0000");
                }
                RowSet rowSet = dao.search(sql.toString());
                this.dataList = new ArrayList();
                while (rowSet.next()) {

                    String className = "trShallow";
                    String className2 = "cell_locked_Shallow";
                    String color = "#F3F5FC";
                    if (i % 2 == 1) {
                        className = "trDeep";
                        className2 = "cell_locked_Deep";
                        color = "#E4F2FC";
                    }

                    bodyHtml.append("<TR  onClick='javascript:tr_onclick_self(this,\""
                            + color + "\")'  class='" + className + "'   >");
                    bodyHtml.append("<td id='a'  class='" + className2
                            + "'  width='" + columnWidth
                            + "'    align='center' nowrap >" + (i + 1)
                            + "</td>");
                    /***********显示对象详细内容***********/
                    LazyDynaBean dataBean = new LazyDynaBean();
                    if ("true".equals(this.showDetails)) {
                        String b0110 = rowSet.getString("b0110");
                        String e0122 = rowSet.getString("e0122");
                        String e01a1 = rowSet.getString("e01a1");
                        String a0100 = rowSet.getString("object_id");
                        String body_id = "";
                        String aql = "select body_id,name from per_mainbodyset where body_id=" +
                                "(select body_id from per_object where  plan_id='" + this.planid + "' and object_id='" + a0100 + "')  ";
                        ResultSet res = null;
                        res = dao.search(aql);
                        if (res.next()) {
                            body_id = res.getString("name");
                        }
                        b0110 = AdminCode.getCode("UN", b0110) != null ? AdminCode.getCode("UN", b0110).getCodename() : "";
                        e0122 = AdminCode.getCode("UM", e0122) != null ? AdminCode.getCode("UM", e0122).getCodename() : "";
                        e01a1 = AdminCode.getCode("@K", e01a1) != null ? AdminCode.getCode("@K", e01a1).getCodename() : "";
//						bodyHtml.append(" <td id='a' class='" + className2
//								+ "'  width='" + (columnWidth + 10)
//								+ "'    align='center' nowrap >"
//								+ b0110 + "</td>");
//						bodyHtml.append(" <td id='a' class='" + className2
//								+ "'  width='" + (columnWidth + 10)
//								+ "'    align='center' nowrap >"
//								+ e0122 + "</td>");
//						bodyHtml.append(" <td id='a' class='" + className2
//								+ "'  width='" + (columnWidth + 10)
//								+ "'    align='center' nowrap >"
//								+ e01a1 + "</td>");
//						bodyHtml.append(" <td id='a' class='" + className2
//								+ "'  width='" + (columnWidth + 10)
//								+ "'    align='center' nowrap >"
//								+ body_id + "</td>");
                        dataBean.set("b0110", b0110);
                        dataBean.set("e0122", e0122);
                        dataBean.set("e01a1", e01a1);
                        dataBean.set("body_id", body_id);

                    }

                    bodyHtml.append(" <td id='a' class='" + className2
                            + "'  width='" + (columnWidth + 10)
                            + "'    align='center' nowrap >"
                            + rowSet.getString("a0101") + "</td>");


                    dataBean.set("a0101", rowSet.getString("a0101"));
                    dataBean.set("mainbodySetList", mainbodySetList);
                    dataBean.set("perGradeTemplateList", perGradeTemplateList);
                    dataBean.set("columnWidth", String.valueOf(columnWidth));

                    for (int j = 0; j < mainbodySetList.size(); j++) {
                        LazyDynaBean bodyBean = (LazyDynaBean) mainbodySetList
                                .get(j);
                        String body_id = (String) bodyBean.get("body_id");
                        if ("-1".equals(body_id)) {
                            body_id = "X1";
                        }
                        for (int e = 0; e < this.perGradeTemplateList.size(); e++) {
                            LazyDynaBean abean = (LazyDynaBean) perGradeTemplateList
                                    .get(e);
                            String grade_template_id = (String) abean
                                    .get("grade_template_id");
                            bodyHtml.append("<td  class='RecordRow'  width='"
                                    + columnWidth
                                    + "'  align='center'   nowrap >");

                            String value = rowSet.getString("B_B" + body_id
                                    + "_G" + grade_template_id); // (String)obj_body_grade.get(object_id+"_"+body_id+"_"+grade_template_id);
                            if (value != null && !"0".equals(value)) {
                                dataBean.set("B_B" + body_id + "_G"
                                        + grade_template_id, value);
                                bodyHtml.append(value);
                            } else {
                                dataBean.set("B_B" + body_id + "_G"
                                        + grade_template_id, "");
                                bodyHtml.append("&nbsp;");
                            }
                            bodyHtml.append("</td>");
                        }
                        // 票数
                        bodyHtml.append("<td  class='RecordRow'  width='"
                                + columnWidth + "'  align='center'   nowrap >");
                        String value = rowSet.getString("V_" + body_id); // (String)obj_body_num.get(object_id+"_"+body_id);
                        if (value != null && !"0".equals(value)) {
                            dataBean.set("V_" + body_id, value);
                            bodyHtml.append(value);
                        } else {
                            bodyHtml.append("&nbsp;");
                            dataBean.set("V_" + body_id, "");
                        }
                        bodyHtml.append("</td>");
                    }

                    for (int e = 0; e < this.perGradeTemplateList.size(); e++) {
                        LazyDynaBean abean = (LazyDynaBean) perGradeTemplateList
                                .get(e);
                        String grade_template_id = (String) abean
                                .get("grade_template_id");
                        bodyHtml.append("<td  class='RecordRow'  width='"
                                + columnWidth + "'  align='center'   nowrap >");
                        String value = rowSet.getString("S_"
                                + grade_template_id);
                        if (value != null && !"0".equals(value)) {
                            bodyHtml.append(PubFunc.round(value, 0));
                            dataBean.set(
                                    "S_" + grade_template_id,
                                    PubFunc.round(value,
                                            Integer.parseInt(voteScoreDecimal)));
                        } else {
                            bodyHtml.append("&nbsp;");
                            dataBean.set("S_" + grade_template_id, "");
                        }

                        bodyHtml.append("</td>");
                    }
                    // 票数
                    bodyHtml.append("<td  class='RecordRow'  width='"
                            + columnWidth + "'  align='center'   nowrap >");
                    String value = rowSet.getString("VoteNum"); // (String)obj_body_num.get(object_id+"_-1");
                    if (value != null && !"0".equals(value)) {
                        bodyHtml.append(value);
                        dataBean.set("VoteNum", value);
                    } else {
                        bodyHtml.append("&nbsp;");
                        dataBean.set("VoteNum", "");
                    }
                    bodyHtml.append("</td>");
                    bodyHtml.append("</TR>\n");
                    i++;
                    this.dataList.add(dataBean);
                }
                if (rowSet != null) {
                    rowSet.close();
                }
            }
            /*
             * if (i == 0) { bodyHtml.append("<TR>");
             * bodyHtml.append("<td id='a' width='" + columnWidth +
             * "'  align='center' nowrap >&nbsp;</td>");
             * bodyHtml.append(" <td id='a' width='" + (columnWidth + 10) +
             * "'  align='center' nowrap >&nbsp;</td>");
             *
             * LazyDynaBean dataBean = new LazyDynaBean();
             * dataBean.set("a0101",""); dataBean.set("mainbodySetList",new
             * ArrayList()); dataBean.set("perGradeTemplateList",new
             * ArrayList());
             *
             * // for (int j = 0; j < mainbodySetList.size(); j++) // { // //
             * for (int e = 0; e < this.perGradeTemplateList.size(); e++) // {
             * // bodyHtml.append("<td  class='RecordRow'  width='" +
             * columnWidth + "'  align='center'   nowrap >"); //
             * bodyHtml.append("&nbsp;"); // bodyHtml.append("</td>"); // } //
             * // 票数 // bodyHtml.append("<td  class='RecordRow'  width='" +
             * columnWidth + "'  align='center'   nowrap >"); //
             * bodyHtml.append("&nbsp;"); // bodyHtml.append("</td>"); // }
             *
             * for (int j = 0; j < mainbodySetList.size(); j++) { LazyDynaBean
             * bodyBean = (LazyDynaBean) mainbodySetList.get(j); String body_id
             * = (String) bodyBean.get("body_id"); for (int e = 0; e <
             * this.perGradeTemplateList.size(); e++) { LazyDynaBean abean =
             * (LazyDynaBean) perGradeTemplateList.get(e); String
             * grade_template_id = (String) abean.get("grade_template_id");
             * dataBean.set("B_B" + body_id + "_G" + grade_template_id,"");
             *
             * bodyHtml.append("<td  class='RecordRow'  width='" + columnWidth +
             * "'  align='center'   nowrap >"); bodyHtml.append("&nbsp;");
             * bodyHtml.append("</td>"); } // 票数
             * bodyHtml.append("<td  class='RecordRow'  width='" + columnWidth +
             * "'  align='center'   nowrap >"); dataBean.set("V_" + body_id,"");
             * bodyHtml.append("</td>"); }
             *
             * for (int e = 0; e < this.perGradeTemplateList.size(); e++) {
             * bodyHtml.append("<td  class='RecordRow'  width='" + columnWidth +
             * "'  align='center'   nowrap >"); bodyHtml.append("&nbsp;");
             * bodyHtml.append("</td>"); }
             *
             * for (int e = 0; e < this.perGradeTemplateList.size(); e++) {
             * LazyDynaBean abean = (LazyDynaBean) perGradeTemplateList.get(e);
             * String grade_template_id = (String)
             * abean.get("grade_template_id");
             * bodyHtml.append("<td  class='RecordRow'  width='" + columnWidth +
             * "'  align='center'   nowrap >"); dataBean.set("S_" +
             * grade_template_id,""); bodyHtml.append("</td>"); }
             *
             * // 票数 bodyHtml.append("<td  class='RecordRow'  width='" +
             * columnWidth + "'  align='center'   nowrap >");
             * bodyHtml.append("&nbsp;"); bodyHtml.append("</td>");
             * dataBean.set("VoteNum",""); bodyHtml.append("</TR>\n");
             * this.dataList.add(dataBean); }
             */

        } catch (Exception e) {
            e.printStackTrace();
        }
        return bodyHtml.toString();
    }

    public String getTh(String name, int lays, int opt, String idname,
                        String className) {
        StringBuffer sb = new StringBuffer("");
        sb.append("<td class='" + className
                + "' valign='middle' align='center' style='background:none !important;'");
        if (idname != null && idname.length() > 0) {
            sb.append(" id='" + idname + "' ");
        }
        if (lays > 0) {
            //序号列宽太宽了，建议窄一点
            int column = columnWidth;
            if (opt == 1 && name.equalsIgnoreCase(ResourceFactory.getProperty("conlumn.mediainfo.info_id"))) {
                column = column / 2;
            }

            if (opt == 1) {
                sb.append("rowspan='" + lays + "' width='" + column + "'");
            } else {
                sb.append("colspan='" + lays + "' height='25' width = '" + lays * column + "'");
            }
        }
        sb.append(" > ");
        sb.append(name);
        sb.append("</td>");
        return sb.toString();
    }

    public String getNumberTh(String name, int lays, int opt, String idname,
                              String className) {
        StringBuffer sb = new StringBuffer("");
        sb.append("<td class='" + className
                + "' valign='middle' align='center' style='background:none !important;'");
        if (idname != null && idname.length() > 0) {
            sb.append(" id='" + idname + "' ");
        }
        if (lays > 0) {
            if (opt == 1) {
                sb.append("rowspan='" + lays + "' width='70'");
            } else {
                sb.append("colspan='" + lays + "' height='35'");
            }
        }
        sb.append(" > ");
        sb.append(name);
        sb.append("</td>");
        return sb.toString();
    }

    public ArrayList getPerPointList(ArrayList perPointList) {
        ArrayList list = new ArrayList();
        try {
            ObjectCardBo bo = new ObjectCardBo(this.conn, this.userView,
                    this.planid);
            ArrayList leafItemList = bo.getLeafItemArrayList();
            LazyDynaBean abean = null;
            for (int i = 0; i < leafItemList.size(); i++) {
                abean = (LazyDynaBean) leafItemList.get(i);
                String item_id = (String) abean.get("item_id");
                String kind = (String) abean.get("kind");
                if ("1".equals(kind)) {
                    for (int j = 0; j < perPointList.size(); j++) {
                        String[] temp = (String[]) perPointList.get(j);
                        if (temp[3].equals(item_id)) {
                            list.add(temp);
                        }

                    }

                } else {
                    selfItemList.add(item_id);
                    String[] item = new String[1];
                    item[0] = "T_" + item_id;
                    list.add(item);
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * 取得 指标票数分统计 表头html
     *
     * @return
     */
    public String getPerPointNumHtml(String whl, String order, String bodyid) {
        whl = PubFunc.keyWord_reback(whl);
        StringBuffer html = new StringBuffer(
                "<table id='tbl' class='ListTable' style='width: 100%; table-layout: fixed; word-break: break-all;' >");
        String htmlTitle = "";
        try {
            BatchGradeBo bb = new BatchGradeBo(this.conn, this.planid);
            ArrayList list = bb.getPerformanceStencilList(template_id, false);
            ArrayList pointList = bb.getPerPointList(template_id, this.planid);

            HashMap map = new HashMap();
            if (this.planParamSet.get("WholeEval") != null) {
                map.put("WholeEval",
                        (String) this.planParamSet.get("WholeEval"));
            }
            String Geclass = "";
            if (this.planParamSet.get("EvalClass") == null
                    || ((String) this.planParamSet.get("EvalClass")).trim()
                    .length() <= 0
                    || "0"
                    .equals(((String) this.planParamSet.get("EvalClass")).trim())) {
                Geclass = (String) this.planParamSet.get("GradeClass");
            } else {
                Geclass = (String) this.planParamSet.get("EvalClass");
            }
            map.put("GradeClass", Geclass);
            this.gradeTempList = getGradeList(map);

            ArrayList perPointList = (ArrayList) pointList.get(1);
            HashMap resultMap = getResultList(bodyid);
            // 表头
            html.append(getTableHeadHtml(list, pointList));
            htmlTitle = html.toString();
            // 表体
            ContentDAO dao = new ContentDAO(this.conn);
            String sql = "";
            String bodysql = "";
            HashMap whole_grade_map = new HashMap();
            if (!"all".equals(bodyid)) {
                bodysql = " and pmb.body_id=" + bodyid + " ";
                String _sql = "select whole_grade_id,count(whole_grade_id) as ct,object_id from per_mainbody where plan_id=" + this.planid + " and object_id in (select object_id from per_result_" + this.planid + ") and body_id=" + bodyid + " group by object_id,whole_grade_id";
                RowSet rs1 = dao.search(_sql);
                while (rs1.next()) {
                    if (rs1.getString("whole_grade_id") != null) {
                        whole_grade_map.put(rs1.getString("whole_grade_id") + "||" + rs1.getString("object_id"), rs1.getString("ct"));
                    }
                }
            }
            if (this.gradeTempList.size() > 0
                    && this.planParamSet.get("WholeEval") != null
                    && "True"
                    .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                // String sql =
                // "select object_id,a0101 from per_object where plan_id=" +
                // this.planid;
                sql = "select a.* ,b.mainbody,c.votecount,d.* from PER_POINTVOTE_"
                        + this.planid
                        + " a "
                        + " left join (select pmb.object_id ,COUNT(pmb.mainbody_id) mainbody from per_mainbody pmb "
                        // 排除掉打分确认标识为1(确认)的主体 lium
                        + " RIGHT JOIN per_plan_body ppb ON ppb.plan_id=pmb.plan_id AND ppb.body_id=pmb.body_id AND " + Sql_switcher.isnull("ppb.opt", "0") + "<>1 "
                        + " where pmb.plan_id="
                        + this.planid
                        + bodysql
                        + " group by pmb.object_id) b "
                        + " on a.object_id=b.object_id left join (select pmb.object_id ,COUNT(pmb.mainbody_id) votecount from per_mainbody pmb "
                        // 排除掉打分确认标识为1(确认)的主体 lium
                        + " RIGHT JOIN per_plan_body ppb ON ppb.plan_id=pmb.plan_id AND ppb.body_id=pmb.body_id AND " + Sql_switcher.isnull("ppb.opt", "0") + "<>1 "
                        + " where pmb.plan_id="
                        + this.planid
                        + bodysql
                        + " and (pmb.status=2 or status=3) group by pmb.object_id) c "
                        + " on a.object_id=c.object_id left join per_result_"
                        + this.planid + " d on a.object_id=d.object_id ";
            } else {
                sql = "select a.* ,b.mainbody,c.votecount from PER_POINTVOTE_"
                        + this.planid
                        + " a "
                        + " left join (select pmb.object_id ,COUNT(pmb.mainbody_id) mainbody from per_mainbody pmb "
                        + " where plan_id="
                        + this.planid
                        + bodysql
                        + " group by pmb.object_id) b "
                        + " on a.object_id=b.object_id left join (select pmb.object_id ,COUNT(pmb.mainbody_id) votecount from per_mainbody pmb "
                        + " where plan_id="
                        + this.planid
                        + bodysql
                        + " and (pmb.status=2 or status=3) group by pmb.object_id) c "
                        + " on a.object_id=c.object_id ";
            }
            if (whl != null && whl.length() > 0) {
                sql += whl.replaceAll("b0110", "a.b0110").replaceAll("e0122", "a.e0122").replaceAll("object_id", "a.object_id");
            }
            if (order != null && order.length() > 0) {
                sql += order;
            } else {
                sql += " order by a.a0000";
            }
            RowSet rowSet = dao.search(sql);
            int num = 0;
            this.dataList = new ArrayList();
            while (rowSet.next()) {
                num++;
                String object_id = rowSet.getString("object_id");
                String a0101 = rowSet.getString("a0101");
                int mainbody = rowSet.getInt("mainbody");
                int votecount = rowSet.getInt("votecount");
                float rate = (float) votecount / mainbody * 100;
                DecimalFormat df = new DecimalFormat("0.0");
                String voterate = df.format(rate);

                LazyDynaBean a_bean = (LazyDynaBean) resultMap.get(object_id);

                String className = "trShallow";
                String className2 = "cell_locked_Shallow";
                String color = "#F3F5FC";
                if (num % 2 == 0) {
                    className = "trDeep";
                    className2 = "cell_locked_Deep";
                    color = "#E4F2FC";
                }

                // bodyHtml.append("<TR  onClick='javascript:tr_onclick_self(this,\""+color+"\")'  class='"+className+"'   >");
                // bodyHtml.append("<td id='a'  class='"+className2+"'  width='"
                // + columnWidth + "'    align='center' nowrap >" + (i + 1) +
                // "</td>");
                // bodyHtml.append(" <td id='a' class='"+className2+"'  width='"
                // + (columnWidth + 10) + "'    align='center' nowrap >" +
// rowSet.getString("a0101") + "</td>");

/***********显示对象详细内容***********/
                LazyDynaBean dataBean = new LazyDynaBean();
                if ("true".equals(this.showDetails)) {
                    String b0110 = rowSet.getString("b0110");
                    String e0122 = rowSet.getString("e0122");
                    String e01a1 = rowSet.getString("e01a1");
                    String a0100 = rowSet.getString("object_id");
                    String body_id = "";
                    String aql = "select body_id,name from per_mainbodyset where body_id=" +
                            "(select body_id from per_object where  plan_id='" + this.planid + "' and object_id='" + a0100 + "')  ";
                    ResultSet res = null;
                    res = dao.search(aql);
                    if (res.next()) {
                        body_id = res.getString("name");
                    }
                    b0110 = AdminCode.getCode("UN", b0110) != null ? AdminCode.getCode("UN", b0110).getCodename() : "";
                    e0122 = AdminCode.getCode("UM", e0122) != null ? AdminCode.getCode("UM", e0122).getCodename() : "";
                    e01a1 = AdminCode.getCode("@K", e01a1) != null ? AdminCode.getCode("@K", e01a1).getCodename() : "";
                    dataBean.set("b0110", b0110);
                    dataBean.set("e0122", e0122);
                    dataBean.set("e01a1", e01a1);
                    dataBean.set("body_id", body_id);

                }

                dataBean.set("perGradeTemplateList", perGradeTemplateList);
                dataBean.set("a0101", a0101);
                dataBean.set("mainbody", mainbody + "");
                dataBean.set("votecount", votecount + "");
                dataBean.set("mainbody", String.valueOf(mainbody));
                dataBean.set("votecount", String.valueOf(votecount));
                dataBean.set("voterate", voterate);
                dataBean.set("perPointList", perPointList);
                dataBean.set("columnWidth", String.valueOf(columnWidth));
                dataBean.set("resultMap", resultMap);
                dataBean.set("object_id", PubFunc.encrypt(object_id));
                HashMap templatePoint = this.getTemplatePointDetail();
                dataBean.set("templatePoint", templatePoint);
                html.append("<TR  onClick='javascript:tr_onclick_self(this,\""
                        + color + "\")'  class='" + className + "'  >");
                html.append(" <td id='a' width='" + columnWidth + "'  class='"
                        + className2 + "'  align='center' nowrap >" + num
                        + "</td>");
                html.append(" <td id='a' width='" + (columnWidth + 10)
                        + "'  class='" + className2
                        + "'  align='center' nowrap >" + a0101 + "</td>");
                html.append(" <td id='a' width='" + columnWidth + "'  class='"
                        + className2 + "'  align='center' nowrap >" + mainbody
                        + "</td>");
                html.append(" <td id='a' width='" + columnWidth + "'  class='"
                        + className2 + "'  align='center' nowrap >" + votecount
                        + "</td>");
                html.append(" <td id='a' width='" + columnWidth + "'  class='"
                        + className2 + "'  align='center' nowrap >" + voterate
                        + "</td>");

                for (Iterator t = perPointList.iterator(); t.hasNext(); ) {
                    String[] temp = (String[]) t.next();
                    ArrayList gradeList = (ArrayList) templatePoint.get(temp[0].toLowerCase());
                    for (int j = 0; j < gradeList.size(); j++) {
                        LazyDynaBean abean = (LazyDynaBean) gradeList
                                .get(j);
                        html.append("<td  class='RecordRow'  width='"
                                + columnWidth + "'  align='center'   nowrap >");
                        if (a_bean != null) {
                            // String key = temp[0] + "_" + (String)
                            // abean.get("grade_template_id");
                            // if (a_bean.get(key) != null)
                            // html.append((String) a_bean.get(key));
                            // else
                            // html.append("&nbsp;");
                            String col = "P_C_" + temp[0] + "_G_G"
                                    + (String) abean.get("gradecode");
                            if (rowSet.getString(col) != null) {
                                html.append(rowSet.getString(col));
                                dataBean.set(col, rowSet.getString(col));
                            } else {
                                html.append("&nbsp;");
                                dataBean.set(col, "");
                            }
                        } else {
                            html.append("&nbsp;");
                        }
                        html.append("</td>");
                    }
                    html.append("<td  class='RecordRow'  width='" + columnWidth
                            + "'  align='center'   nowrap >");
                    if (a_bean != null) {
                        // String key = temp[0] + "_0";
                        // if (a_bean.get(key) != null)
                        // html.append((String) a_bean.get(key));
                        // else
                        // html.append("&nbsp;");
                        String col = "V_C_" + temp[0];
                        if (rowSet.getString(col) != null) {
                            html.append(rowSet.getString(col));
                            dataBean.set(col, rowSet.getString(col));
                        } else {
                            html.append("&nbsp;");
                            dataBean.set(col, "");
                        }
                    } else {
                        html.append("&nbsp;");
                    }
                    html.append("</td>");

                }
                if (this.gradeTempList.size() > 0
                        && this.planParamSet.get("WholeEval") != null
                        && "True"
                        .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                    dataBean.set("gradedisp", "true");
                    dataBean.set("gradeTempList", gradeTempList);
                    String wholeEvalMode = (String) this.planParamSet.get("WholeEvalMode");
                    String v_sum = "";
                    if ("0".equals(wholeEvalMode)) {
                        for (int j = 0; j < this.gradeTempList.size(); j++) {
                            LazyDynaBean a_gradebean = (LazyDynaBean) this.gradeTempList
                                    .get(j);
                            String id = (String) a_gradebean.get("id");
                            String value = rowSet.getString("V_" + id) != null ? (String) rowSet
                                    .getString("V_" + id) : "";
                            String[] a = value.split("\\.");
                            if (a.length > 0) {
                                value = a[0];
                            }
                            if (!"all".equals(bodyid)) {
                                String temp = (String) whole_grade_map.get(id + "||" + object_id);
                                dataBean.set("V_" + id, zeroToNull(temp == null ? "" : temp));
                            } else {
                                dataBean.set("V_" + id, zeroToNull(value));
                            }
                        }
                        v_sum = rowSet.getString("V_SUM") != null ? rowSet
                                .getString("V_SUM") : "0";
                        String[] a = v_sum.split("\\.");
                        if (a.length > 0 && !"0".equals(a[0])) {
                            v_sum = a[0];
                        } else {
                            v_sum = "0";
                        }
                    } else if ("1".equals(wholeEvalMode)) {
                        ResultBo bo = new ResultBo(this.conn);
                        ArrayList overallRatingList = bo.getSumTotalEvaluateLineListByScore(planid, object_id, bodyid);
                        CommonData cd = new CommonData();
                        for (int j = 0; j < overallRatingList.size() - 1; j++) {
                            cd = (CommonData) overallRatingList.get(j);
                            LazyDynaBean a_gradebean = (LazyDynaBean) this.gradeTempList.get(j);
                            String id = (String) a_gradebean.get("id");
                            String value = cd.getDataValue();
                            if (!"all".equals(bodyid)) {
                                String temp = (String) whole_grade_map.get(id + "||" + object_id);
                                dataBean.set("V_" + id, zeroToNull(temp == null ? "" : temp));
                            } else {
                                dataBean.set("V_" + id, zeroToNull(value));
                            }
                        }
                        cd = (CommonData) overallRatingList.get(overallRatingList.size() - 1);
                        v_sum = cd.getDataValue();
                    }
                    if (!"all".equals(bodyid)) {//如果选单个主体  那么总数即为该主体的个数  zhaoxg add
                        v_sum = votecount + "";
                    }
                    int uselessvote = mainbody - Integer.parseInt(v_sum);
                    String nouse = uselessvote != 0 ? uselessvote + ""
                            : "";
                    dataBean.set("uselessvote", zeroToNull(nouse));
                    dataBean.set("usefullvote", zeroToNull(v_sum));
                    dataBean.set("wholeEvalMode", wholeEvalMode);
                } else {
                    dataBean.set("gradedisp", "false");
                }
                html.append("</TR>");
                this.dataList.add(dataBean);
            }
            html.append("</table>");
        } catch (Exception e) {
            e.printStackTrace();
        }

        return htmlTitle;
    }

    public String zeroToNull(String value) {
        if ("0".equals(value)) {
            value = "";
        }
        return value;
    }

    /**
     * 取得指标票数结果
     *
     * @param bodyid
     * @return
     */
    public HashMap getResultList(String bodyid) {

        HashMap map = new HashMap();
        try {
            LazyDynaBean abean = null;
            ContentDAO dao = new ContentDAO(this.conn);
            StringBuffer sql = new StringBuffer(
                    "select ptp.object_id,point_id,"
                            + Sql_switcher.isnull("degree_id", "0")
                            + " degree_id,count(degree_id) acount ");
            sql.append("  from per_table_" + this.planid + " ptp");
            sql.append(",per_mainbody where ptp.object_id=per_mainbody.object_id and  ptp.mainbody_id=per_mainbody.mainbody_id ");
            sql.append(" and per_mainbody.plan_id=" + this.planid
                    + " and (per_mainbody.status=2  or per_mainbody.status=3) ");
            // if (bodyid.equals("all"))
            // sql.append(" where  ptp.object_id<>ptp.mainbody_id ");
            // else
            if (!"all".equals(bodyid)) {
                sql.append(" and per_mainbody.body_id =" + bodyid + " ");
            }

            if (Sql_switcher.searchDbServer() == Constant.ORACEL
                    || Sql_switcher.searchDbServer() == Constant.DB2) {
                sql.append(" group by rollup (ptp.object_id,point_id,NVL(degree_id,0))  ");
            } else {
                sql.append(" group by ptp.object_id,point_id,degree_id with rollup ");
            }
            sql.append(" having  ptp.object_id is not null and point_id is not null ");
            sql.append(" order by ptp.object_id,point_id,degree_id ");
            RowSet rowSet = dao.search(sql.toString());
            String object_id = "";
            while (rowSet.next()) {
                String a_objectid = rowSet.getString("object_id");
                if ("".equals(object_id)) {
                    object_id = a_objectid;
                    abean = new LazyDynaBean();
                }
                if (!a_objectid.equals(object_id)) {
                    map.put(object_id, abean);
                    abean = new LazyDynaBean();
                    object_id = a_objectid;
                }
                abean.set("object_id", rowSet.getString("object_id"));
                abean.set(
                        rowSet.getString("point_id") + "_"
                                + rowSet.getString("degree_id"),
                        rowSet.getString("acount"));
            }
            map.put(object_id, abean);

        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    public HashMap getCommonItemsMap(ArrayList perPointList) {
        HashMap commonItems = new HashMap();
        HashMap items = new HashMap();
        ArrayList list = new ArrayList();
        StringBuffer str = new StringBuffer();
        for (Iterator t = perPointList.iterator(); t.hasNext(); ) {
            String[] temp = (String[]) t.next();
            str.append(",");
            str.append(temp[3]);
        }
        str.append(",");
        RowSet rowSet = null;
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            String sql = "select  item_id," + Sql_switcher.isnull("parent_id", "0") + " parent_id  from per_template_item where template_id='" + this.template_id + "' and (kind is null or kind=1)";
            rowSet = dao.search(sql);

            while (rowSet.next()) {
                String item_id = rowSet.getString("item_id");
                if (str.indexOf("," + item_id + ",") != -1) {
                    commonItems.put(rowSet.getString("item_id").toLowerCase(), "");
                    items.put(rowSet.getString("parent_id"), "");
                } else {
                    LazyDynaBean bean = new LazyDynaBean();
                    bean.set("item_id", rowSet.getString("item_id"));
                    bean.set("parent_id", rowSet.getString("parent_id"));
                    list.add(bean);
                }
            }
            if (rowSet != null) {
                rowSet.close();
            }
            getItemid(items, list, commonItems);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return commonItems;
    }

    /**
     * 取得有指标的项目
     *
     * @param items
     * @param list
     * @param commonItems
     */
    public void getItemid(HashMap items, ArrayList list, HashMap commonItems) {
        try {
            Iterator iter = items.entrySet().iterator();
            while (iter.hasNext()) {
                Map.Entry entry = (Map.Entry) iter.next();
                Object key = entry.getKey();
                for (int i = 0; i < list.size(); i++) {
                    LazyDynaBean bean = (LazyDynaBean) list.get(i);
                    String item = (String) bean.get("item_id");
                    String parent_id = (String) bean.get("parent_id");
                    if (item.equals(key.toString()) && !parent_id.equals(key.toString())) {
                        if (commonItems.get(item) != null) {
                            continue;
                        }
                        commonItems.put(item, "");
                        HashMap _items = new HashMap();
                        _items.put(parent_id, "parent_id");
                        getItemid(_items, list, commonItems);
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @param list
     * @param pointList
     * @return
     */
    public String getTableHeadHtml(ArrayList list, ArrayList pointList) {
        ArrayList perPointList = (ArrayList) pointList.get(1);
        HashMap commonItems = getCommonItemsMap(perPointList);

        for (int j = 0; j < this.perGradeTemplateList.size(); j++) {
            LazyDynaBean abean = (LazyDynaBean) perGradeTemplateList.get(j);
            // html.append(getTh((String)abean.get("gradedesc"),0,2,null));
        }

        StringBuffer a_tableHtml = new StringBuffer("");

        ArrayList items = (ArrayList) list.get(0); // 模版项目列表
        HashMap itemsCountMap = (HashMap) list.get(1); // 最底层项目的指标个数集合
        int lays = ((Integer) list.get(2)).intValue(); // 表头的总层数
        HashMap map = (HashMap) list.get(3); // 各项目的子项目或指标个数
        ArrayList bottomItemList = (ArrayList) list.get(4); // 模版最底层的项目
        int lay = 1;
        ArrayList tempColumnList = new ArrayList();
        /* 画第一层表头 */
        a_tableHtml.append("<thead><tr style='background-color: #f4f7f7;'> ");
        boolean flag = isProAppraise();
        int alay = lays;
        alay++;
        if (flag) {//进出口银行，对定义了“描述性评议项”的民主测评计划，展现各指标的评价票数和占比  zhaoxg add 2014-8-11
            lay = 2;
            alay++;
        }

        if (perPointList.size() == 0) {
            a_tableHtml.append(getTh(
                    ResourceFactory.getProperty("conlumn.mediainfo.info_id"),
                    alay, 1, "a", "cell_locked5 common_background_color common_border_color"));
            /***********显示对象详情表头**************/
            if ("true".equals(this.showDetails)) {
                if ("2".equals(this.object_type)) {
                    a_tableHtml.append(getTh(
                            ResourceFactory.getProperty("column.sys.org"), alay,
                            1, "a", "cell_locked2 common_background_color common_border_color"));//单位名称
                    a_tableHtml.append(getTh(
                            ResourceFactory.getProperty("column.sys.dept"), alay,
                            1, "a", "cell_locked2 common_background_color common_border_color"));//部门
                    a_tableHtml.append(getTh(
                            ResourceFactory.getProperty("column.sys.pos"), alay,
                            1, "a", "cell_locked2 common_background_color common_border_color"));//岗位名称
                }
                a_tableHtml.append(getTh(
                        ResourceFactory.getProperty("kpi.originalData.KpiTargetObjecType"), alay,
                        1, "a", "cell_locked2 common_background_color common_border_color"));//对象类别

            }

            a_tableHtml.append(getTh(
                    this.getObjTitle(this.planVo.getInt("object_type")), alay, 1,
                    "a", "cell_locked5 common_background_color common_border_color"));
            // 画参与情况的表头信息
            int width = 3;
            if (this.gradeTempList.size() > 0
                    && this.planParamSet.get("WholeEval") != null
                    && "True"
                    .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                width += this.gradeTempList.size() + 2;
            }
            a_tableHtml
                    .append("<td id='a' width='" + (width * 100) + "' class='cell_locked5 common_background_color common_border_color' valign='middle' align='center' colspan='3' > 参与情况</td>");
            // 总体评价
            if (this.gradeTempList.size() > 0
                    && this.planParamSet.get("WholeEval") != null
                    && "True"
                    .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                int colspan = this.gradeTempList.size() + 2;
                a_tableHtml
                        .append("<td width='" + ((colspan - 1) * lay + 1) * 100 + "' class='header_locked common_background_color common_border_color' valign='middle' align='center'  rowspan=" + (lays - 1) + " colspan=" + ((colspan - 1) * lay + 1) + " > 总体评价</td>");
            }
            a_tableHtml.append("</tr>\n");
            a_tableHtml.append("<tr style='background-color: #f4f7f7;'>");
            // 第三层表头信息
            a_tableHtml
                    .append("<td id='a' width='100' class='cell_locked5 common_background_color common_border_color' valign='middle' align='center' rowspan='" + lay + "' height='35'>主体人数</td>");
            a_tableHtml
                    .append("<td id='a' width='100' class='cell_locked5 common_background_color common_border_color' valign='middle' align='center' rowspan='" + lay + "' height='35'>投票人数</td>");
            a_tableHtml
                    .append("<td id='a' width='100' class='cell_locked5 common_background_color common_border_color' valign='middle' align='center' rowspan='" + lay + "' height='35'>投票率</td>");
            if (this.gradeTempList.size() > 0
                    && this.planParamSet.get("WholeEval") != null
                    && "True"
                    .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                for (int i = 0; i < this.gradeTempList.size(); i++) {
                    LazyDynaBean abean = (LazyDynaBean) this.gradeTempList.get(i);
                    String itemname = (String) abean.get("itemname");
                    a_tableHtml
                            .append("<td id='a' width='100' class='header_locked common_background_color common_border_color' valign='middle' align='center'  colspan='" + lay + "' height='35'>"
                                    + itemname + "</td>");
                }
                a_tableHtml
                        .append("<td id='a' width='100' class='header_locked common_background_color common_border_color' valign='middle' align='center' colspan='" + lay + "' height='35'>弃权</td>");
                a_tableHtml
                        .append("<td id='a' width='100' class='header_locked common_background_color common_border_color' valign='middle' align='center' rowspan='" + lay + "' height='35'>票数</td>");
            }

            a_tableHtml.append("</tr> \n ");
            if (flag) {
                a_tableHtml.append("<tr style='background-color: #f4f7f7;'>");
                if (this.gradeTempList.size() > 0
                        && this.planParamSet.get("WholeEval") != null
                        && "True"
                        .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                    for (int i = 0; i < this.gradeTempList.size(); i++) {
                        LazyDynaBean abean = (LazyDynaBean) this.gradeTempList.get(i);
                        String itemname = (String) abean.get("itemname");
                        a_tableHtml.append("<td valign='top' align='center' ");
                        a_tableHtml.append(" class='header_locked common_background_color common_border_color' width='"
                                + columnWidth + "' height='20'   >票数</td>");

                        a_tableHtml.append("<td valign='top' align='center' ");
                        a_tableHtml.append(" class='header_locked common_background_color common_border_color' width='"
                                + columnWidth + "' height='20'   >占比</td>");
                    }
                    a_tableHtml.append("<td valign='top' align='center' ");
                    a_tableHtml.append(" class='header_locked common_background_color common_border_color' width='"
                            + columnWidth + "' height='20'   >票数</td>");

                    a_tableHtml.append("<td valign='top' align='center' ");
                    a_tableHtml.append(" class='header_locked common_background_color common_border_color' width='"
                            + columnWidth + "' height='20'   >占比</td>");

                }
                a_tableHtml.append("</tr>\n");
            }
            a_tableHtml.append("</thead>\n");
            return a_tableHtml.toString();
        }
        a_tableHtml.append(getTh(
                ResourceFactory.getProperty("conlumn.mediainfo.info_id"), alay,
                1, "a", "cell_locked5 common_background_color common_border_color"));
        /***********显示对象详情表头**************/
        if ("true".equals(this.showDetails)) {
            if ("2".equals(this.object_type)) {
                a_tableHtml.append(getTh(
                        ResourceFactory.getProperty("column.sys.org"), alay,
                        1, "a", "cell_locked2 common_background_color common_border_color"));//单位名称
                a_tableHtml.append(getTh(
                        ResourceFactory.getProperty("column.sys.dept"), alay,
                        1, "a", "cell_locked2 common_background_color common_border_color"));//部门
                a_tableHtml.append(getTh(
                        ResourceFactory.getProperty("column.sys.pos"), alay,
                        1, "a", "cell_locked2 common_background_color common_border_color"));//岗位名称
            }
            a_tableHtml.append(getTh(
                    ResourceFactory.getProperty("kpi.originalData.KpiTargetObjecType"), alay,
                    1, "a", "cell_locked2 common_background_color common_border_color"));//对象类别

        }
        a_tableHtml.append(getTh(
                this.getObjTitle(this.planVo.getInt("object_type")), alay, 1,
                "a", "cell_locked5 common_background_color common_border_color"));
        // 画参与情况的表头信息
        a_tableHtml
                .append("<td id='a' width='300' class='cell_locked5 common_background_color common_border_color' valign='middle' align='center' rowspan="
                        + lays + " colspan='3' > 参与情况</td>");
        for (Iterator t = items.iterator(); t.hasNext(); ) {
            String[] temp = (String[]) t.next();
            int totalNum = 0;
            if (bottomItemList != null && bottomItemList.size() > 0) {
                for (int i = 0; i < bottomItemList.size(); i++) {
                    String[] bottomitem = (String[]) bottomItemList.get(i);
                    String bottom = "";
                    if (bottomitem != null && bottomitem.length > 0) {
                        bottom = (String) bottomitem[0];
                        if ((bottomitem[0] != null && bottomitem[0].equals(temp[0])) || (bottomitem[1] != null && bottomitem[1].equals(temp[0]))) {
                            totalNum += getNumByItem(bottom, lay);
                        }
                    }

                }
            }
            if (temp[1] == null
                    && commonItems.get(temp[0].toLowerCase()) != null) {
                a_tableHtml.append(getTh(temp[3], totalNum, 2, null,
                        "header_locked common_background_color common_border_color"));
                tempColumnList.add(temp);
            }
        }
        if (items.size() > 0) {
            // 总体评价
            if (this.gradeTempList.size() > 0
                    && this.planParamSet.get("WholeEval") != null
                    && "True"
                    .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                int colspan = this.gradeTempList.size() + 2;
                a_tableHtml
                        .append("<td width='" + ((colspan - 1) * lay + 1) * 100 + "' class='header_locked common_background_color common_border_color' valign='middle' align='center' rowspan="
                                + lays + " colspan=" + ((colspan - 1) * lay + 1) + " > 总体评价</td>");
            }
        }
        a_tableHtml.append("</tr> \n ");
        // 画表头的中间层

        SingleGradeBo singleGradeBo = new SingleGradeBo(this.conn);
        HashMap pointItemMap = singleGradeBo.getPointItemList(
                (ArrayList) pointList.get(1), items);
        a_tableHtml.append(getMidHeadHtml2(lays, tempColumnList, items, map,
                perPointList, pointItemMap, lay, commonItems));
        // 画指标列
        StringBuffer sequence = new StringBuffer("");
        a_tableHtml.append("<tr style='background-color: #f4f7f7;'>");

        for (Iterator t = perPointList.iterator(); t.hasNext(); ) {
            String[] temp = (String[]) t.next();
            HashMap pointDescMap = getTemplatePointDetail();
            ArrayList gradeList = (ArrayList) pointDescMap.get(temp[0]
                    .toLowerCase());
            if (gradeList != null && gradeList.size() > 0) {
                a_tableHtml.append(getTh(temp[1], 1 * (gradeList.size() * lay + 1),
                        2, null, "header_locked common_background_color common_border_color"));
            }

        }
        if (items.size() == 0) {
            // 总体评价
            if (this.gradeTempList.size() > 0
                    && this.planParamSet.get("WholeEval") != null
                    && "True"
                    .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                int colspan = this.gradeTempList.size() * lay + lay + 1;
                a_tableHtml
                        .append("<td width='" + ((colspan - 1) * lay + 1) * 100 + "' class='header_locked common_background_color common_border_color' valign='middle' align='center' rowspan=" + (lays - 1) + " colspan=" + colspan + " > 总体评价</td>");
            }
        }
        a_tableHtml.append("</tr>\n");

        a_tableHtml.append("<tr style='background-color: #f4f7f7;'>");
        // 第三层表头信息
        a_tableHtml
                .append("<td id='a' width='100' class='cell_locked5 common_background_color common_border_color' valign='middle' rowspan='" + lay + "' align='center' height='35'>主体人数</td>");
        a_tableHtml
                .append("<td id='a' width='100' class='cell_locked5 common_background_color common_border_color' valign='middle' rowspan='" + lay + "' align='center' height='35'>投票人数</td>");
        a_tableHtml
                .append("<td id='a' width='100' class='cell_locked5 common_background_color common_border_color' valign='middle' rowspan='" + lay + "' align='center' height='35'>投票率</td>");
        for (Iterator t = perPointList.iterator(); t.hasNext(); ) {
            String[] temp = (String[]) t.next();
            HashMap pointDescMap = getTemplatePointDetail();
            ArrayList gradeList = (ArrayList) pointDescMap.get(temp[0]
                    .toLowerCase());
            if (gradeList != null && gradeList.size() > 0) {
                for (int i = 0; i < gradeList.size(); i++) {
                    LazyDynaBean abean = (LazyDynaBean) gradeList.get(i);
                    a_tableHtml.append("<td width='100' valign='top' align='center' colspan='" + lay + "' ");
                    a_tableHtml.append(" class='header_locked common_background_color common_border_color' width='"
                            + columnWidth + "' height='20'   >"
                            + (String) abean.get("gradedesc") + "</td>");

                }
                a_tableHtml.append("<td width='100' valign='top' align='center' rowspan='" + lay + "' ");
                a_tableHtml
                        .append(" class='header_locked common_background_color common_border_color' width='"
                                + columnWidth
                                + "' height='20'   >"
                                + ResourceFactory
                                .getProperty("lable.welcome.invtextresult.ballot")//票数
                                + "</td>");
            }
        }


        if (this.gradeTempList.size() > 0
                && this.planParamSet.get("WholeEval") != null
                && "True"
                .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
            for (int i = 0; i < this.gradeTempList.size(); i++) {
                LazyDynaBean abean = (LazyDynaBean) this.gradeTempList.get(i);
                String itemname = (String) abean.get("itemname");
                a_tableHtml
                        .append("<td id='a' width='100' class='header_locked common_background_color common_border_color' valign='middle' align='center' height='35'  colspan='" + lay + "' >"
                                + itemname + "</td>");
            }
            a_tableHtml
                    .append("<td id='a' width='100' class='header_locked common_background_color common_border_color' valign='middle' align='center' height='35'  colspan='" + lay + "' >弃权</td>");
            a_tableHtml
                    .append("<td id='a' width='100' class='header_locked common_background_color common_border_color' valign='middle' align='center' height='35'  rowspan='" + lay + "' >票数</td>");
        }

        a_tableHtml.append("</tr>\n");
        if (flag) {
            a_tableHtml.append("<tr style='background-color: #f4f7f7;'>");
            for (Iterator t = perPointList.iterator(); t.hasNext(); ) {
                String[] temp = (String[]) t.next();
                HashMap pointDescMap = getTemplatePointDetail();
                ArrayList gradeList = (ArrayList) pointDescMap.get(temp[0]
                        .toLowerCase());
                if (gradeList != null && gradeList.size() > 0) {
                    for (int i = 0; i < gradeList.size(); i++) {
                        LazyDynaBean abean = (LazyDynaBean) gradeList.get(i);
                        a_tableHtml.append("<td valign='top' align='center' ");
                        a_tableHtml.append(" class='header_locked common_background_color common_border_color' width='"
                                + columnWidth + "' height='20'   >票数</td>");

                        a_tableHtml.append("<td valign='top' align='center' ");
                        a_tableHtml.append(" class='header_locked common_background_color common_border_color' width='"
                                + columnWidth + "' height='20'   >占比</td>");

                    }
                }
            }

            if (this.gradeTempList.size() > 0
                    && this.planParamSet.get("WholeEval") != null
                    && "True"
                    .equalsIgnoreCase((String) this.planParamSet.get("WholeEval"))) {
                for (int i = 0; i < this.gradeTempList.size(); i++) {
                    LazyDynaBean abean = (LazyDynaBean) this.gradeTempList.get(i);
                    String itemname = (String) abean.get("itemname");
                    a_tableHtml.append("<td valign='top' align='center' ");
                    a_tableHtml.append(" class='header_locked common_background_color common_border_color' width='"
                            + columnWidth + "' height='20'   >票数</td>");

                    a_tableHtml.append("<td valign='top' align='center' ");
                    a_tableHtml.append(" class='header_locked common_background_color common_border_color' width='"
                            + columnWidth + "' height='20'   >占比</td>");
                }
                a_tableHtml.append("<td valign='top' align='center' ");
                a_tableHtml.append(" class='header_locked common_background_color common_border_color' width='"
                        + columnWidth + "' height='20'   >票数</td>");

                a_tableHtml.append("<td valign='top' align='center' ");
                a_tableHtml.append(" class='header_locked common_background_color common_border_color' width='"
                        + columnWidth + "' height='20'   >占比</td>");

            }
            a_tableHtml.append("</tr>\n");
        }
        a_tableHtml.append("</thead>\n");
        return a_tableHtml.toString();
    }

    // 根据项目编号算该项目所占列数
    public int getNumByItem(String itemid, int lay) {
        int num = 0;
        int totalNum = 0;
        StringBuffer strsql = new StringBuffer("");
        strsql.append("  select count(*) from per_grade pg,per_grade_template pt where pg.gradecode=pt.grade_template_id and point_id in (select point_id from per_template_point where item_id="
                + itemid + ") group by point_id ");
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            RowSet rowSet = dao.search(strsql.toString());
            while (rowSet.next()) {
                num = rowSet.getInt(1);
                if (num > 0) {
                    totalNum = totalNum + (num * lay + 1);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return totalNum;
    }

    // 生成表头中间层html
    public String getMidHeadHtml2(int lays, ArrayList tempColumnList,
                                  ArrayList items, HashMap map, ArrayList perPointList,
                                  HashMap pointItemMap, int lay, HashMap commonItems) {

        StringBuffer tableHtml = new StringBuffer("");
        HashMap pointDescMap = getTemplatePointDetail();
        for (int b = 2; b < lays; b++) {
            ArrayList tempList = new ArrayList();
            tableHtml.append("<tr>");
            int d = 0;
            for (int i = 0; i < tempColumnList.size(); i++) {
                String[] temp1 = (String[]) tempColumnList.get(i);
                if (temp1[0] == null) {
                    tableHtml.append(getTh("&nbsp;",
                            1 * (this.perGradeTemplateList.size() * lay + 1), 2,
                            null, "header_locked common_background_color common_border_color"));
                    tempList.add(temp1);
                    d++;
                } else {
                    int pointNum = Integer.parseInt((String) map.get(temp1[0]));
                    int isNullItem = 0;
                    for (Iterator t1 = items.iterator(); t1.hasNext(); ) {
                        String[] temp2 = (String[]) t1.next();
                        if (temp2[1] != null && temp2[1].equals(temp1[0]) && commonItems.get(temp2[0].toLowerCase()) != null) {
                            int pointNum2 = Integer.parseInt((String) map
                                    .get(temp2[0]));
                            int selfnum = 0;
                            isNullItem++;
                            for (d = 0; d < perPointList.size(); d++) {
                                String[] point = (String[]) perPointList.get(d);
                                ArrayList gradeList = (ArrayList) pointDescMap.get(point[0].toLowerCase());
                                ArrayList pointItemList = (ArrayList) pointItemMap
                                        .get(point[0]);
                                int flag = 0;
                                for (Iterator t2 = pointItemList.iterator(); t2
                                        .hasNext(); ) {
                                    String[] tempItem = (String[]) t2.next();
                                    if (tempItem[0].equals(temp2[0])) {
                                        flag++;
                                    }
                                }
                                if (flag == 0) {
                                    //因为指标直接挂在顶级项目下，下季项目需要空出，是自己项目下的才加 haosl 2020.02.08
                                    if (point[3] != null && point[3].equals(temp1[0])) {
                                        tableHtml.append(getTh("&nbsp;", 1 * (gradeList.size() * lay + 1), 2, null, "header_locked common_background_color common_border_color"));
                                        String[] ttt = new String[5];
                                        tempList.add(ttt);
                                        //d++;
                                        selfnum++;
                                    }
                                } else {
                                    tableHtml.append(getTh(temp2[3], Integer.parseInt((String) map.get(temp2[0])) * (this.perGradeTemplateList.size() * lay + 1),
                                            2, null, "header_locked common_background_color common_border_color"));
                                    //d += pointNum2;
                                    selfnum += pointNum2;
                                    tempList.add(temp2);
                                    break;
                                }
                            }

                        }
                        //此处加上会导致中间列头多出错位
						/*else if(commonItems.get(temp2[0].toLowerCase()) != null){
							for(d=0;d<perPointList.size();d++){
								String[] point = (String[]) perPointList.get(d);
								if(point[3]!=null&&temp2[0].equals(temp1[0])&&point[3].equals(temp2[0])&&temp2[1]==null){//中间层是空的情况,如果有子节点那么不加空  zhaoxg add 2014-12-23
									ArrayList gradeList = (ArrayList) pointDescMap.get(point[0].toLowerCase());
                                                tableHtml.append(getTh("&nbsp;",1 * (gradeList.size()*lay + 1), 2, null,"header_locked common_background_color common_border_color"));
                                                            isNullItem++;
									break;
								}
							}
						}*/
                    }
                    if (isNullItem == 0) {
                        for (int a = 0; a < pointNum; a++) {
                            tableHtml.append(getTh("&nbsp;",
                                    1 * (this.perGradeTemplateList.size() * lay + 1),
                                    2, null, "header_locked common_background_color common_border_color"));
                            String[] ttt = new String[5];
                            tempList.add(ttt);
                            d++;
                        }
                    }
                }
            }
            tableHtml.append("</tr>");
            tempColumnList = tempList;
        }
        return tableHtml.toString();
    }

    /**
     * 取得计划涉及到的主体类别
     *
     * @return
     */
    public ArrayList getBodyList() {

        ArrayList list = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            CommonData vo = new CommonData("all",
                    ResourceFactory.getProperty("performance.allbody"));
            list.add(vo);
            StringBuffer sql = new StringBuffer(
                    "select per_mainbodyset.body_id,per_mainbodyset.name ");
            sql.append(" from per_plan_body,per_mainbodyset where per_plan_body.body_id=per_mainbodyset.body_id ");
            // 排除掉打分确认标识为1(确认)的主体 lium
            sql.append(" AND " + Sql_switcher.isnull("per_plan_body.opt", "0") + "<>1 and plan_id=" + this.planid
                    + " order by per_mainbodyset.seq");
            RowSet rowSet = dao.search(sql.toString());
            while (rowSet.next()) {
                list.add(new CommonData(rowSet.getString("body_id"), rowSet
                        .getString("name")));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * 取得计划涉及到的主体类别
     *
     * @return
     */
    public ArrayList getBodyList2() {

        ArrayList list = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            CommonData vo = new CommonData("all",
                    ResourceFactory.getProperty("performance.allbody"));
            list.add(vo);
            CommonData vo1 = new CommonData("all1",
                    ResourceFactory.getProperty("performance.allbody")
                            + "(分类统计)");
            list.add(vo1);
            StringBuffer sql = new StringBuffer(
                    "select per_mainbodyset.body_id,per_mainbodyset.name ");
            sql.append(" from per_plan_body,per_mainbodyset where per_plan_body.body_id=per_mainbodyset.body_id ");
            sql.append(" and plan_id=" + this.planid
                    + " order by per_mainbodyset.seq");
            RowSet rowSet = dao.search(sql.toString());
            while (rowSet.next()) {
                list.add(new CommonData(rowSet.getString("body_id"), rowSet
                        .getString("name")));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * 取得考核评估的计算方式列表
     *
     * @return
     */
    public ArrayList getComputeFashionList() {

        ArrayList list = new ArrayList();

        CommonData vo = new CommonData("1",
                ResourceFactory.getProperty("jx.evaluation.scoreStatistics"));
        list.add(vo);
        // //如果为目标管理 需考虑关键事件
        // if(this.planVo.getInt("method")!=2)
        // {
        vo = new CommonData("2",
                ResourceFactory.getProperty("jx.evaluation.mainbodyStatistics"));
        list.add(vo);
        vo = new CommonData("3",
                ResourceFactory.getProperty("jx.evaluation.pointStatistics"));
        list.add(vo);
        // }
        vo = new CommonData("4",
                ResourceFactory.getProperty("performance.evaluation.bodyscore"));
        list.add(vo);
        int k = this.planVo.getInt("method");
        if (this.planVo.getInt("method") == 1
                || this.planVo.getInt("method") == 0) {// 只有360度考核计划才会出现
            // method=null取出来值为0
            // 默认为360
            vo = new CommonData("6",
                    ResourceFactory.getProperty("jx.evaluation.pointbijiao"));
            list.add(vo);
        }
        return list;
    }

    /**
     * 取得计划对应的主体类别列表
     *
     * @param planid
     * @return
     */
    public ArrayList getPerMainBodySetList(String planid) {

        ArrayList list = new ArrayList();
        try {
            String sql = "select per_mainbodyset.* from per_plan_body,per_mainbodyset where per_plan_body.body_id=per_mainbodyset.body_id and plan_id="
                    + planid + " order by per_mainbodyset.seq";
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = dao.search(sql);
            LazyDynaBean abean = null;
            while (rowSet.next()) {
                abean = new LazyDynaBean();
                abean.set("body_id", rowSet.getString("body_id"));
                abean.set("name", rowSet.getString("name"));
                if (Sql_switcher.searchDbServer() == Constant.ORACEL) {
                    abean.set("level", rowSet.getString("level_o"));
                } else {
                    abean.set("level", rowSet.getString("level"));
                }
                list.add(abean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * 取得了解程度列表
     *
     * @return
     */
    public ArrayList getKnowList() {

        ArrayList list = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = dao.search("select * from per_know order by seq");
            while (rowSet.next()) {
                LazyDynaBean abean = new LazyDynaBean();
                abean.set("know_id", rowSet.getString("know_id"));
                abean.set("name", rowSet.getString("name"));
                abean.set(
                        "status",
                        rowSet.getString("status") != null ? rowSet
                                .getString("status") : "0");
                list.add(abean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * 取得主体类别权重信息列表
     *
     * @param planid
     * @return
     */
    public ArrayList getWeightList(String planid) {

        ArrayList list = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = dao
                    .search("select ppb.*,pms.name from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and ppb.plan_id="
                            + planid + " order by pms.seq");
            while (rowSet.next()) {
                LazyDynaBean abean = new LazyDynaBean();
                abean.set("body_id", rowSet.getString("body_id"));
                abean.set("name", rowSet.getString("name"));
                abean.set("rank", Double.toString(rowSet.getDouble("rank")));
                abean.set("flag", rowSet.getString("flag"));
                abean.set("lead", rowSet.getString("lead"));
                abean.set("pbOpt", new Integer(rowSet.getInt("opt"))); // 需要判断主体的打分确认标识 by 刘蒙

                list.add(abean);
            }

            if (rowSet != null) {
                rowSet.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * 取得标准标度列表
     *
     * @return
     */
    public ArrayList getPerGradeTemplateList(String template_id) {

        ArrayList list = new ArrayList();
        try {
            PersonPostModalBo ppo = new PersonPostModalBo(this.conn);
            String per_comTable = "per_grade_template"; // 绩效标准标度
            if (ppo.getComOrPer(template_id, "temp")) {
                per_comTable = "per_grade_competence"; // 能力素质标准标度
            }
            String sql = "select * from " + per_comTable
                    + " order by gradevalue desc";
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = dao.search(sql);
            LazyDynaBean abean = null;
            while (rowSet.next()) {
                abean = new LazyDynaBean();
                abean.set("grade_template_id",
                        rowSet.getString("grade_template_id"));
                abean.set("gradevalue", rowSet.getString("gradevalue"));
                abean.set("gradedesc", rowSet.getString("gradedesc"));
                abean.set("top_value", rowSet.getString("top_value"));
                abean.set("bottom_value", rowSet.getString("bottom_value"));
                list.add(abean);
            }

            if (rowSet != null) {
                rowSet.close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * 校验考评计划是否可计算
     *
     * @param plan_Id
     * @return
     */
    public String computeValidate(String plan_Id, String khObjWhere) {

        StringBuffer ainfo = new StringBuffer("");
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            String object_type = this.getPlanVo().getString("object_type");
            String objSql = "select object_id from per_object where plan_id ="
                    + plan_Id + " ";
            if (khObjWhere.length() > 0) {
                objSql += khObjWhere;
            }

            for (int i = 1; i >= 0; i--) {
                // 考核主体对考核对象的考评还没有提交
                String sql = "select per_mainbody.a0101 mainbody_name,per_mainbody.mainbody_id,usra01.a0101 from per_mainbody,usra01,per_plan_body ppb"
                        + " where per_mainbody.object_id=usra01.a0100 and per_mainbody.plan_id="
                        + plan_Id
                        + " and per_mainbody.plan_id=ppb.plan_id and per_mainbody.body_id=ppb.body_id and"
                        + " (ppb.isgrade=0 OR ppb.isgrade IS NULL) AND (ppb.opt=0 OR ppb.opt IS NULL)"
                        + " and status="
                        + i
                        + " and per_mainbody.object_id in (" + objSql + ")";
                if (object_type != null && !"2".equals(object_type)) {
                    sql = "select per_mainbody.a0101 mainbody_name,per_mainbody.mainbody_id,organization.codeitemdesc a0101 from per_mainbody,organization,per_plan_body ppb"
                            + " where per_mainbody.object_id=organization.codeitemid and per_mainbody.plan_id="
                            + plan_Id
                            + " and per_mainbody.plan_id=ppb.plan_id and per_mainbody.body_id=ppb.body_id and"
                            + " (ppb.isgrade=0 OR ppb.isgrade IS NULL) AND (ppb.opt=0 OR ppb.opt IS NULL)"
                            + " and status="
                            + i
                            + " and per_mainbody.object_id in (" + objSql + ")";
                }
                sql += " order by mainbody_id";

                RowSet rowSet = dao.search(sql);
                String amainbody_id = "";
                String amainbody_name = "";
                int num = 0;
                StringBuffer name_info = new StringBuffer("");
                StringBuffer tempinfo = new StringBuffer("");
                while (rowSet.next()) {
                    String mainbody_id = rowSet.getString("mainbody_id");
                    String m_name = rowSet.getString("mainbody_name");
                    String o_name = rowSet.getString("a0101");
                    if (amainbody_id.length() == 0) {
                        amainbody_id = mainbody_id;
                        amainbody_name = m_name;
                    }
                    // num++;

                    if (!amainbody_id.equals(mainbody_id)) {
                        tempinfo.append("\n" + amainbody_name + ":"
                                + name_info.substring(1));
                        // tempinfo.append("\r\n   " + amainbody_name + ":" +
                        // name_info.substring(1) + "等" + num + "个.");
                        // num = 0;
                        amainbody_id = mainbody_id;
                        amainbody_name = m_name;
                        name_info.setLength(0);
                    }
                    // if (num < 4)
                    name_info.append("、" + o_name);

                }
                if (name_info.length() > 0) {
                    // tempinfo.append("\r\n" + amainbody_name + ":" +
                    // name_info.substring(1));
                    tempinfo.append("\n" + amainbody_name + ":"
                            + name_info.substring(1));
                    // if (num > 3)
                    // {
                    // tempinfo.append("等");
                    // tempinfo.append(num + "个.");
                    // }
                    if (tempinfo.length() > 0) {
                        if (i == 1) {
                            ainfo.append(ResourceFactory
                                    .getProperty("jx.evaluation.info3") + ":");
                        }
                        if (i == 0) {
                            ainfo.append("\n"
                                    + ResourceFactory
                                    .getProperty("jx.evaluation.info4")
                                    + ":");
                        }
                        // ainfo.append("\r\n\r\n"+ResourceFactory.getProperty("jx.evaluation.info4")+":");
                        ainfo.append(tempinfo.toString());
                        //if (i == 1)
                        //ainfo.append("\n"
                        //+ ResourceFactory
                        //		.getProperty("jx.evaluation.info5")
                        //+ "\n");
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return ainfo.toString();
    }

    /**
     * 保存权重设置
     *
     * @param proportionList
     * @param UnLeadSingleAvg
     */
    public void saveProportionValue(ArrayList proportionList,
                                    String UnLeadSingleAvg) {

        try {
            ContentDAO dao = new ContentDAO(this.conn);
            for (int i = 0; i < proportionList.size(); i++) {
                LazyDynaBean abean = (LazyDynaBean) proportionList.get(i);
                dao.update("update per_plan_body set rank="
                        + (String) abean.get("rank") + ",flag="
                        + (String) abean.get("flag") + ",lead="
                        + (String) abean.get("lead") + "  where plan_id="
                        + this.planid + " and body_id="
                        + (String) abean.get("body_id"));
            }
            this.loadxml.saveAttribute("PerPlan_Parameter/CalcRule",
                    "UnLeadSingleAvg", UnLeadSingleAvg);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void savePointScoprRange(ArrayList pointscopelist, String isvalidate) {

        try {
            ContentDAO dao = new ContentDAO(this.conn);
            String nodename = "PointScoreScopes";
            String childname = "PointScore";
            ArrayList nodeAttribute = new ArrayList();
            String node_str = "PerPlan_Parameter/PointScoreScopes";
            ArrayList childattribute = new ArrayList();
            childattribute.add("id");
            childattribute.add("type");
            childattribute.add("maxscore");
            childattribute.add("minscore");
            LazyDynaBean bean = new LazyDynaBean();
            bean.set("attributename", "IsValid");
            bean.set("attributevalue", isvalidate);
            nodeAttribute.add(bean);
            this.loadxml.saveHasMoreChildsNode(nodename, childname,
                    nodeAttribute, pointscopelist, node_str, childattribute);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public RecordVo getPlanVo() {

        return planVo;
    }

    public void setPlanVo(RecordVo planVo) {

        this.planVo = planVo;
    }

    public Hashtable getPlanParamSet() {

        return planParamSet;
    }

    public void setPlanParamSet(Hashtable planParamSet) {

        this.planParamSet = planParamSet;
    }

    /*
     * 得到评价统计
     *
     * @author:JinChunhai
     */
    public String getEvalStatis(String planid, String object_id) {

        StringBuffer evalStatis = new StringBuffer();
        this.planid = planid;
        initParamSet();
        HashMap map = new HashMap();
        String wholeEval = (String) this.planParamSet.get("WholeEval");
        if ("false".equalsIgnoreCase(wholeEval)) {
            return "";
        }
        if (this.planParamSet.get("WholeEval") != null) {
            map.put("WholeEval", (String) this.planParamSet.get("WholeEval"));
        }
        if (this.planParamSet.get("GradeClass") != null) {
            /************优先按总体评价等级分类****************/
            String EvalClass = (String) this.planParamSet.get("EvalClass");//EvalClass在计划参数总体评价中的等级分类ID
            if (EvalClass != null && EvalClass.length() > 0) {
                map.put("GradeClass", EvalClass);
            } else {
                map.put("GradeClass", (String) this.planParamSet.get("GradeClass"));//GradeClass 启动时的等级分类
            }
        }

        this.gradeTempList = getGradeList(map);
        String str = "";
        HashMap map1 = new HashMap();
        for (int i = 0; i < this.gradeTempList.size(); i++) {
            LazyDynaBean abean = (LazyDynaBean) this.gradeTempList.get(i);
            map1.put("V_" + (String) abean.get("id"),
                    (String) abean.get("itemname"));
            str += ",V_" + (String) abean.get("id");
        }

        ContentDAO dao = new ContentDAO(this.conn);
        try {
            String sql = "select v_sum" + str + " from per_result_" + planid + " where object_id='" + object_id + "'";
            RowSet rs = dao.search("select v_sum" + str + " from per_result_"
                    + planid + " where object_id='" + object_id + "'");
            if (rs.next()) {
                Set keySet = map1.keySet();
                float total = rs.getFloat("v_sum");
                evalStatis.append("共计"
                        + PubFunc.round(Float.toString(total), 0) + "票,其中:");
                for (Iterator iter = keySet.iterator(); iter.hasNext(); ) {
                    String id = (String) iter.next();
                    float temp = rs.getFloat(id);
                    if (temp == 0.0) {
                        evalStatis.append("无" + map1.get(id) + "票,");
                    } else {
                        evalStatis.append(map1.get(id) + "率"
                                + (temp / total * 100) + "％("
                                + PubFunc.round(Float.toString(temp), 0)
                                + "票),");
                    }
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return evalStatis.substring(0, evalStatis.length() - 1) + "。 ";
    }

    /*
     * 获得某考核计划下的考核对象
     *
     * @author:JinChunhai
     */
    public ArrayList getKhObjList(String plan_id, String whl, String orderby)
            throws GeneralException {
        whl = PubFunc.keyWord_reback(whl);
        ArrayList list = new ArrayList();

        if (plan_id == null) {
            return list;
        }

        try {
            ContentDAO dao = new ContentDAO(this.conn);
            StringBuffer sql = new StringBuffer();
            sql.append("select object_id ,b0110,e0122, e01a1,a0101 from per_result_");
            sql.append(plan_id);
            sql.append(" where 1=1");

            if (whl != null && whl.length() > 0) // 兼容单位部门团队
            {
                sql.append(whl);
            }

            if (orderby != null && orderby.trim().length() > 0) {
                sql.append(" " + orderby);
            } else {
                sql.append(" order by a0000");
            }

            RowSet rowSet = dao.search(sql.toString());
            LazyDynaBean abean = null;
            while (rowSet.next()) {
                String b0110 = rowSet.getString("b0110");
                String e0122 = rowSet.getString("e0122");
                String e01a1 = rowSet.getString("e01a1");
                abean = new LazyDynaBean();
                abean.set("object_id", rowSet.getString("object_id"));
                abean.set("b0110",
                        b0110 != null ? AdminCode.getCodeName("UN", b0110) : "");
                abean.set("e0122",
                        e0122 != null ? AdminCode.getCodeName("UM", e0122) : "");
                abean.set("e01a1",
                        e01a1 != null ? AdminCode.getCodeName("@K", e01a1) : "");
                abean.set("a0101", rowSet.getString("a0101"));
                list.add(abean);
            }

        } catch (Exception e) {
            e.printStackTrace();
            throw GeneralExceptionHandler.Handle(e);
        }
        return list;
    }

    /*
     * 得到所有考核评语
     *
     * @author:JinChunhai
     */
    public ArrayList getRemarkTemplates() throws GeneralException {

        ArrayList list = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            StringBuffer buf = new StringBuffer();
            buf.append("select id,param_name from per_param where  param_name is not null ");
            if (Sql_switcher.searchDbServer() == Constant.MSSQL) {
                buf.append(" and param_name!=''");
            }
            buf.append(" order by id desc");
            RowSet rs = dao.search(buf.toString());
            LazyDynaBean abean = null;
            while (rs.next()) {
                CommonData temp = new CommonData(rs.getString("id"),
                        rs.getString("param_name"));
                list.add(temp);
            }

        } catch (Exception e) {
            e.printStackTrace();
            throw GeneralExceptionHandler.Handle(e);
        }
        return list;
    }

    /*
     * 获得某考核计划的考核指标
     *
     * @author:JinChunhai
     */
    public HashMap getPointMap(String planid) {

        HashMap map = new HashMap();
        ContentDAO dao = new ContentDAO(this.conn);
        String points_sql = "select po.point_id,po.pointname from per_template_item pi,per_template_point pp,per_point po  where pi.item_id=pp.item_id and pp.point_id=po.point_id   and template_id=(select template_id from per_plan where plan_id="
                + planid + ")  order by pp.seq";
        try {
            RowSet rs = dao.search(points_sql);
            while (rs.next()) {
                map.put("C_" + rs.getString("point_id"),
                        rs.getString("pointname"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /*
     * 获得某考核计划各考核指标在所有考核对象中的平均值
     *
     * @author:JinChunhai
     */
    public HashMap getPointAveScore(String planid, String[] objArray) {

        HashMap map = new HashMap();
        ContentDAO dao = new ContentDAO(this.conn);

        String str = "";
        for (int i = 0; i < objArray.length; i++) {
            String object1 = objArray[i];
            if ("".equals(object1)) {
                continue;
            }
            str += ",'" + object1 + "'";
        }

        HashMap pointMap = getPointMap(planid);
        Set pointCodes = pointMap.keySet();
        for (Iterator iter = pointCodes.iterator(); iter.hasNext(); ) {
            String poinCode = (String) iter.next();
            StringBuffer strSql = new StringBuffer();
            strSql.append("select ");
            strSql.append("avg(" + poinCode + ") aa from per_result_" + planid);
            strSql.append(" where object_id in (");
            strSql.append(str.substring(1));
            strSql.append(")");

            try {

                RowSet rs = dao.search(strSql.toString());
                if (rs.next()) {
                    map.put(poinCode,
                            new Float(rs.getString("aa") != null ? rs
                                    .getFloat("aa") : 0));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return map;
    }

    /*
     * 取得高分指标和低分指标
     *
     * @author:JinChunhai
     */
    public HashMap getPointStr(String[] objArray, String object, String planid) {

        HashMap pointMap = new HashMap();
        HashMap pointAvePoint = this.getPointAveScore(planid, objArray);
        HashMap pointCn = getPointMap(planid);
        String highest = "";
        String lowest = "";
        ContentDAO dao = new ContentDAO(this.conn);
        Set pointCodes = pointAvePoint.keySet();
        for (Iterator iter = pointCodes.iterator(); iter.hasNext(); ) {
            String poinCode = (String) iter.next();
            StringBuffer strSql = new StringBuffer();
            strSql.append("select ");
            strSql.append(poinCode + " from per_result_" + planid);
            strSql.append(" where object_id ='");
            strSql.append(object);
            strSql.append("'");

            try {
                RowSet rs = dao.search(strSql.toString());
                if (rs.next()) {
                    float score = rs.getFloat(poinCode);
                    Float aveScore = (Float) pointAvePoint.get(poinCode);
                    if (score >= aveScore.floatValue()) {
                        highest += "、" + (String) pointCn.get(poinCode);
                    } else if (score <= aveScore.floatValue()) {
                        lowest += "、" + (String) pointCn.get(poinCode);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        highest = highest.length() > 0 ? highest.substring(1) : highest;
        lowest = lowest.length() > 0 ? lowest.substring(1) : lowest;

        pointMap.put("highest", highest);
        pointMap.put("lowest", lowest);
        pointMap.put("totalPoint", pointCn.size() + "");
        return pointMap;
    }

    /*
     * 取得分类得分
     *
     * @author:JinChunhai
     */
    public String getKindScore(String planid, String obj) {

        String kindScore = "";
        ContentDAO dao = new ContentDAO(this.conn);
        int KeepDecimal = Integer.parseInt((String) this.planParamSet
                .get("KeepDecimal"));
        DecimalFormat df = new DecimalFormat("###############.#####");// 去掉小数点后面的0
        try {
            RowSet rs = dao
                    .search("SELECT S.score,S.object_id,B.name AS bodyname FROM per_objectbody_score S, per_mainbodyset B WHERE S.body_id = B.body_id AND S.plan_id = "
                            + planid + " and object_id='" + obj + "'");
            while (rs.next()) {
                String bodyname = rs.getString("bodyname");
                float score = rs.getFloat("score");
                kindScore += bodyname
                        + "评价为"
                        + df.format(Double.parseDouble(PubFunc.round(
                        score + "", KeepDecimal))) + "分,";
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (kindScore.length() > 0) {
            kindScore = kindScore.substring(0, kindScore.length() - 1) + "。";
        }
        return kindScore;
    }

    /*
     * 取得了解程度指标
     *
     * @author:FanZhiGuo
     */
    public String getKnowDegree(String planid, String obj) {

        String knowDegree = "";
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            RowSet rs = dao
                    .search("select count(*) aa from per_object_Know P, per_know D WHERE P.know_id = D.know_id  AND P.plan_id ="
                            + planid + "  and P.object_id ='" + obj + "'");
            int count = 0;
            if (rs.next()) {
                count = rs.getInt("aa");
            }
            if (count == 0) {
                return knowDegree;
            }
            knowDegree = "共计" + count + "票，其中：";
            rs = dao.search(" SELECT P.object_id,P.plan_id,P.knowNum, D.name FROM per_object_Know P, per_know D WHERE P.know_id = D.know_id  AND P.plan_id ="
                    + planid + "  and P.object_id ='" + obj + "'");
            while (rs.next()) {
                String name = rs.getString("name");
                int knowNum = rs.getInt("knowNum");
                knowDegree += name + "率" + knowNum * 100 / count + "%("
                        + knowNum + "票)，";
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return knowDegree.substring(0, knowDegree.length() - 1) + "。";
    }

    /*
     * 替换字符串函数 String strSource - 源字符串 String strFrom - 要替换的子串 String strTo -
     * 替换为的字符串
     */
    public String replace(String strSource, String strFrom, String strTo) {

        // 如果要替换的子串为空，则直接返回源串
        if (strFrom == null || "".equals(strFrom)) {
            return strSource;
        }
        String strDest = "";
        // 要替换的子串长度
        int intFromLen = strFrom.length();
        int intPos;
        // 循环替换字符串
        while ((intPos = strSource.indexOf(strFrom)) != -1) {
            // 获取匹配字符串的左边子串
            strDest = strDest + strSource.substring(0, intPos);
            // 加上替换后的子串
            strDest = strDest + strTo;
            // 修改源串为匹配子串后的子串
            strSource = strSource.substring(intPos + intFromLen);
        }
        // 加上没有匹配的子串
        strDest = strDest + strSource;

        return strDest;
    }

    /*
     * 取得生成的评语
     *
     * @author:JinChunhai
     */
    public String getAppraise(String obj, String planid,
                              String templateContent, int count, int order, String[] objArray) {

        HashMap dataPoint = new HashMap();
        this.isByModelFlag = SingleGradeBo.getByModel(planid, this.conn);
        this.isPosHasPoint = SingleGradeBo.isHaveMatchByModel(obj, this.conn);
        HashMap map = new HashMap();
        if (!isByModelFlag) {
            map = this.getPointStr(objArray, obj, planid);// 获得最高指标和低分指标
        }

        ContentDAO dao = new ContentDAO(this.conn);

        int KeepDecimal = Integer.parseInt((String) this.planParamSet
                .get("KeepDecimal"));
        String GrpMenu1 = (String) this.planParamSet.get("GrpMenu1"); // 排名指标1，格式：字段名;层级
        String GrpMenu2 = (String) this.planParamSet.get("GrpMenu2"); // 排名指标2，格式：字段名;层级

        String grpMenu1Name = "";
        String grpMenu2Name = "";
        if (GrpMenu1 != null && GrpMenu1.trim().length() > 0
                && GrpMenu1.indexOf("e0122") == -1
                && GrpMenu1.indexOf("body_id") == -1) {
            if (((String) GrpMenu1.split(";")[0]).toString().trim().length() > 0) {
                grpMenu1Name = ","
                        + ((String) GrpMenu1.split(";")[0]).toString();
            }
        }
        if (GrpMenu2 != null && GrpMenu2.trim().length() > 0
                && GrpMenu2.indexOf("e0122") == -1
                && GrpMenu2.indexOf("body_id") == -1) {
            if (((String) GrpMenu2.split(";")[0]).toString().trim().length() > 0) {
                grpMenu2Name = ","
                        + ((String) GrpMenu2.split(";")[0]).toString();
            }
        }

        String khTime = getKhTime(planid);
        String khPlan = "";// 考核计划
        String objName = "";
        String totalScore = "";
        String grade = "";
        String groupName = "";
        String ordering = "";
        String ex_GrpNum = "";
        String e0122 = "";
        String e0122Person = "";
        String e0122Order = "";
        String hightScorePoint = (String) map.get("highest");
        String lowScorePoint = (String) map.get("lowest");
        String pointTotal = (String) map.get("totalPoint");
        String evalStatis = this.getEvalStatis(planid, obj);
        String kindScore = getKindScore(planid, obj); // 分类得分
        String knowDegree = getKnowDegree(planid, obj); // 了解程度
        try {
            HashMap bodyMap = new HashMap();
            RowSet rowSet = dao.search("select * from per_mainbodyset");
            while (rowSet.next()) {
                bodyMap.put(rowSet.getString("body_id"),
                        rowSet.getString("name"));
            }
            RowSet rs = dao
                    .search("select e0122,body_id"
                            + grpMenu1Name
                            + grpMenu2Name
                            + ",org_ordering,org_GrpNum,ordering,ex_GrpNum,a0101,score,resultdesc from per_result_"
                            + planid + " where object_id='" + obj + "'");
            if (rs.next()) {
                objName = rs.getString("a0101");
                totalScore = PubFunc.round(rs.getFloat("score") + "",
                        KeepDecimal);
                DecimalFormat df = new DecimalFormat("###############.#####");// 去掉小数点后面的0
                totalScore = df.format(Double.parseDouble(totalScore));
                grade = rs.getString("resultdesc") == null ? "" : rs
                        .getString("resultdesc");
                e0122 = AdminCode.getCodeName("UM",
                        isNull(rs.getString("e0122")));
                if (rs.getString("org_GrpNum") != null) {
                    String value = PubFunc.round(String.valueOf(Float
                            .parseFloat(rs.getString("org_GrpNum"))), 0);
                    e0122Person = value;
                } else {
                    e0122Person = "";
                }

                if (rs.getString("org_ordering") != null) {
                    String value = PubFunc.round(String.valueOf(Float
                            .parseFloat(rs.getString("org_ordering"))), 0);
                    e0122Order = value;
                } else {
                    e0122Order = "";
                }

                if ((grpMenu1Name == null || grpMenu1Name.trim().length() <= 0)
                        && (grpMenu2Name == null || grpMenu2Name.trim()
                        .length() <= 0)) {
                    groupName = (String) bodyMap.get(rs.getString("body_id"));
                } else if (grpMenu1Name != null
                        && grpMenu1Name.trim().length() > 0
                        && "e0122".equalsIgnoreCase(grpMenu1Name.substring(1))) {
                    groupName = e0122;
                } else if (grpMenu1Name != null
                        && grpMenu1Name.trim().length() > 0
                        && "body_id"
                        .equalsIgnoreCase(grpMenu1Name.substring(1))
                        && rs.getString("body_id") != null) {
                    groupName = (String) bodyMap.get(rs.getString("body_id"));
                } else if (grpMenu1Name != null
                        && grpMenu1Name.trim().length() > 0) {
                    FieldItem fielditem = DataDictionary
                            .getFieldItem(grpMenu1Name.substring(1));
                    String itemid = fielditem.getItemid();
                    String itemtype = fielditem.getItemtype();
                    String codesetid = fielditem.getCodesetid();
                    int itemlength = fielditem.getItemlength();
                    int decimalwidth = fielditem.getDecimalwidth();

                    if (rs.getObject(itemid) != null) {
                        if ("N".equalsIgnoreCase(itemtype)) {
                            groupName = PubFunc.round(rs.getString(itemid),
                                    decimalwidth);
                        } else if ("A".equalsIgnoreCase(itemtype)
                                || "M".equalsIgnoreCase(itemtype)) {
                            if (!"0".equals(codesetid)
                                    && codesetid.trim().length() > 0) {
                                groupName = AdminCode.getCode(codesetid,
                                        rs.getString(itemid)) != null ? AdminCode
                                        .getCode(codesetid,
                                                rs.getString(itemid))
                                        .getCodename() : "";
                            } else {
                                groupName = rs.getString(itemid);
                            }
                        } else if ("D".equalsIgnoreCase(itemtype)) {
                            SimpleDateFormat format1 = new SimpleDateFormat(
                                    "yyyy.MM.dd");
                            Date dateVal = rs.getDate(itemid);
                            String value = format1.format(dateVal);
                            groupName = value;
                        }
                    }
                }

                if (grpMenu2Name != null && grpMenu2Name.trim().length() > 0
                        && "e0122".equalsIgnoreCase(grpMenu2Name.substring(1))) {
                    groupName += "-" + e0122;
                } else if (grpMenu2Name != null
                        && grpMenu2Name.trim().length() > 0
                        && "body_id"
                        .equalsIgnoreCase(grpMenu2Name.substring(1))
                        && rs.getString("body_id") != null) {
                    groupName += "-"
                            + (String) bodyMap.get(rs.getString("body_id"));
                } else if (grpMenu2Name != null
                        && grpMenu2Name.trim().length() > 0) {
                    FieldItem fielditem = DataDictionary
                            .getFieldItem(grpMenu2Name.substring(1));
                    String itemid = fielditem.getItemid();
                    String itemtype = fielditem.getItemtype();
                    String codesetid = fielditem.getCodesetid();
                    int itemlength = fielditem.getItemlength();
                    int decimalwidth = fielditem.getDecimalwidth();

                    if (rs.getObject(itemid) != null) {
                        if ("N".equalsIgnoreCase(itemtype)) {
                            groupName += "-"
                                    + PubFunc.round(rs.getString(itemid),
                                    decimalwidth);
                        } else if ("A".equalsIgnoreCase(itemtype)
                                || "M".equalsIgnoreCase(itemtype)) {
                            if (!"0".equals(codesetid)
                                    && codesetid.trim().length() > 0) {
                                groupName += "-"
                                        + AdminCode.getCode(codesetid,
                                        rs.getString(itemid)) != null ? AdminCode
                                        .getCode(codesetid,
                                                rs.getString(itemid))
                                        .getCodename() : "";
                            } else {
                                groupName += "-" + rs.getString(itemid);
                            }
                        } else if ("D".equalsIgnoreCase(itemtype)) {
                            SimpleDateFormat format1 = new SimpleDateFormat(
                                    "yyyy.MM.dd");
                            Date dateVal = rs.getDate(itemid);
                            String value = format1.format(dateVal);
                            groupName += "-" + value;
                        }
                    }
                }

                if (rs.getString("ordering") != null) {
                    String value = PubFunc.round(String.valueOf(Float
                            .parseFloat(rs.getString("ordering"))), 0);
                    ordering = value;
                } else {
                    ordering = "";
                }

                if (rs.getString("ex_GrpNum") != null) {
                    String value = PubFunc.round(String.valueOf(Float
                            .parseFloat(rs.getString("ex_GrpNum"))), 0);
                    ex_GrpNum = value;
                } else {
                    ex_GrpNum = "";
                }
            }

            rs = dao.search("select name from per_plan where plan_id=" + planid);
            if (rs.next()) {
                khPlan = rs.getString("name");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        dataPoint.put(ResourceFactory.getProperty("lable.performance.perPlan"),
                khPlan);
        dataPoint.put(ResourceFactory.getProperty("jx.param.examtime"), khTime);
        dataPoint.put(
                ResourceFactory.getProperty("lable.performance.perObject"),
                objName);
        dataPoint.put(ResourceFactory.getProperty("jx.param.zhscore"),
                totalScore);
        dataPoint.put(ResourceFactory.getProperty("jx.param.dengji"), grade);
        dataPoint.put(ResourceFactory.getProperty("jx.param.mingci"), order
                + "");

        dataPoint.put(ResourceFactory.getProperty("jx.param.fenzname"),
                groupName + "");
        dataPoint.put(ResourceFactory.getProperty("jx.param.zunnumber"),
                ex_GrpNum + "");
        dataPoint.put(ResourceFactory.getProperty("jx.param.zunpaiming"),
                ordering + "");

        dataPoint
                .put(ResourceFactory.getProperty("jx.param.total"), count + "");
        dataPoint.put(ResourceFactory.getProperty("jx.param.departmentName"),
                e0122 + "");
        dataPoint.put(
                ResourceFactory.getProperty("jx.param.departmentPersonNumber"),
                e0122Person + "");
        dataPoint.put(ResourceFactory.getProperty("jx.param.departmentMingci"),
                e0122Order + "");
        dataPoint.put(ResourceFactory.getProperty("jx.param.highindica"),
                hightScorePoint);
        dataPoint.put(ResourceFactory.getProperty("jx.param.lowindica"),
                lowScorePoint);
        dataPoint.put(ResourceFactory.getProperty("jx.param.zhibiaototal"),
                pointTotal);
        dataPoint.put(ResourceFactory.getProperty("jx.param.pingjiastatis"),
                evalStatis);
        dataPoint.put(ResourceFactory.getProperty("jx.param.fenleiscore"),
                kindScore);
        dataPoint.put(
                ResourceFactory.getProperty("lable.statistic.knowdegree"),
                knowDegree);

        Set pointSet = dataPoint.keySet();
        for (Iterator iter = pointSet.iterator(); iter.hasNext(); ) {
            String point = (String) iter.next();
            templateContent = this.replace(templateContent, "[" + point + "]",
                    (String) dataPoint.get(point));
        }

        return templateContent;
    }

    /*
     * 取得本次生成评语中的名次
     *
     * @author:FanZhiGuo
     */
    public String getOrder(String[] objArray, String object, String planid) {

        // int order = 0;
        String ordering = "";
        String str = "";
        for (int i = 0; i < objArray.length; i++) {
            String object1 = objArray[i];
            if ("".equals(object1)) {
                continue;
            }
            str += ",'" + object1 + "'";
        }

        StringBuffer strSql = new StringBuffer();
        strSql.append("select object_id,score,ordering,ex_GrpNum from per_result_"
                + planid);
        strSql.append(" where object_id in (");
        strSql.append(str.substring(1));
        strSql.append(") order by score desc");

        HashMap map = new HashMap();
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            RowSet rs = dao.search(strSql.toString());
            while (rs.next()) {
                // order++;
                String obj = rs.getString("object_id");
                ordering = rs.getString("ordering") + "&"
                        + rs.getString("ex_GrpNum");
                double score = rs.getDouble("score");
                if (map.get(Double.toString(score)) == null) {
                    if (obj.equals(object)) {
                        return ordering;
                    }
                    map.put(Double.toString(score), ordering);
                } else {
                    if (obj.equals(object)) {
                        String mc = (String) map.get(Double.toString(score));
                        return mc;
                    }
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return ordering;
    }

    /*
     * 保存生成评语
     *
     * @author:FanZhiGuo
     */
    public void saveRemark(String planid, String objs, String template) {

        String[] objArray = objs.split("@");

        ContentDAO dao = new ContentDAO(this.conn);
        String templateContent = "";
        try {
            RowSet rs = dao.search("select content from per_param where id ="
                    + template);
            if (rs.next()) {
                templateContent = rs.getString("content") == null ? "" : rs
                        .getString("content");
            }
            templateContent = templateContent.replaceAll("［", "[");
            templateContent = templateContent.replaceAll("］", "]");
        } catch (Exception e) {
            e.printStackTrace();
        }

        int count = 0;
        for (int i = 0; i < objArray.length; i++) {
            String object = objArray[i];
            if ("".equals(object)) {
                continue;
            }
            count++;
        }

        ArrayList list1 = new ArrayList();
        for (int i = 0; i < objArray.length; i++) {
            String object = objArray[i];
            if ("".equals(object)) {
                continue;
            }
            ArrayList list2 = new ArrayList();
            String um_order = getOrder(objArray, object, planid);
            list2.add(getAppraise(object, planid, templateContent, Integer
                            .parseInt(um_order.substring(um_order.indexOf("&") + 1)),
                    Integer.parseInt(um_order.substring(0,
                            um_order.indexOf("&"))), objArray));
            list2.add(object);
            list1.add(list2);
        }

        String sql = "update per_result_" + planid
                + " set appraise = ? where object_id=?";
        try {
            dao.batchUpdate(sql, list1);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public String isNull(String str) {

        if (str == null || str.trim().length() <= 0
                || " ".equalsIgnoreCase(str) || "".equalsIgnoreCase(str)) {
            return "";
        } else {
            return str;
        }

    }

    /*
     * 获得考核时间指标
     *
     * @author:FanZhiGuo
     */
    public String getKhTime(String planid) {

        String khTime = "";
        ContentDAO dao = new ContentDAO(this.conn);
        String templateContent = "";
        try {
            RowSet rs = dao
                    .search("select cycle,theyear,themonth,thequarter, start_date,end_date from per_plan where plan_id="
                            + planid);
            if (rs.next()) {
                int cycle = rs.getInt("cycle");
                String theyear = isNull(rs.getString("theyear"));
                String themonth = isNull(rs.getString("themonth"));
                String thequarter = isNull(rs.getString("thequarter"));
                String start_date = rs.getTimestamp("start_date") == null ? ""
                        : PubFunc.FormatDate(String.valueOf(rs
                        .getTimestamp("start_date")));
                String end_date = rs.getTimestamp("end_date") == null ? ""
                        : PubFunc.FormatDate(String.valueOf(rs
                        .getTimestamp("end_date")));
                // String start_date = isNull(rs.getString("start_date"));
                // String end_date = isNull(rs.getString("end_date"));

                if (end_date.length() > 9) {
                    end_date = end_date.substring(0, 10);
                }
                if (start_date.length() > 9) {
                    start_date = start_date.substring(0, 10);
                }

                switch (cycle) {
                    case 0:
                        khTime = theyear
                                + ResourceFactory.getProperty("hmuster.label.year");
                        break;
                    case 1:
                        if ("1".equals(thequarter)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("report.pigeonhole.uphalfyear");
                        } else if ("2".equals(thequarter)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("report.pigeonhole.downhalfyear");
                        }
                        break;
                    case 2:
                        if ("01".equals(thequarter)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("report.pigionhole.oneQuarter");
                        } else if ("02".equals(thequarter)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("report.pigionhole.twoQuarter");
                        } else if ("03".equals(thequarter)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("report.pigionhole.threeQuarter");
                        } else if ("04".equals(thequarter)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("report.pigionhole.fourQuarter");
                        }
                        break;
                    case 3:
                        if ("01".equals(themonth)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("date.month.january");
                        } else if ("02".equals(themonth)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("date.month.february");
                        } else if ("03".equals(themonth)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("date.month.march");
                        } else if ("04".equals(themonth)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("date.month.april");
                        } else if ("05".equals(themonth)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory.getProperty("date.month.may");
                        } else if ("06".equals(themonth)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("date.month.june");
                        } else if ("07".equals(themonth)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("date.month.july");
                        } else if ("08".equals(themonth)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("date.month.auguest");
                        } else if ("09".equals(themonth)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("date.month.september");
                        } else if ("10".equals(themonth)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("date.month.october");
                        } else if ("11".equals(themonth)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("date.month.november");
                        } else if ("12".equals(themonth)) {
                            khTime = theyear
                                    + ResourceFactory
                                    .getProperty("hmuster.label.year")
                                    + " "
                                    + ResourceFactory
                                    .getProperty("date.month.december");
                        }
                        break;
                    case 7:
                        khTime = start_date + "－" + end_date;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return khTime;
    }

    /**
     * 取得统一打分指标
     *
     * @param template_id
     * @return
     */
    public HashMap getTotalScorePointList(String template_id) {
        HashMap amap = new HashMap();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            String sql = "select po.point_id,po.pointname,po.pointkind,pi.item_id,po.visible,po.fielditem,po.status,pp.score,po.Pointtype,po.Pointctrl from per_template_item pi,per_template_point pp,per_point po "
                    + " where pi.item_id=pp.item_id and pp.point_id=po.point_id  and template_id='"
                    + template_id + "'  order by pp.seq";
            RowSet rowSet = dao.search(sql); // pi.seq,
            while (rowSet.next()) {
                String point_id = rowSet.getString("point_id");
                String pointkind = rowSet.getString("pointkind");
                String status = rowSet.getString("status");
                String Pointtype = rowSet.getString("Pointtype");
                String Pointctrl = Sql_switcher.readMemo(rowSet, "Pointctrl");
                if ("1".equals(pointkind)
                        && (status != null && "1".equals(status))) {
                    HashMap map = PointCtrlXmlBo.getAttributeValues(Pointctrl);

                    LazyDynaBean abean = new LazyDynaBean();
                    abean.set("point_id", rowSet.getString("point_id"));
                    abean.set("pointname", rowSet.getString("pointname"));
                    abean.set("pointkind", rowSet.getString("pointkind"));
                    abean.set("item_id", rowSet.getString("item_id"));
                    abean.set(
                            "status",
                            rowSet.getString("status") != null ? rowSet
                                    .getString("status") : "");
                    abean.set("score", rowSet.getString("score"));
                    abean.set(
                            "Pointtype",
                            rowSet.getString("Pointtype") != null ? rowSet
                                    .getString("Pointtype") : "");
                    abean.set("Pointctrl", Pointctrl);
                    amap.put(rowSet.getString("point_id"), abean);

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return amap;
    }

    // 总分计算公式
    public ArrayList getExprrelatelist(String planid, String busitype,
                                       LoadXml loadxml, String logo) {
        ArrayList exprrelatelist = new ArrayList();

        if (logo != null && logo.trim().length() > 0
                && "yinru".equalsIgnoreCase(logo)) {
            this.setListItem(exprrelatelist, "本次得分", "[本次得分]");
            this.setListItem(exprrelatelist, "所属部门", "[所属部门]");
            this.setListItem(exprrelatelist, "对象类别", "[对象类别]");
        }
        if (busitype == null || busitype.trim().length() <= 0
                || !"1".equals(busitype)) {
            this.setListItem(exprrelatelist, "关键事件加分", "[关键事件加分]");
            this.setListItem(exprrelatelist, "关键事件扣分", "[关键事件扣分]");
            Hashtable params = loadxml.getDegreeWhole();
            String WholeEvalMode = (String) params.get("WholeEvalMode");
            if ("1".equals(WholeEvalMode)) {
                this.setListItem(exprrelatelist, "总体评价得分", "[总体评价得分]");
            }
            this.setListItem(exprrelatelist, "等级系数", "[等级系数]");

        } else if (busitype != null && busitype.trim().length() > 0
                && "1".equals(busitype)) {
            this.setListItem(exprrelatelist, "岗位标准分值", "[岗位标准分值]");
            this.setListItem(exprrelatelist, "匹配度", "[匹配度]");
        }
        this.setListItem(exprrelatelist, "考核对象名称", "[考核对象名称]");
        this.setListItem(exprrelatelist, "组内平均分", "[组内平均分]");
        this.setListItem(exprrelatelist, "组内最高分", "[组内最高分]");
        this.setListItem(exprrelatelist, "组内最低分", "[组内最低分]");

        if (busitype != null && "1".equals(busitype)) { //如果是按岗位素质模型 则去掉项目  郭峰添加
            RecordVo vo = this.getPerPlanVo(planid);
            String byModel = vo.getString("bymodel") == null ? "" : vo.getString("bymodel");
            if ("1".equals(byModel)) {
                return exprrelatelist;
            }
        }

        RowSet rowSet = null;
        try {
            ContentDAO dao = new ContentDAO(this.conn);

            rowSet = dao
                    .search("select * from per_template_item where template_id=(select template_id from per_plan where plan_id="
                            + planid + ")");
            while (rowSet.next()) {
                this.setListItem(exprrelatelist, rowSet.getString("itemdesc"),
                        "[" + rowSet.getString("itemdesc") + "]");
            }

            String sql = "select po.point_id,po.pointname,po.pointkind,pi.item_id,po.visible,po.fielditem,po.status,pp.score,po.Kh_content,po.Gd_principle from per_template_item pi,per_template_point pp,per_point po "
                    + " where pi.item_id=pp.item_id and pp.point_id=po.point_id  and template_id=(select template_id from per_plan where plan_id="
                    + planid + ") " + " order by pp.seq";
            rowSet = dao.search(sql);
            while (rowSet.next()) {
                this.setListItem(exprrelatelist, rowSet.getString("pointname"),
                        "[" + rowSet.getString("pointname") + "]");
            }

            HashMap bodyMap = new HashMap();
            rowSet = dao.search("select * from per_mainbodyset");
            while (rowSet.next()) {
                bodyMap.put(rowSet.getString("body_id"),
                        rowSet.getString("name"));
            }

            // LoadXml loadxml = new LoadXml(this.frameconn, planid);
            ArrayList planlist = loadxml.getRelatePlanValue("Plan");
            LazyDynaBean abean = null;
            for (int i = 0; i < planlist.size(); i++) {
                abean = (LazyDynaBean) planlist.get(i);
                String id = (String) abean.get("id");
                String Name = (String) abean.get("Name");
                String Type = (String) abean.get("Type");

                HashMap itemMap = new HashMap();
                rowSet = dao
                        .search("select * from per_template_item where template_id=(select template_id from per_plan where plan_id="
                                + id + ")");
                while (rowSet.next()) {
                    itemMap.put(rowSet.getString("item_id"),
                            rowSet.getString("itemdesc"));
                }
                HashMap pointMap = new HashMap();
                sql = "select po.point_id,po.pointname,po.pointkind,pi.item_id,po.visible,po.fielditem,po.status,pp.score,po.Kh_content,po.Gd_principle from per_template_item pi,per_template_point pp,per_point po "
                        + " where pi.item_id=pp.item_id and pp.point_id=po.point_id  and template_id=(select template_id from per_plan where plan_id="
                        + id + ") " + " order by pp.seq";
                rowSet = dao.search(sql);
                while (rowSet.next()) {
                    pointMap.put(rowSet.getString("point_id").toLowerCase(),
                            rowSet.getString("pointname"));
                }

                /**
                 * ”Score,Grade,Avg,Max,Min,XiShu,Order,UMOrd,Body1,Body2,Body3,
                 * Item1，Item2，XXXXX_1”
                 * 分别表示“得分，等级，组平均分,组最高分,组最低分，绩效系数，组内排名，部门排名，
                 * 类别1，类别2，类别3,项目1，项目2，指标XXXXX_1”。为空或没有本属性默认为“得分”。
                 * 对应字段(plan_id用n表示)： “G_n,G_n_Grade, G_n_Avg, G_n_Max, G_n_Min,
                 * G_n_XiShu, G_n_Order, G_n_UMOrd, G_n_B_Id, , G_n_I_Id, ,
                 * G_n_P_Id,”
                 */
                String Menus = (String) abean.get("Menus");
                if (Menus != null && Menus.trim().length() > 0) {
                    String[] temps = Menus.split(",");
                    for (int j = 0; j < temps.length; j++) {
                        String temp = temps[j].trim();
                        if (temp.length() == 0) {
                            continue;
                        }
                        if ("score".equalsIgnoreCase(temp)) {
                            this.setListItem(exprrelatelist, Name + ".得分", "["
                                    + Name + ".得分]");
                        } else if ("Grade".equalsIgnoreCase(temp)) {
                            this.setListItem(exprrelatelist, Name + ".等级", "["
                                    + Name + ".等级]");
                        } else if ("Avg".equalsIgnoreCase(temp)) {
                            this.setListItem(exprrelatelist, Name + ".组平均分",
                                    "[" + Name + ".组平均分]");
                        } else if ("Max".equalsIgnoreCase(temp)) {
                            this.setListItem(exprrelatelist, Name + ".组最高分",
                                    "[" + Name + ".组最高分]");
                        } else if ("Min".equalsIgnoreCase(temp)) {
                            this.setListItem(exprrelatelist, Name + ".组最低分",
                                    "[" + Name + ".组最低分]");
                        } else if ("XiShu".equalsIgnoreCase(temp)) {
                            this.setListItem(exprrelatelist, Name + ".等级系数",
                                    "[" + Name + ".等级系数]");
                        } else if ("Order".equalsIgnoreCase(temp)) {
                            this.setListItem(exprrelatelist, Name + ".组内排名",
                                    "[" + Name + ".组内排名]");
                            this.setListItem(exprrelatelist, Name + ".组内对象数",
                                    "[" + Name + ".组内对象数]");
                        } else if ("UMOrd".equalsIgnoreCase(temp)) {
                            this.setListItem(exprrelatelist, Name + ".部门排名",
                                    "[" + Name + ".部门排名]");
                            this.setListItem(exprrelatelist, Name + "部门人数", "["
                                    + Name + ".部门人数]");
                        } else if (temp.indexOf("Body") != -1) {
                            String bodyid = temp.replaceAll("Body", "");
                            if (bodyMap.get(bodyid) != null) {
                                this.setListItem(
                                        exprrelatelist,
                                        Name + "."
                                                + (String) bodyMap.get(bodyid),
                                        "[" + Name + "."
                                                + (String) bodyMap.get(bodyid)
                                                + "]");
                            }
                        } else if (temp.indexOf("Item") != -1) {
                            String itemid = temp.replaceAll("Item", "");
                            if (itemMap.get(itemid) != null) {
                                this.setListItem(
                                        exprrelatelist,
                                        Name + "."
                                                + (String) itemMap.get(itemid),
                                        "[" + Name + "."
                                                + (String) itemMap.get(itemid)
                                                + "]");
                            }
                        } else {
                            if (pointMap.get(temp.toLowerCase()) != null) {
                                this.setListItem(
                                        exprrelatelist,
                                        Name
                                                + "."
                                                + (String) pointMap.get(temp
                                                .toLowerCase()),
                                        "["
                                                + Name
                                                + "."
                                                + (String) pointMap.get(temp
                                                .toLowerCase()) + "]");
                            }
                        }
                    }
                } else {
                    this.setListItem(exprrelatelist, Name + ".得分", "[" + Name
                            + ".得分]");
                }
            }

            String subsetMenus = loadxml.getRelatePlanSubSetMenuValue();
            if (subsetMenus != null && subsetMenus.trim().length() > 0) {
                String[] temps = subsetMenus.split(",");
                for (int j = 0; j < temps.length; j++) {
                    String temp = temps[j].trim();
                    if (temp.length() == 0) {
                        continue;
                    }
                    FieldItem fielditem = DataDictionary.getFieldItem(temp);
                    if (!"M".equalsIgnoreCase(fielditem.getItemtype())) {
                        this.setListItem(exprrelatelist, fielditem.getItemdesc(),
                                "[" + fielditem.getItemdesc() + "]");
                    }
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return exprrelatelist;
    }

    public void setListItem(ArrayList list, String datavalue, String dataname) {
        CommonData data = new CommonData(dataname, datavalue);
        list.add(data);
    }

    /**
     * 判断考核计划下的指标是否有手工录分
     *
     * @param planid
     * @param template_id
     * @return
     */
    public String getIsHandScore(String handScore, String template_id) {

        String isHandScore = "0";
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            String sql = "select po.point_id,po.pointname,po.pointkind,pi.item_id,po.visible,po.fielditem,po.status,pp.score,po.Pointtype,po.Pointctrl from per_template_item pi,per_template_point pp,per_point po "
                    + " where pi.item_id=pp.item_id and pp.point_id=po.point_id  and template_id='"
                    + template_id + "'  order by pp.seq";
            RowSet rowSet = dao.search(sql); // pi.seq,
            while (rowSet.next()) {
                String point_id = rowSet.getString("point_id");
                String pointkind = rowSet.getString("pointkind");
                String status = rowSet.getString("status");
                String Pointtype = rowSet.getString("Pointtype");
                String Pointctrl = Sql_switcher.readMemo(rowSet, "Pointctrl");
                if ("0".equals(handScore)) {
                    if ("1".equals(pointkind)
                            && (status != null && "1".equals(status))
                            && (Pointtype == null || "0".equals(Pointtype))) {
                        HashMap map = PointCtrlXmlBo
                                .getAttributeValues(Pointctrl);
                        if (map.get("computeRule") == null
                                || map.get("computeRule") != null
                                && "0"
                                .equals((String) map.get("computeRule"))) {
                            isHandScore = "1";
                            LazyDynaBean abean = new LazyDynaBean();
                            abean.set("point_id", rowSet.getString("point_id"));
                            abean.set("pointname",
                                    rowSet.getString("pointname"));
                            abean.set("pointkind",
                                    rowSet.getString("pointkind"));
                            abean.set("item_id", rowSet.getString("item_id"));
                            abean.set(
                                    "status",
                                    rowSet.getString("status") != null ? rowSet
                                            .getString("status") : "");
                            abean.set("score", rowSet.getString("score"));
                            abean.set(
                                    "Pointtype",
                                    rowSet.getString("Pointtype") != null ? rowSet
                                            .getString("Pointtype") : "");
                            abean.set("Pointctrl", Pointctrl);
                            this.handScorePointMap.put(
                                    rowSet.getString("point_id"), abean);
                        }
                    }
                } else if ("1".equals(handScore)) {
                    isHandScore = "1";
                    LazyDynaBean abean = new LazyDynaBean();
                    abean.set("point_id", rowSet.getString("point_id"));
                    abean.set("pointname", rowSet.getString("pointname"));
                    abean.set("pointkind", rowSet.getString("pointkind"));
                    abean.set("item_id", rowSet.getString("item_id"));
                    abean.set(
                            "status",
                            rowSet.getString("status") != null ? rowSet
                                    .getString("status") : "");
                    abean.set("score", rowSet.getString("score"));
                    abean.set(
                            "Pointtype",
                            rowSet.getString("Pointtype") != null ? rowSet
                                    .getString("Pointtype") : "");
                    abean.set("Pointctrl", Pointctrl);
                    this.handScorePointMap.put(rowSet.getString("point_id"),
                            abean);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return isHandScore;
    }

    /**
     * 生成 开放式意见 excel
     *
     * @param whl
     * @param pointResultValue
     * @param order
     * @param computeFashion
     */
    public void writeBodyOpenOpinionExcel(String whl, String order) {
        whl = PubFunc.keyWord_reback(whl);
        try {
            HSSFFont fonttitle = fonts(workbook,
                    ResourceFactory.getProperty("gz.gz_acounting.m.font"), 10);
            HSSFCellStyle style2 = workbook.createCellStyle();
            style2.setFont(fonts(workbook,
                    ResourceFactory.getProperty("gz.gz_acounting.m.font"), 10));
            style2.setBorderBottom(BorderStyle.THIN);
            style2.setBorderLeft(BorderStyle.THIN);
            style2.setBorderRight(BorderStyle.THIN);
            style2.setBorderTop(BorderStyle.THIN);
            style2.setVerticalAlignment(VerticalAlignment.CENTER);
            style2.setAlignment(HorizontalAlignment.LEFT);
            style2.setWrapText(true);
            sheet.setColumnWidth((short) 0, (short) 5000);
            sheet.setColumnWidth((short) 1, (short) 5000);
            sheet.setColumnWidth((short) 2, (short) 5000);
            sheet.setColumnWidth((short) 3, (short) 10000);
            // 表头
            this.totalColNum = 3;
            executeCell(this.rowNum, colIndex, this.rowNum, colIndex,
                    ResourceFactory.getProperty("lable.performance.perObject"),
                    this.centerstyle);
            colIndex++;
            executeCell(this.rowNum, colIndex, this.rowNum, colIndex, "评议人账号",
                    this.centerstyle);
            colIndex++;
            executeCell(this.rowNum, colIndex, this.rowNum, colIndex, "评议人密码",
                    this.centerstyle);
            colIndex++;
            executeCell(this.rowNum, colIndex, this.rowNum, colIndex, "评议内容",
                    this.centerstyle);
            colIndex++;
            this.rowNum++;
            // 表体
            // 获得评议人账号和密码对应的指标
            RecordVo login_vo = ConstantParamter
                    .getConstantVo("SS_LOGIN_USER_PWD");
            String username_field = "username";
            String password_field = "userpassword";
            if (login_vo != null) {
                String login_name = login_vo.getString("str_value");
                int idx = login_name.indexOf(",");
                if (idx != -1) {
                    username_field = login_name.substring(0, idx);
                    password_field = login_name.substring(idx + 1);
                    if (username_field == null || "#".equals(username_field)
                            || username_field.trim().length() == 0) {
                        username_field = "username";
                    }
                    if (password_field == null || "#".equals(password_field)
                            || password_field.trim().length() == 0) {
                        password_field = "userpassword";
                    }
                }
            }
            // 获得考核对象
            // select id,a0000,b0110,e0122,e01a1,object_id,a0101 from per_object
            // where plan_id="+this.planid;
            RowSet rowSet = null;
            ContentDAO dao = new ContentDAO(this.conn);
            String sql = "select id,a0000,b0110,e0122,e01a1,object_id,a0101 from per_object where plan_id="
                    + this.planid;
            if (whl != null && whl.length() > 0) {
                sql += whl;
            }
            if (order != null && order.length() > 0) {
                sql += order;
            } else {
                sql += " order by a0000";
            }
            rowSet = dao.search(sql);
            String object_ids = "";
            HashMap objectmap = new HashMap();
            ArrayList listall = new ArrayList();
            while (rowSet.next()) {
                //
                String object_id = rowSet.getString("object_id");
                object_ids += object_id + ",";
                objectmap.put(object_id, rowSet.getString("a0101"));
                listall.add(object_id);
            }
            if (object_ids.length() > 0) {
                object_ids = object_ids.substring(0, object_ids.length() - 1);
                sql = "select * from usra01 ";
                rowSet = dao.search(sql);
                HashMap usernamemap = new HashMap();
                HashMap passwordmap = new HashMap();
                while (rowSet.next()) {
                    //
                    String a0100 = rowSet.getString("a0100");
                    String username = rowSet.getString(username_field);
                    String password = rowSet.getString(password_field);
                    usernamemap.put(a0100, username);
                    passwordmap.put(a0100, password);
                }
                // 每个对象对应的考核主体
                sql = "select * from per_mainbody  where plan_id="
                        + this.planid + " and description is  not  null ";
                rowSet = dao.search(sql);
                HashMap mainbodymap = new HashMap();
                HashMap descriptionmap = new HashMap();
                HashMap descriptionmap2 = new HashMap();
                String mainbodys = "";
                while (rowSet.next()) {
                    //
                    String object_id = rowSet.getString("object_id");
                    if (Sql_switcher.readMemo(rowSet, "description").trim()
                            .length() > 0) {
                        if (object_ids.indexOf(object_id) != -1) {
                            String mainbody_id = rowSet
                                    .getString("mainbody_id");
                            descriptionmap
                                    .put(rowSet.getString("object_id")
                                            + mainbody_id, Sql_switcher
                                            .readMemo(rowSet, "description"));
                            descriptionmap2.put(rowSet.getString("object_id"),
                                    Sql_switcher
                                            .readMemo(rowSet, "description"));
                            if (mainbodymap != null
                                    && mainbodymap.get(object_id) != null) {
                                mainbodys = (String) mainbodymap.get(object_id);
                                mainbodys = mainbodys + "," + mainbody_id;
                                mainbodymap.put(object_id, mainbodys);
                            } else {
                                mainbodymap.put(object_id, mainbody_id);
                            }
                        }
                    }

                }
                ArrayList list = new ArrayList();
                for (int d = 0; d < listall.size(); d++) {
                    String objectid = (String) listall.get(d);
                    if (descriptionmap2 != null
                            && descriptionmap2.get(objectid) != null) {
                        list.add(objectid);
                    }
                }
                int rol = 0;
                for (int d = 0; d < list.size(); d++) {
                    colIndex = 0;
                    String object_id = (String) list.get(d);
                    String a0101 = "";
                    if (objectmap.get(object_id) != null) {
                        a0101 = (String) objectmap.get(object_id);
                    }
                    mainbodys = "";
                    if (mainbodymap.get(object_id) != null) {
                        mainbodys = (String) mainbodymap.get(object_id);
                    }
                    int comby = 0;
                    String temps[] = mainbodys.split(",");
                    comby = temps.length;
                    rol = rol + comby;
                    if (rol >= 1) {
                        rol = rol - 1;
                    }
                    executeCell(this.rowNum + rol - comby + 1, colIndex,
                            this.rowNum + rol, colIndex, a0101, style2);
                    colIndex++;
                    short coltemp = colIndex;
                    for (int i = 0; i < temps.length; i++) {
                        coltemp = colIndex;
                        String usrname = "";
                        if (usernamemap.get(temps[i]) != null) {
                            usrname = (String) usernamemap.get(temps[i]);
                        }
                        HSSFRow row = sheet.getRow(this.rowNum + rol - comby
                                + 1 + i);
                        if (row == null) {
                            row = sheet.createRow(this.rowNum + rol - comby + 1
                                    + i);
                        }
                        HSSFCell cell = row.createCell(coltemp);
                        cell.setCellStyle(style2);
                        cell.setCellValue(usrname);
                        coltemp++;
                        usrname = "";
                        if (passwordmap.get(temps[i]) != null) {
                            usrname = (String) passwordmap.get(temps[i]);
                        }
                        row = sheet.getRow(this.rowNum + rol - comby + 1 + i);
                        if (row == null) {
                            row = sheet.createRow(this.rowNum + rol - comby + 1
                                    + i);
                        }
                        cell = row.createCell(coltemp);
                        cell.setCellStyle(style2);
                        cell.setCellValue(usrname);
                        coltemp++;
                        usrname = "";
                        if (descriptionmap.get(object_id + temps[i]) != null) {
                            usrname = (String) descriptionmap.get(object_id
                                    + temps[i]);
                        }
                        // executeCell(this.rowNum+rol-comby+1+i, coltemp,
                        // this.rowNum+rol-comby+1+i, coltemp, usrname,
                        // this.centerstyle);
                        row = sheet.getRow(this.rowNum + rol - comby + 1 + i);
                        if (row == null) {
                            row = sheet.createRow(this.rowNum + rol - comby + 1
                                    + i);
                        }
                        cell = row.createCell(coltemp);
                        cell.setCellStyle(style2);
                        cell.setCellValue(usrname);
                        coltemp++;
                    }

                    this.rowNum++;
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public ArrayList getDataList() {
        return dataList;
    }

    public String getPriv_where() {
        return priv_where;
    }

    public void setPriv_where(String priv_where) {
        this.priv_where = priv_where;
    }

    public ArrayList getAccountingHtmlForObject(String object_id,
                                                String rownum, String method, String nullpoint, String where,
                                                String showBenbu, String bodyid, String gather_type) {
        String html = "";
        ArrayList list = new ArrayList();
        StringBuffer headhtml = new StringBuffer();
        HashMap itemToPointMap = this.getItemToPointMap();// 指标对应标度
        ArrayList pointlist = this.getPointList();// 指标
        ArrayList bodyList = this.getBodyList();
        ArrayList perpointlist = this.getPerGradeTemplateList(this.template_id);// 标准标度
        KhTemplateBo bo = new KhTemplateBo(this.conn, "0");

        String sql = "select * from PER_POINTVOTE_" + this.planid
                + " where 1=1 ";
        if (where != null && where.trim().length() != 0) {
            sql = sql + " " + where;
        }
        sql += " order by a0000";
        String a0100 = "";// 获取考核对象 第一次默认为安a0000顺序的第一个人
        String a01001 = "";// 获取考核对象 第一次默认为安a0000顺序的第一个人
        ContentDAO dao = new ContentDAO(this.conn);
        HashMap pointToGrade = new HashMap();
        LazyDynaBean beanforGrade = null;
        String name = "";
        String nexta0100 = "";
        String upa0100 = "";
        String showComment = "";
        boolean flag = false;
        try {
            HashMap mt = this.getGradeForBodyToPoint(object_id, rownum, bodyid,
                    perpointlist, pointlist, true, where);
            pointToGrade = (HashMap) mt.get("pointToGrade");
            a0100 = (String) mt.get("a0100");
            if (a0100 == null || a0100.trim().length() == 0) {

            } else {
                a01001 = (String) mt.get("a01001");
                nexta0100 = (String) mt.get("nexta0100");
                upa0100 = (String) mt.get("upa0100");
                name = (String) mt.get("name");
                // 获取那些考核主体对该对象的那些指标有权限 机读默认为打分即为有权限
                HashMap pointPrivMap = this.getPrivForPoint(a0100, bodyid);
                // 计算占比
                // 获取本部平均
                HashMap benbu = this.getBenBu(a0100, pointlist, perpointlist);
                HashMap coment = new HashMap();
                ArrayList comment = new ArrayList();
                showComment = (String) this.planParamSet.get("WholeEval");// 总体评价

                if (showComment != null && "true".equalsIgnoreCase(showComment)) {
                    comment = this.getComment(a0100, planid, perpointlist,
                            bodyid, bodyList, nullpoint, showBenbu);
                }
                HashMap scaleMap = new HashMap();
                LazyDynaBean scalebean = null;
                scaleMap = this.computeScale(object_id, bodyid, pointlist,
                        perpointlist, pointPrivMap, pointToGrade, nullpoint,
                        bodyList, gather_type);
                HashMap tt1 = new HashMap();
                HashMap t2 = new HashMap();
                if ("all1".equalsIgnoreCase(bodyid)) {
                    String tt2 = a01001.split("`")[1];
                    HashMap al = this.getGradeForBodyToPoint(a0100, tt2, "all",
                            perpointlist, pointlist, true, where);
                    tt1 = (HashMap) al.get("pointToGrade");
                    HashMap tt = this.getPrivForPoint(a0100, "all");
                    t2 = this.computeScale(a0100, "all", pointlist,
                            perpointlist, tt, tt1, nullpoint, bodyList,
                            gather_type);
                }
                HashMap ponitMain = this.getObjectForPriv(a0100, bodyid,
                        bodyList, planid);
                html = bo.getEvlForPointHtml(this.template_id, pointToGrade,
                        scaleMap, method, nullpoint, showBenbu, benbu, bodyid,
                        bodyList, t2, tt1, showComment, comment, ponitMain);
            }
            list.add(html);
            list.add(a0100);// 当前对象id
            list.add(a01001);// 当前对象id
            list.add(name);// 对象姓名
            list.add(upa0100);
            list.add(nexta0100);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    // 计算总体评价
    public ArrayList getComment(String a0100, String planid,
                                ArrayList perpointlist, String bodyid, ArrayList bodylist,
                                String showaband, String showbenbu) {
        ArrayList list = new ArrayList();
        StringBuffer sql = new StringBuffer();
        String KeepDecimal = (String) planParamSet.get("KeepDecimal");
        RowSet rowSet = null;
        ContentDAO dao = new ContentDAO(this.conn);
        HashMap bodyToDsec = new HashMap();
        HashMap bodyToScale = new HashMap();
        HashMap descToCont = null;
        try { // 主体--> 等等级-->类别中主体人数
            HashMap map = this.getMainbodyComment(a0100, planid, perpointlist,
                    bodyid, bodylist, showaband);
            bodyToDsec = (HashMap) map.get("point");
            bodyToScale = (HashMap) map.get("scale");
            if (bodyid != null && "all1".equalsIgnoreCase(bodyid)) {
                map = this.getMainbodyComment(a0100, planid, perpointlist,
                        "all", bodylist, showaband);
                HashMap ponint = (HashMap) map.get("point");
                HashMap tt = (HashMap) ponint.get("all");
                HashMap scale = (HashMap) map.get("scale");
                HashMap tt1 = (HashMap) scale.get("all");
                bodyToDsec.put("total", tt);
                bodyToScale.put("total", tt1);
            }
            // 查看本部平均
            String GradeClass = (String) planParamSet.get("GradeClass");
            HashMap perToDes = this.getPerToDeree(perpointlist, GradeClass);
            HashMap benbu = new HashMap();
            if (showbenbu != null && "1".equalsIgnoreCase(showbenbu)) {
                sql.setLength(0);
                sql.append("select  po.object_id,");
                sql.append(Sql_switcher.isnull("pd.id", "0")
                        + " itemname,count(pd.id) acount from ");
                sql.append(" per_object po,per_mainbody pm ,per_degreedesc pd ");
                sql.append(" where po.plan_id=pm.plan_id and pm.object_id=po.object_id and pm.whole_grade_id=pd.id and pm.plan_id=' ");
                sql.append(planid + "' and po.object_id='");
                sql.append(a0100 + "' ");
                if (Sql_switcher.searchDbServer() == Constant.ORACEL
                        || Sql_switcher.searchDbServer() == Constant.DB2) {
                    sql.append(" group by rollup(po.object_id ,");
                    sql.append(" pd.id )  having  po.object_id is not null");
                } else {
                    sql.append(" group by po.object_id ,");
                    sql.append(" pd.id with rollup  having  po.object_id is not null");
                }

                rowSet = dao.search(sql.toString());
                // 统计名称对应的评价数量
                HashMap benbupoint = new HashMap();
                while (rowSet.next()) {
                    String des = rowSet.getString("itemname");
                    String value = rowSet.getString("acount");
                    benbupoint.put(des, value);
                }
                sql.setLength(0);// 同级考核对象分类
                sql.append("select body_id from per_object where object_id='"
                        + a0100 + "' and plan_id='" + planid + "'");
                rowSet = dao.search(sql.toString());
                String body_id = "";
                if (rowSet.next()) {
                    body_id = rowSet.getString(1) == null ? "null" : rowSet
                            .getString(1);
                }
                sql.setLength(0);
                sql.append("select po.body_id,"
                        + Sql_switcher.isnull("pd.id", "0")
                        + " itemdesc,count(pd.id) acount ");
                sql.append(" from per_object po ,per_mainbody pm,per_degreedesc pd where po.object_id=pm.object_id and po.plan_id=pm.plan_id and pm.whole_grade_id=pd.id ");
                sql.append("and po.plan_id='");
                sql.append(planid);
                sql.append("' and po.body_id");
                if ("null".equalsIgnoreCase(body_id)) {
                    sql.append(" is null");
                } else {
                    sql.append("='");
                    sql.append(body_id);
                    sql.append("'");
                }
                if (Sql_switcher.searchDbServer() == Constant.ORACEL
                        || Sql_switcher.searchDbServer() == Constant.DB2) {
                    sql.append(" group by rollup(po.body_id,pd.id) ");
                } else {
                    sql.append(" group by po.body_id,pd.id with rollup ");
                }
                if ("null".equalsIgnoreCase(body_id)) {

                } else {
                    sql.append("having po.body_id is not null");
                }

                HashMap bodypoint = new HashMap();
                rowSet = dao.search(sql.toString());
                while (rowSet.next()) {
                    String des = rowSet.getString("itemdesc");
                    if ("0".equalsIgnoreCase(des)) {
                        des = "total";
                    }
                    String value = rowSet.getString("acount");
                    bodypoint.put(des, value);
                }

                for (int i = 0; i < perpointlist.size(); i++) {
                    LazyDynaBean tbean = (LazyDynaBean) perpointlist.get(i);
                    String desc = (String) tbean.get("grade_template_id");
                    String id = (String) perToDes.get(desc);
                    String value1 = benbupoint.get(id) == null ? "0"
                            : (String) benbupoint.get(id);
                    String value2 = bodypoint.get("total") == null ? "0"
                            : (String) bodypoint.get("total");
                    int a1 = Integer.parseInt(value1);
                    int a2 = Integer.parseInt(value2);
                    double tt = 0.000;
                    if (a2 != 0) {
                        tt = (Double.parseDouble(value1) / a2) * 100;
                    }
                    benbu.put(
                            desc,
                            PubFunc.round(String.valueOf(tt),
                                    Integer.parseInt(KeepDecimal)));
                }
            }
            list.add(bodyToDsec);
            list.add(bodyToScale);
            list.add(benbu);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return list;
    }

    /**
     * 获得标准标度对应总体评价的顺序
     */
    public HashMap getPerToDeree(ArrayList perpointlist, String GradeClass) {
        HashMap map = new HashMap();
        ContentDAO dao = new ContentDAO(this.conn);
        RowSet rowSet = null;
        StringBuffer sql = new StringBuffer();
        sql.append(" select pds.id from per_degreedesc pds where pds.degree_id=");
        sql.append(GradeClass);
        sql.append(" order by id asc");
        try {
            HashMap tt = new HashMap();
            rowSet = dao.search(sql.toString());
            int i = 0;
            while (rowSet.next()) {
                tt.put(String.valueOf(i), rowSet.getString(1));
                i++;
            }
            for (int k = 0; k < perpointlist.size(); k++) {
                LazyDynaBean tbean = (LazyDynaBean) perpointlist.get(k);
                String perid = (String) tbean.get("grade_template_id");
                String tem = (String) tt.get(String.valueOf(k));
                map.put(perid, tem);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return map;
    }

    public HashMap getMainbodyComment(String a0100, String planid,
                                      ArrayList perpointlist, String bodyid, ArrayList bodylist,
                                      String showaband) {
        HashMap map = new HashMap();
        String GradeClass = (String) planParamSet.get("GradeClass"); // 等级分类ID
        StringBuffer sql = new StringBuffer();
        sql.append("select  po.object_id,");
        if ("all".equalsIgnoreCase(bodyid)) {

        } else {
            sql.append("pm.body_id,");
        }
        sql.append(Sql_switcher.isnull("pd.id", "0")
                + "itemname,count(pd.id) acount from ");
        sql.append(" per_object po,per_mainbody pm ,per_degreedesc pd ");
        sql.append(" where po.plan_id=pm.plan_id and pm.object_id=po.object_id and pm.whole_grade_id=pd.id and pm.plan_id=' ");
        sql.append(planid + "' and po.object_id='");
        sql.append(a0100 + "' ");
        if ("Accounting".equals(this.getAccountingFlag())) { // /当getAccountingFlag（）=accounting时，为票数及占比反馈表
            sql.append(" and status=2 ");
        }
        if (bodyid != null && !"all1".equalsIgnoreCase(bodyid)
                && !"all".equalsIgnoreCase(bodyid)) {
            sql.append(" and  pm.body_id='");
            sql.append(bodyid + "' ");
        }

        if (Sql_switcher.searchDbServer() == Constant.ORACEL
                || Sql_switcher.searchDbServer() == Constant.DB2) {
            sql.append(" group by rollup(po.object_id ,");
            if ("all".equalsIgnoreCase(bodyid)) {

            } else {
                sql.append(" pm.body_id,");
            }
            sql.append("  pd.id)");
        } else {
            sql.append(" group by po.object_id ,");
            if ("all".equalsIgnoreCase(bodyid)) {

            } else {
                sql.append(" pm.body_id,");
            }
            sql.append(" pd.id with rollup");
        }

        sql.append("    having  po.object_id is not null ");
        if ("all".equalsIgnoreCase(bodyid)) {

        } else {
            sql.append("and pm.body_id is not null");
        }
        RowSet rowSet = null;
        ContentDAO dao = new ContentDAO(this.conn);
        HashMap bodyToDsec = new HashMap();
        HashMap descToCont = null;
        try { // 主体--> 等等级-->类别中主体人数
            rowSet = dao.search(sql.toString());
            // 统计名称对应的评价数量
            while (rowSet.next()) {
                String body_id = "";
                if ("all".equalsIgnoreCase(bodyid)) {
                    body_id = "all";
                } else {
                    body_id = rowSet.getString("body_id");
                }
                String id = rowSet.getString("itemname");
                String cont = rowSet.getString("acount");
                if (bodyToDsec.get(body_id) != null) {
                    descToCont = (HashMap) bodyToDsec.get(body_id);
                    if ("0".equalsIgnoreCase(id)) {
                        descToCont.put("total", cont);
                    } else {
                        descToCont.put(id, cont);
                    }
                    bodyToDsec.put(body_id, descToCont);
                } else {
                    descToCont = new HashMap();
                    if ("0".equalsIgnoreCase(id)) {
                        descToCont.put("total", cont);
                    } else {
                        descToCont.put(id, cont);
                    }
                    bodyToDsec.put(body_id, descToCont);
                }
            }
            HashMap bodyToScale = new HashMap();
            HashMap descToScale = null;
            HashMap perToDes = this.getPerToDeree(perpointlist, GradeClass);
            HashMap bodyToPriv = this.getObjectForPriv(a0100, bodyid, bodylist,
                    planid);
            String KeepDecimal = (String) planParamSet.get("KeepDecimal");// 计算规则保留小数

            for (int f = 0; f < bodylist.size(); f++) {
                CommonData cd = (CommonData) bodylist.get(f);
                String bodyid1 = cd.getDataValue();
                if ("all1".equalsIgnoreCase(bodyid)) {
                    if ("all".equalsIgnoreCase(bodyid1)
                            || "all1".equalsIgnoreCase(bodyid1)) {
                        continue;
                    }
                } else {
                    if (bodyid1.equalsIgnoreCase(bodyid)) {

                    } else {
                        continue;
                    }
                }
                String privtotal = bodyToPriv.get(bodyid1) == null ? "0"
                        : (String) bodyToPriv.get(bodyid1);
                String totalForBodyid = bodyToPriv.get(bodyid1) == null ? "0"
                        : (String) bodyToPriv.get(bodyid1);// 考核主体个数
                int privtotal1 = Integer.parseInt(privtotal);
                if (bodyToDsec.get(bodyid1) != null) {
                    descToCont = (HashMap) bodyToDsec.get(bodyid1);
                    descToScale = new HashMap();
                    for (int i = 0; i < perpointlist.size(); i++) {
                        LazyDynaBean tbean = (LazyDynaBean) perpointlist.get(i);
                        String desc = (String) tbean.get("grade_template_id");
                        String id = (String) perToDes.get(desc);
                        double tt = 0.000;
                        String total = descToCont.get("total") == null ? "0"
                                : (String) descToCont.get("total");
                        int cont = Integer.parseInt(total);
                        if (descToCont.get(id) != null) {
                            String value = descToCont.get(id) == null ? "0"
                                    : (String) descToCont.get(id);
                            int t = Integer.parseInt(value);
                            if (cont != 0 && privtotal1 != 0 && showaband != null
                                    && "1".equalsIgnoreCase(showaband)) {
                                tt = (Double.parseDouble(value) / privtotal1) * 100;
                            } else if (cont != 0) {
                                tt = (Double.parseDouble(value) / cont) * 100;
                            }
                            descToCont.put(desc, value);
                            descToScale.put(
                                    desc,
                                    PubFunc.round(String.valueOf(tt),
                                            Integer.parseInt(KeepDecimal)));
                        } else {
                            descToCont.put(desc, String.valueOf(0));
                            descToScale.put(
                                    desc,
                                    PubFunc.round(String.valueOf(tt),
                                            Integer.parseInt(KeepDecimal)));
                        }
                    }
                    if (showaband != null && "1".equalsIgnoreCase(showaband)) {
                        String total = descToCont.get("total") == null ? "0"
                                : (String) descToCont.get("total");
                        int total1 = Integer.parseInt(total);
                        int aband = privtotal1 - total1;
                        descToCont.put("aband", String.valueOf(aband));
                        double tt = 0.000;
                        tt = (Double.parseDouble(String.valueOf(aband)) / privtotal1) * 100;
                        descToScale.put(
                                "aband",
                                PubFunc.round(String.valueOf(tt),
                                        Integer.parseInt(KeepDecimal)));
                        tt = (Double.parseDouble(String.valueOf(total1)) / privtotal1) * 100;
                        descToScale.put(
                                "total",
                                PubFunc.round(String.valueOf(tt),
                                        Integer.parseInt(KeepDecimal)));

                    }
                    bodyToScale.put(bodyid1, descToScale);
                } else {
                    descToScale = new HashMap();
                    descToCont = new HashMap();
                    for (int i = 0; i < perpointlist.size(); i++) {
                        LazyDynaBean tbean = (LazyDynaBean) perpointlist.get(i);
                        String desc = (String) tbean.get("grade_template_id");
                        String id = (String) perToDes.get(desc);
                        double tt = 0.000;
                        descToCont.put(desc, String.valueOf(0));
                        descToScale.put(
                                desc,
                                PubFunc.round(String.valueOf(tt),
                                        Integer.parseInt(KeepDecimal)));
                    }
                    if (showaband != null && "1".equalsIgnoreCase(showaband)) {
                        double tt = 0.000;
                        descToCont.put("aband", String.valueOf(privtotal));
                        descToScale.put("aband", PubFunc.round(
                                String.valueOf(100.0000000000000),
                                Integer.parseInt(KeepDecimal)));
                        descToCont.put("total", String.valueOf(0));
                        descToScale.put("total", PubFunc.round(
                                String.valueOf(0.000000000000000),
                                Integer.parseInt(KeepDecimal)));

                    }
                    bodyToScale.put(bodyid1, descToScale);
                }
                bodyToDsec.put(bodyid1, descToCont);
            }
            map.put("point", bodyToDsec);
            map.put("scale", bodyToScale);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return map;
    }

    /**
     * 得到考核对象对应的考核主体 或者可以得到不同主题类别下的主体个数 传参有关
     */
    public HashMap getObjectForPriv(String a0100, String bodyid,
                                    ArrayList bodylist, String planid) {
        HashMap map = new HashMap();
        StringBuffer sql = new StringBuffer();
        sql.append("select count(pm.mainbody_id) cont ");
        if (!"all".equalsIgnoreCase(bodyid)) {
            sql.append(",pm.body_id ");
        } else {

        }
        sql.append(" from per_mainbody pm  where pm.object_id='");
        sql.append(a0100);
        sql.append("' and plan_id='");
        sql.append(planid);
        sql.append("' ");
        if (bodyid != null && !"all".equalsIgnoreCase(bodyid)
                && !"all1".equalsIgnoreCase(bodyid)) {
            sql.append(" and  pm.body_id='");
            sql.append(bodyid);
            sql.append("' ");
        }
        sql.append(" group by  ");
        if ("all".equalsIgnoreCase(bodyid)) {
            sql.append(" pm.object_id ");
        } else {
            sql.append(" pm.object_id ,pm.body_id ");
        }
        RowSet rowSet = null;
        ContentDAO dao = new ContentDAO(this.conn);
        try {
            rowSet = dao.search(sql.toString());
            while (rowSet.next()) {
                if (bodyid != null && !"all".equalsIgnoreCase(bodyid)) {
                    String bd = rowSet.getString("body_id");
                    String value = rowSet.getString("cont") == null ? "0"
                            : rowSet.getString("cont");
                    map.put(bd, value);
                } else {
                    String value = rowSet.getString("cont") == null ? "0"
                            : rowSet.getString("cont");
                    map.put("all", value);
                }
            }
            if (bodyid != null && "all1".equalsIgnoreCase(bodyid)) {
                for (int f = 0; f < bodylist.size(); f++) {
                    CommonData cd = (CommonData) bodylist.get(f);
                    String bodyid1 = cd.getDataValue();
                    if ("all".equalsIgnoreCase(bodyid1)
                            || "all1".equalsIgnoreCase(bodyid1)) {
                        continue;
                    }
                    if (map.get(bodyid1) != null) {

                    } else {
                        map.put(bodyid1, "0");
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        // 统计名称对应的评价数
        return map;
    }

    /**
     * 计算占比
     */

    HashMap computeScale(String object_id, String body_id, ArrayList pointlist,
                         ArrayList perpointlist, HashMap pointPrivMap, HashMap pointToGrade,
                         String nullpoint, ArrayList bodyList, String gather_type) {
        HashMap scale = new HashMap();
        LazyDynaBean beanforGrade = null;//
        HashMap bodyToGrade = null;
        LazyDynaBean scalebean = null;
        HashMap scalebody = null;
        HashMap bodyMap = null;
        String KeepDecimal = (String) planParamSet.get("KeepDecimal");
        for (int k = 0; k < pointlist.size(); k++) {
            LazyDynaBean bean = (LazyDynaBean) pointlist.get(k);
            String point = "";
            point = (String) bean.get("point_id");
            beanforGrade = new LazyDynaBean();
            if (body_id != null && "all".equalsIgnoreCase(body_id)) {// 所有考核主体
                beanforGrade = pointToGrade.get(point) == null ? new LazyDynaBean()
                        : (LazyDynaBean) pointToGrade.get(point);
                HashMap privForBody = (HashMap) pointPrivMap.get(point) == null ? new HashMap()
                        : (HashMap) pointPrivMap.get(point);
                int count = Integer
                        .parseInt(privForBody.get("all") == null ? "0"
                                : (String) privForBody.get("all"));
                int total1 = Integer
                        .parseInt(beanforGrade.get("total") == null ? "0"
                                : (String) beanforGrade.get("total"));
                scalebean = new LazyDynaBean();
                if (beanforGrade.get("total") == null) {
                    beanforGrade.set("total", "0");
                }
                for (int i = 0; i < perpointlist.size(); i++) {
                    LazyDynaBean tbean = (LazyDynaBean) perpointlist.get(i);
                    String perPoint = (String) tbean.get("grade_template_id");
                    String value = (String) beanforGrade.get(perPoint) == null ? "0"
                            : (String) beanforGrade.get(perPoint);
                    double tt = 0.000;
                    if (nullpoint != null && nullpoint.trim().length() > 0
                            && "1".equalsIgnoreCase(nullpoint)) {
                        if (count != 0) {
                            tt = (Double.parseDouble(value) / count) * 100;
                        }
                    } else {
                        if (total1 != 0) {
                            tt = (Double.parseDouble(value) / total1) * 100;
                        }
                    }
                    scalebean.set(
                            perPoint,
                            PubFunc.round(String.valueOf(tt),
                                    Integer.parseInt(KeepDecimal)));
                    beanforGrade.set(perPoint, value);
                }
                double tt1 = 0.000;
                if (count == 0) {// 如果分母是0，就让其显示0.0%
                    tt1 = Double.parseDouble(PubFunc.round(String.valueOf(tt1),
                            Integer.parseInt(KeepDecimal)));
                } else {
                    tt1 = (Double.parseDouble(String.valueOf(total1)) / count) * 100;
                }
                scalebean.set("total", PubFunc.round(String.valueOf(tt1), 3));
                if (nullpoint != null && nullpoint.trim().length() > 0
                        && "1".equalsIgnoreCase(nullpoint)) {
                    String total = beanforGrade.get("total") == null ? "0"
                            : (String) beanforGrade.get("total");
                    int aband = count - Integer.parseInt(total);
                    beanforGrade.set("aband", String.valueOf(aband));
                    double tt = 0.000;
                    if (count != 0) {
                        tt = (Double.parseDouble(String.valueOf(aband)) / count) * 100;
                    }
                    scalebean.set(
                            "aband",
                            PubFunc.round(String.valueOf(tt),
                                    Integer.parseInt(KeepDecimal)));
                }
                scale.put(point, scalebean);
                pointToGrade.put(point, beanforGrade);
            } else {
                scalebody = new HashMap();
                if (pointToGrade.get(point) != null) {
                    bodyMap = pointToGrade.get(point) == null ? new HashMap()
                            : (HashMap) pointToGrade.get(point);// 主题类别下标准标度 票数
                    HashMap bodynum = pointPrivMap.get(point) == null ? new HashMap()
                            : (HashMap) pointPrivMap.get(point);// 考核主体中主体个数

                    for (int f = 0; f < bodyList.size(); f++) {
                        CommonData cd = (CommonData) bodyList.get(f);
                        String bodyid = cd.getDataValue(); // 考核主体类型

                        if ("all1".equalsIgnoreCase(bodyid)
                                || "all".equalsIgnoreCase(bodyid)) {// 按主体分类统计
                            continue;
                        } else {
                            if ("all1".equalsIgnoreCase(body_id)) {

                            } else {
                                if (bodyid.equalsIgnoreCase(bodyid)) {// 按某一主体统计

                                } else {
                                    continue;
                                }
                            }
                        }

                        String bodn = bodynum.get(bodyid) == null ? "0"
                                : (String) bodynum.get(bodyid);// 考核主体个数
                        int total1 = bodn == null ? 0 : Integer.parseInt(bodn);
                        LazyDynaBean saclebean = new LazyDynaBean();
                        if (bodyMap.get(bodyid) != null) {
                            LazyDynaBean bean1 = bodyMap.get(bodyid) == null ? new LazyDynaBean()
                                    : (LazyDynaBean) bodyMap.get(bodyid);// 某个主题类别对应
                            // 标度值
                            String totalt = bean1.get("total") == null ? "0"
                                    : (String) bean1.get("total");
                            int count = Integer.parseInt(totalt);//
                            if (bean1.get("total") == null) {
                                bean1.set("total", "0");
                            }
                            for (int mm = 0; mm < perpointlist.size(); mm++) {
                                LazyDynaBean tbean = (LazyDynaBean) perpointlist
                                        .get(mm);
                                String perPoint = (String) tbean
                                        .get("grade_template_id");
                                String value = "";
                                double tt = 0.000;
                                if (bean1.get(perPoint) != null) {
                                    value = (String) bean1.get(perPoint);
                                    if (nullpoint != null
                                            && nullpoint.trim().length() > 0
                                            && "1".equalsIgnoreCase(nullpoint)) {
                                        if (total1 != 0) {
                                            tt = (Double.parseDouble(value) / total1) * 100;
                                        }
                                    } else {
                                        if (count != 0) {
                                            tt = (Double.parseDouble(value) / count) * 100;
                                        }
                                    }
                                    String ttt = PubFunc.round(
                                            String.valueOf(tt),
                                            Integer.parseInt(KeepDecimal));
                                    saclebean.set(perPoint, ttt);

                                } else {
                                    value = "0";
                                    bean1.set(perPoint, value);
                                    saclebean.set(perPoint, PubFunc.round(
                                            String.valueOf(tt),
                                            Integer.parseInt(KeepDecimal)));
                                }
                            }
                            if (nullpoint != null
                                    && nullpoint.trim().length() > 0
                                    && "1".equalsIgnoreCase(nullpoint)) {// 弃权即
                                String total = bean1.get("total") == null ? "0"
                                        : (String) bean1.get("total");
                                int aband = total1 - Integer.parseInt(total);
                                bean1.set("aband", String.valueOf(aband));
                                double tt = 0.000;
                                if (total1 != 0) {
                                    tt = (Double.parseDouble(String
                                            .valueOf(aband)) / total1) * 100;
                                }
                                saclebean.set("aband", PubFunc.round(
                                        String.valueOf(tt),
                                        Integer.parseInt(KeepDecimal)));
                                if (total1 != 0) {
                                    tt = (Double.parseDouble(String
                                            .valueOf(total)) / total1) * 100;
                                }

                                saclebean.set("total", PubFunc.round(
                                        String.valueOf(tt),
                                        Integer.parseInt(KeepDecimal)));
                            }
                            bodyMap.put(bodyid, bean1);
                            scalebody.put(bodyid, saclebean);
                        } else {
                            LazyDynaBean bean1 = new LazyDynaBean();
                            for (int mm = 0; mm < perpointlist.size(); mm++) {
                                LazyDynaBean tbean = (LazyDynaBean) perpointlist
                                        .get(mm);
                                String perPoint = (String) tbean
                                        .get("grade_template_id");
                                double tt = 0.000;

                                bean1.set(perPoint, "0");
                                saclebean.set(perPoint, PubFunc.round(
                                        String.valueOf(tt),
                                        Integer.parseInt(KeepDecimal)));
                            }
                            if (nullpoint != null
                                    && nullpoint.trim().length() > 0
                                    && "1".equalsIgnoreCase(nullpoint)) {// 弃权即
                                double tt = 0.000;
                                bean1.set("aband", String.valueOf(0));
                                saclebean.set("aband", PubFunc.round(
                                        String.valueOf(tt),
                                        Integer.parseInt(KeepDecimal)));
                                bean1.set("total", "0");
                                saclebean.set("total", PubFunc.round(
                                        String.valueOf(tt),
                                        Integer.parseInt(KeepDecimal)));
                            }
                            bodyMap.put(bodyid, bean1);
                            scalebody.put(bodyid, saclebean);
                        }
                    }

                } else {
                    bodyMap = new HashMap();
                    LazyDynaBean saclebean = new LazyDynaBean();
                    LazyDynaBean bean1 = new LazyDynaBean();
                    for (int f = 0; f < bodyList.size(); f++) {
                        CommonData cd = (CommonData) bodyList.get(f);
                        String bodyid = cd.getDataValue();
                        if ("all1".equalsIgnoreCase(body_id)) {// 按主体分类统计

                        } else {
                            if (bodyid.equalsIgnoreCase(bodyid)) {// 按某一主体统计

                            } else {
                                continue;
                            }
                        }
                        for (int mm = 0; mm < perpointlist.size(); mm++) {
                            LazyDynaBean tbean = (LazyDynaBean) perpointlist
                                    .get(mm);
                            String perPoint = (String) tbean
                                    .get("grade_template_id");
                            double tt = 0.000;
                            bean1.set(perPoint, "0");
                            saclebean.set(
                                    perPoint,
                                    PubFunc.round(String.valueOf(tt),
                                            Integer.parseInt(KeepDecimal)));
                        }
                        if (nullpoint != null && nullpoint.trim().length() > 0
                                && "1".equalsIgnoreCase(nullpoint)) {// 弃权即
                            double tt = 0.000;
                            bean1.set("aband", String.valueOf(0));
                            bean1.set("total", "0");
                            saclebean.set(
                                    "aband",
                                    PubFunc.round(String.valueOf(tt),
                                            Integer.parseInt(KeepDecimal)));
                            saclebean.set(
                                    "total",
                                    PubFunc.round(String.valueOf(tt),
                                            Integer.parseInt(KeepDecimal)));
                        }
                        scalebody.put(bodyid, saclebean);
                        bodyMap.put(bodyid, bean1);
                    }

                }
                pointToGrade.put(point, bodyMap);
                scale.put(point, scalebody);
            }

        }
        return scale;
    }

    /**
     * 获取某考核对象每个考核指标有多少有权限的考核主体
     */
    public HashMap getPrivForPoint(String a0100, String bodyid) {
        HashMap map = new HashMap();
        ArrayList pointlist = this.getPointList();
        StringBuffer sql = new StringBuffer();
        sql.append("select  pm.body_id as bodyid,");
        ArrayList bodylist = this.getBodyList();
        for (int i = 0; i < pointlist.size(); i++) {
            sql.append(" pp.c_");
            LazyDynaBean bean = (LazyDynaBean) pointlist.get(i);
            String pointid = (String) bean.get("point_id");
            sql.append(pointid);
            if (i != pointlist.size() - 1) {
                sql.append(",");
            }
        }
        HashMap bodyToMain = new HashMap();// 记录每个考核主体类别有几个考核主体
        sql.append("  from per_mainbody pm, per_pointpriv_"
                + this.planid
                + " pp where  pm.mainbody_id=pp.mainbody_id  and pm.object_id=pp.object_id and pm.plan_id='");
        sql.append(this.planid);
        sql.append("' and pp.object_id='");
        sql.append(a0100 + "' ");
        if (!"all".equalsIgnoreCase(bodyid) && !"all1".equalsIgnoreCase(bodyid)) {
            sql.append(" and  pm.body_id='");
            sql.append(bodyid + "'");
        } else {
            if (bodylist != null) {
                StringBuffer sql1 = new StringBuffer();
                for (int k = 0; k < bodylist.size(); k++) {
                    CommonData cd = (CommonData) bodylist.get(k);
                    String bodyid1 = cd.getDataValue();
                    if (!"all".equalsIgnoreCase(bodyid1)) {
                        sql1.append(" pm.body_id='" + bodyid1 + "' ");
                        if (k != bodylist.size() - 1) {
                            sql1.append(" or ");
                        }
                    }

                }
                if (sql1.length() > 0) {
                    sql.append(" and (");
                    sql.append(sql1.toString());
                    sql.append(")");
                }

            }
        }

        ContentDAO dao = new ContentDAO(this.conn);
        try { // 指标--> 主题类别-->类别中主体人数
            RowSet rowSet = dao.search(sql.toString());
            while (rowSet.next()) {
                for (int k = 0; k < pointlist.size(); k++) {
                    LazyDynaBean bean = (LazyDynaBean) pointlist.get(k);
                    String pointid = (String) bean.get("point_id");
                    if (rowSet.getString("c_" + pointid) != null) {
                        String value = rowSet.getString("c_" + pointid);
                        String bodyid2 = rowSet.getString("bodyid");
                        if ("1".equalsIgnoreCase(value)) {// 考核主体对该指标有考核权限

                            if (map.get(pointid) != null) {
                                HashMap tt = (HashMap) map.get(pointid);
                                if ("all".equalsIgnoreCase(bodyid)) {
                                    String num = (String) tt.get("all");
                                    tt.put("all", String.valueOf(Integer
                                            .parseInt(num) + 1));
                                    map.put(pointid, tt);
                                } else {
                                    if (tt.get(bodyid2) != null) {
                                        String num = (String) tt.get(bodyid2);
                                        tt.put(bodyid2, String.valueOf(Integer
                                                .parseInt(num) + 1));
                                        map.put(pointid, tt);
                                    } else {
                                        tt.put(bodyid2, String.valueOf(1));
                                        map.put(pointid, tt);
                                    }

                                }
                            } else {
                                HashMap tt = new HashMap();
                                if ("all".equalsIgnoreCase(bodyid)) {
                                    tt.put("all", "1");
                                } else {
                                    tt.put(bodyid2, "1");
                                }
                                map.put(pointid, tt);
                            }
                        }
                    }

                }
            }
            if (rowSet != null) {
                rowSet.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {

        }
        return map;
    }

    /**
     * 获取本部平均，及考核对象分类中个分值占比
     */
    public HashMap getBenBu(String a0100, ArrayList pointlist,
                            ArrayList gradelist) {
        String KeepDecimal = (String) planParamSet.get("KeepDecimal");
        DecimalFormat dcmFmt = new DecimalFormat();
        dcmFmt.setMaximumFractionDigits(Integer.parseInt(KeepDecimal));
        HashMap benbu = new HashMap();
        StringBuffer sql = new StringBuffer();
        sql.append("select body_id from per_object where object_id='");
        sql.append(a0100);
        sql.append("' and plan_id=");
        sql.append(this.planid);
        ContentDAO dao = new ContentDAO(this.conn);
        RowSet rowSet = null;
        HashMap pointMap = new HashMap();
        LazyDynaBean pointtoGrade = null;
        try {
            rowSet = dao.search(sql.toString());
            String body_id = "";
            if (rowSet.next()) {
                body_id = rowSet.getString(1) == null ? "null" : rowSet
                        .getString(1);
            }
            // 获取 考核对象类别中各指标票数
            sql.setLength(0);
            sql.append("select po.body_id,point_id,"
                    + Sql_switcher.isnull("degree_id", "0")
                    + " degree_id ,count(degree_id) acount ");
            if ("Accounting".equals(this.getAccountingFlag())) { // /当getAccountingFlag（）=accounting时，为票数及占比反馈表
                sql.append("from per_object po,per_table_"
                        + this.planid
                        + " ptp,per_mainbody where ptp.mainbody_id=per_mainbody.mainbody_id and per_mainbody.plan_id="
                        + this.planid
                        + " and po.object_id=ptp.object_id and po.plan_id="
                        + this.planid + " and ");
            } else {
                sql.append("from per_object po,per_table_"
                        + this.planid
                        + " ptp where po.object_id=ptp.object_id and po.plan_id="
                        + this.planid + " and ");
            }
            if (body_id != null && "null".equalsIgnoreCase(body_id)) {
                sql.append(" po.body_id is null ");
            } else {
                sql.append(" po.body_id ='");
                sql.append(body_id);
                sql.append("'");
            }
            if ("Accounting".equals(this.getAccountingFlag())) { // /当getAccountingFlag（）=accounting时，为票数及占比反馈表
                sql.append(" and per_mainbody.status=2 ");
            }
            if (Sql_switcher.searchDbServer() == Constant.ORACEL
                    || Sql_switcher.searchDbServer() == Constant.DB2) {
                sql.append(" group by rollup (point_id,po.body_id,NVL(degree_id,0)) ");
            } else {
                sql.append("  group by point_id,po.body_id,degree_id with rollup ");
            }
            sql.append(" having  po.body_id   ");
            if (body_id != null && "null".equalsIgnoreCase(body_id)) {
                sql.append(" is null");
            } else {
                sql.append(" is not null");
            }
            sql.append(" and point_id is not null order by po.body_id,point_id,degree_id");
            rowSet = dao.search(sql.toString());
            while (rowSet.next()) {
                String pointid = rowSet.getString("point_id");
                String degree_id = rowSet.getString("degree_id");
                String acont = rowSet.getString("acount");
                if (degree_id == null) {
                    degree_id = "0";
                } else if ("0".equalsIgnoreCase(degree_id)) {
                    degree_id = "total";
                }
                if (pointMap.get(pointid) != null) {
                    pointtoGrade = (LazyDynaBean) pointMap.get(pointid);
                    pointtoGrade.set(degree_id, acont);
                    pointMap.put(pointid, pointtoGrade);
                } else {
                    pointtoGrade = new LazyDynaBean();
                    pointtoGrade.set(degree_id, acont);
                    pointMap.put(pointid, pointtoGrade);
                }

            }
            // 计算 占比
            LazyDynaBean scaleBean = null;
            for (int i = 0; i < pointlist.size(); i++) {
                LazyDynaBean bean = pointlist.get(i) == null ? new LazyDynaBean()
                        : (LazyDynaBean) pointlist.get(i);
                String pointid = (String) bean.get("point_id");
                LazyDynaBean poinbean = pointMap.get(pointid) == null ? new LazyDynaBean()
                        : (LazyDynaBean) pointMap.get(pointid);// 指标分值票数
                String total = poinbean.get("total") == null ? "0"
                        : (String) poinbean.get("total");
                int cont = 0;
                if (total == null) {

                } else {
                    cont = Integer.parseInt(total);// 总票数
                }
                scaleBean = new LazyDynaBean();
                for (int k = 0; k < gradelist.size(); k++) {
                    LazyDynaBean bean1 = (LazyDynaBean) gradelist.get(k);
                    String grade = (String) bean1.get("grade_template_id");
                    int num = Integer
                            .parseInt(poinbean.get(grade) == null ? "0"
                                    : (String) poinbean.get(grade));
                    if (cont == 0) {
                        scaleBean.set(grade, dcmFmt.format(0.000));
                    } else {
                        double scale = ((double) num / cont) * 100;
                        scaleBean.set(
                                grade,
                                PubFunc.round(String.valueOf(scale),
                                        Integer.parseInt(KeepDecimal)));
                    }
                }
                benbu.put(pointid, scaleBean);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return benbu;
    }

    public HashMap getGradeForBodyToPoint(String object_id, String rownum,
                                          String bodyid, ArrayList perpointlist, ArrayList pointlist,
                                          boolean can, String code) {
        HashMap map = new HashMap();
        HashMap pointToGrade = new HashMap();
        LazyDynaBean beanforGrade = null;
        String name = "";
        String nexta0100 = "";
        String nexta01001 = "";
        String upa0100 = "";
        String upa01001 = "";
        String nextanum = "";
        String upnum = "";
        String sql = "";
        boolean flag = false;

        String a0100 = "";// 获取考核对象 第一次默认为安a0000顺序的第一个人
        String a01001 = "";// 获取考核对象 第一次默认为安a0000顺序的第一个人
        ContentDAO dao = new ContentDAO(this.conn);
        String whl = "";
        try {
            if (can) {
                if (code != null && !"-1".equals(code)) {
                    if (AdminCode.getCodeName("UN", code) != null
                            && AdminCode.getCodeName("UN", code).length() > 0) {
                        whl += " and b0110 like '" + code + "%'";
                    } else if (AdminCode.getCodeName("UM", code) != null
                            && AdminCode.getCodeName("UM", code).length() > 0) {
                        whl += " and e0122 like '" + code + "%'";
                    }
                }
                sql = "select rn,object_id,a0101 from (select b0110,e0122 ,row_number() over(order by a0000 ";
                if (object_id == null || object_id.trim().length() == 0
                        || "first".equalsIgnoreCase(object_id)) {
                    sql += " asc) rn,object_id,a0101 ,plan_id from per_object where plan_id ='"
                            + this.planid
                            + "'"
                            + whl
                            + ") x where x.plan_id ='"
                            + this.planid
                            + "' and rn<=2 and rn>=1 ";
                    RowSet rowSet = dao.search(sql);
                    while (rowSet.next()) {
                        if (!flag) {
                            a0100 = rowSet.getString(2);
                            a01001 = rowSet.getString(2) + "`"
                                    + rowSet.getString(1);
                            name = rowSet.getString(3);
                            flag = true;

                        }
                        nexta01001 = rowSet.getString(2) + "`"
                                + rowSet.getString(1);
                        nexta0100 = rowSet.getString(2);
                    }
                    upa0100 = "";
                    upnum = "";
                    if (nexta0100 == null || a0100.equalsIgnoreCase(nexta0100)) {// 只有一条记录
                        nexta0100 = "";
                        nextanum = "";
                    }
                } else {
                    if ("end".equalsIgnoreCase(object_id)) {
                        sql += " asc) rn,object_id,a0101 ,plan_id from per_object where plan_id ='"
                                + this.planid
                                + "'"
                                + whl
                                + ") x where x.plan_id ='"
                                + this.planid
                                + "' and rn<=(select max(rn) from (select row_number() over(order by a0000) rn  from per_object where plan_id ='"
                                + this.planid
                                + "'"
                                + whl
                                + ") t) and rn>=(select max(rn) from (select row_number() over(order by a0000) rn  from per_object where plan_id ='"
                                + this.planid + "'" + whl + ") t)-1" + whl;
                        RowSet rowSet = dao.search(sql);
                        while (rowSet.next()) {
                            if (!flag) {

                                flag = true;

                                upa01001 = rowSet.getString(2) + "`"
                                        + rowSet.getString(1);
                                upa0100 = rowSet.getString(2);
                            }
                            name = rowSet.getString(3);
                            a0100 = rowSet.getString(2);
                            a01001 = rowSet.getString(2) + "`"
                                    + rowSet.getString(1);

                        }
                        nexta0100 = "";
                        nextanum = "";
                        if (a0100 == null || a0100.equalsIgnoreCase(upa0100)) {// 只有一条记录
                            a0100 = upa0100;
                            a01001 = upa0100 + "`" + rowSet.getString(1);
                            upa0100 = "";
                            upnum = "";
                        }
                    } else {
                        // 查找a0100 id 是主键

                        sql += " asc) rn,object_id,a0101 ,plan_id from per_object where plan_id ='"
                                + this.planid
                                + "'"
                                + whl
                                + ") x where x.plan_id ='"
                                + this.planid
                                + "' and ";
                        if (rownum != null) {
                            sql += " rn<="
                                    + String.valueOf(Integer.parseInt(rownum) + 1)
                                    + " and rn>="
                                    + String.valueOf(Integer.parseInt(rownum) - 1);
                        }
                        sql += " " + whl;
                        RowSet rowSet = dao.search(sql);
                        int num = 0;
                        boolean be = false;
                        while (rowSet.next()) {
                            num++;
                            if (num == 1) {
                                upa0100 = rowSet.getString(2);
                                upa01001 = rowSet.getString(2) + "`"
                                        + rowSet.getString(1);
                                upnum = rowSet.getString(1);
                                if (upa0100.equalsIgnoreCase(object_id)) {// 第一条记录
                                    upnum = "";
                                    upa0100 = "";
                                    upa01001 = "";
                                    a0100 = rowSet.getString(2);
                                    a01001 = rowSet.getString(2) + "`"
                                            + rowSet.getString(1);
                                    name = rowSet.getString(3);
                                    be = true;
                                }
                            }
                            if (num == 2) {
                                if (be) {
                                    nexta01001 = rowSet.getString(2) + "`"
                                            + rowSet.getString(1);
                                    nexta0100 = rowSet.getString(2);
                                } else {
                                    a0100 = rowSet.getString(2);
                                    a01001 = rowSet.getString(2) + "`"
                                            + rowSet.getString(1);
                                    name = rowSet.getString(3);
                                }

                            }
                            if (num == 3) {
                                nexta01001 = rowSet.getString(2) + "`"
                                        + rowSet.getString(1);
                            }
                        }
                    }
                }
            }
            sql = "";
            sql = " select ptp.object_id,point_id,"
                    + Sql_switcher.isnull("degree_id", "0")
                    + " degree_id,count(degree_id) acount    ";
            if (bodyid == null || "all".equalsIgnoreCase(bodyid)) {

            } else {
                sql += " ,per_mainbody.body_id";
            }
            sql += " from per_table_"
                    + this.planid
                    + " ptp,per_mainbody where ptp.object_id=per_mainbody.object_id and  ptp.mainbody_id=per_mainbody.mainbody_id  and per_mainbody.plan_id="
                    + this.planid + "  ";
            if (bodyid != null && !"all1".equalsIgnoreCase(bodyid)
                    && !"all".equalsIgnoreCase(bodyid)) {
                sql += " and per_mainbody.body_id='" + bodyid + "' ";
            }
            sql += " and ptp.object_id='";
            if (can) {
                sql += a0100 + "' ";
            } else {
                sql += object_id + "' ";
            }
            if ("Accounting".equals(this.getAccountingFlag())) { // /当getAccountingFlag（）=accounting时，为票数及占比反馈表
                sql += " and per_mainbody.status=2 ";
            }
            if (Sql_switcher.searchDbServer() == Constant.ORACEL
                    || Sql_switcher.searchDbServer() == Constant.DB2) {
                sql += " group by rollup (ptp.object_id ,";
                if (bodyid == null || "all".equalsIgnoreCase(bodyid)) {

                } else {
                    sql += " per_mainbody.body_id,";
                }
                sql += " point_id,NVL(degree_id,0))";
            } else {
                sql += "  group by ptp.object_id, ";
                if (bodyid == null || "all".equalsIgnoreCase(bodyid)) {

                } else {
                    sql += " per_mainbody.body_id,";
                }
                sql += " point_id,degree_id with rollup";
            }
            sql += " having  ptp.object_id is not null and point_id is not null  order by ptp.object_id,point_id,degree_id";
            RowSet rowSet = dao.search(sql);
            // 指标-->主题类别-->标度-->票数
            HashMap pointToBody = new HashMap();
            HashMap bodyToGrade = null;
            LazyDynaBean grade = null;
            HashMap pointToGrade1 = new HashMap();
            while (rowSet.next()) {
                String point_id = rowSet.getString("point_id");
                String object_id1 = rowSet.getString("object_id");
                String degree_id = rowSet.getString("degree_id");
                String value = rowSet.getString("acount");
                if (bodyid == null || "all".equalsIgnoreCase(bodyid)) {
                    if (pointToBody.get(point_id) != null) {
                        grade = (LazyDynaBean) pointToBody.get(point_id);
                        if (degree_id != null
                                && "0".equalsIgnoreCase(degree_id)) {
                            grade.set("total", value);
                        } else {
                            grade.set(degree_id == null ? "0" : degree_id, value);
                        }
                    } else {
                        grade = new LazyDynaBean();
                        if (degree_id != null
                                && "0".equalsIgnoreCase(degree_id)) {
                            grade.set("total", value);
                        } else {
                            grade.set(degree_id == null ? "0" : degree_id, value);
                        }
                    }
                    pointToBody.put(point_id, grade);
                } else {
                    String body_id = rowSet.getString("body_id") == null ? "null"
                            : rowSet.getString("body_id");
                    if (pointToBody.get(point_id) != null) {// 已有该指标
                        bodyToGrade = (HashMap) pointToBody.get(point_id);
                        if (bodyToGrade.get(body_id) != null) {
                            grade = (LazyDynaBean) bodyToGrade.get(body_id);
                        } else {
                            grade = new LazyDynaBean();
                        }
                        if (degree_id != null
                                && "0".equalsIgnoreCase(degree_id)) {
                            grade.set("total", value);
                        } else {
                            //VFS+UTF-8+达梦：绩效管理，绩效评估，计算方式为"票数及占比反馈表"，主体类别选择非所有主体，后台报错，前台无数据
                            grade.set(degree_id == null ? "0" : degree_id, value);
                        }
                        bodyToGrade.put(body_id, grade);
                    } else {
                        bodyToGrade = new HashMap();
                        grade = new LazyDynaBean();
                        if (degree_id != null
                                && "0".equalsIgnoreCase(degree_id)) {
                            grade.set("total", value);
                        } else {
                            //VFS+UTF-8+达梦：绩效管理，绩效评估，计算方式为"票数及占比反馈表"，主体类别选择非所有主体，后台报错，前台无数据
                            grade.set(degree_id == null ? "0" : degree_id, value);
                        }
                        bodyToGrade.put(body_id, grade);
                    }
                    pointToBody.put(point_id, bodyToGrade);
                }
            }
            map.put("name", name);
            map.put("a0100", a0100);
            map.put("a01001", a01001);
            map.put("nexta0100", nexta01001);
            map.put("upa0100", upa01001);
            map.put("pointToGrade", pointToBody);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return map;

    }

    public String getShowmethod() {
        return showmethod;
    }

    public void setShowmethod(String showmethod) {
        this.showmethod = showmethod;
    }

    public String getShowbenbu() {
        return showbenbu;
    }

    public void setShowbenbu(String showbenbu) {
        this.showbenbu = showbenbu;
    }

    public String getAband() {
        return aband;
    }

    public void setAband(String aband) {
        this.aband = aband;
    }

    // 得到唯一性标识和们名字的list
    public ArrayList getOnlynameList(String onlyname, String plan_id,
                                     String object_type) {
        ArrayList list = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            ResultSet rs = null;
            StringBuffer sb = new StringBuffer();
            if ("2".equals(object_type)) {
                sb.append("select p.a0101,u." + onlyname
                        + " onlyname from per_result_" + plan_id
                        + " p left join usra01 u on p.object_id=u.a0100");
            } else {
                sb.append("select p.a0101,u." + onlyname
                        + " onlyname from per_result_" + plan_id
                        + " p left join b01 u on p.object_id=u.b0110");
            }
            //2014.12.19 xxd 绩效修正分值导出模板排序优化
            sb.append(" order by ");
            String order_str = (String) this.userView.getHm().get("performance_order_str");
            if (order_str != null && !"".equals(order_str)) {
                String[] order_strs = order_str.split(",");
                for (int i = 0; i < order_strs.length; i++) {
                    if (i == 0) {
                        String[] str = order_strs[i].split("by");
                        String strs = "p." + str[1].trim();
                        sb.append(strs);
                    } else {
                        sb.append(",p." + order_strs[i].trim());
                    }
                }
            } else {
                sb.append(" p.a0000");
            }
            rs = dao.search(sb.toString());
            while (rs.next()) {
                String onlyName = rs.getString("onlyname");
                if (onlyName == null || "".equals(onlyName)) {
                    continue;
                }
                String username = rs.getString("a0101") == null ? " " : rs
                        .getString("a0101");
                list.add(onlyName + "`" + username);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    // 下载修正分值的模板
    public String creatExcel(ArrayList onlynameList, String object_type) {
        String filename = this.userView.getUserName() + "_" + PubFunc.getStrg()
                + ".xls";
        HSSFWorkbook workbook = new HSSFWorkbook();
        // 创建一个工作表对象
        HSSFSheet sheet = workbook.createSheet("sheet1");
        HSSFRow row = null; // 处理行的类
        HSSFCell csCell = null; // 处理单元格的类
        sheet.setColumnWidth(1, 5000);
        sheet.setColumnWidth(3, 10000);
        HSSFRichTextString ss = new HSSFRichTextString("");

        row = sheet.createRow(0); // 创建第1行，并为它设置一些属性
        csCell = row.createCell((short) 0);
        String name = "";
        if ("2".equals(object_type)) {
            name = "姓名";
        } else {
            name = "单位/部门";
        }
        ss = new HSSFRichTextString(name);
        csCell.setCellValue(ss);

        csCell = row.createCell((short) 1);
        ss = new HSSFRichTextString("唯一标识");
        csCell.setCellValue(ss);

        csCell = row.createCell((short) 2);
        ss = new HSSFRichTextString("修正分值");
        csCell.setCellValue(ss);

        csCell = row.createCell((short) 3);
        ss = new HSSFRichTextString("修正原因");
        csCell.setCellValue(ss);

        int n = onlynameList.size();
        for (int i = 0; i < n; i++) {
            String[] temp = ((String) onlynameList.get(i)).split("`");
            row = sheet.createRow(i + 1); // 创建第1行，并为它设置一些属性
            csCell = row.createCell((short) 0);
            ss = new HSSFRichTextString(temp[1]);
            csCell.setCellValue(ss);

            csCell = row.createCell((short) 1);
            ss = new HSSFRichTextString(temp[0]);
            csCell.setCellValue(ss);

            csCell = row.createCell((short) 2);
            ss = new HSSFRichTextString("");
            csCell.setCellValue(ss);

            csCell = row.createCell((short) 3);
            ss = new HSSFRichTextString("");
            csCell.setCellValue(ss);
        }
        FileOutputStream fileOut = null;
        // 写入excel文件
        try {
            fileOut = new FileOutputStream(
                    System.getProperty("java.io.tmpdir")
                            + System.getProperty("file.separator") + filename);
            workbook.write(fileOut);
            System.gc(); // 清理垃圾
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            PubFunc.closeResource(fileOut);
            PubFunc.closeResource(workbook);
        }

        return filename;
    }

    public String getHZMenus(String temp1) {

        String HZMenusValue = "";
        if ("SUM".equalsIgnoreCase(temp1)) {
            HZMenusValue = ResourceFactory.getProperty("jx.evaluation.zsum");
        }
        if ("AVG".equalsIgnoreCase(temp1)) {
            HZMenusValue = ResourceFactory.getProperty("jx.evaluation.zavg");
        }
        if ("MAX".equalsIgnoreCase(temp1)) {
            HZMenusValue = ResourceFactory.getProperty("jx.evaluation.zmax");
        }
        if ("MIN".equalsIgnoreCase(temp1)) {
            HZMenusValue = ResourceFactory.getProperty("jx.evaluation.zmin");
        }

        return HZMenusValue;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getBatchComput() {
        return batchComput;
    }

    public void setBatchComput(String batchComput) {
        this.batchComput = batchComput;
    }

    public String getPresentMainbody_id() {
        return presentMainbody_id;
    }

    public void setPresentMainbody_id(String presentMainbody_id) {
        this.presentMainbody_id = presentMainbody_id;
    }

    /**
     * 得到考核指标  郭峰
     */
    public ArrayList pointListByModel(String object_id) {
        ArrayList list = new ArrayList();
        try {
            RowSet rs = null;
            ContentDAO dao = new ContentDAO(this.conn);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Calendar calendar = Calendar.getInstance();
            String historyDate = sdf.format(calendar.getTime());
            StringBuffer sql = new StringBuffer("");
            sql.append("select pcm.point_id,pp.pointname,pcm.point_type item_id,pcm.score,pcm.rank from per_competency_modal pcm left join per_point pp on pcm.point_id=pp.point_id where object_type='3' and object_id = (select " + Sql_switcher.isnull("e01a1", "null") + " from usra01 where a0100='" + object_id + "')");
            sql.append(" and " + Sql_switcher.dateValue(historyDate) + " between start_date and end_date");
            rs = dao.search(sql.toString());
            while (rs.next()) {
                LazyDynaBean abean = new LazyDynaBean();
                String item_id = rs.getString("item_id");
                if (item_id == null || "".equals(item_id) || !Pattern.matches("^\\d*$", item_id)) { // 评估计算的时候item_id必须为整型 lium
                    item_id = "-9999";
                }
                abean.set("point_id", rs.getString("point_id"));
                abean.set("pointname", rs.getString("pointname"));
                abean.set("pointkind", "0");//能力素质只有定性指标
                abean.set("item_id", item_id);
                abean.set("score", rs.getString("score") == null ? "0.0" : rs.getString("score"));
                abean.set("rank", rs.getString("rank") == null ? "0.0" : rs.getString("rank"));
                list.add(abean);
            }
            if (rs != null) {
                rs.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * 得到项目  郭峰
     */
    public ArrayList itemListByModel(String object_id) {
        ArrayList list = new ArrayList();
        try {
            RowSet rs = null;
            ContentDAO dao = new ContentDAO(this.conn);
            StringBuffer sql = new StringBuffer("");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Calendar calendar = Calendar.getInstance();
            String historyDate = sdf.format(calendar.getTime());
            ArrayList controllist = new ArrayList();
            sql.append("select pcm.point_type item_id,ci.codeitemdesc itemdesc from per_competency_modal pcm left join codeitem ci on pcm.point_type=ci.codeitemid and ci.codesetid='70' where pcm.object_type='3' and pcm.object_id = (select " + Sql_switcher.isnull("e01a1", "null") + " from usra01 where a0100='" + object_id + "')");
            sql.append(" and " + Sql_switcher.dateValue(historyDate) + " between pcm.start_date and pcm.end_date");
            rs = dao.search(sql.toString());
            ArrayList visitedList = new ArrayList();
            while (rs.next()) {
                LazyDynaBean abean = new LazyDynaBean();
                String item_id = rs.getString("item_id");
                if (item_id == null || "".equals(item_id)) {
                    item_id = "-9999";
                }
                if (visitedList.contains(item_id)) {
                    continue;
                }
                String itemdesc = rs.getString("itemdesc");
                if (itemdesc == null || "".equals(itemdesc)) {
                    itemdesc = "无指标分类";
                }
                abean.set("item_id", item_id);
                abean.set("itemdesc", itemdesc);
                abean.set("parent_id", "");
                abean.set("child_id", "");
                abean.set("kind", "1");
                abean.set("rank", "1");
                abean.set("score", "0");
                visitedList.add(item_id);
                list.add(abean);
            }
            if (rs != null) {
                rs.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }

    /**
     * 取得每个指标对应的最顶层的项目
     */
    public HashMap getFirstItemMapByModel(ArrayList pointList) {
        HashMap map = new HashMap();
        int n = pointList.size();
        for (int i = 0; i < n; i++) {
            LazyDynaBean bean = (LazyDynaBean) pointList.get(i);
            String point_id = (String) bean.get("point_id");
            String item_id = (String) bean.get("item_id");
            map.put(point_id, item_id);
        }
        return map;
    }

    public HashMap getItem_pointMap(ArrayList pointlist) {
        HashMap map = new HashMap();
        int n = pointlist.size();
        for (int i = 0; i < n; i++) {
            LazyDynaBean bean = (LazyDynaBean) pointlist.get(i);
            LazyDynaBean abean = new LazyDynaBean();
            String item_id = (String) bean.get("item_id");
            String point_id = (String) bean.get("point_id");
            String rank = (String) bean.get("rank");
            String score = (String) bean.get("score");
            abean.set("pointkind", "0");
            abean.set("rank", rank);
            abean.set("status", "0");
            abean.set("score", score);
            abean.set("point_id", point_id);
            if (map.get(item_id) != null) {
                ArrayList innerlist = (ArrayList) map.get(item_id);
                innerlist.add(abean);
                map.put(item_id, innerlist);
            } else {
                ArrayList newlist = new ArrayList();
                newlist.add(abean);
                map.put(item_id, newlist);
            }
        }
        return map;
    }

    public ArrayList getItemList() {
        ArrayList itemList = new ArrayList();
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rowSet = dao.search("select * from per_template_item where template_id='" + this.template_id + "' order by seq");
            LazyDynaBean abean = null;
            while (rowSet.next()) {
                abean = new LazyDynaBean();
                abean.set("item_id", rowSet.getString("item_id"));
                abean.set("itemdesc", rowSet.getString("itemdesc"));
                abean.set("parent_id", rowSet.getString("parent_id") != null ? rowSet.getString("parent_id") : "");
                abean.set("child_id", rowSet.getString("child_id") != null ? rowSet.getString("child_id") : "");
                abean.set("kind", rowSet.getString("kind") != null ? rowSet.getString("kind") : "1");
                abean.set("rank", rowSet.getString("rank") != null ? String.valueOf(rowSet.getDouble("rank")) : "1");
                abean.set("score", rowSet.getString("score") != null ? String.valueOf(rowSet.getDouble("score")) : "0");
                itemList.add(abean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return itemList;
    }

    /**
     * 把总分插入到历史表中
     */
    public void insertScoreToHistory(String object_id) {
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rs = null;
            String selSql = "select * from per_result_" + this.planid + " where object_id='" + object_id + "'";
            rs = dao.search(selSql);
            ArrayList list = new ArrayList();
            if (rs.next()) {
                IDGenerator idg = new IDGenerator(2, this.conn);
                String id = idg.getId("per_history_result.id");
                list.add(new Integer(id));
                list.add(new Integer(this.planid));
                list.add(rs.getString("b0110"));
                list.add(rs.getString("e0122"));
                list.add(rs.getString("e01a1"));
                list.add(object_id);
                list.add(rs.getString("a0101"));
                String creatDate = PubFunc.getStringDate("yyyy-MM-dd");
                list.add(java.sql.Date.valueOf(creatDate));
                list.add("total_value");
                list.add(new Float(rs.getFloat("score")));
                list.add(new Integer(2));
            }
            String insertSql = "insert into per_history_result(id,plan_id,b0110,e0122,e01a1,object_id,a0101,archive_date,point_id,score,status)" + "values(?,?,?,?,?,?,?,?,?,?,?)";
            dao.update(insertSql, list);
            if (rs != null) {
                rs.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    /**
     * 把总分插入到历史表中
     */
    public void insertScoreToHistory() {
        try {
            ContentDAO dao = new ContentDAO(this.conn);
            RowSet rs = null;
            String selSql = "select * from per_result_" + this.planid;
            rs = dao.search(selSql);
            ArrayList list = new ArrayList();
            if (rs.next()) {
                IDGenerator idg = new IDGenerator(2, this.conn);
                String id = idg.getId("per_history_result.id");
                list.add(new Integer(id));
                list.add(new Integer(this.planid));
                list.add(rs.getString("b0110"));
                list.add(rs.getString("e0122"));
                list.add(rs.getString("e01a1"));
                list.add(rs.getString("object_id"));
                list.add(rs.getString("a0101"));
                String creatDate = PubFunc.getStringDate("yyyy-MM-dd");
                list.add(java.sql.Date.valueOf(creatDate));
                list.add("total_value");
                list.add(new Float(rs.getFloat("score")));
                list.add(new Integer(2));
            }
            String insertSql = "insert into per_history_result(id,plan_id,b0110,e0122,e01a1,object_id,a0101,archive_date,point_id,score,status)" + "values(?,?,?,?,?,?,?,?,?,?,?)";
            dao.update(insertSql, list);
            if (rs != null) {
                rs.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public String getObject_type() {
        return object_type;
    }

    public void setObject_type(String object_type) {
        this.object_type = object_type;
    }

    /**
     * @return the batchScoreImportFormulaFlag
     */
    public String getBatchScoreImportFormulaFlag() {
        return batchScoreImportFormulaFlag;
    }

    /**
     * @param batchScoreImportFormulaFlag the batchScoreImportFormulaFlag to set
     */
    public void setBatchScoreImportFormulaFlag(String batchScoreImportFormulaFlag) {
        this.batchScoreImportFormulaFlag = batchScoreImportFormulaFlag;
    }

    /**
     * 按长度截取字符串  zhaoxg add 2014-10-28
     *
     * @param content 输入的内容
     * @param maxSize 最大长度
     * @return
     */
    public static String substrChinese(String content, int maxSize) {
        String result = content;
        if (result != null && result.length() > 0) {
            int valueLength = 0;
            int valuelength = 0;//用来截断的长度
            String chinese = "[\u0391-\uFFE5]";
            /* 获取字段值的长度，如果含中文字符，则每个中文字符长度为2，否则为1 */
            for (int i = 0; i < result.length(); i++) {
                /* 获取一个字符 */
                String temp = result.substring(i, i + 1);
                /* 判断是否为中文字符 */
                if (temp.matches(chinese)) {
                    /* 中文字符长度为2 */
                    valueLength += 2;
                    valuelength++;
                    if (valueLength >= maxSize) {
                        result = result.substring(0, valuelength);
                        break;
                    }
                } else {
                    /* 其他字符长度为1 */
                    valueLength += 1;
                    valuelength++;
                    if (valueLength >= maxSize) {
                        result = result.substring(0, valuelength);
                        break;
                    }
                }
            }
        }
        return result;
    }

}
