package com.hjsj.hrms.businessobject.performance.objectiveManage;

import com.hjsj.hrms.businessobject.attestation.AttestationUtils;
import com.hjsj.hrms.businessobject.attestation.zgpt.IMISPendProceed;
import com.hjsj.hrms.businessobject.dingtalk.DTalkBo;
import com.hjsj.hrms.businessobject.general.email_template.EmailTemplateBo;
import com.hjsj.hrms.businessobject.performance.PerformanceImplementBo;
import com.hjsj.hrms.businessobject.performance.batchGrade.AnalysePlanParameterBo;
import com.hjsj.hrms.businessobject.performance.batchGrade.BatchGradeBo;
import com.hjsj.hrms.businessobject.sys.AsyncEmailBo;
import com.hjsj.hrms.businessobject.sys.DbNameBo;
import com.hjsj.hrms.businessobject.sys.EMailBo;
import com.hjsj.hrms.businessobject.sys.report.Sys_Oth_Parameter;
import com.hjsj.hrms.businessobject.workplan.WorkPlanUtil;
import com.hjsj.hrms.interfaces.general.PendingTask;
import com.hjsj.hrms.module.utils.exportexcel.ExportExcelUtil;
import com.hjsj.hrms.transaction.performance.LoadXml;
import com.hjsj.hrms.utils.PubFunc;
import com.hjsj.hrms.utils.ResourceFactory;
import com.hjsj.hrms.utils.analyse.YksjParser;
import com.hjsj.hrms.utils.sendmessage.weixin.WeiXinBo;
import com.hjsj.hrms.valueobject.database.ExecuteSQL;
import com.hrms.frame.codec.SafeCode;
import com.hrms.frame.dao.ContentDAO;
import com.hrms.frame.dao.RecordVo;
import com.hrms.frame.dao.db.DBMetaModel;
import com.hrms.frame.dbstruct.DataType;
import com.hrms.frame.dbstruct.DbWizard;
import com.hrms.frame.dbstruct.Field;
import com.hrms.frame.dbstruct.Table;
import com.hrms.frame.utility.AdminCode;
import com.hrms.frame.utility.CodeItem;
import com.hrms.frame.utility.IDGenerator;
import com.hrms.hjsj.sys.*;
import com.hrms.hjsj.utils.FactorList;
import com.hrms.hjsj.utils.Sql_switcher;
import com.hrms.struts.constant.SystemConfig;
import com.hrms.struts.exception.GeneralException;
import com.hrms.struts.exception.GeneralExceptionHandler;
import com.hrms.struts.taglib.CommonData;
import com.hrms.struts.valueobject.UserView;
import org.apache.commons.beanutils.LazyDynaBean;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.util.CellRangeAddressList;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;
import org.jdom.xpath.XPath;

import javax.sql.RowSet;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * 
 * <p>
 * Title:
 * </p>
 * <p>
 * Description:目标卡
 * </p>
 * <p>
 * Company:HJHJ
 * </p>
 * <p>
 * Create time:May 29, 2008
 * </p>
 * 
 * @author dengcan
 * @version 4.0
 */
public class ObjectCardBo {
	private Connection conn = null;
	public Connection getConn() {
		return conn;
	}
	public void setConn(Connection conn) {
		this.conn = conn;
	}

	private RecordVo plan_vo = null;
	private RecordVo perObject_vo = null;
	private RecordVo template_vo = null;
	private String object_id = "";
	private String plan_id = "";
	public String getPlan_id() {
		return plan_id;
	}
	public void setPlan_id(String plan_id) {
		this.plan_id = plan_id;
	}

	private UserView userView = null;
	/************** 目标卡展现 start *************/
	private String isPerformanceShow = "0"; // 是否是从360查看关联目标卡
	private String fromModel = ""; // rz:来自于日志查看

	private String body_id = ""; // 主体类别
	private String un_functionary = "";
	private LazyDynaBean un_functionaryBean = null;

	private LazyDynaBean mainbodyBean = null;
	private ArrayList templateItemList = new ArrayList(); // 模板项目记录表
	private ArrayList leafItemList = new ArrayList(); // 叶子项目列表
	private HashMap itemToPointMap = new HashMap(); // 项目对应任务map
	private ArrayList p04List = new ArrayList();
	private HashMap p04Map = new HashMap();


	private HashMap leafItemLinkMap = new HashMap(); // 叶子项目对应的继承关系
	private int lay = 0;
	private HashMap itemPointNum = new HashMap();
	private int td_width = 150;
	private HashMap customTdWidthMap = new HashMap(); // 自定义列宽 itemid:项目宽度
														// p0401:任务宽度

	private int td_height = 30;
	private int opt = 0; // 0:查看 1：操作 2.打分 3.评价
	private String model = ""; // 1:团对 2:我的目标 3:目标制订 4.目标评估 5.目标结果 6:目标执行情况
								// 7:目标卡代制订 8:评分调整
	private String from_flag = ""; // 1 绩效评估模块的绩效面谈显示目标卡 =0考核结果模块的显示
	private int extendNum = 0;
	private boolean isFirst = true;
	private String objectSpFlag = "01"; // 考核对象审批标识 //01:起草 02：报批 07：驳回 03：批准
	private String isAddExtendRow = "0"; // 是否最加行（用于放 总分。了解程度 。总体评价）
	private String isSubScore = "0"; // 判断是否已有人提交过分数

	private StringBuffer extendtHead = new StringBuffer("");

	private String selfEvaluationStatus = "0"; // 自我评估状态
	private HashMap objectEvaluateValueMap = new HashMap(); // 考核对象评估结果
	private HashMap objectSelfEvaluateValueMap = new HashMap(); // 考核对象自我评估结果
	private HashMap perPointScoreMap = new HashMap(); // 业绩指标分值

	private ArrayList mainbodyList = new ArrayList(); // 考核主体列表
	private HashMap objectAllEvaluateMap = new HashMap(); //
	private HashMap defaultEvaluateScoreMap = new HashMap(); // 默认值
	private HashMap perResultScoreMap = new HashMap(); // 考核结果表中的最终分值 评分调整用到
	private int objTableColumnNum = 0;

	private HashMap pointDescMap = new HashMap(); // 考核指标标度列表
	private Hashtable planParam = null;
	private Hashtable publicParam = null;
	private String perPointNoGrade = "0"; // 目标卡中引入的绩效指标是否设置了标度 0： 1：没有设置标度
	private String noGradeItem = ""; // 没设标度的指标id;
	private HashMap perPointMap = new HashMap();

	private String processing_state_all = "0";
	private boolean isAdjustPoint = false; // 是否有调整后的项目
	private String TargetTraceItem = ""; // 目标卡跟踪显示指标
	private String TargetCollectItem = ""; // 目标卡采集指标
	private String TargetTraceEnabled = "false";// 是否采用目标卡跟中显示和采集指标
	private String TargetCollectItem_str = "";

	private String optColumnType = "1"; // 1：起草状态的编辑列 2：调整 编辑列 3：签批编辑列
	private String optCardObject = "5"; // 5:本人 -2：第四级领导 ,-1：第三级领导,0：主管领导,1：直接上级

	private ArrayList headList = new ArrayList();
	private String extJsonWidth = "0"; //

	private HashMap sign_point_objectMap = null;
	private HashMap sign_objectMap = null;
	private String isShowRelationCard = "0"; // 显示关联目标卡
	private HashMap itemPrivMap = new HashMap(); // 目标卡项目权限

	private String creatCard_mail = "false"; // 目标卡制作 发送email
	private String creatCard_mail_template = "";
	private String evaluateCard_mail = "false"; // 目标卡评估 发送email
	private String evaluateCard_mail_template = "";
	private String isEmail = "1"; // 是否发送邮件
	private String scoreflag = "1";
	private String pri_pendingCode = ""; // 普天待办信息唯一标识

	private String TargetDefineItem = ""; // 目标卡指标
	private String TargetCalcItem = ""; // 目标卡计算指标属性，P04中指标，以逗号分隔，顺序从前到后
	private String hiden_str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0407/P0413/P0415/P0421/P0423/P0425/P0427/PLAN_ID/STATE/";
	/************** end *************/
	private boolean email_link = true;

	private String subSet = "";// 岗位职责子集
	private HashMap targetPostDuty = null;// 目标卡指标和岗位职责子集指标对应关系
	private String TargetItem = "";// 岗位职责子集中，与项目名称对应的指标

	private String DeptDutySubSet = "";// 部门职责子集
	private String DeptDutyTargetItem = "";// 部门职责子集中项目指标
	private String DeptDutyDataItem = "";// 部门职责子集中 时间指标
	private String DeptDutyTextValue = "";// 部门职责子集中与目标卡对应指标

	private String isCopyScore = "false";// 是否复制上个考核主体的打分
	private boolean isVisibleEdit = false;// 表头是否显示编辑列
	private String AllowLeaderTrace = "false"; // 允许领导制订及批准跟踪指标, True(默认) False
	private String isAllowAppealTrancePoint = "false";
	private String isAllowApproveTrancePoint = "false";

	private HashMap selfScoreOrgMap = null;// 自己权限范围内的考核任务的id

	private HashMap pointMap = new HashMap();

	private String point_explain_item = ""; // 指标解释指标
	private String point_evaluate_item = ""; // 评分说明指标
	private ArrayList editableTaskList = new ArrayList();// 可编辑的所有任务列表
	private String tt5CssClassName = "ttNomal5";
	private String tt4CssClassName = "ttNomal6";
	private String tt3CssClassName = "ttNomal3";
	private String changeCssClassName = "changeNomal";
	private HashMap numberMap = new HashMap();
	private boolean privByOrg = false;// 是否按照考核机构来控制展现的考核项目
	private String mainbodyOrg = "#";// 登录用户的UN,或UM或@K
	private String IsLimitPointValue = "false";// 是否严格按照项目权重或分值来控制指标的权重或分值
	private String NoApproveTargetCanScore = "False"; // 目标卡未审批也允许打分 True,
														// False, 默认为 False
	private String tempSQL = "";
	/** 表头显示的其他主体 评分和评分说明 列 */
	private ArrayList headOtherMainbodyList = new ArrayList();
	boolean VerifySameScore = false;// 分数相同不能提交，只有权重模板有效
	boolean ScoreFromItem = false;// 按项目层级逐级计算总分参数，也是权重模板有效
	private HashMap taskAttachMap = new HashMap(); // 对象目标卡中的附件集合

	boolean hasAddMinusItem = false; // 模板中是否设置了加扣分项目 （动态项目设置）
	String addMinusPointStr = ""; // 加扣分指标
	double addMinusItemScore = 0; // 加扣分项目定义的分值和
	String lastItemid = "";// 目标卡中，最后一个项目的项目号；
	String isShowHistoryTask = "0"; // 目标卡制订阶段是否显示历史任务

	private String editCardSp = ""; // 目标卡制订参数

	String agent_id = "";
	String agent_name = "";
	String realSpFlag = "";// 考核对象的真实审批状态
	boolean isVisibleScoreBox = true;
	String wholeEvalScore ="";

	
	ArrayList sheetNames = new ArrayList();
	HSSFWorkbook workbook = new HSSFWorkbook();
	String objectFlag = "";
	private String includeOperateCloumn="0";//是否包含操作列  0不包含 1包含
	
	
	private HashMap<String ,ArrayList> cardGradeMembersA0101Map=null;// 目标卡多人评分  评价人名称 <p0400,[a0101]> zhanghua 2017-10-24 
	//private HashMap<String ,HashMap<String,String>> cardGradeMembersMap=null;// 目标卡多人评分  页面显示内容  <p0400,[key:'a0101',value:a0101;key:'opinion',value:opinion]> zhanghua 2017-10-24 

	

	private Document doc;
	private String xml;
	
	/** 当前计划所有主体对应的打分确认标识:opt */
	private Map bodyOptMap = new HashMap();
	
	private boolean aflag=true;
	
	private int isShowOpinion = 0;//0:批量下载，1:下载模板
	/**
	 * 初始化xml 评分过程 zhaoxg add 2014-3-19
	 * @param plan_id
	 * @param object_id
	 * @throws JDOMException
	 * @throws IOException
	 */
	private void initXML(String plan_id,String object_id) throws JDOMException, IOException {
		StringBuffer temp_xml = new StringBuffer();
		temp_xml.append("<?xml version='1.0' encoding='GB2312' ?>");
		temp_xml.append("<root>");
		temp_xml.append("</root>");
		try {
			ContentDAO dao = new ContentDAO(conn);
			RowSet rs = dao.search("select score_process from per_object where object_id='"+object_id+"' and plan_id="+plan_id+" ");
			if (rs.next())
				xml = Sql_switcher.readMemo(rs,"score_process");
			if (xml == null || "".equals(xml)) {
				xml = temp_xml.toString();
			}
			doc = PubFunc.generateDom(xml);
			rs.close();
		} catch (Exception ex) {
			xml = temp_xml.toString();
            try {
                doc = PubFunc.generateDom(xml);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
	}
	/**
	 * 设置节点属性
	 * @param attributeName
	 * @param attributeValue
	 * @param set_id
	 */
	public void setAttributeValue(Element element) {
		try {
			String str_path="/root";
			XPath xpath=XPath.newInstance(str_path);
			Element bbElement = (Element) xpath.selectSingleNode(doc);
			bbElement.addContent(element);														
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	/**
	 * 返回要保存的xml内容
	 * 
	 */
	public String saveStrValue() {
		StringBuffer buf = new StringBuffer();
		XMLOutputter outputter = new XMLOutputter();
		Format format = Format.getPrettyFormat();
		format.setEncoding("UTF-8");
		outputter.setFormat(format);
		buf.append(outputter.outputString(doc));
		return buf.toString();
	}

	public String getIncludeOperateCloumn() {
		return includeOperateCloumn;
	}

	public void setIncludeOperateCloumn(String includeOperateCloumn) {
		this.includeOperateCloumn = includeOperateCloumn;
	}

	/**
     * @return the objectFlag
     */
    public String getObjectFlag() {
        return objectFlag;
    }

    /**
     * @param objectFlag the objectFlag to set
     */
    public void setObjectFlag(String objectFlag) {
        this.objectFlag = objectFlag;
    }

    /**
     * @return the workbook
     */
    public HSSFWorkbook getWorkbook() {
        return workbook;
    }

    /**
     * @param workbook the workbook to set
     */
    public void setWorkbook(HSSFWorkbook workbook) {
        this.workbook = workbook;
    }

    public ArrayList getSheetNames() {
		return sheetNames;
	}

	public void setSheetNames(ArrayList sheetNames) {
		this.sheetNames = sheetNames;
	}

	public String getWholeEvalScore() {
		return wholeEvalScore;
	}
	
	public String getNoApproveTargetCanScore() {
		return NoApproveTargetCanScore;
	}
	
	public void setWholeEvalScore(String wholeEvalScore) {
		this.wholeEvalScore = wholeEvalScore;
	}

	/**
	 * 当按序号来进行评分时，目标卡页面中，是否显示发送邮件复选框
	 * 
	 * @return
	 */
	public String getSeqCondition() {
		String flag = "false";
		RowSet rs = null;
		try {
			String GradeByBodySeq = "false";// 按考核主体先后顺序评分
			if (this.planParam.get("GradeByBodySeq") != null)
				GradeByBodySeq = (String) this.planParam.get("GradeByBodySeq");
			if (this.mainbodyBean != null
					&& "true".equalsIgnoreCase(GradeByBodySeq)) {
				String seq = (String) this.mainbodyBean.get("seq");
				if (StringUtils.isNotBlank(seq)&&!"0".equals(seq)) {
					StringBuffer sql = new StringBuffer("");
					sql.append(" select max(seq) from per_mainbody  where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and object_id='" + this.object_id + "'");
					sql.append(" and body_id in (select body_id from per_plan_body where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and (isgrade is null or isgrade=0))");
					ContentDAO dao = new ContentDAO(this.conn);
					rs = dao.search(sql.toString());
					while (rs.next()) {
						int maxSeq = rs.getInt(1);
						if (StringUtils.isNotBlank(seq)&&Integer.parseInt(seq) < maxSeq)
							flag = "true";
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return flag;
	}

	public ObjectCardBo() {

	}

	public ObjectCardBo(Connection con, String planid, String object_id,
			UserView userView, String model, String optCardObject, String opt) {

		this.conn = con;
		this.plan_vo = getPlanVo(planid);
		this.template_vo = get_TemplateVo();
		this.object_id = object_id;
		this.plan_id = planid;
		init();
		this.userView = userView;
		this.isAdjustPoint = getIsAdjustPoint();
		if (opt != null)
			this.opt = Integer.parseInt(opt);
		else
			this.opt = 0;

		this.model = model;
		this.mainbodyBean = getMainbodyBean();
		if (this.plan_vo.getInt("object_type") == 1
				|| this.plan_vo.getInt("object_type") == 3
				|| this.plan_vo.getInt("object_type") == 4) {
			this.un_functionaryBean = this.getMainbodyBean(
					String.valueOf(this.plan_vo.getInt("plan_id")), object_id);
			if (this.un_functionaryBean != null)
				this.un_functionary = (String) this.un_functionaryBean
						.get("mainbody_id");
		}
		LoadXml loadxml = null;
		if (BatchGradeBo.getPlanLoadXmlMap().get(
				String.valueOf(this.plan_vo.getInt("plan_id"))) == null) {
			loadxml = new LoadXml(this.conn, String.valueOf(this.plan_vo
					.getInt("plan_id")));
			BatchGradeBo.getPlanLoadXmlMap().put(
					String.valueOf(this.plan_vo.getInt("plan_id")), loadxml);
		} else
			loadxml = (LoadXml) BatchGradeBo.getPlanLoadXmlMap().get(
					String.valueOf(this.plan_vo.getInt("plan_id")));
		this.planParam = loadxml.getDegreeWhole();
		if(this.mainbodyBean != null)
			this.wholeEvalScore = (String) mainbodyBean.get("wholeEvalScore");

		// this.planParam.put("TaskSupportAttach","True"); //任务支持附件上传

		if ("1".equals(this.template_vo.getString("status"))
				&& this.planParam.get("VerifySameScore") != null
				&& "true"
						.equalsIgnoreCase((String) this.planParam.get("VerifySameScore")))
			this.VerifySameScore = true;

		if ("1".equals(this.template_vo.getString("status"))
				&& this.planParam.get("ScoreFromItem") != null
				&& "true"
						.equalsIgnoreCase((String) this.planParam.get("ScoreFromItem")))
			this.ScoreFromItem = true;
		this.scoreflag = (String) planParam.get("scoreflag"); // =2混合，=1标度,=4加扣分
		if (planParam.get("NoApproveTargetCanScore") != null)
			NoApproveTargetCanScore = (String) planParam
					.get("NoApproveTargetCanScore"); // 目标卡未审批也允许打分 True, False,
														// 默认为 False
		this.p04List = getP04List();
		// 同时取得object VO
		this.objectSpFlag = getObjectSpFlag(object_id, planid);
		this.realSpFlag = this.objectSpFlag;

		// 已报批或已批并且是目标卡代制订 JinChunhai 2013.03.19
		if ("7".equals(this.model) && "02".equalsIgnoreCase(this.objectSpFlag)
				&& this.opt == 1) {
			this.objectSpFlag = "01";
		}
		// this.objectSpFlag="02";
		if (opt == null)
			opt = "0";
		if ("1".equals(this.model)
				&& "False".equalsIgnoreCase(NoApproveTargetCanScore)
				&& !this.isHaveLeader())// 团队绩效， 不存在负责人时，启动后不能打分
		{
			NoApproveTargetCanScore = "true";
		}
		if ("2".equals(opt) && !"03".equalsIgnoreCase(this.objectSpFlag)
				&& "False".equalsIgnoreCase(NoApproveTargetCanScore))
			this.opt = 0;
		if ("2".equals(opt) && !"03".equalsIgnoreCase(this.objectSpFlag)
				&& "True".equalsIgnoreCase(NoApproveTargetCanScore))
			this.objectSpFlag = "03";
		// 如果允许非批准即可评分，同时主体已评分，则默认对象的审批状态为已批
		if ("True".equalsIgnoreCase(NoApproveTargetCanScore)
				&& this.mainbodyBean != null
				&& "2".equals((String) this.mainbodyBean.get("status")))
			this.objectSpFlag = "03";
		if ("4".equals(this.model) || "2".equals(this.model)
				|| "1".equals(this.model)) {
			if (("03".equals(this.objectSpFlag) && ("2".equals(opt) || (this.mainbodyBean != null && "2".equals((String) this.mainbodyBean
					.get("status")))))
					|| "06".equals(this.objectSpFlag)) {
				if ("true"
						.equalsIgnoreCase((String) this.planParam.get("isShowSubmittedScores"))
						|| "true"
								.equalsIgnoreCase((String) this.planParam.get("WholeEval"))
						|| "true"
								.equalsIgnoreCase((String) this.planParam.get("NodeKnowDegree")))
					this.isAddExtendRow = "1";
			}
		}
		if (this.planParam.get("TargetCalcItem") != null
				&& ((String) this.planParam.get("TargetCalcItem")).trim()
						.length() > 0)
			this.TargetCalcItem = ","
					+ ((String) planParam.get("TargetCalcItem")).trim();
		this.selfEvaluationStatus = getSelfEvaluateStatus();
		this.isSubScore = getIsSubScore();
		this.perPointMap = getPerPointMap(object_id,
				this.plan_vo.getInt("object_type"), planid);
		AnalysePlanParameterBo bo = new AnalysePlanParameterBo(this.conn);
		Hashtable ht_table = bo.analyseParameterXml();
		this.publicParam = ht_table;
		if (ht_table != null) {
			if (ht_table.get("creatCard_mail") != null)
				this.creatCard_mail = (String) ht_table.get("creatCard_mail");
			if (ht_table.get("creatCard_mail_template") != null)
				this.creatCard_mail_template = (String) ht_table
						.get("creatCard_mail_template");
			if (ht_table.get("evaluateCard_mail") != null)
				this.evaluateCard_mail = (String) ht_table
						.get("evaluateCard_mail");
			if (ht_table.get("evaluateCard_mail_template") != null)
				this.evaluateCard_mail_template = (String) ht_table
						.get("evaluateCard_mail_template");
			if (ht_table.get("TargetTraceItem") != null)
				this.TargetTraceItem = (String) ht_table.get("TargetTraceItem");
			if (ht_table.get("SubSet") != null)
				this.subSet = (String) ht_table.get("SubSet");
			if (ht_table.get("TargetPostDuty") != null)
				this.targetPostDuty = (HashMap) ht_table.get("TargetPostDuty");
			if (ht_table.get("TargetItem") != null)
				this.TargetItem = (String) ht_table.get("TargetItem");
			if (ht_table.get("TargetDefineItem") != null
					&& ((String) ht_table.get("TargetDefineItem")).trim()
							.length() > 0) {
				String temp = (String) ht_table.get("TargetDefineItem");
				temp = temp.replaceAll(",", "");
				if (temp.trim().length() > 0)
					this.TargetDefineItem = (","
							+ (String) ht_table.get("TargetDefineItem") + ",")
							.toUpperCase();
			}
			if (ht_table.get("departDutySet") != null)
				this.DeptDutySubSet = (String) ht_table.get("departDutySet");
			if (ht_table.get("projectField") != null)
				this.DeptDutyTargetItem = (String) ht_table.get("projectField");
			if (ht_table.get("validDateField") != null)
				this.DeptDutyDataItem = (String) ht_table.get("validDateField");
			if (ht_table.get("departTextValue") != null)
				this.DeptDutyTextValue = (String) ht_table
						.get("departTextValue");
			if ("".equals(this.TargetCalcItem) && ht_table != null
					&& ht_table.get("TargetCollectItem") != null)
				this.TargetCalcItem = ","
						+ (String) ht_table.get("TargetCollectItem");

			if (ht_table.get("DescriptionItem") != null)
				this.point_explain_item = (String) ht_table
						.get("DescriptionItem");
			if (ht_table.get("PrincipleItem") != null)
				this.point_evaluate_item = (String) ht_table
						.get("PrincipleItem");

			if (this.TargetTraceItem != null
					&& this.TargetTraceItem.trim().length() > 0)
				AllowLeaderTrace = (String) ht_table.get("AllowLeaderTrace");
			else
				AllowLeaderTrace = "false";
		}
		if (this.TargetTraceItem == null)
			this.TargetTraceItem = "";

		if (this.planParam.get("TargetTraceEnabled") != null
				&& "True"
						.equalsIgnoreCase((String) this.planParam.get("TargetTraceEnabled"))) {
			if (planParam.get("TargetDefineItem") != null
					&& ((String) planParam.get("TargetDefineItem")).trim()
							.length() > 0) {
				String temp = (String) planParam.get("TargetDefineItem");
				temp = temp.replaceAll(",", "");
				if (temp.trim().length() > 0)
					TargetDefineItem = (","
							+ ((String) planParam.get("TargetDefineItem"))
									.trim() + ",").toUpperCase(); // 目标卡指标
			}

			if (this.planParam.get("TargetTraceItem") != null
					&& ((String) this.planParam.get("TargetTraceItem")).trim()
							.length() > 0) {
				this.TargetTraceItem = (String) this.planParam
						.get("TargetTraceItem");
				this.AllowLeaderTrace = (String) this.planParam
						.get("AllowLeaderTrace");
			} else {
				this.TargetTraceItem = "";
				this.AllowLeaderTrace = "false";
			}
		}

		if ("true".equalsIgnoreCase(this.AllowLeaderTrace)) {
			this.isAllowAppealTrancePoint = isAllowAppealTrancePoint(); // 是否允许报批跟踪指标
			this.isAllowApproveTrancePoint = isAllowApproveTrancePoint(); // 是否满足条件可以批准跟踪指标
		}

		this.perPointScoreMap = getPerPointScoreMap();
		if (!"7".equals(this.plan_vo.getString("status")))// 结束的计划，显示跟踪指标
		{
			if (this.TargetTraceItem.length() > 0) {
				String[] temps = this.TargetTraceItem.split(",");
				for (int i = 0; i < temps.length; i++) {
					if (temps[i] != null && temps[i].length() > 0)
						this.hiden_str += temps[i].toUpperCase() + "/";
				}
			}
		}
		if (this.planParam.get("TargetTraceEnabled") != null
				&& !""
						.equals((String) this.planParam.get("TargetTraceEnabled")))
			this.TargetTraceEnabled = (String) this.planParam
					.get("TargetTraceEnabled");

		if (this.planParam.get("TargetTraceEnabled") != null
				&& "true"
						.equalsIgnoreCase((String) this.planParam.get("TargetTraceEnabled"))) {
			// if(this.TargetCollectItem.trim().length()>0)
			if (this.planParam.get("TargetCollectItem") != null
					&& ((String) this.planParam.get("TargetCollectItem"))
							.trim().length() > 0) {
				this.TargetCollectItem = ((String) this.planParam
						.get("TargetCollectItem"));
				String[] temps = ((String) this.planParam
						.get("TargetCollectItem")).split(",");
				for (int i = 0; i < temps.length; i++) {
					if (temps[i] != null && temps[i].length() > 0)
						this.TargetCollectItem_str += temps[i].toUpperCase()
								+ "/";
				}
			}
		}
		if (this.planParam.get("TargetTraceEnabled") != null
				&& "false"
						.equalsIgnoreCase((String) this.planParam.get("TargetTraceEnabled"))) {
			if (ht_table != null
					&& ht_table.get("TargetCollectItem") != null
					&& ((String) ht_table.get("TargetCollectItem")).trim()
							.length() > 0) {
				this.TargetCollectItem = ((String) ht_table
						.get("TargetCollectItem"));
				String[] temps = ((String) ht_table.get("TargetCollectItem"))
						.split(",");
				for (int i = 0; i < temps.length; i++) {
					if (temps[i] != null && temps[i].length() > 0)
						this.TargetCollectItem_str += temps[i].toUpperCase()
								+ "/";
				}
			}

		}

		ParseXmlBo parseXmlBo = new ParseXmlBo(this.conn);
		parseXmlBo.getPoint_objectMap(object_id,
				String.valueOf(this.plan_vo.getInt("plan_id")), "opinions",
				this.plan_vo.getInt("object_type"));
		sign_point_objectMap = parseXmlBo.getPoint_objectMap();
		sign_objectMap = parseXmlBo.getObjectMap();

		this.itemPrivMap = getItemPrivMap();
		if(StringUtils.isNotEmpty(optCardObject)) {
			this.optCardObject = optCardObject;
		}
		isPrivByOrg();
		// this.isApprove= getIsApproveFlag();

	}
	/**
	 * 判断指标的最小或最大任务数是否为0
	 * @param planid
	 * @param itemid
	 * @return
	 */
	public boolean isMinZero(String planid,String itemid){
		boolean flag=false;
		ContentDAO dao = new ContentDAO(this.conn);
		try{
			String sql = "select * from per_dyna_item where plan_id='"+planid+"' and item_id='"+itemid+"' and body_id=" +this.perObject_vo.getString("body_id");
			RowSet rs = dao.search(sql);
			while (rs.next())
			{
				String rule = Sql_switcher.readMemo(rs, "Task_rule");
				if (rule == null || (rule != null && "".equals(rule)))
				{

				} else
				{
					Document doc = PubFunc.generateDom(rule);
					String xpath = "//Task";
					XPath xpath_ = XPath.newInstance(xpath);
					Element ele = (Element) xpath_.selectSingleNode(doc);
					Element child;
					if (ele != null)
					{
						String maxTaskNumber = "";
						String minTaskNumber = "";

						child = ele.getChild("TaskNumber");
						if (child != null)
						{
							maxTaskNumber = child.getAttributeValue("MaxCount")!=null?child.getAttributeValue("MaxCount"):"";
							minTaskNumber = child.getAttributeValue("MinCount")!=null?child.getAttributeValue("MinCount"):"";
						}
						if("0".equals(maxTaskNumber)||"0".equals(minTaskNumber)||minTaskNumber==null||minTaskNumber.length()==0){
							flag=true;
						}
					}
				}
			}
			
		}catch (Exception e)
		{
			e.printStackTrace();
		}
		return flag;
	}
	public ObjectCardBo(Connection con, String planid, String object_id,
			UserView userView) {
		this.conn = con;
		this.plan_vo = getPlanVo(planid);
		this.object_type = this.plan_vo.getString("object_type");
		this.template_vo = get_TemplateVo();
		this.object_id = object_id;
		this.plan_id = planid;
		this.userView = userView;
		this.mainbodyBean = getMainbodyBean();
		if (this.plan_vo.getInt("object_type") == 1
				|| this.plan_vo.getInt("object_type") == 3
				|| this.plan_vo.getInt("object_type") == 4) {
			this.un_functionaryBean = this.getMainbodyBean(
					String.valueOf(this.plan_vo.getInt("plan_id")), object_id);
			if (this.un_functionaryBean != null)
				this.un_functionary = (String) this.un_functionaryBean
						.get("mainbody_id");
		}
		LoadXml loadxml = null;
		if (BatchGradeBo.getPlanLoadXmlMap().get(
				String.valueOf(this.plan_vo.getInt("plan_id"))) == null) {
			loadxml = new LoadXml(this.conn, String.valueOf(this.plan_vo
					.getInt("plan_id")));
			BatchGradeBo.getPlanLoadXmlMap().put(
					String.valueOf(this.plan_vo.getInt("plan_id")), loadxml);
		} else
			loadxml = (LoadXml) BatchGradeBo.getPlanLoadXmlMap().get(
					String.valueOf(this.plan_vo.getInt("plan_id")));
		this.planParam = loadxml.getDegreeWhole();
		if ("1".equals(this.template_vo.getString("status"))
				&& this.planParam.get("VerifySameScore") != null
				&& "true"
						.equalsIgnoreCase((String) this.planParam.get("VerifySameScore")))
			this.VerifySameScore = true;
		if ("1".equals(this.template_vo.getString("status"))
				&& this.planParam.get("ScoreFromItem") != null
				&& "true"
						.equalsIgnoreCase((String) this.planParam.get("ScoreFromItem")))
			this.ScoreFromItem = true;
		this.scoreflag = (String) planParam.get("scoreflag"); // =2混合，=1标度,=4加扣分
		if (planParam.get("NoApproveTargetCanScore") != null)
			NoApproveTargetCanScore = (String) planParam
					.get("NoApproveTargetCanScore"); // 目标卡未审批也允许打分 True, False,
														// 默认为 False
		this.objectSpFlag = getObjectSpFlag(object_id, planid);
		this.isAdjustPoint = getIsAdjustPoint();
		AnalysePlanParameterBo bo = new AnalysePlanParameterBo(this.conn);
		Hashtable ht_table = bo.analyseParameterXml();
		this.publicParam = ht_table;
		if (ht_table != null) {
			if (ht_table.get("creatCard_mail") != null)
				this.creatCard_mail = (String) ht_table.get("creatCard_mail");
			if (ht_table.get("creatCard_mail_template") != null)
				this.creatCard_mail_template = (String) ht_table
						.get("creatCard_mail_template");
			if (ht_table.get("evaluateCard_mail") != null)
				this.evaluateCard_mail = (String) ht_table
						.get("evaluateCard_mail");
			if (ht_table.get("evaluateCard_mail_template") != null)
				this.evaluateCard_mail_template = (String) ht_table
						.get("evaluateCard_mail_template");
			if (ht_table.get("TargetTraceItem") != null)
				this.TargetTraceItem = (String) ht_table.get("TargetTraceItem");
			if (ht_table.get("SubSet") != null)
				this.subSet = (String) ht_table.get("SubSet");
			if (ht_table.get("TargetPostDuty") != null)
				this.targetPostDuty = (HashMap) ht_table.get("TargetPostDuty");
			if (ht_table.get("TargetItem") != null)
				this.TargetItem = (String) ht_table.get("TargetItem");
			if (ht_table.get("TargetDefineItem") != null
					&& ((String) ht_table.get("TargetDefineItem")).trim()
							.length() > 0) {
				String temp = (String) ht_table.get("TargetDefineItem");
				temp = temp.replaceAll(",", "");
				if (temp.trim().length() > 0)
					this.TargetDefineItem = (","
							+ (String) ht_table.get("TargetDefineItem") + ",")
							.toUpperCase();
			}

			if (ht_table.get("DescriptionItem") != null)
				this.point_explain_item = (String) ht_table
						.get("DescriptionItem");
			if (ht_table.get("PrincipleItem") != null)
				this.point_evaluate_item = (String) ht_table
						.get("PrincipleItem");

			if (this.TargetTraceItem != null
					&& this.TargetTraceItem.trim().length() > 0)
				AllowLeaderTrace = (String) ht_table.get("AllowLeaderTrace");
			else
				AllowLeaderTrace = "false";
		}
		if (this.TargetTraceItem == null)
			this.TargetTraceItem = "";

		if (this.planParam.get("TargetTraceEnabled") != null
				&& "True"
						.equalsIgnoreCase((String) this.planParam.get("TargetTraceEnabled"))) {
			if (planParam.get("TargetDefineItem") != null
					&& ((String) planParam.get("TargetDefineItem")).trim()
							.length() > 0) {
				String temp = (String) planParam.get("TargetDefineItem");
				temp = temp.replaceAll(",", "");
				if (temp.trim().length() > 0)
					TargetDefineItem = (","
							+ ((String) planParam.get("TargetDefineItem"))
									.trim() + ",").toUpperCase(); // 目标卡指标
			}

			if (this.planParam.get("TargetTraceItem") != null
					&& ((String) this.planParam.get("TargetTraceItem")).trim()
							.length() > 0) {
				this.TargetTraceItem = (String) this.planParam
						.get("TargetTraceItem");
				this.AllowLeaderTrace = (String) this.planParam
						.get("AllowLeaderTrace");
			} else {
				this.TargetTraceItem = "";
				this.AllowLeaderTrace = "false";
			}
		}

		{
			if (this.TargetTraceItem.length() > 0) {
				String[] temps = this.TargetTraceItem.split(",");
				for (int i = 0; i < temps.length; i++) {
					if (temps[i] != null && temps[i].length() > 0)
						this.hiden_str += temps[i].toUpperCase() + "/";
				}
			}
		}
		if (this.planParam.get("TargetTraceEnabled") != null
				&& !""
						.equals((String) this.planParam.get("TargetTraceEnabled")))
			this.TargetTraceEnabled = (String) this.planParam
					.get("TargetTraceEnabled");

		if (this.planParam.get("TargetTraceEnabled") != null
				&& "true"
						.equalsIgnoreCase((String) this.planParam.get("TargetTraceEnabled"))) {
			// if(this.TargetCollectItem.trim().length()>0)
			if (this.planParam.get("TargetCollectItem") != null
					&& ((String) this.planParam.get("TargetCollectItem"))
							.trim().length() > 0) {
				this.TargetCollectItem = ((String) this.planParam
						.get("TargetCollectItem"));
				String[] temps = ((String) this.planParam
						.get("TargetCollectItem")).split(",");
				for (int i = 0; i < temps.length; i++) {
					if (temps[i] != null && temps[i].length() > 0)
						this.TargetCollectItem_str += temps[i].toUpperCase()
								+ "/";
				}
			}
		}
		if (this.planParam.get("TargetTraceEnabled") != null
				&& "false"
						.equalsIgnoreCase((String) this.planParam.get("TargetTraceEnabled"))) {
			if (ht_table != null
					&& ht_table.get("TargetCollectItem") != null
					&& ((String) ht_table.get("TargetCollectItem")).trim()
							.length() > 0) {
				this.TargetCollectItem = ((String) ht_table
						.get("TargetCollectItem"));
				String[] temps = ((String) ht_table.get("TargetCollectItem"))
						.split(",");
				for (int i = 0; i < temps.length; i++) {
					if (temps[i] != null && temps[i].length() > 0)
						this.TargetCollectItem_str += temps[i].toUpperCase()
								+ "/";
				}
			}

		}
		isPrivByOrg();

	}

	/**
	 * 
	 * @param con
	 * @param planid
	 * @param object_id
	 * @param userView
	 * @param func
	 *            1:新建任务 保存操作调用的构造函数
	 */
	public ObjectCardBo(Connection con, String planid, String object_id,
			UserView userView, String model, String opt, int func) {
		if (func == 1) {
			this.model = model;
			this.opt = Integer.parseInt(opt);
			this.conn = con;
			this.plan_vo = getPlanVo(planid);
			this.template_vo = get_TemplateVo();
			this.object_id = object_id;
			this.plan_id = planid;
			this.userView = userView;
			// this.mainbodyBean=getMainbodyBean();
			if (this.plan_vo.getInt("object_type") == 1
					|| this.plan_vo.getInt("object_type") == 3
					|| this.plan_vo.getInt("object_type") == 4) {
				this.un_functionaryBean = this.getMainbodyBean(
						String.valueOf(this.plan_vo.getInt("plan_id")),
						object_id);
				if (this.un_functionaryBean != null)
					this.un_functionary = (String) this.un_functionaryBean
							.get("mainbody_id");
			}

			LoadXml loadxml = null;
			if (BatchGradeBo.getPlanLoadXmlMap().get(
					String.valueOf(this.plan_vo.getInt("plan_id"))) == null) {
				loadxml = new LoadXml(this.conn, String.valueOf(this.plan_vo
						.getInt("plan_id")));
				BatchGradeBo.getPlanLoadXmlMap()
						.put(String.valueOf(this.plan_vo.getInt("plan_id")),
								loadxml);
			} else
				loadxml = (LoadXml) BatchGradeBo.getPlanLoadXmlMap().get(
						String.valueOf(this.plan_vo.getInt("plan_id")));
			this.planParam = loadxml.getDegreeWhole();
			// this.objectSpFlag=getObjectSpFlag(object_id,planid);
			// this.isAdjustPoint=getIsAdjustPoint();

		}
	}

	// 判断考核对象文档表有没有task_id字段
	public void executeTaskField(ContentDAO dao) {
		try {
			DBMetaModel dbmodel = new DBMetaModel(this.conn);
			RowSet rowSet = dao.search("select * from per_article where 1=2");
			ResultSetMetaData data = rowSet.getMetaData();
			boolean isTask_id = false;
			for (int i = 0; i < data.getColumnCount(); i++) {
				String name = data.getColumnName(i + 1).toLowerCase();
				if ("task_id".equalsIgnoreCase(name))
					isTask_id = true;
			}
			if (!isTask_id) {
				Table table = new Table("per_article");
				Field obj = new Field("task_id", "task_id");
				obj.setDatatype(DataType.INT);
				obj.setKeyable(false);
				obj.setVisible(false);
				obj.setAlign("left");
				table.addField(obj);
				DbWizard dbWizard = new DbWizard(this.conn);
				dbWizard.addColumns(table);
			}

			if (rowSet != null)
				rowSet.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 是否满足条件可以报批跟踪指标
	public String isAllowAppealTrancePoint() {
		String flag = "false";
		if ("true".equalsIgnoreCase(this.AllowLeaderTrace)) {
			if (this.object_id.equals(this.userView.getA0100())
					|| this.un_functionary.equalsIgnoreCase(this.userView
							.getA0100())) {
				if ("03".equals(this.objectSpFlag)
						&& (this.perObject_vo.getString("trace_sp_flag") == null
								|| this.perObject_vo.getString("trace_sp_flag")
										.trim().length() == 0
								|| "01"
										.equals(this.perObject_vo.getString("trace_sp_flag")) || "07".equals(this.perObject_vo
								.getString("trace_sp_flag")))) {
					flag = "true";
				}
			}
		}
		return flag;
	}

	/**
	 * 获得加扣分指标的p0400
	 * 
	 * @return
	 */
	public String getAddMinusPointStr() {
		if (this.hasAddMinusItem) {
			StringBuffer p0400_str = new StringBuffer("");
			LazyDynaBean a_bean = null;
			LazyDynaBean point_bean = null;
			for (int i = 0; i < templateItemList.size(); i++) {
				a_bean = (LazyDynaBean) this.templateItemList.get(i);
				String isAddMinusItem = (String) a_bean.get("isAddMinusItem");
				String item_id = (String) a_bean.get("item_id");
				if ("1".equals(isAddMinusItem)) {
					for (int j = 0; j < p04List.size(); j++) {
						point_bean = (LazyDynaBean) this.p04List.get(j);
						String p0400 = (String) point_bean.get("p0400");
						String _item_id = (String) point_bean.get("item_id");
						if (_item_id.equalsIgnoreCase(item_id))
							p0400_str.append(",'" + p0400 + "'");
					}

					String score = (String) a_bean.get("score");
					String rank = (String) a_bean.get("rank");
					// 分值模板
					if ("0".equals(this.template_vo.getString("status"))) {
						if (score != null && score.length() > 0)
							addMinusItemScore += Double.parseDouble(score);
					} else {
						if (rank != null && rank.length() > 0)
							addMinusItemScore += Double.parseDouble(rank);
					}

				}
			}
			if (p0400_str.length() > 0)
				return p0400_str.substring(1);
		}
		return "";
	}

	// 是否满足条件可以批准跟踪指标
	public String isAllowApproveTrancePoint() {
		String flag = "false";
		RowSet rowSet = null;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			if ("true".equalsIgnoreCase(this.AllowLeaderTrace)) {
				String SpByBodySeq = "false";
				if (this.planParam.get("SpByBodySeq") != null)
					SpByBodySeq = (String) this.planParam.get("SpByBodySeq");
				if ("true".equalsIgnoreCase(SpByBodySeq)) {
					StringBuffer buf = new StringBuffer("");
					buf.append("select mainbody_id from per_mainbody where plan_id="
							+ this.plan_vo.getInt("plan_id"));
					buf.append(" and object_id='"
							+ this.object_id
							+ "' and sp_seq=(select min(sp_seq) from per_mainbody where ");
					if("False".equalsIgnoreCase(NoApproveTargetCanScore)){//允许对未批准的目标卡进行评分
						buf.append(" plan_id=" + this.plan_vo.getInt("plan_id")
								+ " and object_id='" + this.object_id
								+ "' and (sp_flag='02' or sp_flag='03')) ");
						buf.append(" and (sp_flag='02' or sp_flag='03')");
					} else {
						buf.append(" plan_id=" + this.plan_vo.getInt("plan_id")
								+ " and object_id='" + this.object_id
								+ "' )  ");
					}
					rowSet = dao.search(buf.toString());
					while (rowSet.next()) {
						String mainbody_id = rowSet.getString("mainbody_id");
						if (mainbody_id.equals(this.userView.getA0100()))
							flag = "true";
					}
				} else {
					
					StringBuffer sql = new StringBuffer(
							"select per_mainbody.mainbody_id,per_mainbody.a0101,per_mainbodyset.name,per_mainbodyset.");
					if (Sql_switcher.searchDbServer() == Constant.ORACEL)
						sql.append("level_o ");
					else
						sql.append("level ");
					sql.append(" from per_mainbody,per_mainbodyset where ");
					if("False".equalsIgnoreCase(NoApproveTargetCanScore)){//允许对未批准的目标卡进行评分
						sql.append(" per_mainbody.plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and per_mainbody.object_id='"
								+ this.object_id
								+ "' and ( per_mainbody.sp_flag='02' or per_mainbody.sp_flag='03' ) ");
					}
					else
						sql.append(" per_mainbody.plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and per_mainbody.object_id='"
								+ this.object_id
								+ "' ");
					sql.append(" and per_mainbody.body_id=per_mainbodyset.body_id ");
					if (Sql_switcher.searchDbServer() == Constant.ORACEL)
						sql.append("  and level_o=1 ");
					else
						sql.append("  and level=1 ");
					rowSet = dao.search(sql.toString());
					String mainbody_id = "";
					int i = 0;
					while (rowSet.next()) {
						i++;
						mainbody_id = rowSet.getString("mainbody_id");
						if (mainbody_id.length() > 0
								&& mainbody_id.equalsIgnoreCase(this.userView
										.getA0100())){
							flag = "true";
							break;
						}
					}
					
					if (i == 0)
						flag = "true";
				}
			}
			if (rowSet != null)
				rowSet.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return flag;
	}

	public String getPlanInfo() {
		String info = "";
		try {
			String cycle = this.plan_vo.getString("cycle");
			if ("3".equals(cycle))// by month
			{
				info = this.plan_vo.getString("theyear")
						+ ResourceFactory.getProperty("datestyle.year")
						+ this.plan_vo.getString("themonth")
						+ ResourceFactory.getProperty("datestyle.month") + "`"
						+ this.plan_vo.getString("name")/*
														 * +" "+ResourceFactory.
														 * getProperty
														 * ("performance.kh.table"
														 * )
														 */;
			} else if ("0".equals(cycle))// by year
			{
				info = this.plan_vo.getString("theyear")
						+ ResourceFactory.getProperty("datestyle.year") + "`"
						+ this.plan_vo.getString("name")/*
														 * +" "+ResourceFactory.
														 * getProperty
														 * ("performance.kh.table"
														 * )
														 */;
			} else if ("1".equals(cycle))// by half year
			{
				if ("1".equals(this.plan_vo.getString("thequarter"))) {
					info = this.plan_vo.getString("theyear")
							+ ResourceFactory.getProperty("datestyle.year")
							+ ResourceFactory
									.getProperty("report.pigeonhole.uphalfyear")
							+ "`" + this.plan_vo.getString("name")
					/* +" "+ResourceFactory.getProperty("performance.kh.table") */;
				} else {
					info = this.plan_vo.getString("theyear")
							+ ResourceFactory.getProperty("datestyle.year")
							+ ResourceFactory
									.getProperty("report.pigeonhole.downhalfyear")
							+ "`" + this.plan_vo.getString("name")
					/* +" "+ResourceFactory.getProperty("performance.kh.table") */;
				}
			} else if ("2".equals(cycle))// by quarter
			{
				info = this.plan_vo.getString("theyear")
						+ ResourceFactory.getProperty("datestyle.year")
						+ AdminCode.getCodeName("12",
								this.plan_vo.getString("thequarter")) + "`"
						+ this.plan_vo.getString("name")/*
														 * +" "+ResourceFactory.
														 * getProperty
														 * ("performance.kh.table"
														 * )
														 */;
			} else {
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				info = sdf.format(this.plan_vo.getDate("start_date")) + " 至 "
						+ sdf.format(this.plan_vo.getDate("end_date"));
				info += "`" + this.plan_vo.getString("name")/*
															 * +" "+ResourceFactory
															 * .getProperty(
															 * "performance.kh.table"
															 * )
															 */;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return info;
	}

	public ObjectCardBo(Connection con, String planid, String object_id,
			UserView userView, String model, String optCardObject) {
		this.conn = con;
		this.plan_vo = getPlanVo(planid);
		this.template_vo = get_TemplateVo();
		this.object_id = object_id;
		this.userView = userView;
		this.isAdjustPoint = getIsAdjustPoint();
		/*
		 * if(this.plan_vo.getInt("object_type")==1) this.objectSpFlag="03";
		 * else
		 */
		{

			// this.objectSpFlag="02";
		}
		this.model = model;
		this.mainbodyBean = getMainbodyBean();
		if (this.plan_vo.getInt("object_type") == 1
				|| this.plan_vo.getInt("object_type") == 3
				|| this.plan_vo.getInt("object_type") == 4) {
			this.un_functionaryBean = this.getMainbodyBean(
					String.valueOf(this.plan_vo.getInt("plan_id")), object_id);
			if (this.un_functionaryBean != null)
				this.un_functionary = (String) this.un_functionaryBean
						.get("mainbody_id");
		}
		// LoadXml loadxml=new
		// LoadXml(this.conn,String.valueOf(this.plan_vo.getInt("plan_id")));
		LoadXml loadxml = null;
		if (BatchGradeBo.getPlanLoadXmlMap().get(
				String.valueOf(this.plan_vo.getInt("plan_id"))) == null) {
			loadxml = new LoadXml(this.conn, String.valueOf(this.plan_vo
					.getInt("plan_id")));
			BatchGradeBo.getPlanLoadXmlMap().put(
					String.valueOf(this.plan_vo.getInt("plan_id")), loadxml);
		} else
			loadxml = (LoadXml) BatchGradeBo.getPlanLoadXmlMap().get(
					String.valueOf(this.plan_vo.getInt("plan_id")));

		this.planParam = loadxml.getDegreeWhole();
		if ("1".equals(this.template_vo.getString("status"))
				&& this.planParam.get("VerifySameScore") != null
				&& "true"
						.equalsIgnoreCase((String) this.planParam.get("VerifySameScore")))
			this.VerifySameScore = true;

		if ("1".equals(this.template_vo.getString("status"))
				&& this.planParam.get("ScoreFromItem") != null
				&& "true"
						.equalsIgnoreCase((String) this.planParam.get("ScoreFromItem")))
			this.ScoreFromItem = true;
		if ((("4".equals(this.model) || "2".equals(this.model) || "1"
				.equals(this.model)) && ("03".equals(this.objectSpFlag) || "06"
				.equals(this.objectSpFlag)))
				&& ("true"
						.equalsIgnoreCase((String) this.planParam.get("isShowSubmittedScores"))
						|| "true"
								.equalsIgnoreCase((String) this.planParam.get("WholeEval")) || "true".equalsIgnoreCase((String) this.planParam
						.get("NodeKnowDegree"))))
			this.isAddExtendRow = "1";

		this.p04List = getP04List();
		this.objectSpFlag = getObjectSpFlag(object_id, planid);

		this.selfEvaluationStatus = getSelfEvaluateStatus();
		this.isSubScore = getIsSubScore();
		this.perPointMap = getPerPointMap(object_id,
				this.plan_vo.getInt("object_type"), planid);
		AnalysePlanParameterBo bo = new AnalysePlanParameterBo(this.conn);
		Hashtable ht_table = bo.analyseParameterXml();

		if (ht_table != null) {
			if (ht_table.get("creatCard_mail") != null)
				this.creatCard_mail = (String) ht_table.get("creatCard_mail");
			if (ht_table.get("creatCard_mail_template") != null)
				this.creatCard_mail_template = (String) ht_table
						.get("creatCard_mail_template");
			if (ht_table.get("evaluateCard_mail") != null)
				this.evaluateCard_mail = (String) ht_table
						.get("evaluateCard_mail");
			if (ht_table.get("evaluateCard_mail_template") != null)
				this.evaluateCard_mail_template = (String) ht_table
						.get("evaluateCard_mail_template");
			if (ht_table.get("TargetTraceItem") != null)
				this.TargetTraceItem = (String) ht_table.get("TargetTraceItem");
			if (ht_table.get("TargetDefineItem") != null
					&& ((String) ht_table.get("TargetDefineItem")).trim()
							.length() > 0)
				this.TargetDefineItem = (","
						+ (String) ht_table.get("TargetDefineItem") + ",")
						.toUpperCase();
			if (ht_table.get("DescriptionItem") != null)
				this.point_explain_item = (String) ht_table
						.get("DescriptionItem");
			if (ht_table.get("PrincipleItem") != null)
				this.point_evaluate_item = (String) ht_table
						.get("PrincipleItem");

			if (this.TargetTraceItem != null
					&& this.TargetTraceItem.trim().length() > 0)
				AllowLeaderTrace = (String) ht_table.get("AllowLeaderTrace");
			else
				AllowLeaderTrace = "false";
		}
		/*
		 * 
		 * this.creatCard_mail=(String)ht_table.get("creatCard_mail");
		 * this.creatCard_mail_template
		 * =(String)ht_table.get("creatCard_mail_template");
		 * this.evaluateCard_mail=(String)ht_table.get("evaluateCard_mail");
		 * this.evaluateCard_mail_template=(String)ht_table.get(
		 * "evaluateCard_mail_template");
		 * this.TargetTraceItem=(String)ht_table.get("TargetTraceItem");
		 */

		if (this.TargetTraceItem == null)
			this.TargetTraceItem = "";

		if (this.planParam.get("TargetTraceEnabled") != null
				&& "True"
						.equalsIgnoreCase((String) this.planParam.get("TargetTraceEnabled"))) {
			if (planParam.get("TargetDefineItem") != null
					&& ((String) planParam.get("TargetDefineItem")).trim()
							.length() > 0)
				TargetDefineItem = (","
						+ ((String) planParam.get("TargetDefineItem")).trim() + ",")
						.toUpperCase(); // 目标卡指标

			if (this.planParam.get("TargetTraceItem") != null
					&& ((String) this.planParam.get("TargetTraceItem")).trim()
							.length() > 0) {
				this.TargetTraceItem = (String) this.planParam
						.get("TargetTraceItem");
				AllowLeaderTrace = (String) this.planParam
						.get("AllowLeaderTrace");
			} else {
				this.TargetTraceItem = "";
				AllowLeaderTrace = "false";
			}
		}

		if ("true".equalsIgnoreCase(this.AllowLeaderTrace)) {
			this.isAllowAppealTrancePoint = isAllowAppealTrancePoint(); // 是否允许报批跟踪指标
			this.isAllowApproveTrancePoint = isAllowApproveTrancePoint(); // 是否满足条件可以批准跟踪指标
		}

		this.perPointScoreMap = getPerPointScoreMap();

		// if(!this.objectSpFlag.equals("03"))
		{
			if (this.TargetTraceItem.length() > 0) {
				String[] temps = this.TargetTraceItem.split(",");
				for (int i = 0; i < temps.length; i++) {
					if (temps[i] != null && temps[i].length() > 0)
						this.hiden_str += temps[i].toUpperCase() + "/";
				}
			}
		}

		ParseXmlBo parseXmlBo = new ParseXmlBo(this.conn);
		parseXmlBo.getPoint_objectMap(object_id,
				String.valueOf(this.plan_vo.getInt("plan_id")), "opinions",
				this.plan_vo.getInt("object_type"));
		sign_point_objectMap = parseXmlBo.getPoint_objectMap();
		sign_objectMap = parseXmlBo.getObjectMap();

		this.itemPrivMap = getItemPrivMap();
		this.optCardObject = optCardObject;
		// this.isApprove= getIsApproveFlag();

	}

	public HashMap getItemPrivMap() {
		HashMap map = new HashMap();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			DbWizard dbWizard = new DbWizard(this.conn);
			if (dbWizard.isExistTable(
					"per_itempriv_" + this.plan_vo.getInt("plan_id"), false)) {
				String body_id = "";
				if (this.mainbodyBean != null) {
					if (this.mainbodyBean.get("body_id") != null)
						body_id = (String) this.mainbodyBean.get("body_id");
				} else {
					String sql = "select pms.* from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and  ppb.plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and pms.level=" + optCardObject;
					if (Sql_switcher.searchDbServer() == Constant.ORACEL)
						sql = "select pms.* from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and  ppb.plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and pms.level_o=" + optCardObject;
					RowSet rowSet = dao.search(sql);
					if (rowSet.next())
						body_id = rowSet.getString("body_id");
					rowSet.close();
				}

				if (body_id != null && body_id.trim().length() > 0) {
					// 查找项目权限之前先查询计划中当前主体的opt，以应对打分确认标识为“确认”的情况 by 刘蒙
					int planBodyOpt = getPlanBodyOpt(body_id);
					
					RowSet rowSet = dao.search("select * from per_itempriv_"
							+ this.plan_vo.getInt("plan_id")
							+ " where body_id=" + body_id + " and object_id='"
							+ this.object_id + "'");
					if (rowSet.next()) {
						ResultSetMetaData mt = rowSet.getMetaData();
						for (int i = 0; i < mt.getColumnCount(); i++) {
							String columnName = mt.getColumnName(i + 1);
							if (columnName.length() > 2
									&& "C_"
											.equalsIgnoreCase(columnName.substring(0, 2))) {
								if (planBodyOpt == 1) { // 表示参与评分，且只能确认
									map.put(columnName.substring(2), "1");
								} else {
									map.put(columnName.substring(2),
											rowSet.getString(columnName) != null ? rowSet
													.getString(columnName) : "0");
								}
							}
						}
					}
					rowSet.close();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}
/**
 * 目标卡 是交办还是办理 1办理
 * @return
 */
	public String getIsApproveFlag() {
		String flag = "0";
		try {
			if (this.planParam.get("SpByBodySeq") != null
					&& "true"
							.equalsIgnoreCase((String) this.planParam.get("SpByBodySeq"))) {
				
				String column = "";
				if (Sql_switcher.searchDbServer() == Constant.ORACEL)
					column = "level_o";
				else
					column = "level";
				StringBuffer sql = new StringBuffer(
						" select pm.seq,mainbody_id from per_mainbody pm,per_mainbodyset pms ");
				sql.append(" where sp_seq=(select max(sp_seq) from per_mainbody pm1,per_mainbodyset pms1 ");
				sql.append(" where pm1.body_id=pms1.body_id and pms1."+column+"<>5 and plan_id=" + this.plan_vo.getInt("plan_id"));
				sql.append(" and object_id='" + this.object_id
						+ "') and plan_id=" + this.plan_vo.getInt("plan_id"));
				sql.append(" and object_id='" + this.object_id+"' AND pm.body_id=pms.body_id AND pms."+column+"<>5");
				ContentDAO dao = new ContentDAO(this.conn);
				RowSet rs = dao.search(sql.toString());
				while (rs.next()) {
					if (this.userView.getA0100().equals(
							rs.getString("mainbody_id")))
						flag = "1";
				}
				rs.close();
			} else {

				// optCardObject 5:本人 -2：第四级领导 ,-1：第三级领导,0：主管领导,1：直接上级
				String targetMakeSeries = (String) this.planParam
						.get("targetMakeSeries");
				if ("1".equals(targetMakeSeries)
						&& "1".equals(this.optCardObject))
					flag = "1";
				if ("2".equals(targetMakeSeries)
						&& "0".equals(this.optCardObject))
					flag = "1";
				if ("3".equals(targetMakeSeries)
						&& "-1".equals(this.optCardObject))
					flag = "1";
				if ("4".equals(targetMakeSeries)
						&& "-2".equals(this.optCardObject))
					flag = "1";
				if ("0".equals(flag)) {

					int currentLevel = getCurrentLevel(optCardObject);

					String followBodyId = optCardObject;
					String targetAppMode = (String) planParam
							.get("targetAppMode"); // 目标管理审批模式:0-考核关系 1-汇报关系.
													// 默认为 0
					String posID = "";
					if ("1".equals(targetAppMode)) {
						posID = this.userView.getUserPosId();
					}
					String a_objectid = object_id;
					ArrayList appealObjectList = null;
					LazyDynaBean functionary = null;
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) {
						functionary = getMainbodyBean(
								String.valueOf(this.plan_vo.getInt("plan_id")),
								object_id);
						if (functionary != null)
							a_objectid = (String) functionary
									.get("mainbody_id");
					}
					for (int i = currentLevel + 1; i <= Integer
							.parseInt(targetMakeSeries); i++) {
						followBodyId = getfollowBodyid(followBodyId);
						appealObjectList = getAppealObjectInfo(followBodyId,
								"Usr", a_objectid,
								String.valueOf(this.plan_vo.getInt("plan_id")),
								posID, targetAppMode, object_id);
						if (appealObjectList.size() > 0) {
							break;
						}
					}
					if ((appealObjectList == null || appealObjectList.size() == 0)) // &&!a_objectid.equalsIgnoreCase(this.userView.getA0100()))
						flag = "1";
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return flag;
	}

	public String getIsApproveFlag(ArrayList dataList) {
		String flag = "0";
		try {
			String str = "";
			if (this.planParam.get("SpByBodySeq") != null
					&& "true"
							.equalsIgnoreCase((String) this.planParam.get("SpByBodySeq"))) {
				StringBuffer sql = new StringBuffer(
						" select seq,mainbody_id from per_mainbody ");
				sql.append(" where sp_seq=(select max(sp_seq) from per_mainbody ");
				sql.append(" where plan_id=" + this.plan_vo.getInt("plan_id"));
				sql.append(" and object_id='" + this.object_id
						+ "' and mainbody_id<>'" + this.object_id
						+ "') and plan_id=" + this.plan_vo.getInt("plan_id"));
				sql.append(" and object_id='" + this.object_id
						+ "' and mainbody_id<>'" + this.object_id + "'");
				ContentDAO dao = new ContentDAO(this.conn);
				RowSet rs = dao.search(sql.toString());
				while (rs.next()) {
					if (this.userView.getA0100().equals(
							rs.getString("mainbody_id")))
						flag = "1";
				}
				if ("0".equals(flag)) {
					ArrayList appealObjectList = getAppealObjectInfoBySeq(
							this.plan_vo.getInt("plan_id") + "", object_id,
							this.userView.getA0100());
					if (appealObjectList != null && appealObjectList.size() > 0) {
						str = (String) appealObjectList.get(0);
					} else {
						flag = "1";
					}
				}
				rs.close();
			} else {
				// optCardObject 5:本人 -2：第四级领导 ,-1：第三级领导,0：主管领导,1：直接上级
				String targetMakeSeries = (String) this.planParam
						.get("targetMakeSeries");
				if ("1".equals(targetMakeSeries)
						&& "1".equals(this.optCardObject))
					flag = "1";
				if ("2".equals(targetMakeSeries)
						&& "0".equals(this.optCardObject))
					flag = "1";
				if ("3".equals(targetMakeSeries)
						&& "-1".equals(this.optCardObject))
					flag = "1";
				if ("4".equals(targetMakeSeries)
						&& "-2".equals(this.optCardObject))
					flag = "1";
				if ("0".equals(flag)) {

					int currentLevel = getCurrentLevel(optCardObject);

					String followBodyId = optCardObject;
					String targetAppMode = (String) planParam
							.get("targetAppMode"); // 目标管理审批模式:0-考核关系 1-汇报关系.
													// 默认为 0
					String posID = "";
					if ("1".equals(targetAppMode)) {
						posID = this.userView.getUserPosId();
					}
					String a_objectid = object_id;
					ArrayList appealObjectList = null;
					LazyDynaBean functionary = null;
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) {
						functionary = getMainbodyBean(
								String.valueOf(this.plan_vo.getInt("plan_id")),
								object_id);
						if (functionary != null)
							a_objectid = (String) functionary
									.get("mainbody_id");
					}
					for (int i = currentLevel + 1; i <= Integer
							.parseInt(targetMakeSeries); i++) {
						followBodyId = getfollowBodyid(followBodyId);
						appealObjectList = getAppealObjectInfo(followBodyId,
								"Usr", a_objectid,
								String.valueOf(this.plan_vo.getInt("plan_id")),
								posID, targetAppMode, object_id);
						if (appealObjectList.size() > 0) {
							break;
						}
					}
					if ((appealObjectList == null || appealObjectList.size() == 0))
						flag = "1";
					else {
						str = (String) appealObjectList.get(0);
					}
				}
			}
			LazyDynaBean bean = new LazyDynaBean();
			bean.set("plan_id", this.plan_vo.getInt("plan_id") + "");
			bean.set("object_id", object_id);
			bean.set("str", str);
			bean.set("flag", flag);
			bean.set("level", optCardObject);
			// str=b0110+"^"+e0122+"^"+e01a1+"^"+a0101+"^"+amainbody_id+"/"+body_id
			dataList.add(bean);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return flag;
	}

	public int getCurrentLevel(String followBodyId) {
		int level = 1;
		if ("1".equalsIgnoreCase(followBodyId))
			level = 1;
		if ("0".equalsIgnoreCase(followBodyId))
			level = 2;
		if ("-1".equalsIgnoreCase(followBodyId))
			level = 3;
		if ("-2".equalsIgnoreCase(followBodyId))
			level = 4;
		if ("5".equalsIgnoreCase(followBodyId))
			level = 0;
		return level;
	}

	public String getfollowBodyid(String currentBodyid) {
		String bodyid = "5";
		if ("5".equalsIgnoreCase(currentBodyid))
			bodyid = "1";
		if ("1".equalsIgnoreCase(currentBodyid))
			bodyid = "0";
		if ("0".equalsIgnoreCase(currentBodyid))
			bodyid = "-1";
		if ("-1".equalsIgnoreCase(currentBodyid))
			bodyid = "-2";
		return bodyid;
	}

	private int printSpaceSize = 0;

	/**
	 * 取得表头列表
	 * 
	 * @return
	 */
	public ArrayList getHeadList() {
		ArrayList list = new ArrayList();
        RowSet rs = null;
		try {
        	// 计划中所有主体的opt by lium
        	ContentDAO dao = new ContentDAO(conn);
    		rs = dao.search("SELECT isgrade,opt,body_id FROM per_plan_body WHERE plan_id=?", Arrays.asList(new Object[] {
    			Integer.valueOf(plan_vo.getInt("plan_id"))
    		}));
			while (rs.next()) {
				int optValue = -1;
				
				String b = rs.getString("body_id");
				int iOpt = rs.getInt("opt");
				int iIsgrade = rs.getInt("isgrade");
				optValue = iIsgrade == 0 ? iOpt : optValue; // 只有参与评分了，opt才有效
				
				bodyOptMap.put(b, new Integer(optValue));
			}
        	
            
			String sortByDictionary_mbo = SystemConfig
					.getPropertyValue("sortByDictionary_mbo");// 是否按数据字典中指标顺序，显示目标卡（即，权重和分值不再最后面）
			if ("true".equalsIgnoreCase(sortByDictionary_mbo)) {
				if ("0".equals(this.template_vo.getString("status")))// 分值
				{
					hiden_str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0407/P0415/P0421/P0423/P0425/P0427/PLAN_ID/STATE/";
					if (opt != 2
							&& isAdjustPoint
							&& "False"
									.equalsIgnoreCase((String) this.planParam
                                            .get("taskAdjustNeedNew"))
							&& !(this.plan_vo.getInt("status") >= 4 && this.plan_vo
									.getInt("status") != 8)) {
						FieldItem item = DataDictionary.getFieldItem("p0421");
						if (!"03".equals(this.objectSpFlag)
								|| ("03".equals(this.objectSpFlag) && item
										.isVisible())) {
							if ((this.TargetDefineItem.length() == 0 || this.TargetDefineItem
									.indexOf(","
											+ item.getItemid().toUpperCase()
											+ ",") != -1)) {
								hiden_str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0407/P0415/P0423/P0425/P0427/PLAN_ID/STATE/";
							}
						}
					}

				}
				if ("1".equals(this.template_vo.getString("status"))) {
					hiden_str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0407/P0421/P0423/P0425/P0427/PLAN_ID/STATE/";
					if (opt != 2
							&& isAdjustPoint
							&& "False"
									.equalsIgnoreCase((String) this.planParam
                                            .get("taskAdjustNeedNew"))
							&& !(this.plan_vo.getInt("status") >= 4 && this.plan_vo
									.getInt("status") != 8)) {
						FieldItem item = DataDictionary.getFieldItem("p0423");
						if (!"03".equals(this.objectSpFlag)
								|| ("03".equals(this.objectSpFlag) && item
										.isVisible())) {
							if ((this.TargetDefineItem.length() == 0 || this.TargetDefineItem
									.indexOf(","
											+ item.getItemid().toUpperCase()
											+ ",") != -1)) {
								hiden_str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0407/P0421/P0425/P0427/PLAN_ID/STATE/";
							}
						}
					}
				}
				if (this.TargetTraceItem.length() > 0) {
					String[] temps = this.TargetTraceItem.split(",");
					for (int i = 0; i < temps.length; i++) {
						if (temps[i] != null && temps[i].length() > 0)
							this.hiden_str += temps[i].toUpperCase() + "/";
					}
				}

			}
			FieldItem fielditem = DataDictionary.getFieldItem("item_id");
			FieldItem fielditem2 = DataDictionary.getFieldItem("p0407");
			// 项目 ，指标/任务
			LazyDynaBean abean = null;
			ArrayList fieldList = DataDictionary.getFieldList("P04",
					Constant.USED_FIELD_SET);
			abean = new LazyDynaBean();
			abean.set("itemid", "itemid");
			if (fielditem == null
					|| "项目号".equalsIgnoreCase(fielditem.getItemdesc().trim()))
				abean.set("itemdesc", "项目");
			else
				abean.set("itemdesc", fielditem.getItemdesc());
			// 英大abean.set("itemdesc","考核维度");
			abean.set("itemType", "A");
			abean.set("codesetid", "0");
			list.add(abean);
			printSpaceSize++;
			abean = new LazyDynaBean();
			abean.set("itemid", "p0401");
			if (this.planParam.get("TaskNameDesc") != null
					&& !""
							.equals((String) this.planParam.get("TaskNameDesc"))) {
				abean.set("itemdesc",
						(String) this.planParam.get("TaskNameDesc"));
			} else {
				if (fielditem2 == null
						|| "任务内容"
								.equalsIgnoreCase(fielditem2.getItemdesc().trim())) {
					if (SystemConfig.getPropertyValue("clientName") != null
							&& "zglt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 中国联通
						abean.set("itemdesc", "工作目标");
					else
						abean.set("itemdesc",
								ResourceFactory.getProperty("jx.khplan.point"));
				} else
					abean.set("itemdesc", fielditem2.getItemdesc());
			}
			// 英大abean.set("itemdesc","考核项目");
			abean.set("itemType", "A");
			abean.set("codesetid", "0");
			abean.set("decimalwidth", "0");
			list.add(abean);
			printSpaceSize++;
			if (this.plan_vo != null && this.perObject_vo != null) {
				// 1:团对 2:我的目标 3:目标制订 4.目标评估 5.目标结果 6:目标执行情况 7:目标卡代制订 8:评分调整
				if (this.model != null && "8".equals(this.model)) {
					abean = new LazyDynaBean();
					abean.set("itemid", "score_result");
					abean.set("itemdesc", "分值");
					abean.set("itemType", "A");
					abean.set("codesetid", "0");
					abean.set("decimalwidth", "0");
					list.add(abean);
					for (int i = 0; i < this.mainbodyList.size(); i++) {
						LazyDynaBean a_bean = (LazyDynaBean) this.mainbodyList
								.get(i);
						String a0101 = (String) a_bean.get("a0101");
						String a0100 = (String) a_bean.get("a0100");
						String body_name = (String) a_bean.get("body_name");
						String fillctrl = (String) a_bean.get("fillctrl");
						String status = (String) a_bean.get("status");

						abean = new LazyDynaBean();
						abean.set("itemid", "_" + a0100);

						String desc = "未评价";
						if ("2".equals(status))
							desc = "已评价";
						else if ("1".equals(status))
							desc = "正评价";

						abean.set("itemdesc", a0101 + "(" + desc + ")");
						abean.set("itemType", "N");
						abean.set("codesetid", "0");
						abean.set("decimalwidth", "0");
						list.add(abean);
						printSpaceSize++;
						headOtherMainbodyList.add(abean);

						if (this.planParam.get("showDeductionCause") != null
								&& "True"
										.equalsIgnoreCase((String) this.planParam
                                                .get("showDeductionCause"))) // /显示扣分原因
						{
							abean = new LazyDynaBean();
							abean.set("itemid", "reason_" + a0100);
							if (this.plan_vo.getInt("plan_type") == 0)
								abean.set("itemdesc", body_name + "_评分说明");
							else
								abean.set("itemdesc", a0101 + "_评分说明");
							abean.set("itemType", "A");
							abean.set("codesetid", "0");
							abean.set("decimalwidth", "0");
							list.add(abean);
							headOtherMainbodyList.add(abean);
							printSpaceSize++;
						}
						// extendtHead.append("<td class='TableRow_2rows'  width='"+this.td_width+"'  nowrap valign='middle' align='center' >"+a0101+"("+body_name+")</td>\r\n");
					}
				} else if (this.model != null && "5".equals(this.model)) {

					if (this.plan_vo.getInt("method") != 1) {

						// 任务支持附件上传
						if (this.planParam.get("TaskSupportAttach") != null
								&& "True"
										.equalsIgnoreCase((String) this.planParam
                                                .get("TaskSupportAttach"))) {
							abean = new LazyDynaBean();
							abean.set("itemid", "attach");
							abean.set("itemdesc", "附件");
							abean.set("itemType", "A");
							abean.set("codesetid", "0");
							abean.set("decimalwidth", "0");
							list.add(abean);
							printSpaceSize++;
						}

						for (int i = 0; i < fieldList.size(); i++) {
							FieldItem item = (FieldItem) fieldList.get(i);
							String itemid = item.getItemid();
							String str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0425/P0427/P0407/P0415/P0421/P0423/PLAN_ID/STATE/";
							if ("1"
									.equals(this.template_vo.getString("status")))
								str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0425/P0427/P0407/P0421/P0423/PLAN_ID/STATE/";
							if ("true".equalsIgnoreCase(sortByDictionary_mbo))// 按数据字典顺序来显示
							{
								if ("0"
										.equals(this.template_vo.getString("status")))// 分值
								{
									str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0425/P0427/P0407/P0415/P0421/P0423/PLAN_ID/STATE/";
									if (opt != 2
											&& isAdjustPoint
											&& "False"
													.equalsIgnoreCase((String) this.planParam
                                                            .get("taskAdjustNeedNew"))
											&& !(this.plan_vo.getInt("status") >= 4 && this.plan_vo
													.getInt("status") != 8)) {
										FieldItem aitem = DataDictionary
												.getFieldItem("p0421");
										if (!"03".equals(this.objectSpFlag)
												|| ("03"
														.equals(this.objectSpFlag) && aitem
														.isVisible())) {
											if ((this.TargetDefineItem.length() == 0 || this.TargetDefineItem
													.indexOf(","
															+ aitem.getItemid()
																	.toUpperCase()
															+ ",") != -1)) {
												str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0425/P0427/P0407/P0415/P0423/PLAN_ID/STATE/";
											}
										}
									}
								}
								if ("1"
										.equals(this.template_vo.getString("status"))) {
									str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0425/P0427/P0407/P0421/P0423/PLAN_ID/STATE/";
									if (opt != 2
											&& isAdjustPoint
											&& "False"
													.equalsIgnoreCase((String) this.planParam
                                                            .get("taskAdjustNeedNew"))
											&& !(this.plan_vo.getInt("status") >= 4 && this.plan_vo
													.getInt("status") != 8)) {
										FieldItem aitem = DataDictionary
												.getFieldItem("p0423");
										if (!"03".equals(this.objectSpFlag)
												|| ("03"
														.equals(this.objectSpFlag) && aitem
														.isVisible())) {
											if ((this.TargetDefineItem.length() == 0 || this.TargetDefineItem
													.indexOf(","
															+ aitem.getItemid()
																	.toUpperCase()
															+ ",") != -1)) {
												str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0425/P0427/P0407/P0421/PLAN_ID/STATE/";
											}
										}
									}
								}
							}
							if (str.indexOf("/" + itemid.toUpperCase() + "/") != -1)
								continue;

							if (this.TargetDefineItem.length() > 0
									&& this.TargetDefineItem.indexOf(","
											+ itemid.toUpperCase() + ",") == -1)
								continue;

							if ("1".equals(item.getState())) {
								abean = new LazyDynaBean();
								abean.set("itemid", itemid);
								abean.set("itemdesc", item.getItemdesc());
								abean.set("itemType", item.getItemtype());
								abean.set("codesetid", item.getCodesetid());
								abean.set("decimalwidth",
										String.valueOf(item.getDecimalwidth()));
								list.add(abean);
								printSpaceSize++;
							}
						}
					}
					for (int i = 0; i < this.mainbodyList.size(); i++) {
						LazyDynaBean a_bean = (LazyDynaBean) this.mainbodyList
								.get(i);

						String a0101 = (String) a_bean.get("a0101");
						String a0100 = (String) a_bean.get("a0100");
						String body_name = (String) a_bean.get("body_name");
						String fillctrl = (String) a_bean.get("fillctrl");
						String status = (String) a_bean.get("status");
						//
						if (status == null || !"2".equalsIgnoreCase(status)) // 如果没有提交过分数，则不显示此打分人列啦
							continue;

						if (SystemConfig.getPropertyValue("clientName") != null
								&& "bjpt"
										.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {
						} else if (this.planParam.get("ShowLeaderEval") != null
								&& "True"
										.equalsIgnoreCase((String) this.planParam
                                                .get("ShowLeaderEval"))) {

						} else {
							if (this.userView.getA0100().equals(this.object_id)
									|| (this.userView.getA0100() != null
											&& !""
													.equals(this.userView.getA0100()) && this.userView
											.getA0100().equals(
													this.un_functionary))) {
								if (!this.userView.getA0100().equalsIgnoreCase(
										a0100)
										&& ("1".equals(this.from_flag) || "0"
												.equals(this.from_flag))) //
									continue;

							}
						}
						/*
						 * if(this.plan_vo.getInt("plan_type")==0) {
						 * a0101="XXXX"; body_name="--"; }
						 */
						abean = new LazyDynaBean();
						abean.set("itemid", "_" + a0100);

						if (this.plan_vo.getInt("plan_type") == 0)
							abean.set("itemdesc", body_name);
						else
							abean.set("itemdesc", a0101 + "(" + body_name + ")");
						abean.set("itemType", "N");
						abean.set("codesetid", "0");
						abean.set("decimalwidth", "0");
						list.add(abean);
						printSpaceSize++;
						headOtherMainbodyList.add(abean);

						if (this.planParam.get("showDeductionCause") != null
								&& "True"
										.equalsIgnoreCase((String) this.planParam
                                                .get("showDeductionCause"))) // /显示扣分原因
						{
							abean = new LazyDynaBean();
							abean.set("itemid", "reason_" + a0100);
							if (this.plan_vo.getInt("plan_type") == 0)
								abean.set("itemdesc", body_name + "_评分说明");
							else
								abean.set("itemdesc", a0101 + "_评分说明");
							abean.set("itemType", "A");
							abean.set("codesetid", "0");
							abean.set("decimalwidth", "0");
							list.add(abean);
							printSpaceSize++;
							headOtherMainbodyList.add(abean);
						}
						// extendtHead.append("<td class='TableRow_2rows'  width='"+this.td_width+"'  nowrap valign='middle' align='center' >"+a0101+"("+body_name+")</td>\r\n");
					}

				} else {
					// optCardObject="5"; // 5:本人 -2：第四级领导
					// ,-1：第三级领导,0：主管领导,1：直接上级
					// objectSpFlag="01"; //考核对象审批标识 //01:起草 02：报批 07：驳回 03：批准
					boolean flag = false;
					if ("01".equals(objectSpFlag) && "5".equals(optCardObject)
							&& this.plan_vo.getInt("status") != 5
							&& this.plan_vo.getInt("status") != 4)// 暂停和启动的，本人都不出现操作列
						flag = true;
					else if ("02".equals(objectSpFlag)) {
						/** 已报批目标卡，但是可以签批或回顾 */
						if ("True".equalsIgnoreCase((String) this.planParam.get("taskCanSign"))|| "True".equalsIgnoreCase((String) this.planParam.get("taskNeedReview")))
							flag = true;
			//			else if(optCardObject.equals("5")&&this.NoApproveTargetCanScore.equalsIgnoreCase("true")&&this.TargetTraceItem.length() > 0) //目标卡没批准也允许打分，但设置了跟踪指标
			//				flag = true;
						
					} else if ("07".equals(objectSpFlag)
							&& "5".equals(optCardObject)) {// 驳回的目标卡，并且用户是自己
						if (this.plan_vo.getInt("status") != 4
								&& this.plan_vo.getInt("status") != 6
								&& this.plan_vo.getInt("status") != 7) {
							flag = true;
							if (this.plan_vo.getInt("status") == 8
									&& "1".equals(this.isSubScore)) {
								if ("false"
										.equalsIgnoreCase((String) this.planParam
                                                .get("taskNeedReview"))) {
									flag = false;
								}
							}
						} else {
							if ("True"
									.equalsIgnoreCase((String) this.planParam.get("taskNeedReview")))
								flag = true;
						}
					} else if ("03".equals(objectSpFlag)
							&& ("5".equals(optCardObject) || "True"
									.equalsIgnoreCase((String) this.planParam
                                            .get("taskNeedReview"))))
						flag = true;// 已批准，但是是自己或可以回顾

					if ("4".equals(model)
							&& (opt == 2 || opt == 0)
							&& !("01".equals(this.objectSpFlag) || "07"
									.equals(this.objectSpFlag))) // 绩效评估
					{
						if ("True"
								.equalsIgnoreCase((String) this.planParam.get("taskNeedReview"))) {
							flag = true;

						} else {
							flag = false;
						}
					}
					if ("2".equals(model) && opt == 2) // 自我评分
						flag = true;

					/** 针对于一级审批的目标计划，直接上级，在目标员工目标模块可以提员工编辑任务 */
					if (("3".equals(model) || "1".equals(model)) && opt == 1
							&& !"5".equals(optCardObject)) {
						if ("01".equals(objectSpFlag)
								&& "True"
										.equalsIgnoreCase((String) this.planParam
                                                .get("allowLeadAdjustCard")))
							flag = true;
						if ("02".equals(objectSpFlag)
								&& "True"
										.equalsIgnoreCase((String) this.planParam
                                                .get("allowLeadAdjustCard")))
							flag = true;
					}

					// 计划为暂停，且对象为非标准
					if (this.plan_vo.getInt("status") == 5
							&& this.perObject_vo.getInt("kh_relations") == 1)
						flag = false;

					if (this.plan_vo.getInt("status") == 4
							&& (this.object_id.equals(this.userView.getA0100()) || this.un_functionary
									.equalsIgnoreCase(this.userView.getA0100()))
							&& this.opt == 2)
						flag = true;
					if ("1".equals(this.isShowRelationCard))
						flag = true;
					// 允许领导批准及修改跟踪指标
					if ("0".equals(this.optCardObject)
							|| "1".equals(this.optCardObject)
							|| "-1".equals(this.optCardObject)
							|| "-2".equals(this.optCardObject)) {
						if ("true".equalsIgnoreCase(this.AllowLeaderTrace)
								&& "03".equals(this.objectSpFlag)) {
							if (!"03"
									.equals(this.perObject_vo.getString("trace_sp_flag")))
								flag = true;

						}
					}

					if ("1".equals(this.isPerformanceShow)) // 如果是由360查看关联目标卡，则不显示操作列
						flag = false;
					if ("6".equals(model))
						flag = false;
					if ("7".equals(model) && this.opt == 1) // 目标卡代制订
						flag = true;
					this.isVisibleEdit = flag;

					if (!(SystemConfig.getPropertyValue("clientName") != null && "zglt".equalsIgnoreCase(
                            SystemConfig
                                    .getPropertyValue("clientName")))) // 中国联通操作列放最后
					{
	
	                   	/** 只要有保存或提交过分数的，就不可以操作 */
						if (flag/* &&this.isSubScore.equals("0") */)// 不再这个地方判断是否有打分提交
						{
							abean = new LazyDynaBean();
							abean.set("itemid", "edit");
							abean.set("itemdesc", "操作");
							abean.set("itemType", "A");
							abean.set("codesetid", "0");
							abean.set("decimalwidth", "0");
							list.add(abean);
							printSpaceSize++;
						}
					}

					// 任务支持附件上传
					if (this.planParam.get("TaskSupportAttach") != null
							&& "True"
									.equalsIgnoreCase((String) this.planParam
                                            .get("TaskSupportAttach"))) {
						/** 附件在跟踪指标里 */
						if (("," + this.TargetTraceItem + ",").toUpperCase()
								.indexOf((",ATTACHMENT,")) != -1) {
							if ("03".equals(this.objectSpFlag)
									|| "7".equals(
                                    this.plan_vo.getString("status"))) {
								abean = new LazyDynaBean();
								abean.set("itemid", "attach");
								abean.set("itemdesc", "附件");
								abean.set("itemType", "A");
								abean.set("codesetid", "0");
								abean.set("decimalwidth", "0");
								list.add(abean);
								printSpaceSize++;
							}
						} else {
							abean = new LazyDynaBean();
							abean.set("itemid", "attach");
							abean.set("itemdesc", "附件");
							abean.set("itemType", "A");
							abean.set("codesetid", "0");
							abean.set("decimalwidth", "0");
							list.add(abean);
							printSpaceSize++;
						}
					}

					/** 显示签批意见列 */
					if (!("01".equals(this.objectSpFlag) && !isAdjustPoint)) {
						boolean _flag = true;
						if ((this.plan_vo.getInt("status") == 8
								|| this.plan_vo.getInt("status") == 5 || ((this.plan_vo
								.getInt("status") == 4 || this.plan_vo
								.getInt("status") == 6) && (planParam
								.get("NoShowTargetAdjustHistory") == null || "False"
								.equalsIgnoreCase((String) planParam
								.get("NoShowTargetAdjustHistory")))))
								&& (this.planParam.get("taskAdjustNeedNew") != null && "True"
										.equalsIgnoreCase((String) this.planParam
                                                .get("taskAdjustNeedNew")))) {
							if (isShowHistoryTask != null
									&& isShowHistoryTask.trim().length() > 0
									&& "0".equals(isShowHistoryTask))
								_flag = false;
						} else if (this.plan_vo.getInt("status") >= 4
								&& this.plan_vo.getInt("status") != 8) {
							if (this.planParam.get("NoShowTargetAdjustHistory") != null
									&& "True"
											.equalsIgnoreCase((String) this.planParam
                                                    .get("NoShowTargetAdjustHistory")))
								_flag = false;
						}

						if (_flag) {
							FieldItem item0 = DataDictionary
									.getFieldItem("p0425");
							/** 根据数据字典是否显示 */
							if (this.TargetDefineItem.length() == 0
									|| this.TargetDefineItem.indexOf(",P0425,") != -1) {
								if ("1".equals(item0.getState())) {
									abean = new LazyDynaBean();
									abean.set("itemid", item0.getItemid());
									abean.set("itemdesc", item0.getItemdesc());
									abean.set("itemType", item0.getItemtype());
									abean.set("codesetid", item0.getCodesetid());
									abean.set("decimalwidth", String
											.valueOf(item0.getDecimalwidth()));
									list.add(abean);
									printSpaceSize++;
								}
							}
							if (this.TargetDefineItem.length() == 0
									|| this.TargetDefineItem.indexOf(",P0427,") != -1) {
								item0 = DataDictionary.getFieldItem("p0427");
								/** 根据数据字典是否显示 */
								if ("1".equals(item0.getState())) {
									abean = new LazyDynaBean();
									abean.set("itemid", item0.getItemid());
									abean.set("itemdesc", item0.getItemdesc());
									abean.set("itemType", item0.getItemtype());
									abean.set("codesetid", item0.getCodesetid());
									abean.set("decimalwidth", String
											.valueOf(item0.getDecimalwidth()));
									list.add(abean);
									printSpaceSize++;
								}
							}
						}

						if ("True"
								.equalsIgnoreCase((String) this.planParam.get("taskCanSign"))
								&& sign_objectMap != null
								&& sign_objectMap.size() > 0) {
							Set set = sign_objectMap.keySet();
							for (Iterator t = set.iterator(); t.hasNext();) {
								String str = (String) t.next();
								String[] temp = str.split("/");
								abean = new LazyDynaBean();
								abean.set("itemid", "opinion_" + temp[0]);
								if (this.plan_vo.getInt("plan_type") == 0)
									abean.set("itemdesc", "签批意见");
								else
									abean.set("itemdesc", temp[1] + "_签批意见");
								abean.set("itemType", "A");
								abean.set("codesetid", "0");
								abean.set("decimalwidth", "0");
								list.add(abean);
								printSpaceSize++;
							}
						}
					}

					String str = this.hiden_str;
					// if(isAdjustPoint||this.objectSpFlag.equalsIgnoreCase("02")||this.objectSpFlag.equalsIgnoreCase("03"))
					if ("03".equalsIgnoreCase(this.objectSpFlag)) {
						str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0425/P0427/P0407/P0421/P0423/PLAN_ID/STATE/";
						if ("0".equals(this.template_vo.getString("status")))// 分值
						{
							str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0425/P0427/P0407/P0415/P0421/P0423/PLAN_ID/STATE/";
						}
						if (!"true".equalsIgnoreCase(sortByDictionary_mbo))// 权重模版显示分值
						{
							str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0425/P0427/P0407/P0413/P0415/P0421/P0423/PLAN_ID/STATE/";
						}

					}

					// 初始化后有调整目标的卡
					if (("01".equalsIgnoreCase(this.objectSpFlag) || "07"
							.equalsIgnoreCase(this.objectSpFlag))
							&& isAdjustPoint
							&& "True"
									.equalsIgnoreCase((String) this.planParam
                                            .get("taskAdjustNeedNew")))
						str = this.hiden_str;

					// 如果计划状态不为评估,计算指标不显示
					if (!(this.plan_vo.getInt("status") >= 4 && this.plan_vo
							.getInt("status") != 8)) {
						if (this.TargetCollectItem.length() > 0)
							str += "/" + this.TargetCollectItem_str;

					}

					for (int i = 0; i < fieldList.size(); i++) {
						FieldItem item = (FieldItem) fieldList.get(i);
						String itemid = item.getItemid();
						if (str.indexOf("/" + itemid.toUpperCase() + "/") != -1)
							continue;

						if (this.TargetDefineItem.length() > 0
								&& this.TargetDefineItem.indexOf(","
										+ itemid.toUpperCase() + ",") == -1)
							continue;
						
						if("rater".equalsIgnoreCase(itemid))//在此处不直接插入评价人指标
							continue;
						if ("1".equals(item.getState())) {

							abean = new LazyDynaBean();
							abean.set("itemid", itemid);
							abean.set("itemdesc", item.getItemdesc());
							abean.set("itemType", item.getItemtype());
							abean.set("codesetid", item.getCodesetid());
							abean.set("decimalwidth",
									String.valueOf(item.getDecimalwidth()));
							list.add(abean);
							printSpaceSize++;
						}
					}
					// 分值
					FieldItem item = null;
					boolean _flag = true;
					// 中国联通权重魔板不要标准分值
					if (SystemConfig.getPropertyValue("clientName") != null
							&& "zglt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 中国联通
					{
						if ("1".equals(this.template_vo.getString("status")))
							_flag = false;
					}
					// 加扣发 ＋ 评估时可新建指标 首钢要求这样2009-12-18
					if (this.planParam.get("EvalCanNewPoint") != null
							&& "true"
									.equalsIgnoreCase((String) this.planParam.get("EvalCanNewPoint"))
							&& "4".equals(scoreflag)) {
						item = DataDictionary.getFieldItem("p0413");
						if (!item.isVisible())
							_flag = false;
					}
					if (_flag && !"true".equalsIgnoreCase(sortByDictionary_mbo)) {
						if (this.TargetDefineItem.length() == 0
								|| this.TargetDefineItem.indexOf(",P0413,") != -1) {
							item = DataDictionary.getFieldItem("p0413");
							abean = new LazyDynaBean();
							abean.set("itemid", item.getItemid());
							abean.set("itemdesc", item.getItemdesc());
							abean.set("itemType", item.getItemtype());
							abean.set("codesetid", item.getCodesetid());
							abean.set("decimalwidth",
									String.valueOf(item.getDecimalwidth()));
							list.add(abean);
							printSpaceSize++;
						}
					}
					// 权重
					if ("1".equals(this.template_vo.getString("status"))) {
						if ((this.TargetDefineItem.length() == 0 || this.TargetDefineItem
								.indexOf(",P0415,") != -1)
								&& !"true"
										.equalsIgnoreCase(sortByDictionary_mbo)) {
							item = DataDictionary.getFieldItem("p0415");
							abean = new LazyDynaBean();
							abean.set("itemid", item.getItemid());
							abean.set("itemdesc", item.getItemdesc());
							abean.set("itemType", item.getItemtype());
							abean.set("codesetid", item.getCodesetid());
							abean.set("decimalwidth",
									String.valueOf(item.getDecimalwidth()));
							list.add(abean);
							printSpaceSize++;
						}
					}

					if (opt != 2
							&& isAdjustPoint
							&& "False"
									.equalsIgnoreCase((String) this.planParam
                                            .get("taskAdjustNeedNew"))
							&& !(this.plan_vo.getInt("status") >= 4 && this.plan_vo
									.getInt("status") != 8)) {

						String desc = "调整后分值";
						if ("1".equals(this.template_vo.getString("status"))) {
							desc = "调整后权重";
						}

						if ("1".equals(this.template_vo.getString("status")))
							item = DataDictionary.getFieldItem("p0423");//调整后权重
						else
							item = DataDictionary.getFieldItem("p0421");//调整后分值
						if (!"03".equals(this.objectSpFlag)
								|| ("03".equals(this.objectSpFlag) && item
										.isVisible())) {
							if ((this.TargetDefineItem.length() == 0 || this.TargetDefineItem
									.indexOf(","
											+ item.getItemid().toUpperCase()
											+ ",") != -1)
									&& !"true"
											.equalsIgnoreCase(sortByDictionary_mbo)) {
								abean = new LazyDynaBean();
								abean.set("itemid", item.getItemid());
								abean.set("itemdesc", item.getItemdesc());
								abean.set("itemType", item.getItemtype());
								abean.set("codesetid", item.getCodesetid());
								abean.set("decimalwidth",
										String.valueOf(item.getDecimalwidth()));
								list.add(abean);
								printSpaceSize++;
							}
						}
					}

					if (!"rz".equalsIgnoreCase(this.fromModel)
							&& "1".equals(this.isPerformanceShow)
							&& isShowSelfScore()
							&& this.objectSelfEvaluateValueMap.size() > 0) // 如果是由360查看关联目标卡，如果对象自评分则显示
					{
						if (objectSelfIsSubed(this.object_id)) {
							abean = new LazyDynaBean();
							abean.set("itemid", "selfScore");
							abean.set("itemdesc", "自我评分");
							abean.set("itemType", "N");
							abean.set("codesetid", "0");
							abean.set("decimalwidth", "2");
							list.add(abean);
							// printSpaceSize++;

							headOtherMainbodyList.add(abean);
							if (this.planParam.get("showDeductionCause") != null
									&& "True"
											.equalsIgnoreCase((String) this.planParam
                                                    .get("showDeductionCause"))) // /显示扣分原因
							{
								abean = new LazyDynaBean();
								if (this.plan_vo.getInt("object_type") == 1
										|| this.plan_vo.getInt("object_type") == 3
										|| this.plan_vo.getInt("object_type") == 4)
									abean.set("itemid", "reason_"
											+ this.un_functionary);
								else
									abean.set("itemid", "reason_" + object_id);
								abean.set("itemdesc", "自评说明");
								abean.set("itemType", "A");
								abean.set("codesetid", "0");
								abean.set("decimalwidth", "0");
								list.add(abean);
								headOtherMainbodyList.add(abean);
								// printSpaceSize++;
							}
						}

					} else if (!"rz".equalsIgnoreCase(this.fromModel)) {

						/** 允许查看下级对考核对象评分 */
						ArrayList alist = new ArrayList();
						String AllowSeeAllGrade = "false";// 允许查看其他考核主体评分,按seq来，并且提交的
						if (this.planParam.get("AllowSeeAllGrade") != null)
							AllowSeeAllGrade = (String) this.planParam
									.get("AllowSeeAllGrade");
						/** 在员工目标模块里，就不需要查看下级评分了，统一改一下吧，lizw 2011-08-16 */
						if (!"3".equals(this.model)
								&& !"6".equals(this.model)
								&& ((opt == 2 || (opt == 0
										&& this.mainbodyBean != null && "2".equals((String) this.mainbodyBean
										.get("status")))) && ("True"
										.equalsIgnoreCase((String) this.planParam
										.get("allowSeeLowerGrade")) || "true"
										.equalsIgnoreCase(AllowSeeAllGrade)))) {
							if ("true".equalsIgnoreCase(AllowSeeAllGrade)) {
								String seq = "0";
								if (this.mainbodyBean != null) {
									seq = (String) this.mainbodyBean.get("seq");
								}
								if (!"0".equals(seq)) {
									alist = this.getLowerSeqList(
											Integer.parseInt(seq),
											this.object_id,
											this.plan_vo.getInt("plan_id"));
								}else {
									alist = getAllLowerGradeList(
											Integer.parseInt(this.optCardObject),
											this.object_id,
											this.plan_vo.getInt("plan_id"));
								}
							} else {
                                alist = getAllLowerGradeList(
                                        Integer.parseInt(this.optCardObject),
                                        this.object_id,
                                        this.plan_vo.getInt("plan_id"));
                            }
							for (int j = 0; j < alist.size(); j++) {
								LazyDynaBean a_bean = (LazyDynaBean) alist
										.get(j);

								// 主体对应的打分确认标识 by 刘蒙
								String body_id = (String) a_bean.get("body_id");
								int bodyOpt = ((Integer) bodyOptMap.get(body_id)).intValue();

								String body_name = (String) a_bean
										.get("bodyname");
								String status = (String) a_bean.get("status");

								if ((status == null || !"2"
										.equalsIgnoreCase(status)))// &&this.TargetDefineItem.indexOf(",SCORE_ORG,")!=-1)
																// //如果没有提交过分数，则不显示此打分人列啦
																// dengcan
									continue;

								if (bodyOpt != 1) { // 前一级opt<>1（确认）时，取消打分列
									abean = new LazyDynaBean();
									abean.set("itemid",
											"#" + (String) a_bean.get("a0100"));
									if (this.privByOrg)// 按考核机构限制
									{
										abean.set("score_org",
												getScoreOrg((String) a_bean
														.get("a0100")));
									}
									abean.set("itemdesc",
											(String) a_bean.get("a0101") + "评分");
									if (this.plan_vo.getInt("plan_type") == 0)
										abean.set("itemdesc", body_name + "评分");
									else
										abean.set("itemdesc",
												(String) a_bean.get("a0101")
														+ "评分");
									abean.set("itemType", "N");
									abean.set("codesetid", "0");
									abean.set("decimalwidth", "2");
									abean.set("status",
											(String) a_bean.get("status"));
									list.add(abean);
									headOtherMainbodyList.add(abean);
								}
								if (this.planParam.get("showDeductionCause") != null
										&& "True"
												.equalsIgnoreCase((String) this.planParam
                                                        .get("showDeductionCause"))) // /显示扣分原因
								{
									abean = new LazyDynaBean();
									abean.set("itemid", "reason_"
											+ (String) a_bean.get("a0100"));
									abean.set("itemdesc",
											(String) a_bean.get("a0101")
													+ "_评分说明");
									if (this.plan_vo.getInt("plan_type") == 0)
										abean.set("itemdesc", body_name
												+ "_评分说明");
									abean.set("itemType", "A");
									abean.set("codesetid", "0");
									abean.set("decimalwidth", "0");
									list.add(abean);

									headOtherMainbodyList.add(abean);
								}

							}

						}

						if ("4".equals(model) || "2".equals(model)
								|| "1".equals(model)) {
							if (opt == 2
									|| (this.mainbodyBean != null
											&& "2"
													.equals(this.mainbodyBean.get("status")) && (this.plan_vo
											.getInt("status") == 4 || this.plan_vo
											.getInt("status") == 6))
									|| this.plan_vo.getInt("status") == 7) {
								if (isShowSelfScore()
										&& this.objectSelfEvaluateValueMap
												.size() > 0
										&& !this.object_id
												.equalsIgnoreCase(this.userView
														.getA0100())
										&& !this.un_functionary
												.equalsIgnoreCase(this.userView
														.getA0100())) {
									if (alist.size() == 0) {
										// 如果考核对象(主体、对象是同一人，自评)打分确认权限为确认(1)，则不显示自我评分列 add by lium 2014.11.21
										int objectType = plan_vo.getInt("object_type"); // 2=个人, !2=团队
										String _mainBodyId = objectType == 2 ? object_id : un_functionary;
										StringBuffer _sql = new StringBuffer();
										_sql.append("SELECT ppb.opt FROM per_mainbody pmb");
										_sql.append(" LEFT JOIN per_plan_body ppb ON pmb.plan_id=ppb.plan_id AND pmb.body_id=ppb.body_id");
										_sql.append(" WHERE pmb.object_id=? AND pmb.mainbody_id=? AND pmb.plan_id=?");
										rs = dao.search(_sql.toString(), Arrays.asList(new Object[] {
												object_id, _mainBodyId, Integer.valueOf(plan_vo.getInt("plan_id"))
										}));
										int mainBodyOpt = 1000; // _mainBodyId对应的打分确认标识
										if (rs.next()) {
											mainBodyOpt = rs.getInt("opt");
										}

										if (mainBodyOpt != 1) {
											abean = new LazyDynaBean();
											abean.set("itemid", "selfScore");
											abean.set("itemdesc", "自我评分");
											abean.set("itemType", "N");
											abean.set("codesetid", "0");
											abean.set("decimalwidth", "2");

											list.add(abean);
											printSpaceSize++;
											headOtherMainbodyList.add(abean);
										}

										if (this.planParam
												.get("showDeductionCause") != null
												&& "True"
														.equalsIgnoreCase((String) this.planParam
                                                                .get("showDeductionCause"))) // /显示扣分原因
										{
											abean = new LazyDynaBean();
											if (this.plan_vo
													.getInt("object_type") == 1
													|| this.plan_vo
															.getInt("object_type") == 3
													|| this.plan_vo
															.getInt("object_type") == 4)
												abean.set("itemid", "reason_"
														+ this.un_functionary);
											else
												abean.set("itemid", "reason_"
														+ object_id);
											abean.set("itemdesc", "自评说明");
											abean.set("itemType", "A");
											abean.set("codesetid", "0");
											abean.set("decimalwidth", "0");
											list.add(abean);
											printSpaceSize++;
											headOtherMainbodyList.add(abean);
										}
									}
								}
								boolean isVisibleScoreBox = true;
								HashMap priMap = null;
								if (this.mainbodyBean != null) {
									String body_id = (String) this.mainbodyBean
											.get("body_id");
									priMap = this.isVisibleScoreBox(
											this.object_id, body_id,
											this.plan_vo.getString("plan_id"));
									if (priMap.get(body_id) != null)
										isVisibleScoreBox = false;
								}
								this.isVisibleScoreBox = isVisibleScoreBox;

								if (bodyOptMap.get(this.mainbodyBean.get("body_id"))!=null&&isVisibleScoreBox
										&& !"1".equals(this.isPerformanceShow)) {// 如果对于所有项目都没有权限，补显示评估列
									int planBodyOpt = ((Integer) bodyOptMap.get(this.mainbodyBean.get("body_id"))).intValue();
									if (planBodyOpt == 0) { // 0：参与评分，并且有评分的权限 by 刘蒙
										abean = new LazyDynaBean();
										abean.set("itemid", "score");
										abean.set("itemType", "N");
										abean.set("codesetid", "0");
										abean.set("decimalwidth", "2");
										if (this.userView.getA0100().equals(
												this.object_id)
												&& !"4".equalsIgnoreCase(model))
											abean.set("itemdesc", "自我评分");
										else if ("1".equals(model)
												&& this.un_functionary
														.equalsIgnoreCase(this.userView
																.getA0100())
												&& !"4".equals(this.scoreflag))
											abean.set("itemdesc", "自我评分");
										else {
											if (!"4".equals(this.scoreflag))
												abean.set(
														"itemdesc",
														ResourceFactory
																.getProperty("lable.performance.assessment"));// 评估或打分
											else// 加扣分
											{
												abean.set(
														"itemdesc",
														ResourceFactory
																.getProperty("jx.khplan.scoreflag"));
											}
										}
										list.add(abean);
									}
									if (this.planParam
											.get("showDeductionCause") != null
											&& "True"
													.equalsIgnoreCase((String) this.planParam
                                                            .get("showDeductionCause"))) // /显示扣分原因
									{
										abean = new LazyDynaBean();
										abean.set("itemid", "reasons");
										abean.set(
												"itemdesc",
												"评分说明");
										abean.set("itemType", "A");
										abean.set("codesetid", "0");
										list.add(abean);
									}
								}
							}
						}
					}

					if (SystemConfig.getPropertyValue("clientName") != null
							&& "zglt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 中国联通操作列放最后
					{

						if ((this.object_id.equals(this.userView.getA0100()) || this.un_functionary
								.equalsIgnoreCase(this.userView.getA0100()))
								&& "03".equals(this.objectSpFlag)
								&& this.plan_vo.getInt("status") == 4) {
							if (this.TargetTraceItem.length() == 0)
								flag = false;
						}

						/** 只要有人保存或提交过分数，就不可以操作了 */
						if (flag/* &&this.isSubScore.equals("0") */)// 不再这个地方判断是否有打分提交
						{
							abean = new LazyDynaBean();
							abean.set("itemid", "edit");
							abean.set("itemdesc", "操作");
							abean.set("itemType", "A");
							abean.set("codesetid", "0");
							abean.set("decimalwidth", "0");
							list.add(abean);
						}
					}

				}
				//head中添加
				if(this.isOpenGrade_Members() && isShowOpinion != 1){// 添加目标卡可指定多个评价人//下载模板不导出评价人和评价人签批项
					abean = new LazyDynaBean();
					abean.set("itemid", "rater");
					abean.set("itemdesc", "评价人");
					abean.set("itemType", "A");
					abean.set("codesetid", "0");
					abean.set("decimalwidth", "0");
					list.add(abean);

					abean = new LazyDynaBean();
					abean.set("itemid", "opinion");
					abean.set("itemdesc", "评价人签批项");
					abean.set("itemType", "A");
					abean.set("codesetid", "0");
					abean.set("decimalwidth", "0");
					list.add(abean);
				}
				
				/** 考核结果中，加入评分列（个指标任务的总分） */
				if ("5".equals(this.model) && "0".equals(this.from_flag)) {
					abean = new LazyDynaBean();
					abean.set("itemid", "targetscore");
					abean.set("itemdesc", "评分");
					abean.set("itemType", "N");
					abean.set("codesetid", "0");
					abean.set("decimalwidth", "0");
					list.add(abean);
					headOtherMainbodyList.add(abean);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			PubFunc.closeResource(rs);
		}
		return list;
	}

	// 取得自助用户的 操作单位 或 所在的部门及单位
	public String getScoreOrg(String a0100) {
		String str = "";
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rowSet = dao
					.search("select org_dept from operuser where a0100='"
							+ a0100 + "'");
			String unitcode = "";
			while (rowSet.next()) {
				if (rowSet.getString("org_dept") != null
						&& rowSet.getString("org_dept").length() > 0) {
					String temp = rowSet.getString("org_dept");
					unitcode += temp;
				}
			}

			if (unitcode.length() == 0) {
				rowSet = dao
						.search("select b0110,e0122 from usra01 where a0100='"
								+ a0100 + "'");
				if (rowSet.next()) {
					if (rowSet.getString("b0110") != null
							&& rowSet.getString("b0110").length() > 0)
						unitcode += "&" + rowSet.getString("b0110");
					if (rowSet.getString("e0122") != null
							&& rowSet.getString("e0122").length() > 0)
						unitcode += "&" + rowSet.getString("e0122");
				}
			}
			str = unitcode;
			if (rowSet != null)
				rowSet.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return str;
	}

	/**
	 * 判断考核对象自我评分是否已提交
	 * 
	 * @param object_id
	 * @return
	 */
	public boolean objectSelfIsSubed(String object_id) {
		boolean flag = false;
		RowSet rowSet = null;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			String sql = "select status from per_mainbody where plan_id="
					+ this.plan_vo.getInt("plan_id") + " and object_id='"
					+ object_id + "' and mainbody_id='" + object_id + "'";
			if (this.plan_vo.getInt("object_type") == 1
					|| this.plan_vo.getInt("object_type") == 3
					|| this.plan_vo.getInt("object_type") == 4) {
				if (this.un_functionary != null
						&& this.un_functionary.length() > 0)
					sql = "select status from per_mainbody where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and object_id='" + object_id
							+ "' and mainbody_id='" + this.un_functionary + "'";
				else
					sql = "";
			}
			if (sql.length() > 0) {
				rowSet = dao.search(sql);
				if (rowSet.next()) {
					if (rowSet.getString("status") != null
							&& "2".equals(rowSet.getString("status")))
						flag = true;
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rowSet != null)
					rowSet.close();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
		}
		return flag;
	}

	/**
	 * 取得下级考核主体的信息列表
	 * 
	 * @param property
	 *            // 5:本人 -2：第四级领导 ,-1：第三级领导,0：主管领导,1：直接上级
	 * @return
	 */
	
	public ArrayList getLowerSeqList(int seq, String object_id, int plan_id) {
		ArrayList list = new ArrayList();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			StringBuffer sql = new StringBuffer("");
			sql.append("select pm.*,pms.name from per_mainbody pm left join per_mainbodyset pms on pm.body_id=pms.body_id where ");
			sql.append(" pm.plan_id=" + plan_id + " and pm.object_id='"
					+ object_id + "'");
			sql.append(" and pm.seq<" + seq);
			sql.append(" order by pm.seq ");
			RowSet rowSet = dao.search(sql.toString());
			HashMap priMap = this.isVisibleScoreBox(object_id, null, plan_id
					+ "");
			LazyDynaBean abean = null;
			while (rowSet.next()) {
				String body_id = rowSet.getString("body_id");
				if (priMap.get(body_id) != null)
					continue;
				abean = new LazyDynaBean();
				abean.set("a0100", rowSet.getString("mainbody_id"));
				abean.set("a0101", rowSet.getString("a0101"));
				abean.set("bodyname", rowSet.getString("name"));
				if (rowSet.getString("status") == null
						|| !"2".equals(rowSet.getString("status")))
					continue;
				abean.set("status", rowSet.getString("status"));
				abean.set("body_id", rowSet.getString("body_id"));
				list.add(abean);
			}
			rowSet.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}
    /**
     * 取得下级考核主体(包括,3下级；4下下级和6一般)的信息列表。同时，是否包含本人，要根据查看考核对象自我评分的范围控制
     *
     * @param property
     *            5:本人 0：上上级 1：直接上级 2：同级 -1：第三级领导, -2：第四级领导 ,3下级；4下下级
     *
     * @return
     */
    public ArrayList getAllLowerGradeList(int property, String object_id,
                                       int plan_id) {
        ArrayList list = new ArrayList();
        try {
            if (property == 5 || property==4)
                return list;
            // 整型（Boolean为兼容）：0和False为不能查看，1（True）为直接上级可查看，2为所有上级，3为所有考核主体.
            String SelfScoreInDirectLeader = (String) this.planParam
                    .get("SelfScoreInDirectLeader");
            ContentDAO dao = new ContentDAO(this.conn);
            String level_str = "";
            switch (property) {
                case 3:
                    level_str+="4";
                    break;
                case 1:
                    //查看考核对象自我评分的范围控制
                    if(",1,2,3,".contains(","+SelfScoreInDirectLeader+",")){
                        level_str = "5,";
                    }
                    level_str += "4,3,2,6";
                    break;
                case 0:
                    //查看考核对象自我评分的范围控制
                    if(",2,3,".contains(","+SelfScoreInDirectLeader+",")){
                        level_str = "5,";
                    }
                    level_str += "4,3,1,2,6";
                    break;
                case -1:
                    //查看考核对象自我评分的范围控制
                    if(",2,3,".contains(","+SelfScoreInDirectLeader+",")){
                        level_str = "5,";
                    }
                    level_str += "4,3,1,0,2,6";
                    break;
                case -2:
                    //查看考核对象自我评分的范围控制
                    if(",2,3,".contains(","+SelfScoreInDirectLeader+",")){
                        level_str = "5,";
                    }
                    level_str += "4,3,1,0,-1,2,6";
                    break;
            }

            if (level_str.length() == 0)
                return list;
            StringBuffer sql = new StringBuffer("");
            sql.append("select pm.*,pms.name from per_mainbody pm,per_mainbodyset pms where pm.body_id=pms.body_id ");
            sql.append(" and pm.plan_id=" + plan_id + " and pm.object_id='"
                    + object_id + "' and  ");
            if (Sql_switcher.searchDbServer() == Constant.ORACEL)
                sql.append("  pms.level_o");
            else
                sql.append("  pms.level ");
            sql.append(" in (" + level_str + ")");
            String cloumn = "level";
            if (Sql_switcher.searchDbServer() == Constant.ORACEL)
                cloumn = "level_o";
            sql.append(" order by " + cloumn + " desc ");
            RowSet rowSet = dao.search(sql.toString());
            LazyDynaBean abean = null;
            while (rowSet.next()) {
                abean = new LazyDynaBean();
                abean.set("a0100", rowSet.getString("mainbody_id"));
                abean.set("a0101", rowSet.getString("a0101"));
                abean.set("bodyname", rowSet.getString("name"));
                abean.set("body_id", rowSet.getString("body_id"));
                // if(priv&&TargetDefineItem!=null&&TargetDefineItem.trim().length()>0&&TargetDefineItem.toUpperCase().indexOf("SCORE_ORG")!=-1)
                // {
                if (rowSet.getString("status") == null
                        || !"2".equals(rowSet.getString("status")))
                    continue;
                // }
                abean.set("status", rowSet.getString("status"));
                list.add(abean);
            }
            rowSet.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return list;
    }
	/**
	 * 取得下级考核主体的信息列表
	 * 
	 * @param property
	 *            // 5:本人 -2：第四级领导 ,-1：第三级领导,0：主管领导,1：直接上级
	 * @return
	 */
	public ArrayList getLowerGradeList(int property, String object_id,
			int plan_id) {
		ArrayList list = new ArrayList();
		try {
			if (property == 5)
				return list;

			ContentDAO dao = new ContentDAO(this.conn);
			String level_str = "";
			switch (property) {
			case 1:
				level_str = "5,2";
				break;
			case 0:
				level_str = "5,1,2";
				break;
			case -1:
				level_str = "5,1,0,2";
				break;
			case -2:
				level_str = "5,1,0,-1,2";
				break;
			}

			if (level_str.length() == 0)
				return list;
			StringBuffer sql = new StringBuffer("");
			sql.append("select pm.*,pms.name from per_mainbody pm,per_mainbodyset pms where pm.body_id=pms.body_id ");
			sql.append(" and pm.plan_id=" + plan_id + " and pm.object_id='"
					+ object_id + "' and  ");
			if (Sql_switcher.searchDbServer() == Constant.ORACEL)
				sql.append("  pms.level_o");
			else
				sql.append("  pms.level ");
			sql.append(" in (" + level_str + ")");
			String cloumn = "level";
			if (Sql_switcher.searchDbServer() == Constant.ORACEL)
				cloumn = "level_o";
			sql.append(" order by " + cloumn + " desc ");
			RowSet rowSet = dao.search(sql.toString());
			LazyDynaBean abean = null;
			while (rowSet.next()) {
				abean = new LazyDynaBean();
				abean.set("a0100", rowSet.getString("mainbody_id"));
				abean.set("a0101", rowSet.getString("a0101"));
				abean.set("bodyname", rowSet.getString("name"));
				abean.set("body_id", rowSet.getString("body_id"));
				// if(priv&&TargetDefineItem!=null&&TargetDefineItem.trim().length()>0&&TargetDefineItem.toUpperCase().indexOf("SCORE_ORG")!=-1)
				// {
				if (rowSet.getString("status") == null
						|| !"2".equals(rowSet.getString("status")))
					continue;
				// }
				abean.set("status", rowSet.getString("status"));
				list.add(abean);
			}
			rowSet.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 取得下级考核主体的信息列表 JinChunhai 2011.04.19
	 * 
	 * @param property
	 *            // 5:本人 -2：第四级领导 ,-1：第三级领导,0：主管领导,1：直接上级
	 * @return
	 */
	public ArrayList getLower_GradeList(int property, String object_id,
			int plan_id) {
		ArrayList list = new ArrayList();
		try {
			if (property == 5)
				return list;

			ContentDAO dao = new ContentDAO(this.conn);
			String level_str = "";
			switch (property) {
			case 1:
				level_str = "5,1,2";
				break;
			case 0:
				level_str = "5,1,0,2";
				break;
			case -1:
				level_str = "5,1,0,-1,2";
				break;
			case -2:
				level_str = "5,1,0,-1,-2,2";
				break;
			}

			if (level_str.length() == 0)
				return list;

			StringBuffer sql = new StringBuffer("");
			sql.append("select pm.*,pms.name from per_mainbody pm,per_mainbodyset pms where pm.body_id=pms.body_id ");
			sql.append(" and pm.plan_id=" + plan_id + " and pm.object_id='"
					+ object_id + "' and  ");
			if (Sql_switcher.searchDbServer() == Constant.ORACEL)
				sql.append("  pms.level_o");
			else
				sql.append("  pms.level ");
			sql.append(" in (" + level_str + ")");
			String cloumn = "level";
			if (Sql_switcher.searchDbServer() == Constant.ORACEL)
				cloumn = "level_o";
			sql.append(" order by " + cloumn + " desc ");
			RowSet rowSet = dao.search(sql.toString());
			LazyDynaBean abean = null;
			boolean priv = false;
			FieldItem aitem = DataDictionary.getFieldItem("score_org");
			if (aitem != null && "1".equals(aitem.getState())) {
				priv = true;
			}
			AnalysePlanParameterBo appb = new AnalysePlanParameterBo(this.conn);
			Hashtable ht_table = appb.analyseParameterXml();
			LoadXml parameter_content = null;
			if (BatchGradeBo.getPlanLoadXmlMap().get(plan_id + "") == null) {

				parameter_content = new LoadXml(this.conn, plan_id + "");
				BatchGradeBo.getPlanLoadXmlMap().put(plan_id + "",
						parameter_content);
			} else {
				parameter_content = (LoadXml) BatchGradeBo.getPlanLoadXmlMap()
						.get(plan_id + "");
			}
			Hashtable params = parameter_content.getDegreeWhole();
			String TargetDefineItem = "";
			if (ht_table != null) {
				if (ht_table.get("TargetDefineItem") != null
						&& ((String) ht_table.get("TargetDefineItem")).trim()
								.length() > 0)
					TargetDefineItem = (","
							+ (String) ht_table.get("TargetDefineItem") + ",")
							.toUpperCase();
			}
			if (params.get("TargetTraceEnabled") != null
					&& "True"
							.equalsIgnoreCase((String) params.get("TargetTraceEnabled"))) {
				if (params.get("TargetDefineItem") != null
						&& ((String) params.get("TargetDefineItem")).trim()
								.length() > 0)
					TargetDefineItem = (","
							+ ((String) params.get("TargetDefineItem")).trim() + ",")
							.toUpperCase(); // 目标卡指标
			}
			while (rowSet.next()) {
				abean = new LazyDynaBean();
				abean.set("a0100", rowSet.getString("mainbody_id"));
				abean.set("a0101", rowSet.getString("a0101"));
				abean.set("bodyname", rowSet.getString("name"));
				if (priv
						&& TargetDefineItem != null
						&& TargetDefineItem.trim().length() > 0
						&& TargetDefineItem.toUpperCase().indexOf("SCORE_ORG") != -1) {
					if (rowSet.getString("status") == null
							|| !"2".equals(rowSet.getString("status")))
						continue;
				}
				abean.set("status", rowSet.getString("status"));
				list.add(abean);
			}
			rowSet.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 写html
	 * 
	 * @return
	 */
	public String writeHtml2() {
		this.headList = getHeadList();
		StringBuffer htmlContext = new StringBuffer("");
		HashMap existWriteItem = new HashMap();
		LazyDynaBean abean = null;
		LazyDynaBean a_bean = null;

		int total_width = 0;
		//************************************************ 输出表头****************************************
		extendtHead.append("<tr class='trDeep_self' style='border-top-width:0px;border-top-left:0px;'  height='25' >\r\n");

		if (this.headList.size() < 8 && this.customTdWidthMap != null
				&& this.customTdWidthMap.size() <= 0)
			this.td_width += 50;
		boolean colorEx = false;
		for (int i = 0; i < this.headList.size(); i++) {
			abean = (LazyDynaBean) this.headList.get(i);
			String itemid = (String) abean.get("itemid");
			String itemType = (String) abean.get("itemType");
			String fontCssName = this.getTt4CssClassName();
			if (itemid.startsWith("#")) {
				String status = (String) abean.get("status");
				if (status != null && "2".equals(status)) {
					colorEx = true;
					if ("zglt".equals(
                            SystemConfig.getPropertyValue("clientName"))) {
						fontCssName = "tt4Green";
					} else {
						fontCssName = "ttNomal6Green";
					}
				}

			}
			if (i == 0) {
				int width = this.td_width * this.lay;
				if (this.customTdWidthMap.size() > 0
						&& this.customTdWidthMap.get("itemid") != null) // 自定义列宽
				{
					total_width += Integer
							.parseInt((String) this.customTdWidthMap
									.get("itemid"));
					width = Integer.parseInt((String) this.customTdWidthMap
							.get("itemid"));
				} else {
					if ("bjpt"
							.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {
						total_width += (this.td_width - 50) * lay;
						width = (this.td_width - 50) * lay;
					} else {
						total_width += this.td_width * this.lay;
						width = this.td_width * this.lay;
					}
				}
				extendtHead
						.append("<td class='TableRow_head_locked common_background_color common_border_color'  valign='middle' align='center' width='"
								+ width
								+ "px' colspan='"
								+ this.lay
								+ "'><font class='"
								+ fontCssName
								+ "'>"
								+ (String) abean.get("itemdesc")
								+ "</font></td>\r\n");

				this.extJsonWidth = String.valueOf(total_width);
			} else {
				int width = this.td_width;
				String td_class = "TableRow_2rows_objective common_border_color";
				if (i < 2) {
					td_class = "TableRow_head_locked common_border_color";
					width = width + width / 2;
				}
				if (i == 2
						&& SystemConfig.getPropertyValue("clientName") != null
						&& "zglt"
								.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 中国联通操作列放最后
					td_class = "TableRow_2rows_lt_objective common_border_color";

				if (i == headList.size() - 1)
					td_class = "TableRow_2rows_objective_last common_border_color";
				if(headList.size()==2)
					td_class = "TableRow_head_locked common_border_color";
				if (this.customTdWidthMap.size() > 0
						&& this.customTdWidthMap.get(itemid.toLowerCase()) != null) // 自定义列宽
				{
					width = Integer.parseInt((String) this.customTdWidthMap
							.get(itemid.toLowerCase()));
				} else {
					// 项目需要 写得死代码
					if ("N".equalsIgnoreCase(itemType)
							&& !"p0419".equalsIgnoreCase(itemid)) {
						width = width - 50;

					}
					if (!"zglt"
							.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))
							&& ("p0413".equalsIgnoreCase(itemid)
									|| "p0415".equalsIgnoreCase(itemid)
									|| "p0421".equalsIgnoreCase(itemid)
									|| "p0423".equalsIgnoreCase(itemid) || "score"
									.equalsIgnoreCase(itemid))) {
						width = width - 30;
						if (this.headList.size() < 8
								&& this.customTdWidthMap != null
								&& this.customTdWidthMap.size() <= 0)
							width = width - 50;
					}
					if (SystemConfig.getPropertyValue("clientName") != null
							&& "zglt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 中国联通
					{
						if ("P04A0".equalsIgnoreCase(itemid))
							width = width * 3;
						if ("P0415".equalsIgnoreCase(itemid))
							width = width - 100;
						if ("P0401".equalsIgnoreCase(itemid))
							width = this.td_width - 50;
					}
					if ("edit".equalsIgnoreCase(itemid)
							&& SystemConfig.getPropertyValue("clientName") != null
							&& "bjpt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName")))
						width = width - 50;
				}

				if ("attach".equalsIgnoreCase(itemid)) {
					width = width + 50;
				}
				
				if("opinion".equalsIgnoreCase(itemid)){
					if(this.customTdWidthMap.size()>0&&this.customTdWidthMap.containsKey(itemid))
					{
						
					}else{
						width=250;
					}
				}
				
				/*
				 * if(itemid.equalsIgnoreCase("edit")&&SystemConfig.getPropertyValue
				 * (
				 * "clientName")!=null&&SystemConfig.getPropertyValue("clientName"
				 * ).equalsIgnoreCase("bjpt")) { total_width+=width-50;
				 * extendtHead
				 * .append("<td class='"+td_class+"' width='"+(width-50
				 * )+"'  valign='middle' align='center' ><font class=\""
				 * +this.getTt4CssClassName
				 * ()+"\">"+(String)abean.get("itemdesc")+"</font></td>\r\n"); }
				 * else
				 */
				{
					total_width += width;
					if (itemid.startsWith("#")) {
						String status = (String) abean.get("status");
						if (status != null) {
							String title = "";
							if ("0".equals(status)) {
								title = ResourceFactory
										.getProperty("lable.performnace.wpf");
							} else if ("1".equals(status)) {
								title = ResourceFactory
										.getProperty("lable.performnace.zzpf");
							} else if ("2".equals(status) || "3".equals(status)) {
								title = ResourceFactory
										.getProperty("lable.performnace.ytj");
							}
							extendtHead
									.append("<td class='"
											+ td_class
											+ " common_background_color common_border_color' width='"
											+ width
											+ "'  title=\""
											+ title
											+ "\" valign='middle' style='word-break:break-all;word-wrap:break-word;white-space: pre-wrap;' align='center' ><font class=\""
											+ fontCssName + "\">"
											+ (String) abean.get("itemdesc")
											+ "</font></td>\r\n");
						} else {
							extendtHead
									.append("<td class='"
											+ td_class
											+ " common_background_color common_border_color' width='"
											+ width
											+ "'  valign='middle' style='word-break:break-all;word-wrap:break-word;white-space: pre-wrap;' align='center' ><font class=\""
											+ fontCssName + "\">"
											+ (String) abean.get("itemdesc")
											+ "</font></td>\r\n");
						}
					} else {
						extendtHead
								.append("<td class='"
										+ td_class
										+ " common_background_color common_border_color' width='"
										+ width
										+ "'  valign='middle' style='word-break:break-all;word-wrap:break-word;white-space: pre-wrap;'  align='center' nowrap><font class=\""
										+ fontCssName + "\">"
										+ (String) abean.get("itemdesc")
										+ "</font></td>\r\n");
					}
				}
			}

		}
		//*********************************************************输出表头结束*******************************************
		
		//*********************************************************输出表体****************************************
		int item_width = this.td_width;
		if (this.customTdWidthMap.size() > 0
				&& this.customTdWidthMap.get("itemid") != null) // 自定义列宽
			item_width = Integer.parseInt((String) this.customTdWidthMap
					.get("itemid")) / this.lay;
		else if ("bjpt".equalsIgnoreCase(
                SystemConfig.getPropertyValue("clientName")))
			item_width = item_width - 50;

		int rowNum = 0;
        LazyDynaBean tbean=new LazyDynaBean();
		if(this.leafItem_List.size()>0) {
            tbean = (LazyDynaBean) this.leafItemList
                    .get(this.leafItemList.size() - 1);
            lastItemid = (String) tbean.get("item_id");
        }
		/**获得目标卡表体**/
		for (int i = 0; i < this.leafItemList.size(); i++) {
			abean = (LazyDynaBean) this.leafItemList.get(i);
			String item_id = (String) abean.get("item_id");

			if (this.planParam.get("EvalCanNewPoint") != null
					&& "true"
							.equalsIgnoreCase((String) this.planParam.get("EvalCanNewPoint")) && "4".equals(scoreflag))
				this.serial_number = 1;
			if (SystemConfig.getPropertyValue("clientName") != null
					&& "zglt"
							.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 中国联通
				this.serial_number = 1;

			int num = ((Integer) this.itemPointNum.get(item_id)).intValue();
			ArrayList pointList = (ArrayList) this.itemToPointMap.get(item_id);
			String item_kind = (String) abean.get("kind");
			ArrayList linkParentList = (ArrayList) this.leafItemLinkMap
					.get(item_id); // **
			a_bean = (LazyDynaBean) linkParentList
					.get(linkParentList.size() - 1);
			String aitemid = (String) a_bean.get("item_id");
			int anum = ((Integer) this.itemPointNum.get(aitemid)).intValue();
			if (anum > num && this.itemToPointMap.get(aitemid) != null
					&& existWriteItem.get(aitemid) == null) {

				for (int e = linkParentList.size() - 1; e >= 0; e--) {

					a_bean = (LazyDynaBean) linkParentList.get(e);
					String a_itemid = (String) a_bean.get("item_id");
					String itemdesc = (String) a_bean.get("itemdesc");

					if (a_itemid.equals(item_id))
						break;
					if (this.itemToPointMap.get(a_itemid) != null) {
						ArrayList apointList = (ArrayList) this.itemToPointMap
								.get(a_itemid);

						for (int j = 0; j < apointList.size(); j++) {
							htmlContext.append("<tr>\r\n");
							if (existWriteItem.get(a_itemid) == null) {
								if (this.lastItemid != null
										&& a_itemid
												.equalsIgnoreCase(this.lastItemid))
									htmlContext.append(writeTd(itemdesc,
											((Integer) itemPointNum
													.get(a_itemid)).intValue(),
											"left", item_width, "1",
											"RecordRow_self_locked_last common_border_color"));
								else
									htmlContext.append(writeTd(itemdesc,
											((Integer) itemPointNum
													.get(a_itemid)).intValue(),
											"left", item_width, "1",
											"RecordRow_self_locked common_border_color"));
							}
							existWriteItem.put(a_itemid, "1");
							LazyDynaBean pointBean = (LazyDynaBean) apointList
									.get(j);
							/*
							 * if(linkParentList.size()==2)
							 * htmlContext.append(writePointGrid
							 * (this.lay-e-1,apointList,j,item_kind,item_id));
							 * else
							 */
							htmlContext.append(writePointGrid(
									linkParentList.size() - e, apointList, j,
									item_kind, item_id));

							if (apointList == null)
								htmlContext.append(getExtendTd2(null, null,item_id));
							else
								htmlContext.append(getExtendTd2(
										(LazyDynaBean) apointList.get(j),
										item_kind,item_id));
						}
					} else {

					}
				}
				htmlContext.append("</tr>\r\n");
			}
			// ****

			for (int j = 0; j < num; j++) {

				if (pointList != null && j >= pointList.size())
					break;

				htmlContext.append("<tr>\r\n");
				rowNum++;
				// ArrayList
				// linkParentList=(ArrayList)this.leafItemLinkMap.get(item_id);
				int current = linkParentList.size();
				for (int e = linkParentList.size() - 1; e >= 0; e--) {
					a_bean = (LazyDynaBean) linkParentList.get(e);
					String itemid = (String) a_bean.get("item_id");
					if (existWriteItem.get(itemid) != null)
						continue;
					existWriteItem.put(itemid, "1");
					String itemdesc = (String) a_bean.get("itemdesc");
					String kind = (String) a_bean.get("kind");

					boolean _flag = true;
					if (itemPrivMap.get(itemid) != null
							&& "0".equals((String) itemPrivMap.get(itemid))
							&& (this.opt == 2 || (this.opt == 0
									&& this.plan_vo.getInt("status") >= 4 )))//&& this.plan_vo.getInt("status") != 8  zhaoxg 2014-3-13 8是结束状态  应该不允许编辑
						_flag = false;
					
					this.aflag=_flag;
					if ("2".equals(kind)) {
						kind = "2/" + itemid;
						if ("0".equals(this.template_vo.getString("status"))) // 分值
						{
							if (!(SystemConfig.getPropertyValue("clientName") != null && "zglt"
									.equalsIgnoreCase(SystemConfig
                                            .getPropertyValue("clientName")))) // 中国联通
							{
								if ("1"
										.equals((String) a_bean.get("isAddMinusItem"))) {
									if (((String) a_bean.get("addMinusScore"))
											.trim().length() > 0
											&& ((String) a_bean
													.get("addMinusToScore"))
													.trim().length() > 0) {
										itemdesc += "&nbsp;&nbsp;(任务评分范围："
												+ (String) a_bean
														.get("addMinusScore")
												+ "~"
												+ (String) a_bean
														.get("addMinusToScore")
												+ ")";
									} else if (((String) a_bean
											.get("addMinusScore")).trim()
											.length() > 0) {
										itemdesc += "&nbsp;&nbsp;(任务评分范围："
												+ (String) a_bean
														.get("addMinusScore")
												+ "~+∞)";
									} else if (((String) a_bean
											.get("addMinusToScore")).trim()
											.length() > 0) {
										itemdesc += "&nbsp;&nbsp;(任务评分范围：-∞~"
												+ (String) a_bean
														.get("addMinusToScore")
												+ ")";
									} else
										itemdesc += "&nbsp;&nbsp;(任务评分范围)";
								} else if (!"0"
										.equals((String) a_bean.get("score")))
									itemdesc += "&nbsp;&nbsp;("
											+ ResourceFactory
													.getProperty("jx.param.mark")
											+ ":&nbsp;"
											+ (String) a_bean.get("score")
											+ ")";
							}
						} else if ("1".equals(
                                this.template_vo.getString("status"))) // 权重
						{
							if ("1"
									.equals((String) a_bean.get("isAddMinusItem"))) {
								if (((String) a_bean.get("addMinusScore"))
										.trim().length() > 0
										&& ((String) a_bean
												.get("addMinusToScore")).trim()
												.length() > 0) {
									itemdesc += "&nbsp;&nbsp;(任务评分范围："
											+ (String) a_bean
													.get("addMinusScore")
											+ "~"
											+ (String) a_bean
													.get("addMinusToScore")
											+ ")";
								} else if (((String) a_bean
										.get("addMinusScore")).trim().length() > 0) {
									itemdesc += "&nbsp;&nbsp;(任务评分范围："
											+ (String) a_bean
													.get("addMinusScore")
											+ "~+∞)";
								} else if (((String) a_bean
										.get("addMinusToScore")).trim()
										.length() > 0) {
									itemdesc += "&nbsp;&nbsp;(任务评分范围：-∞~"
											+ (String) a_bean
													.get("addMinusToScore")
											+ ")";
								} else
									itemdesc += "&nbsp;&nbsp;(任务评分范围)";
							} else {
								String rank = (String) a_bean.get("rank");
								if (rank == null || rank.trim().length() == 0)
									rank = "0";
								else
									rank = rank.trim();
								DecimalFormat myformat1 = new DecimalFormat(
										"########.####");//
								String temp = myformat1.format(Double
										.parseDouble(rank) * 100);
								if (!"0".equals(temp)) {
									if (!(SystemConfig
											.getPropertyValue("clientName") != null && "zglt"
											.equalsIgnoreCase(SystemConfig
											.getPropertyValue("clientName")))) // 中国联通
									{
										itemdesc += "&nbsp;&nbsp;("
												+ ResourceFactory
														.getProperty("label.kh.template.qz")
												+ ":&nbsp;" + temp + "％)";
									}
								}
							}
						}
					}
					if (!_flag)
						itemdesc = "<font color='#DCDCDC'>" + itemdesc
								+ "</font>";
					/** 调整项目列宽，调这个地方 */
					String html=writeTd(itemdesc,((Integer) itemPointNum.get(itemid)).intValue(), "left",
							item_width, kind,
							(this.lastItemid != null&& itemid.equalsIgnoreCase(this.lastItemid))?
									"RecordRow_self_locked_last common_border_color":"RecordRow_self_locked_last common_border_color"
										, _flag);
					htmlContext.append(html);

//					if (this.lastItemid != null&& itemid.equalsIgnoreCase(this.lastItemid))
//						htmlContext.append(writeTd(itemdesc,((Integer) itemPointNum.get(itemid)).intValue()
//										, "left",
//										item_width, kind,
//										"RecordRow_self_locked_last common_border_color", _flag));
//					else
//						htmlContext.append(writeTd(itemdesc,((Integer) itemPointNum.get(itemid)).intValue()
//										, "left",
//										item_width, kind,
//										"RecordRow_self_locked common_border_color", _flag));
				}

				htmlContext.append(writePointGrid(current, pointList, j,
						item_kind, item_id));
				if (pointList == null)
					htmlContext.append(getExtendTd2(null, null,item_id));
				else
					htmlContext.append(getExtendTd2(
							(LazyDynaBean) pointList.get(j), item_kind,item_id));
				htmlContext.append("</tr>\r\n");
			}

		}

		int height = rowNum * this.td_height;
		String str = "ListTable_self";
		if (this.plan_vo.getInt("method") == 1) // 360度计划
			str = "ListTable_self_rb";
		
		String strtotal_width=total_width>1000?"100%":String.valueOf(total_width);//如果table宽度大于1000 就用100%宽度  zhanghua
		
		StringBuffer titleHtml = new StringBuffer(
				"<table style='TABLE-LAYOUT: fixed'  cellspacing='0'  cellpadding='0'  width='"
						+ strtotal_width + "' height='" + height + "' >");
		if ("8".equals(this.model))
			titleHtml.setLength(0);
		StringBuffer html = new StringBuffer(titleHtml.toString());
		extendtHead.append("</tr>\r\n");
		html.append(extendtHead.toString());
		html.append(htmlContext.toString());
		if (!"rz".equalsIgnoreCase(this.fromModel)) {
			if (this.model != null
					&& ("5".equals(this.model) || "8".equals(this.model))) {

				html.append(getOtherInputHtml2());
			} else {

				// 显示新建任务分值或权重的和

				if (!(SystemConfig.getPropertyValue("clientName") != null && "zglt"
						.equalsIgnoreCase(SystemConfig
                                .getPropertyValue("clientName")))) // 中国联通
				{
					if (("01".equals(this.objectSpFlag)
							|| "02".equals(this.objectSpFlag) || "07"
							.equals(this.objectSpFlag))
							&& (!"4".equals(this.plan_vo.getString("status"))
									&& !"5"
											.equals(this.plan_vo.getString("status"))
									&& !"6"
											.equals(this.plan_vo.getString("status")) && !"7".equals(this.plan_vo
									.getString("status")))) {

						html.append("<tr><td height='40' class='RecordRow_self_nolocked2 common_border_color' align='right' style='WORD-WRAP: break-word; CURSOR: pointer; TABLE-LAYOUT: fixed; BACKGROUND-COLOR: transparent' colspan='"
								+ ((this.lay - 1) + this.headList.size())
								+ "'  >");
						boolean flag = true;

						if ("0".equals(this.template_vo.getString("status"))
								&& this.TargetDefineItem.length() > 0
								&& this.TargetDefineItem.indexOf(",P0413,") == -1)
							flag = false;
						if ("1".equals(this.template_vo.getString("status"))
								&& this.TargetDefineItem.length() > 0
								&& this.TargetDefineItem.indexOf(",P0415,") == -1)
							flag = false;

						if (flag && this.isVisibleScoreBox) {
							html.append("<div id='_score' >");
							if ("0"
									.equals(this.template_vo.getString("status"))) // 分值
								html.append("总分：");
							else if ("1"
									.equals(this.template_vo.getString("status"))) // 权重
								html.append("权重：");
							html.append(getTaskScore());
							html.append("&nbsp;&nbsp;</div>");
						}
						html.append("&nbsp;&nbsp;&nbsp;</td></tr>");
					}
				}

				if ("1".equals(this.isAddExtendRow)
						&& ("4".equals(this.model) || (("1".equals(this.model) || "2"
								.equals(this.model))
								&& this.plan_vo.getInt("status") >= 4 && this.plan_vo
								.getInt("status") != 8))) {
                    String AllowSeeAllGrade = "false";// 允许查看其他考核主体评分,按seq来，并且提交的
                    if (this.planParam.get("AllowSeeAllGrade") != null)
                        AllowSeeAllGrade = (String) this.planParam
                                .get("AllowSeeAllGrade");

                    ArrayList alist = new ArrayList();
                    if("true".equalsIgnoreCase(AllowSeeAllGrade)
                            || "True".equalsIgnoreCase((String) this.planParam.get("allowSeeLowerGrade"))) {
                        if ("true".equalsIgnoreCase(AllowSeeAllGrade)) {
                            String seq = "0";
                            if (this.mainbodyBean != null) {
                                seq = (String) this.mainbodyBean.get("seq");
                            }
                            if (!"0".equals(seq)) {
                                alist = this.getLowerSeqList(Integer.parseInt(seq),
                                        this.object_id,
                                        this.plan_vo.getInt("plan_id"));
                            } else {
                                alist = getAllLowerGradeList(
                                        Integer.parseInt(this.optCardObject),
                                        this.object_id, this.plan_vo.getInt("plan_id"));
                            }
                        }else {
                            alist = getAllLowerGradeList(
                                    Integer.parseInt(this.optCardObject),
                                    this.object_id, this.plan_vo.getInt("plan_id"));
                        }
                    }
					if (SystemConfig.getPropertyValue("clientName") == null
							|| !"zglt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))
							&& alist.size() > 0) {
						if ("true"
								.equalsIgnoreCase((String) this.planParam.get("WholeEval"))
								|| "true"
										.equalsIgnoreCase((String) this.planParam
                                                .get("DescriptiveWholeEval"))) // 总体评价 or
																	// 总体评价描述
						{
							if (this.plan_vo != null
									&& this.plan_vo.getInt("status") >= 4
									&& this.headOtherMainbodyList.size() > 0) {
								html.append("<tr><td height='40' class='RecordRow_self_locked_last_top common_border_color' colspan='"
										+ (this.lay + 1) + "' >");// "+(this.lay+this.headList.size()+1)+"
								html.append("&nbsp;");
								html.append("</td>");
								for (int y = 0; y < printSpaceSize - 2; y++) {
									html.append("<td class='RecordRow_self common_border_color' ");
									html.append(" valign='middle' align='center' >&nbsp;</td>\r\n");
								}
								for (int x = 0; x < headOtherMainbodyList
										.size(); x++) {
									LazyDynaBean x_bean = (LazyDynaBean) headOtherMainbodyList
											.get(x);
									String item_id = (String) x_bean
											.get("itemid");

									if (item_id.indexOf("reason_") != -1) {
										html.append(writeTd("&nbsp;", 0,
												"center", 0, "1",
												"RecordRow_self common_border_color"));
									} else {

										String a0100 = "";
										if ("selfScore"
												.equalsIgnoreCase(item_id)) {
											a0100 = this.object_id;
										} else {
											a0100 = item_id.substring(1);
										}
										HashMap map = (HashMap) objectAllEvaluateMap
												.get(a0100);
										int width = this.td_width - 50;
										if (map != null) {
											String astr = (String) map
													.get("whole_str");
											html.append(writeTd(astr, 0,
													"center", width, "1",
													"RecordRow_self common_border_color"));
										} else {
											html.append(writeTd("&nbsp;", 0,
													"center", width, "1",
													"RecordRow_self common_border_color"));
										}
									}
								}
								if ("4".equals(model) || "2".equals(model)
										|| "1".equals(model)) {
									if (opt == 2
											|| (this.mainbodyBean != null
													&& "2".equals(
                                            this.mainbodyBean.get(
                                                    "status")) && (this.plan_vo
													.getInt("status") == 4 || this.plan_vo
													.getInt("status") == 6))
											|| this.plan_vo.getInt("status") == 7) {
										if (this.isVisibleScoreBox
												&& !"1"
														.equals(this.isPerformanceShow)) {
	                                    	   boolean bConfirmBody=false;//确认的主体 显示多一条线。
                                        	   String body_id= (String)this.mainbodyBean.get("body_id");
                                               Object beanBodyOpt = this.bodyOptMap.get(body_id);
                                               if(beanBodyOpt!=null && "1".equals(beanBodyOpt+"")){
                                               	  bConfirmBody=true;
                                               }
     
                                        	    if (!bConfirmBody){
                                        	    	html.append("<td class='RecordRow_self common_border_color' ");
                                        	    	html.append(" valign='middle' align='center' >&nbsp;</td>\r\n");
                                        	    }
											if (this.planParam
													.get("showDeductionCause") != null
													&& "True"
															.equalsIgnoreCase((String) this.planParam
                                                                    .get("showDeductionCause"))) {
												html.append(writeTd("&nbsp;",
														0, "center", 0, "1",
														"RecordRow_self_right common_border_color"));
											}
										}
									}
								}
                                if(this.isOpenGrade_Members() && isShowOpinion != 1){
                                    html.append(writeTd("&nbsp;",
                                            0, "center", 0, "1",
                                            "RecordRow_self_right common_border_color"));
                                    html.append(writeTd("&nbsp;",
                                            0, "center", 0, "1",
                                            "RecordRow_self_right common_border_color"));
                                }
								html.append("</tr>");
							}
						}

					}
					int descend=0;
					html.append("<tr><td height='40' class='RecordRow_self common_border_color' colspan='"
							+ (this.lay + 1) + "' >");// "+(this.lay+this.headList.size()+1)+"
					html.append(getOtherInputHtml());
					html.append("</td>");
					if ((opt == 2 || (opt == 0 && this.mainbodyBean != null && "2".equals((String) this.mainbodyBean
							.get("status"))))
							&& ("True"
									.equalsIgnoreCase((String) this.planParam
                                            .get("allowSeeLowerGrade")) || "true"
									.equalsIgnoreCase(AllowSeeAllGrade))) {
						for (int y = 0; y < printSpaceSize - 2; y++) {
							html.append("<td class='RecordRow_self common_border_color' ");
							html.append(" valign='middle' align='center' >&nbsp;</td>\r\n");
						}
						for (int x = 0; x < alist.size(); x++) {
							LazyDynaBean x_bean = (LazyDynaBean) alist.get(x);
							String a0100 = (String) x_bean.get("a0100");
							String status = (String) x_bean.get("status");
							if (!"2".equals(status))
								continue;
							HashMap map = (HashMap) objectAllEvaluateMap
									.get(a0100);
							// 如果该级主体为确认则不显示分数单元格 add by 刘蒙
							Object beanBodyOpt = this.bodyOptMap.get(x_bean.get("body_id"));
							if ("0".equals(beanBodyOpt + "")) {
								if (map != null) {
									String astr = (String) map.get("score");
									// html.append(writeTd(astr,0,"center",this.td_width,"1","RecordRow_self"));
									html.append(writeTd(astr, 0, "center", 0, "1", "RecordRow_self common_border_color"));
								} else {
									// html.append(writeTd("&nbsp;",0,"center",this.td_width,"1","RecordRow_self"));
									html.append(writeTd("&nbsp;", 0, "center", 0, "1", "RecordRow_self common_border_color"));
								}
							}
							if (this.planParam.get("showDeductionCause") != null
									&& "True"
											.equalsIgnoreCase((String) this.planParam
                                                    .get("showDeductionCause"))) {
								// html.append(writeTd("&nbsp;",0,"center",this.td_width,"1","RecordRow_self"));
								html.append(writeTd("&nbsp;", 0, "center", 0,
										"1", "RecordRow_self common_border_color"));
							}
						}

					} else {
						int xx = this.headList.size() - 3;
						if ("4".equals(this.model) && this.opt == 0
								&& "1".equalsIgnoreCase(this.isPerformanceShow))
							xx = this.headList.size() - 2;
						if (this.planParam.get("showDeductionCause") != null
								&& "True"
										.equalsIgnoreCase((String) this.planParam
                                                .get("showDeductionCause"))) {
							// 确认时-3，其他情况(添加"确认"功能之前的逻辑)-4，不知道4从何而来 modify by 刘蒙
							xx = this.headList.size() - ("1".equals("" + bodyOptMap.get(mainbodyBean.get("body_id"))) ? 3 : 4);
						}
						
						for(int i=this.headList.size()-1;i>=0;i--){
							LazyDynaBean bean=(LazyDynaBean)headList.get(i);
							if("score".equalsIgnoreCase((String)bean.get("itemid")))
								break;
							descend++;
						}

						boolean isSelfColumn = false;
						// 是否显示自我评价列
						if ("4".equals(model) || "2".equals(model)
								|| "1".equals(model)) {
							if (opt == 2
									|| (this.mainbodyBean != null && "2".equals(this.mainbodyBean
											.get("status")))
									|| this.plan_vo.getInt("status") == 7) {
								if (isShowSelfScore()
										&& this.objectSelfEvaluateValueMap
												.size() > 0
										&& !this.object_id
												.equalsIgnoreCase(this.userView
														.getA0100())
										&& !this.un_functionary
												.equalsIgnoreCase(this.userView
														.getA0100())) {
									isSelfColumn = true;
								}
							}
						}
						if (headOtherMainbodyList.size() == 1 && isSelfColumn)
							xx = xx - 1;

						for (int i = 0; i < xx-descend; i++) {
							html.append(writeTd("&nbsp;", 0, "center", 0, "1",
									"RecordRow_self common_border_color"));
						}

						if (headOtherMainbodyList.size() == 1 && isSelfColumn) {
							String id = this.object_id;
							if (this.plan_vo.getInt("object_type") == 1
									|| this.plan_vo.getInt("object_type") == 3
									|| this.plan_vo.getInt("object_type") == 4)
								id = this.un_functionary;
							HashMap map = (HashMap) objectAllEvaluateMap
									.get(id);
							if (map != null) {
								String astr = (String) map.get("score");
								html.append("<td class='RecordRow_self common_border_color' ");
								html.append(" valign='middle' align='center' >"
										+ astr + "</td>\r\n");
							} else {
								html.append("<td class='RecordRow_self common_border_color' ");
								html.append(" valign='middle' align='center' >&nbsp;</td>\r\n");
							}
							for (int i = 0; i < descend; i++) {
								html.append(writeTd("&nbsp;", 0, "center", 0, "1",
										"RecordRow_self common_border_color"));
							}
							descend=0;
						}
						
						
					}

					String _css = "RecordRow_self common_border_color";
					if (!(this.planParam.get("showDeductionCause") != null && "True"
							.equalsIgnoreCase((String) this.planParam
                                    .get("showDeductionCause"))))
						_css = "RecordRow_self_right common_border_color";

					if (SystemConfig.getPropertyValue("clientName") != null
							&& "zglt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 中国联通
					{
						html.append("<td class='" + _css + "' ");
						html.append(" valign='middle' align='center' >&nbsp;</td>\r\n");
						for (int i = 0; i < descend; i++) {
							html.append(writeTd("&nbsp;", 0, "center", 0, "1",
									"RecordRow_self common_border_color"));
						}
						descend=0;
					} else if (this.isVisibleScoreBox
							&& !"1".equals(this.isPerformanceShow)) {
						HashMap map = (HashMap) objectAllEvaluateMap
								.get(this.userView.getA0100());
						Object tmpOpt = bodyOptMap.get(mainbodyBean.get("body_id")); // 当前登陆用户的opt add by 刘蒙
						if (map != null) {
							String astr = (String) map.get("score");
							boolean isCalTask_score = false;
							if (this.planParam.get("TargetTraceEnabled") != null
									&& "True"
											.equalsIgnoreCase((String) this.planParam
                                                    .get("TargetTraceEnabled"))) {
								String TargetCalcItem = ""; // 目标卡计算指标属性，P04中指标，以逗号分隔，顺序从前到后
								if (planParam.get("TargetCalcItem") != null
										&& ((String) planParam
												.get("TargetCalcItem")).trim()
												.length() > 0)
									TargetCalcItem = ((String) planParam
											.get("TargetCalcItem")).trim();

								if (TargetCalcItem.length() > 0) {
									RowSet rowSet = null;
									try {
										ContentDAO dao = new ContentDAO(
												this.conn);
										String[] temps = TargetCalcItem
												.split(",");
										for (int i = 0; i < temps.length; i++) {
											if (temps[i].length() > 0) {
												rowSet = dao
														.search("select expression,itemtype from t_hr_busiField  where upper(fieldsetid)='P04'  and upper(itemid)='"
																+ temps[i]
																		.toUpperCase()
																+ "' ");
												if (rowSet.next()) {
													String expression = Sql_switcher
															.readMemo(rowSet,
																	"expression");
													if (expression.trim()
															.length() > 0) {
														if ("task_score"
																.equalsIgnoreCase(
                                                                        temps[i]
                                                                                .trim())) {
															isCalTask_score = true;
															break;
														}
													}
												}
											}
										}
									} catch (Exception e) {
										e.printStackTrace();
									} finally {
										try {
											if (rowSet != null)
												rowSet.close();
										} catch (Exception e) {
											e.printStackTrace();
										}
									}
								}
							}
							if (isCalTask_score) {
								astr = this.getScore(this.userView.getA0100(),
										this.object_id);
								astr = this.getaScore();
							}
							
							if (("4".equals(this.model) || "1".equals(this.model))
									&& this.plan_vo.getInt("status") == 5) {
								for (int i = 0; i < descend; i++) {
									html.append(writeTd("&nbsp;", 0, "center", 0, "1",
											"RecordRow_self common_border_color"));
								}
								descend=0;
							} else if (tmpOpt == null || "0".equals(tmpOpt + "")) { // 确认的主体，不显示分数 by 刘蒙
								html.append("<td class='" + _css
										+ "' id='selfTotalScore'");
								html.append(" valign='middle' align='center' ><font class='"
										+ this.getTt3CssClassName()
										+ "'>"
					                    +   astr + "</font></td>\r\n");//每次都显示 原来只有360的显示 wangrd 20150720 
								for (int i = 0; i < descend; i++) {
									html.append(writeTd("&nbsp;", 0, "center", 0, "1",
											"RecordRow_self common_border_color"));
								}
								descend=0;
							}
						} else {
							if (("4".equals(this.model) || "1".equals(this.model))
									&& this.plan_vo.getInt("status") == 5) {
							} else if (tmpOpt == null || "0".equals(tmpOpt + "")) {
								html.append("<td class='" + _css
										+ "' id='selfTotalScore'");
								html.append(" valign='middle' align='center' >&nbsp;</td>\r\n");
							}
						}

					}
					for (int i = 0; i < descend; i++) {
						html.append(writeTd("&nbsp;", 0, "center", 0, "1",
								"RecordRow_self common_border_color"));
					}

					if (this.planParam.get("showDeductionCause") != null
							&& "True"
									.equalsIgnoreCase((String) this.planParam
                                            .get("showDeductionCause"))
							&& this.isVisibleScoreBox
							&& !"1".equals(this.isPerformanceShow)) {
						// html.append(writeTd("&nbsp;",0,"center",this.td_width,"1","RecordRow_self"));
						if (("4".equals(this.model) || "1".equals(this.model))
								&& this.plan_vo.getInt("status") == 5) {
						} else
							html.append(writeTd("&nbsp;", 0, "center", 0, "1",
									"RecordRow_self_right common_border_color"));
					}

                    if(this.isOpenGrade_Members() && isShowOpinion != 1){
                        html.append(writeTd("&nbsp;",
                                0, "center", 0, "1",
                                "RecordRow_self_right common_border_color"));
                        html.append(writeTd("&nbsp;",
                                0, "center", 0, "1",
                                "RecordRow_self_right common_border_color"));
                    }
					html.append("</tr>");
				}
				/*
				 * if(this.isAddExtendRow.equals("1")&&(this.model.equals("4")||this
				 * .model.equals("2"))) { html.append(
				 * "<tr><td height='40' class='RecordRow_self_locked2' colspan='"
				 * +(this.lay+this.headList.size()+1)+"' >");
				 * html.append(getOtherInputHtml()); html.append("</td></tr>");
				 * }
				 */
				/**
				 * 原来团队绩效不显示其他考核总体所评的总分，现在将上面的条件放开，也显示了其他考核主题的评分，所以这个部分已经在上面显示了，
				 * 在此把这段代码注释了，要不重复了，2011-02-22
				 */
				/*
				 * if(this.isAddExtendRow.equals("1")&&this.model.equals("1")) {
				 * if(this.opt==2||(this.mainbodyBean!=null&&((String)this.
				 * mainbodyBean.get("status")).equals("2"))) { html.append(
				 * "<tr><td height='40' class='RecordRow_self_locked2' colspan='"
				 * +(this.lay+this.headList.size()+1)+"' >");
				 * html.append(getOtherInputHtml()); html.append("</td></tr>");
				 * }
				 * 
				 * }
				 */

			}
		}
		MyObjectiveBo bo = new MyObjectiveBo(this.conn);
		String shuom = bo.getDescript(this.plan_vo.getString("plan_id"));
		if (shuom != null && !"".equals(shuom)) {
			String css_name = "RecordRow_self_lockedshuoming common_border_color";
			if (SystemConfig.getPropertyValue("clientName") != null
					&& "zglt"
							.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 中国联通
				css_name = "RecordRow_self_lt_lockedshuoming common_border_color";
//			html.append("<tr><td height='40' align=\"left\" class='" + css_name
//					+ "' colspan='" + ((this.lay - 1) + this.headList.size())
//					+ "'  ><BR>");
//			html.append("<font class=\"" + this.getTt3CssClassName() + "\">"/////注释掉计划说明 zzk
//					+ shuom.replaceAll("\r\n", "<br>") + "</font>");
//			html.append("<BR></td></tr>");
		}
		if (this.model == null || !"8".equals(this.model)) {
			html.append("</table>");
			objTableColumnNum = this.lay + 2
					+ this.headOtherMainbodyList.size();
		}
		return html.toString();
	}

	public String getStepByStepScore(String taskAdjustNeedNew,
			ArrayList pointList, int type, int opt) {
		String score = "";
		RowSet rowSet = null;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			HashMap map1 = new HashMap();
			HashMap map2 = new HashMap();
			if (type == 0 || type == 3) {
				HashMap hm = new HashMap();

				if (type == 0) {
					rowSet = dao
							.search("select p0400,score from per_target_evaluation pte where pte.plan_id="
									+ this.plan_vo.getInt("plan_id")
									+ " and object_id='"
									+ object_id
									+ "' and mainbody_id='"
									+ this.userView.getA0100() + "'");
					while (rowSet.next()) {
						String ascore = "0";
						if (rowSet.getString("score") != null)
							ascore = rowSet.getString("score");
						hm.put(rowSet.getString("p0400"),
								new BigDecimal(ascore));
					}
				} else if (type == 3) {
					String sql = "select p0400,TargetScore from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id");
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					rowSet = dao.search(sql);
					while (rowSet.next()) {
						String ascore = "0";
						if (rowSet.getString("TargetScore") != null)
							ascore = rowSet.getString("TargetScore");
						hm.put(rowSet.getString("p0400"),
								new BigDecimal(ascore));
					}
				}

				if ("False"
						.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew"))) {
					String value1 = "0";
					String value2 = "0";
					String sql = "select "
							+ Sql_switcher.isnull("p0415", "0")
							+ "  a,item_id,p0400 from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and ( ( state!=-1 or state is null ) or (state=-1 and chg_type=2 and "
							+ Sql_switcher.isnull("p0423", "0") + "=0  ) )"; // or
																				// (state=-1
																				// and
																				// chg_type=2))
																				// ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					rowSet = dao.search(sql);
					BigDecimal zero = new BigDecimal("0");
					while (rowSet.next()) {
						value1 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
						BigDecimal decimal = new BigDecimal(value1);
						String itemid = rowSet.getString("item_id");
						String p0400 = rowSet.getString("p0400");
						if (map1.get(itemid.toUpperCase()) != null) {
							BigDecimal abg = (BigDecimal) map1.get(itemid
									.toUpperCase());
							if (hm.get(p0400) != null) {
								decimal = ((BigDecimal) hm.get(p0400))
										.multiply(decimal);
							} else {
								decimal = zero.multiply(decimal);
							}
							map1.put(itemid.toUpperCase(), abg.add(decimal));
						} else {
							if (hm.get(p0400) != null) {
								decimal = ((BigDecimal) hm.get(p0400))
										.multiply(decimal);
							} else {
								decimal = zero.multiply(decimal);
							}
							map1.put(itemid.toUpperCase(), decimal);
						}
					}

					sql = " select "
							+ Sql_switcher.isnull("p0423", "0")
							+ " ,item_id,p0400 from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and state=-1 and ( Chg_type is null or Chg_type!=3 )  ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					rowSet = dao.search(sql);
					while (rowSet.next()) {
						value2 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
						BigDecimal decimal = new BigDecimal(value2);
						String itemid = rowSet.getString("item_id");
						String p0400 = rowSet.getString("p0400");
						if (map2.get(itemid.toUpperCase()) != null) {
							BigDecimal abg = (BigDecimal) map2.get(itemid
									.toUpperCase());
							if (hm.get(p0400) != null) {
								decimal = ((BigDecimal) hm.get(p0400))
										.multiply(decimal);
							} else {
								decimal = zero.multiply(decimal);
							}
							map2.put(itemid.toUpperCase(), abg.add(decimal));
						} else {
							if (hm.get(p0400) != null) {
								decimal = ((BigDecimal) hm.get(p0400))
										.multiply(decimal);
							} else {
								decimal = zero.multiply(decimal);
							}
							map2.put(itemid.toUpperCase(), decimal);
						}
					}
				} else {
					String value1 = "0";
					String value2 = "0";
					String sql = "select " + Sql_switcher.isnull("p0415", "0")
							+ " a,item_id,p0400 from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and  ( state!=-1 or state is null )   ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					rowSet = dao.search(sql);
					BigDecimal zero = new BigDecimal("0");
					while (rowSet.next()) {
						value1 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
						BigDecimal decimal = new BigDecimal(value1);
						String itemid = rowSet.getString("item_id");
						String p0400 = rowSet.getString("p0400");
						if (map1.get(itemid.toUpperCase()) != null) {
							BigDecimal abg = (BigDecimal) map1.get(itemid
									.toUpperCase());
							if (hm.get(p0400) != null) {
								decimal = ((BigDecimal) hm.get(p0400))
										.multiply(decimal);
							} else {
								decimal = zero.multiply(decimal);
							}
							map1.put(itemid.toUpperCase(), abg.add(decimal));
						} else {
							if (hm.get(p0400) != null) {
								decimal = ((BigDecimal) hm.get(p0400))
										.multiply(decimal);
							} else {
								decimal = zero.multiply(decimal);
							}
							map1.put(itemid.toUpperCase(), decimal);
						}
					}
					sql = " select "
							+ Sql_switcher.isnull("p0415", "0")
							+ " a,item_id,p0400 from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and state=-1 and ( Chg_type is null or Chg_type!=3 ) ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					rowSet = dao.search(sql);
					while (rowSet.next()) {
						value2 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
						BigDecimal decimal = new BigDecimal(value2);
						String itemid = rowSet.getString("item_id");
						String p0400 = rowSet.getString("p0400");
						if (map2.get(itemid.toUpperCase()) != null) {
							BigDecimal abg = (BigDecimal) map2.get(itemid
									.toUpperCase());
							if (hm.get(p0400) != null) {
								decimal = ((BigDecimal) hm.get(p0400))
										.multiply(decimal);
							} else {
								decimal = zero.multiply(decimal);
							}
							map2.put(itemid.toUpperCase(), abg.add(decimal));
						} else {
							if (hm.get(p0400) != null) {
								decimal = ((BigDecimal) hm.get(p0400))
										.multiply(decimal);
							} else {
								decimal = zero.multiply(decimal);
							}
							map2.put(itemid.toUpperCase(), decimal);
						}
					}
				}
				Set keySet = map1.keySet();
				for (Iterator t = keySet.iterator(); t.hasNext();) {
					String key = (String) t.next();
					BigDecimal one = (BigDecimal) map1.get(key);
					if (map2.get(key) != null) {
						BigDecimal two = (BigDecimal) map2.get(key);
						map1.put(key, one.add(two));
						map2.remove(key);
					}
				}
				if (map2.size() > 0) {
					map1.putAll(map2);
				}
			} else if (type == 1) {
				if ("False"
						.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew"))) {
					String value1 = "0";
					String value2 = "0";
					String sql = "select sum("
							+ Sql_switcher.isnull("p0415", "0")
							+ ")  a,item_id from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and ( ( state!=-1 or state is null ) or (state=-1 and chg_type=2 and "
							+ Sql_switcher.isnull("p0423", "0") + "=0  ) )"; // or
																				// (state=-1
																				// and
																				// chg_type=2))
																				// ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					sql += " group by item_id ";
					rowSet = dao.search(sql);
					while (rowSet.next()) {
						value1 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
						BigDecimal decimal = new BigDecimal(value1);
						String itemid = rowSet.getString("item_id");
						map1.put(itemid.toUpperCase(), decimal);
					}

					sql = " select sum("
							+ Sql_switcher.isnull("p0423", "0")
							+ ")  a,item_id from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and state=-1 and ( Chg_type is null or Chg_type!=3 )  ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					sql += " group by item_id ";
					rowSet = dao.search(sql);
					while (rowSet.next()) {
						value2 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
						BigDecimal decimal = new BigDecimal(value2);
						String itemid = rowSet.getString("item_id");
						map2.put(itemid.toUpperCase(), decimal);
					}
					// score=PubFunc.round(String.valueOf(Double.parseDouble(PubFunc.add(value1,value2,4))*100),2)+"%";
				} else {
					String value1 = "0";
					String value2 = "0";
					String sql = "select sum("
							+ Sql_switcher.isnull("p0415", "0")
							+ ")  a,item_id from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and  ( state!=-1 or state is null )   ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					sql += " group by item_id ";
					rowSet = dao.search(sql);
					while (rowSet.next()) {
						value1 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
						BigDecimal decimal = new BigDecimal(value1);
						String itemid = rowSet.getString("item_id");
						map1.put(itemid.toUpperCase(), decimal);
					}
					sql = " select sum("
							+ Sql_switcher.isnull("p0415", "0")
							+ ")  a,item_id from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and state=-1 and ( Chg_type is null or Chg_type!=3 ) ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					sql += " group by item_id ";
					rowSet = dao.search(sql);
					while (rowSet.next()) {
						value2 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
						BigDecimal decimal = new BigDecimal(value2);
						String itemid = rowSet.getString("item_id");
						map2.put(itemid.toUpperCase(), decimal);
					}
					// score=PubFunc.round(String.valueOf(Double.parseDouble(PubFunc.add(value1,value2,4))*100),2)+"%";
				}
				Set keySet = map1.keySet();
				for (Iterator t = keySet.iterator(); t.hasNext();) {
					String key = (String) t.next();
					BigDecimal one = (BigDecimal) map1.get(key);
					if (map2.get(key) != null) {
						BigDecimal two = (BigDecimal) map2.get(key);
						map1.put(key, one.add(two));
						map2.remove(key);
					}
				}
				if (map2.size() > 0) {
					map1.putAll(map2);
				}
			} else {
				HashMap mm = new HashMap();
				StringBuffer buf = new StringBuffer("");
				for (int j = 0; j < pointList.size(); j++) {
					String temp = (String) pointList.get(j);
					String[] temps = temp.split("/");
					if (temps.length > 1 && temps[1] != null
							&& temps[1].trim().length() > 0) {
						if (mm.get(temps[0]) == null) {
							mm.put(temps[0], new BigDecimal(temps[1]));
						} else {
							BigDecimal big = (BigDecimal) mm.get(temps[0]);
							mm.put(temps[0], big.add(new BigDecimal(temps[1])));
						}
						buf.append("," + temps[0]);
					}
				}
				if (buf.toString().length() > 0) {
					rowSet = dao
							.search("select p0400,item_id from p04 where p0400 in ("
									+ buf.toString().substring(1) + ")");
					while (rowSet.next()) {
						if (map1.get(rowSet.getString("item_id")) == null) {
							map1.put(rowSet.getString("item_id"),
									(BigDecimal) mm.get(rowSet
											.getString("p0400")));
						} else {
							BigDecimal big = (BigDecimal) map1.get(rowSet
									.getString("item_id"));
							BigDecimal bi = big.add((BigDecimal) mm.get(rowSet
									.getString("p0400")));
							map1.put(rowSet.getString("item_id"), bi);
						}
					}
				}

			}
			// map1包含每个项目包含的指标的权重和
			HashMap dynaMap = null;
			if (this.perObject_vo != null
					&& this.perObject_vo.getString("body_id") != null
					&& !"".equals(this.perObject_vo.getString("body_id"))) {
				LoadXml loadXml = new LoadXml();
				dynaMap = loadXml
						.getDynaItem(this.plan_vo.getInt("plan_id") + "",
								this.conn,
								this.perObject_vo.getString("body_id"));
			}
			rowSet = dao
					.search("select item_id,parent_id,child_id,rank,score from per_template_item where UPPER(template_id)='"
							+ this.template_vo.getString("template_id")
									.toUpperCase() + "'");
			HashMap aMap = new HashMap();
			HashMap leafMap = new HashMap();

			while (rowSet.next()) {
				LazyDynaBean bean = new LazyDynaBean();
				String item_id = rowSet.getString("item_id");
				String dyna_value = rowSet.getString("rank") == null ? ""
						: rowSet.getDouble("rank") + "";
				if (dynaMap != null
						&& dynaMap.get(this.perObject_vo.getString("body_id")
								+ item_id) != null) {
					HashMap map = (HashMap) dynaMap.get(this.perObject_vo
							.getString("body_id") + item_id);
					dyna_value = moveZero((String) map.get("dyna_value"));
				}
				if ("".equals(dyna_value))
					dyna_value = "0";
				String parent_id = rowSet.getString("parent_id") == null ? "-1"
						: rowSet.getString("parent_id");
				String child_id = rowSet.getString("child_id") == null ? ""
						: rowSet.getString("child_id");
				bean.set("parent_id", parent_id);
				bean.set("item_id", item_id);
				bean.set("rank", dyna_value);
				bean.set("child_id", child_id);
				if ("".equals(child_id) && map1.get(item_id) == null)
					map1.put(item_id, new BigDecimal("0"));
				if (aMap.get(parent_id.toUpperCase()) != null) {
					ArrayList aList = (ArrayList) aMap.get(parent_id
							.toUpperCase());
					aList.add(bean);
					aMap.put(parent_id.toUpperCase(), aList);
				} else {
					ArrayList aList = new ArrayList();
					aList.add(bean);
					aMap.put(parent_id.toUpperCase(), aList);
				}
			}
			while (aMap.size() > 1) {
				Set aset = aMap.keySet();
				ArrayList haveList = new ArrayList();
				for (Iterator t = aset.iterator(); t.hasNext();) {
					String key = (String) t.next();
					ArrayList alist = (ArrayList) aMap.get(key);
					boolean isHave = true;
					BigDecimal total = new BigDecimal("0");
					BigDecimal real = new BigDecimal("0");
					for (int i = 0; i < alist.size(); i++) {
						LazyDynaBean abean = (LazyDynaBean) alist.get(i);
						String item_id = (String) abean.get("item_id");
						if (map1.get(item_id.toUpperCase()) != null) {
							BigDecimal ee = (BigDecimal) map1.get(item_id
									.toUpperCase());
							String rank = (String) abean.get("rank");
							total = total.add(new BigDecimal(rank));
							real = real.add(ee.multiply(new BigDecimal(rank)));
						} else {
							isHave = false;
						}
					}
					if (isHave) {
						haveList.add(key);
						if (total.compareTo(new BigDecimal("0")) == 0)
							map1.put(key, new BigDecimal("0"));
						else {
							BigDecimal keyDecimal = real.divide(total, 4,
									RoundingMode.HALF_UP);
							map1.put(key, keyDecimal);
						}
					}
				}
				for (int j = 0; j < haveList.size(); j++) {
					String key = (String) haveList.get(j);
					if ("-1".equals(key))
						continue;
					aMap.remove(key);
				}
			}
			ArrayList ll = (ArrayList) aMap.get("-1");
			BigDecimal total = new BigDecimal("0");
			BigDecimal real = new BigDecimal("0");
			for (int i = 0; i < ll.size(); i++) {
				LazyDynaBean abean = (LazyDynaBean) ll.get(i);
				String item_id = (String) abean.get("item_id");
				if (map1.get(item_id.toUpperCase()) != null) {
					BigDecimal ee = (BigDecimal) map1
							.get(item_id.toUpperCase());
					String rank = (String) abean.get("rank");
					total = total.add(new BigDecimal(rank));
					real = real.add(ee.multiply(new BigDecimal(rank)));
				}
			}
			if (real.compareTo(new BigDecimal("0")) == 0)
				score = "0.00";
			else {
				// BigDecimal keyDecimal =
				// real.divide(total,4,RoundingMode.HALF_UP);
				score = real.toString();
			}

			// 绩效评估-计算（逐层计算）
			if (type == 3) {
				Set keySet = map1.keySet();
				DbWizard dbWizard = new DbWizard(this.conn);
				for (Iterator t = keySet.iterator(); t.hasNext();) {
					String key = (String) t.next();
					// System.out.println(key+"  ="+((BigDecimal)map1.get(key.toUpperCase())).toString());
					if (dbWizard.isExistField("per_result_" + this.plan_id,
							"t_" + key, false))
						dao.update("update per_result_"
								+ this.plan_id
								+ " set t_"
								+ key
								+ "="
								+ ((BigDecimal) map1.get(key.toUpperCase()))
										.toString() + "  where object_id='"
								+ object_id + "'");
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (rowSet != null) {
				try {
					rowSet.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		return score;
	}

	public String getTaskScore() {
		String score = "";
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			if ("False"
					.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew"))) {
				if ("1".equals(this.template_vo.getString("status"))) // 权重
				{
					if (!ScoreFromItem) {
						String value1 = "0";
						String value2 = "0";
						String sql = "select sum("
								+ Sql_switcher.isnull("p0415", "0")
								+ ")  a from p04 where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and ( ( state!=-1 or state is null ) or (state=-1 and chg_type=2 and "
								+ Sql_switcher.isnull("p0423", "0") + "=0  ) )"; // or
																					// (state=-1
																					// and
																					// chg_type=2))
																					// ";
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4) // 部门
							sql += " and b0110='" + object_id + "'";
						else if (this.plan_vo.getInt("object_type") == 2) // 人员
							sql += " and a0100='" + object_id + "'";
						if (this.hasAddMinusItem
								&& addMinusPointStr.length() > 0) {
							sql += " and p0400 not in ("
									+ this.addMinusPointStr + ")";
						}

						RowSet rowSet = dao.search(sql);
						if (rowSet.next())
							value1 = rowSet.getString(1) != null ? rowSet
									.getString(1) : "0";
						sql = " select sum("
								+ Sql_switcher.isnull("p0423", "0")
								+ ")  a from p04 where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and state=-1 and ( Chg_type is null or Chg_type!=3 )  ";
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4) // 部门
							sql += " and b0110='" + object_id + "'";
						else if (this.plan_vo.getInt("object_type") == 2) // 人员
							sql += " and a0100='" + object_id + "'";
						if (this.hasAddMinusItem
								&& addMinusPointStr.length() > 0) {
							sql += " and p0400 not in ("
									+ this.addMinusPointStr + ")";
						}
						rowSet = dao.search(sql);
						if (rowSet.next())
							value2 = rowSet.getString(1) != null ? rowSet
									.getString(1) : "0";
						score = PubFunc.round(String.valueOf(Double
								.parseDouble(PubFunc.add(value1, value2, 4))
								* 100 + this.addMinusItemScore * 100), 2)
								+ "%";
					} else// 按项目权重逐级计算总分
					{
						score = this.getStepByStepScore(
								((String) this.planParam
										.get("taskAdjustNeedNew")), null, 1, 1);
						BigDecimal db = new BigDecimal("100");
						score = db
								.multiply(new BigDecimal(score))
								.divide(new BigDecimal("1"), 2,
										RoundingMode.HALF_UP).toString()
								+ "%";
					}
				} else {
					String value1 = "0";
					String value2 = "0";
					String sql = "select sum("
							+ Sql_switcher.isnull("p0413", "0")
							+ ")  a from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and ( ( state!=-1 or state is null ) or (state=-1 and chg_type=2 and "
							+ Sql_switcher.isnull("p0421", "0") + "=0  ) )"; // or
																				// (state=-1
																				// and
																				// chg_type=2)
																				// )
																				// ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					if (this.hasAddMinusItem && addMinusPointStr.length() > 0) {
						sql += " and p0400 not in (" + this.addMinusPointStr
								+ ")";
					}
					RowSet rowSet = dao.search(sql);
					if (rowSet.next())
						value1 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
					sql = " select sum("
							+ Sql_switcher.isnull("p0421", "0")
							+ ")  a from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and state=-1  and ( Chg_type is null or Chg_type!=3 ) ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					if (this.hasAddMinusItem && addMinusPointStr.length() > 0) {
						sql += " and p0400 not in (" + this.addMinusPointStr
								+ ")";
					}
					rowSet = dao.search(sql);
					if (rowSet.next())
						value2 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
					score = PubFunc.add(value1, value2, 2);
					if (this.addMinusItemScore != 0)
						score = PubFunc.add(score,
								String.valueOf(this.addMinusItemScore), 2);
				}
			} else {
				if ("1".equals(this.template_vo.getString("status"))) // 权重
				{
					if (!ScoreFromItem) {
						String value1 = "0";
						String value2 = "0";
						String sql = "select sum("
								+ Sql_switcher.isnull("p0415", "0")
								+ ")  a from p04 where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and  ( state!=-1 or state is null )   ";
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4) // 部门
							sql += " and b0110='" + object_id + "'";
						else if (this.plan_vo.getInt("object_type") == 2) // 人员
							sql += " and a0100='" + object_id + "'";
						if (this.hasAddMinusItem
								&& addMinusPointStr.length() > 0) {
							sql += " and p0400 not in ("
									+ this.addMinusPointStr + ")";
						}
						RowSet rowSet = dao.search(sql);
						if (rowSet.next())
							value1 = rowSet.getString(1) != null ? rowSet
									.getString(1) : "0";
						sql = " select sum("
								+ Sql_switcher.isnull("p0415", "0")
								+ ")  a from p04 where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and state=-1 and ( Chg_type is null or Chg_type!=3 ) ";
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4) // 部门
							sql += " and b0110='" + object_id + "'";
						else if (this.plan_vo.getInt("object_type") == 2) // 人员
							sql += " and a0100='" + object_id + "'";
						if (this.hasAddMinusItem
								&& addMinusPointStr.length() > 0) {
							sql += " and p0400 not in ("
									+ this.addMinusPointStr + ")";
						}
						rowSet = dao.search(sql);
						if (rowSet.next())
							value2 = rowSet.getString(1) != null ? rowSet
									.getString(1) : "0";
						score = PubFunc.round(String.valueOf(Double
								.parseDouble(PubFunc.add(value1, value2, 4))
								* 100 + this.addMinusItemScore * 100), 2)
								+ "%";
					} else// 按项目权重逐级计算总分
					{
						score = this.getStepByStepScore(
								((String) this.planParam
										.get("taskAdjustNeedNew")), null, 1, 1);
						BigDecimal db = new BigDecimal("100");
						score = db
								.multiply(new BigDecimal(score))
								.divide(new BigDecimal("1"), 2,
										RoundingMode.HALF_UP).toString()
								+ "%";
					}

				} else {
					String value1 = "0";
					String value2 = "0";
					String sql = "select sum("
							+ Sql_switcher.isnull("p0413", "0")
							+ ")  a from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and  ( state!=-1 or state is null )  ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					if (this.hasAddMinusItem && addMinusPointStr.length() > 0) {
						sql += " and p0400 not in (" + this.addMinusPointStr
								+ ")";
					}
					RowSet rowSet = dao.search(sql);
					if (rowSet.next())
						value1 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
					sql = " select sum("
							+ Sql_switcher.isnull("p0413", "0")
							+ ")  a from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and state=-1  and ( Chg_type is null or Chg_type!=3 )  ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					if (this.hasAddMinusItem && addMinusPointStr.length() > 0) {
						sql += " and p0400 not in (" + this.addMinusPointStr
								+ ")";
					}
					// 防止不属于当前计划模板项的记录(脏数据)干扰计算结果 lium
					sql += " AND item_id IN (SELECT i.item_id FROM per_template_item i ";
					sql += " LEFT JOIN per_plan p ON i.template_id = p.template_id ";
					sql += " WHERE p.plan_id = " + this.plan_vo.getInt("plan_id") + ") ";
					
					rowSet = dao.search(sql);
					if (rowSet.next())
						value2 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
					score = PubFunc.add(value1, value2, 2);
					if (this.addMinusItemScore != 0)
						score = PubFunc.add(score,
								String.valueOf(this.addMinusItemScore), 2);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return score;
	}

	public String getEditContext(LazyDynaBean point_bean, String item_kind,
			LazyDynaBean headBean) {

		// optCardObject="5"; 5:本人 -2：第四级领导 ,-1：第三级领导,0：主管领导,1：直接上级
		// objectSpFlag="01"; //考核对象审批标识 //01:起草 02：报批 07：驳回 03：批准

		boolean isFillTrancePoint = false;
		if ("0".equals(this.optCardObject) || "1".equals(this.optCardObject)
				|| "-1".equals(this.optCardObject)
				|| "-2".equals(this.optCardObject))
			if ("true".equalsIgnoreCase(this.AllowLeaderTrace)
					&& "03".equals(this.objectSpFlag))
				if (!"03".equals(this.perObject_vo.getString("trace_sp_flag")))
					isFillTrancePoint = true;

		String edit_desc = "编辑";
		// //中国联通权
		if (SystemConfig.getPropertyValue("clientName") != null
				&& "zglt"
						.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 中国联通
		{
			edit_desc = "填写|修改";
		}

		StringBuffer context = new StringBuffer("");
		String isRead = "0";
		if ("1".equals(this.isShowRelationCard))
			isRead = "1";
		if (this.plan_vo.getInt("status") >= 4
				&& this.plan_vo.getInt("status") != 8)
			isRead = "1";

		if ("3".equals((String) point_bean.get("chg_type")))
			return context.toString();
		String itemtype = (String) point_bean.get("itemtype");
		if ("1".equals(itemtype))// 如果为加扣分指标操作列先不显示
			return context.toString();
		if (!this.aflag)// 不能编辑，则编辑也不显示   zhaoxg 2014-4-12
			return context.toString();
		String processing_state = (String) point_bean.get("processing_state");
		if (processing_state == null)
			processing_state = "0";
		if ("01".equalsIgnoreCase(objectSpFlag) && !"2".equals(itemtype)) {
			if ("2".equals(item_kind)) {
				if (!isAdjustPoint && "0".equalsIgnoreCase(processing_state)) {
					this.editableTaskList.add(new CommonData(
							(String) point_bean.get("p0400"),
							(String) point_bean.get("p0407")));
//					context.append("<a href=\"javascript:editPoint('"+(String) point_bean.get("p0400")+"','"+itemtype+"')\" ><font class='"+this.getTt3CssClassName()+"'>编辑</font></a>");
					context.append("<a href='###' onclick=\"editPoint('"+(String)point_bean.get("p0400")+"','"+itemtype+"')\" ><font class='"+this.getTt3CssClassName()+"'>编辑</font></a>");
					if (!"3".equals(itemtype)
							&& (this.userView.hasTheFunction("06070106")
									|| this.userView.hasTheFunction("06070208") || this.userView
									.hasTheFunction("06070308")))// itemtype=3是任务下达中强制分配的任务，不能删除
					{
						context.append("&nbsp;/&nbsp;");
						context.append("<a href='###' onclick=\"delPoint('"
								+ (String) point_bean.get("p0400")
								+ "')\" ><font class='"
								+ this.getTt3CssClassName() + "'>"
								+ ResourceFactory.getProperty("label.kh.del")
								+ "</font></a>");
					}
				} else {
					if ("True"
							.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew"))) {

						// context.append("<a href=\"javascript:editAdjustPoint('"+(String)point_bean.get("p0400")+"','3')\" >调整</a>");
						if ("1".equalsIgnoreCase(processing_state)){
//							context.append("<a href='#' onclick=\"editAdjustPoint('"+(String)point_bean.get("p0400")+"','3')\" ><font class='"+this.getTt3CssClassName()+"'>调整</font></a>");
							context.append("<a href=\"javascript:editAdjustPoint('"+(String)point_bean.get("p0400")+"','3')\"  ><font class='"+this.getTt3CssClassName()+"'>调整</font></a>");
						}else {
							this.editableTaskList.add(new CommonData(
									(String) point_bean.get("p0400"),
									(String) point_bean.get("p0407")));
							context.append("<a href='###' onclick=\"editPoint('"
									+ (String) point_bean.get("p0400") + "','"
									+ itemtype + "')\" ><font class='"
									+ this.getTt3CssClassName() + "'>"
									+ edit_desc + "</font></a>");
						}
						if (!"3".equals(itemtype)
								&& (this.userView.hasTheFunction("06070106")
										|| this.userView
												.hasTheFunction("06070208") || this.userView
										.hasTheFunction("06070308"))) {
							context.append("&nbsp;/&nbsp;");
							if ("1"
									.equalsIgnoreCase((String) point_bean.get("processing_state"))){
								context.append("<a href=\"javascript:editAdjustPoint('"+(String)point_bean.get("p0400")+"','1')\"  ><font class='"+this.getTt3CssClassName()+"'>"+ResourceFactory.getProperty("label.kh.del")+"</font></a>");
							//	context.append("<a href='#' onclick=\"editAdjustPoint('"+(String)point_bean.get("p0400")+"','1')\" ><font class='"+this.getTt3CssClassName()+"'>"+ResourceFactory.getProperty("label.kh.del")+"</font></a>");
							}else
								context.append("<a href='###' onclick=\"delPoint('"
										+ (String) point_bean.get("p0400")
										+ "')\" ><font class='"
										+ this.getTt3CssClassName()
										+ "'>"
										+ ResourceFactory
												.getProperty("label.kh.del")
										+ "</font></a>");
						}

					} else {

						/*
						 * if(((String)point_bean.get("state")).equalsIgnoreCase(
						 * "-1")) {
						 * if(((String)point_bean.get("processing_state"
						 * )).equalsIgnoreCase("1"))
						 * context.append("<a href=\"javascript:editPoint('"
						 * +(String)point_bean.get("p0400")+"')\" >调整</a>");
						 * else
						 * context.append("<a href=\"javascript:editPoint('"
						 * +(String)point_bean.get("p0400")+"')\" >编辑</a>");
						 * 
						 * } else
						 */
						context.append("<a href=\"javascript:editAdjustPoint('"+(String)point_bean.get("p0400")+"','2')\"  ><font class='"+this.getTt3CssClassName()+"'>调整</font></a>");
//						context.append("<a href='#' onclick=\"editAdjustPoint('"+(String)point_bean.get("p0400")+"','2')\" ><font class='"+this.getTt3CssClassName()+"'>调整</font></a>");
						if (!"3".equals(itemtype)
								&& (this.userView.hasTheFunction("06070106")
										|| this.userView
												.hasTheFunction("06070208") || this.userView
										.hasTheFunction("06070308"))) {
							context.append("&nbsp;/&nbsp;");
							context.append("<a href=\"javascript:editAdjustPoint('"+(String)point_bean.get("p0400")+"','1')\"  ><font class='"+this.getTt3CssClassName()+"'>"+ResourceFactory.getProperty("label.kh.del")+"</font></a>");
//							context.append("<a href='#' onclick=\"editAdjustPoint('"+(String) point_bean.get("p0400")+"','1')\" ><font class='"+this.getTt3CssClassName()+"'>"+ResourceFactory.getProperty("label.kh.del")+"</font></a>");
						}
					}

				}
			} else {
				if (this.planParam.get("PublicPointCannotEdit") != null
						&& "False"
								.equalsIgnoreCase((String) this.planParam
                                        .get("PublicPointCannotEdit"))) {

					if (isAdjustPoint
							|| ("1".equalsIgnoreCase(processing_state))){ // 状态初始化功能时，共性指标需为调整
						context.append("<a href=\"javascript:editAdjustPoint('"+(String)point_bean.get("p0400")+"','2')\"  ><font class='"+this.getTt3CssClassName()+"'>调整</font></a>");
//						context.append("<a href='#' onclick=\"editAdjustPoint('"+(String)point_bean.get("p0400")+"','2')\" ><font class='"+this.getTt3CssClassName()+"'>调整</font></a>");
					}else {
						this.editableTaskList.add(new CommonData(
								(String) point_bean.get("p0400"),
								(String) point_bean.get("p0407")));
						context.append("<a href=\"javascript:editPoint('"+(String) point_bean.get("p0400")+"','"+itemtype+"')\" ><font class='"+this.getTt3CssClassName()+"'>编辑</font></a>");
//						context.append("<a href='#' onclick=\"editPoint('"+(String) point_bean.get("p0400")+"','"+itemtype+"')\" ><font class='"+this.getTt3CssClassName()+"'>编辑</font></a>");
					}
				}
			}

		} else if ("02".equalsIgnoreCase(objectSpFlag)
				&& !"7".equals(this.model))// 已报批并且不是目标卡代制订
		{

			/** 针对于一级审批的目标计划，直接上级，在目标员工目标模块可以提员工编辑任务 */
			boolean a = false;
			if (!"2".equals(itemtype)) {
				if (opt == 1
						&& "02".equals(objectSpFlag)
						&& this.getPerObject_vo().getString("currappuser")
								.equalsIgnoreCase(this.userView.getA0100())
						&& "True"
								.equalsIgnoreCase((String) this.planParam.get("allowLeadAdjustCard"))) {
					// if((model.equals("3")&&!this.userView.getA0100().equals(this.object_id))||(model.equals("1")&&!this.userView.getA0100().equals(this.un_functionary)))
					if ("3".equals(model)
							|| ("1".equals(model) && !this.userView.getA0100()
									.equals(this.un_functionary))) {
						String p0424 = (String) point_bean.get("p0424");
						String[] temps = null;
						if (p0424.length() > 0)
							temps = p0424.split("/");
						if ("2".equals(item_kind)) {
							if ("True"
									.equalsIgnoreCase((String) this.planParam
                                            .get("taskAdjustNeedNew"))) {
								if ("1".equalsIgnoreCase(processing_state)
										|| (temps != null && !temps[0]
												.equalsIgnoreCase(this.userView
														.getDbname()
														+ this.userView
																.getA0100())))
									context.append("<a href='###' onclick=\"editAdjustPoint('"
											+ (String) point_bean.get("p0400")
											+ "','3')\" ><font class='"
											+ this.getTt3CssClassName()
											+ "'>调整</font></a>");
								else {
									this.editableTaskList.add(new CommonData(
											(String) point_bean.get("p0400"),
											(String) point_bean.get("p0407")));
									context.append("<a href='###' onclick=\"editPoint('"
											+ (String) point_bean.get("p0400")
											+ "','"
											+ itemtype
											+ "')\" ><font class='"
											+ this.getTt3CssClassName()
											+ "'>编辑</font></a>");
								}
								if (!"3".equals(itemtype)
										&& (this.userView
												.hasTheFunction("06070106")
												|| this.userView
														.hasTheFunction("06070208") || this.userView
												.hasTheFunction("06070308"))) {
									context.append("&nbsp;/&nbsp;");
									if ("1"
											.equalsIgnoreCase(processing_state)
											|| (temps != null && !temps[0]
													.equalsIgnoreCase(this.userView
															.getDbname()
															+ this.userView
																	.getA0100())))
										context.append("<a href='###' onclick=\"editAdjustPoint('"
												+ (String) point_bean
														.get("p0400")
												+ "','1')\" ><font class='"
												+ this.getTt3CssClassName()
												+ "'>"
												+ ResourceFactory
														.getProperty("label.kh.del")
												+ "</font></a>");
									else
										context.append("<a href='###' onclick=\"delPoint('"
												+ (String) point_bean
														.get("p0400")
												+ "')\" ><font class='"
												+ this.getTt3CssClassName()
												+ "'>"
												+ ResourceFactory
														.getProperty("label.kh.del")
												+ "</font></a>");
								}
							} else {
								/*
								 * if(!isAdjustPoint) {
								 * context.append("<a href=\"javascript:editPoint('"
								 * +
								 * (String)point_bean.get("p0400")+"')\" >编辑</a>"
								 * ); context.append("&nbsp;/&nbsp;");
								 * context.append
								 * ("<a href=\"javascript:delPoint('"
								 * +(String)point_bean
								 * .get("p0400")+"')\" >"+ResourceFactory
								 * .getProperty("label.kh.del")+"</a>"); } else
								 */
								{

									context.append("<a href='###' onclick=\"editAdjustPoint('"
											+ (String) point_bean.get("p0400")
											+ "','2')\" ><font class='"
											+ this.getTt3CssClassName()
											+ "'>调整</font></a>");
									if (!"3".equals(itemtype)
											&& (this.userView
													.hasTheFunction("06070106")
													|| this.userView
															.hasTheFunction("06070208") || this.userView
													.hasTheFunction("06070308"))) {
										context.append("&nbsp;/&nbsp;");
										context.append("<a href='###' onclick=\"editAdjustPoint('"
												+ (String) point_bean
														.get("p0400")
												+ "','1')\" ><font class='"
												+ this.getTt3CssClassName()
												+ "'>"
												+ ResourceFactory
														.getProperty("label.kh.del")
												+ "</font></a>");
									}
								}
							}

						} else {
							if (this.planParam.get("PublicPointCannotEdit") != null
									&& "False"
											.equalsIgnoreCase((String) this.planParam
                                                    .get("PublicPointCannotEdit"))) {

								// if(isAdjustPoint||((String)this.planParam.get("taskAdjustNeedNew")).equalsIgnoreCase("True"))
								{
									context.append("<a href='###' onclick=\"editAdjustPoint('"
											+ (String) point_bean.get("p0400")
											+ "','2')\" ><font class='"
											+ this.getTt3CssClassName()
											+ "'>调整</font></a>");
								}
								/*
								 * else {
								 * 
								 * context.append("<a href=\"javascript:editPoint('"
								 * +
								 * (String)point_bean.get("p0400")+"')\" >编辑</a>"
								 * ); }
								 */
							}
						}
						a = true;
					}
				}
			}

			/*
			if(this.plan_vo.getInt("status")==5&&optCardObject.equals("5")&&this.NoApproveTargetCanScore.equalsIgnoreCase("true")&&this.TargetTraceItem.length() > 0) //目标卡没批准也允许打分，但设置了跟踪指标
			{
				context.append("<a href='#' onclick=\"editPoint2('"
						+ (String) point_bean.get("p0400")
						+ "')\" ><font class='"
						+ this.getTt3CssClassName()
						+ "'>"
						+ edit_desc + "</font></a>");
			}
			*/
			boolean b = false;

			// if(!this.userView.getA0100().equals(this.object_id)&&this.userView.hasTheFunction("06070301")&&",0,1,-1,-2,".indexOf(","+this.optCardObject+",")!=-1)
			if (!"7".equals(this.model)) {
				if (this.userView.hasTheFunction("06070301")
						&& ",0,1,-1,-2,"
								.indexOf("," + this.optCardObject + ",") != -1) {
					if ("True"
							.equalsIgnoreCase((String) this.planParam.get("taskCanSign"))
							&& this.plan_vo.getInt("status") == 8)// 只有分发状态才出现签批
					{
						b = true;
						if (a)
							context.append("&nbsp;/&nbsp;");
						context.append("<a href='###' onclick=\"sign_point('"
								+ (String) point_bean.get("p0400")
								+ "')\" ><font class='"
								+ this.getTt3CssClassName() + "'>签批</font></a>");

					}
				}

				if ("True"
						.equalsIgnoreCase((String) this.planParam.get("taskNeedReview"))) {
					if (a || b)
						context.append("&nbsp;/&nbsp;");
					context.append("<a href='###' onclick=\"review('"
							+ (String) point_bean.get("p0400")
							+ "','"
							+ isRead
							+ "')\" ><font class='"
							+ this.getTt3CssClassName()
							+ "'>"
							+ ResourceFactory
									.getProperty("info.appleal.state19")
							+ "</font></a>");
					if ("1".equals((String) point_bean.get("hasReview")))
						context.append("<img src='/images/hint.gif' border='0'/>");
				}
			}
		} else if ("07".equalsIgnoreCase(objectSpFlag) && !"2".equals(itemtype)) {
			if ("2".equals(item_kind)) {
				if (this.plan_vo.getInt("status") != 4
						&& this.plan_vo.getInt("status") != 6
						&& this.plan_vo.getInt("status") != 7
						&& "0".equals(this.isSubScore))// 如果有人打分已提交，将不能修改，调整，删除
				{

					if ("True"
							.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew"))) {

						if ("1".equalsIgnoreCase(processing_state))
							context.append("<a href='###' onclick=\"editAdjustPoint('"
									+ (String) point_bean.get("p0400")
									+ "','3')\" ><font class='"
									+ this.getTt3CssClassName()
									+ "'>调整</font></a>");
						else {
							this.editableTaskList.add(new CommonData(
									(String) point_bean.get("p0400"),
									(String) point_bean.get("p0407")));
							context.append("<a href='###' onclick=\"editPoint('"
									+ (String) point_bean.get("p0400") + "','"
									+ itemtype + "')\" ><font class='"
									+ this.getTt3CssClassName() + "'>"
									+ edit_desc + "</font></a>");
						}
					} else {
						if (isAdjustPoint) {
							context.append("<a href='###' onclick=\"editAdjustPoint('"
									+ (String) point_bean.get("p0400")
									+ "','2')\" ><font class='"
									+ this.getTt3CssClassName()
									+ "'>调整</font></a>");
						} else {
							this.editableTaskList.add(new CommonData(
									(String) point_bean.get("p0400"),
									(String) point_bean.get("p0407")));
							context.append("<a href='###' onclick=\"editPoint('"
									+ (String) point_bean.get("p0400") + "','"
									+ itemtype + "')\" ><font class='"
									+ this.getTt3CssClassName() + "'>"
									+ edit_desc + "</font></a>");
						}

					}
					if (!"3".equals(itemtype)
							&& (this.userView.hasTheFunction("06070106")
									|| this.userView.hasTheFunction("06070208") || this.userView
									.hasTheFunction("06070308"))) {
						context.append("&nbsp;/&nbsp;");

						if ("True"
								.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew"))) {
							if ("1".equalsIgnoreCase(processing_state))
								context.append("<a href='###' onclick=\"editAdjustPoint('"
										+ (String) point_bean.get("p0400")
										+ "','1')\" ><font class='"
										+ this.getTt3CssClassName()
										+ "'>"
										+ ResourceFactory
												.getProperty("label.kh.del")
										+ "</font></a>");
							else
								context.append("<a href='###' onclick=\"delPoint('"
										+ (String) point_bean.get("p0400")
										+ "')\" ><font class='"
										+ this.getTt3CssClassName()
										+ "'>"
										+ ResourceFactory
												.getProperty("label.kh.del")
										+ "</font></a>");
						} else {
							if (isAdjustPoint)
								context.append("<a href='###' onclick=\"editAdjustPoint('"
										+ (String) point_bean.get("p0400")
										+ "','1')\" ><font class='"
										+ this.getTt3CssClassName()
										+ "'>"
										+ ResourceFactory
												.getProperty("label.kh.del")
										+ "</font></a>");
							else
								context.append("<a href='###' onclick=\"delPoint('"
										+ (String) point_bean.get("p0400")
										+ "')\" ><font class='"
										+ this.getTt3CssClassName()
										+ "'>"
										+ ResourceFactory
												.getProperty("label.kh.del")
										+ "</font></a>");
						}
					}
				} else {
					if (this.plan_vo.getInt("status") != 4
							&& this.plan_vo.getInt("status") != 6
							&& this.plan_vo.getInt("status") != 7) {
						if ("True"
								.equalsIgnoreCase((String) this.planParam.get("taskNeedReview"))/*
														 * &&(this.mainbodyBean==
														 * null
														 * ||!this.mainbodyBean
														 * .get
														 * ("status").equals(
														 * "2"))
														 */)// 是否显示回顾，与打分状态无关
						{
							context.append("<a href='###' onclick=\"review('"
									+ (String) point_bean.get("p0400")
									+ "','1')\" ><font class='"
									+ this.getTt3CssClassName()
									+ "'>"
									+ ResourceFactory
											.getProperty("info.appleal.state19")
									+ "</font></a>");
							if ("1"
									.equals((String) point_bean.get("hasReview")))
								context.append("<img src='/images/hint.gif' border='0'/>");
						}
					}
				}
			} else {
				if (this.planParam.get("PublicPointCannotEdit") != null
						&& "False"
								.equalsIgnoreCase((String) this.planParam
                                        .get("PublicPointCannotEdit"))
						&& "0".equals(this.isSubScore)) {
					if ("True"
							.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew"))) {
						if (("1".equalsIgnoreCase(processing_state)))
							context.append("<a href='###' onclick=\"editAdjustPoint('"
									+ (String) point_bean.get("p0400")
									+ "','2')\" ><font class='"
									+ this.getTt3CssClassName()
									+ "'>调整</font></a>");
						else {
							this.editableTaskList.add(new CommonData(
									(String) point_bean.get("p0400"),
									(String) point_bean.get("p0407")));
							context.append("<a href='###' onclick=\"editPoint('"
									+ (String) point_bean.get("p0400") + "','"
									+ itemtype + "')\" ><font class='"
									+ this.getTt3CssClassName() + "'>"
									+ edit_desc + "</font></a>");
						}
					} else {
						if (isAdjustPoint)
							context.append("<a href='###' onclick=\"editAdjustPoint('"
									+ (String) point_bean.get("p0400")
									+ "','2')\" ><font class='"
									+ this.getTt3CssClassName()
									+ "'>调整</font></a>"); // 编辑
						else {
							this.editableTaskList.add(new CommonData(
									(String) point_bean.get("p0400"),
									(String) point_bean.get("p0407")));
							context.append("<a href='###' onclick=\"editPoint('"
									+ (String) point_bean.get("p0400") + "','"
									+ itemtype + "')\" ><font class='"
									+ this.getTt3CssClassName() + "'>"
									+ edit_desc + "</font></a>");
						}

					}
				}
			}

		} else if ("03".equalsIgnoreCase(objectSpFlag)
				&& !"7".equals(this.model)) {
			int n = 0;
			boolean isReview = false;
			boolean isEdit = false;
			boolean _isFillTrancePoint = false;
			boolean isVisable = true;// 控制硬性分配指标是否出现编辑连接，只有满足条件，即在填写跟踪指标时才出现连接
			boolean confirmScored=confirmScored();
			if (!("03".equals(this.objectSpFlag) && (opt == 0 || opt == 2) && (this.plan_vo
					.getInt("status") == 4
					|| this.plan_vo.getInt("status") == 6 || this.plan_vo
					.getInt("status") == 8))
					&& "2".equals(itemtype))
				isVisable = false;

			if (opt == 2
					&& (this.object_id.equalsIgnoreCase(this.userView
							.getA0100()) || this.un_functionary
							.equalsIgnoreCase(this.userView.getA0100()))) {
				if (isVisable) {
					if ("false".equalsIgnoreCase(this.AllowLeaderTrace)
							|| ("true".equalsIgnoreCase(this.AllowLeaderTrace) && "true"
									.equalsIgnoreCase(this
                                            .isAllowAppealTrancePoint()))) {
						this.editableTaskList.add(new CommonData(
								(String) point_bean.get("p0400"),
								(String) point_bean.get("p0407")));

						boolean flag = true;
						if (SystemConfig.getPropertyValue("clientName") != null
								&& "zglt"
										.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {

							if (((String) point_bean.get("p0407")).trim()
									.length() == 0)
								flag = false;

						}
						if ("1".equals(this.template_vo.getString("status"))) // 权重
						{
							String p0415 = (String) point_bean.get("p0415");
							if (p0415 == null || p0415.trim().length() == 0
									|| Double.parseDouble(p0415) == 0) {
								flag = false;
							}
						}

						if (flag) {
							_isFillTrancePoint = true;
							if (this.TargetTraceItem.length() > 0) {
								if ((this.plan_vo.getInt("status") == 4 || this.plan_vo
										.getInt("status") == 6)
										&& "###".equalsIgnoreCase(this.AllowLeaderTrace)
										) {
									//不论是否允许领导编辑跟踪指标 跟踪指标在启动后均可编辑zzk      跟踪指标不审批，启动的计划不出现编辑跟踪指标链接
								} else{
									//判断是否存在已经提交过分数的主体,只要有一个就不能编辑   panjf  2014.01.10
									//if(this.AllowLeaderTrace.equalsIgnoreCase("false")&&this.mainbodyBean.get("status").equals("2")){//跟踪指标不允许领导调整、且打分已提交，在评估时不能编辑跟踪指标
									if("false".equalsIgnoreCase(this.AllowLeaderTrace)&&isExsitMainbodyHaveScored(this.object_id)){//跟踪指标不允许领导调整、且打分已提交，在评估时不能编辑跟踪指标
										
									}else{
										context.append("<a href='###' onclick=\"editPoint2('"
												+ (String) point_bean.get("p0400")
												+ "')\" ><font class='"
												+ this.getTt3CssClassName()
												+ "'>"
												+ edit_desc + "</font></a>");
									}

									
								}
	
							}
							isEdit = true;
						}
					}
				}
			}
			if (opt == 0 || opt == -1) {
				if (isVisable) {
					if ("5".equals(optCardObject)
							&& (this.mainbodyBean == null || !"2".equals(this.mainbodyBean
									.get("status")))) {
						if ("false".equalsIgnoreCase(this.AllowLeaderTrace)
								|| ("true"
										.equalsIgnoreCase(this.AllowLeaderTrace) && "true"
										.equalsIgnoreCase(this
										.isAllowAppealTrancePoint()))) {
							this.editableTaskList.add(new CommonData(
									(String) point_bean.get("p0400"),
									(String) point_bean.get("p0407")));

							boolean flag = true;
							if (SystemConfig.getPropertyValue("clientName") != null
									&& "zglt".equalsIgnoreCase(
                                    SystemConfig.getPropertyValue(
                                            "clientName"))) {

								if (((String) point_bean.get("p0407")).trim()
										.length() == 0)
									flag = false;

							}

							if ("1"
									.equals(this.template_vo.getString("status"))) // 权重
							{
								String p0415 = (String) point_bean.get("p0415");
								if (p0415 == null || p0415.trim().length() == 0
										|| Double.parseDouble(p0415) == 0) {
									flag = false;
								}
							}

							if (flag) {
								_isFillTrancePoint = true;
								if (this.TargetTraceItem.length() > 0) {
									if ((this.plan_vo.getInt("status") == 4 || this.plan_vo
											.getInt("status") == 6)
											&& "###"
													.equalsIgnoreCase(this.AllowLeaderTrace)) {
										// 跟踪指标不审批，启动的计划不出现编辑跟踪指标链接  不论是否允许领导编辑跟踪指标 跟踪指标在启动后均可编辑zzk 
									} else{
										if(confirmScored){//如果有主体已经提交过分数  跟踪指标则不允许编辑zzk
											
										}else{
											context.append("<a href='###' onclick=\"editPoint2('"
													+ (String) point_bean
															.get("p0400")
													+ "')\" ><font class='"
													+ this.getTt3CssClassName()
													+ "'>"
													+ edit_desc
													+ "</font></a>");
										}
	
									}

								}
								isEdit = true;
							}
							n++;
						}
					} else if (isFillTrancePoint) {
						this.editableTaskList.add(new CommonData(
								(String) point_bean.get("p0400"),
								(String) point_bean.get("p0407")));
						boolean flag = true;
						if (SystemConfig.getPropertyValue("clientName") != null
								&& "zglt"
										.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {

							if (((String) point_bean.get("p0407")).trim()
									.length() == 0)
								flag = false;

						}
						if ("1".equals(this.template_vo.getString("status"))) // 权重
						{
							String p0415 = (String) point_bean.get("p0415");
							if (p0415 == null || p0415.trim().length() == 0
									|| Double.parseDouble(p0415) == 0) {
								flag = false;
							}
						}
						if (flag) {
							_isFillTrancePoint = true;
							if (this.TargetTraceItem.length() > 0) {
								if ((this.plan_vo.getInt("status") == 4 || this.plan_vo
										.getInt("status") == 6)
										&& "false"
												.equalsIgnoreCase(this.AllowLeaderTrace)) {
									// 跟踪指标不审批，启动的计划不出现编辑跟踪指标链接
								} else
									context.append("<a href='###' onclick=\"editPoint2('"
											+ (String) point_bean.get("p0400")
											+ "')\" ><font class='"
											+ this.getTt3CssClassName()
											+ "'>"
											+ edit_desc + "</font></a>");
							}
							isEdit = true;
						}
						n++;
					}
				}

				if (!"7".equals(this.model)) {
					if ("True"
							.equalsIgnoreCase((String) this.planParam.get("taskNeedReview"))/*
													 * &&(this.mainbodyBean==null
													 * ||!this.mainbodyBean.get(
													 * "status").equals("2"))
													 */)// 是否显示回顾，与打分状态无关
					{
						if (n > 0)
							context.append("&nbsp;/&nbsp;");
						context.append("<a href='###' onclick=\"review('"
								+ (String) point_bean.get("p0400")
								+ "','"
								+ isRead
								+ "')\" ><font class='"
								+ this.getTt3CssClassName()
								+ "'>"
								+ ResourceFactory
										.getProperty("info.appleal.state19")
								+ "</font></a>");
						if ("1".equals((String) point_bean.get("hasReview")))
							context.append("<img src='/images/hint.gif' border='0'/>");
						isReview = true;
					}
				}
			}

			if (opt == 1 && "5".equals(optCardObject) && isVisable) {
				if (n > 0)
					context.append("&nbsp;/&nbsp;");
				if ("2".equals(item_kind)) {
					if ("True"
							.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew"))) {
						if ("1".equalsIgnoreCase(processing_state))
							context.append("<a href='###' onclick=\"editAdjustPoint('"
									+ (String) point_bean.get("p0400")
									+ "','3')\" ><font class='"
									+ this.getTt3CssClassName()
									+ "'>调整</font></a>");
						else
							context.append("<a href='###' onclick=\"editAdjustPoint('"
									+ (String) point_bean.get("p0400")
									+ "','2')\" ><font class='"
									+ this.getTt3CssClassName()
									+ "'>调整</font></a>");
						if (!"3".equals(itemtype)
								&& (this.userView.hasTheFunction("06070106")
										|| this.userView
												.hasTheFunction("06070208") || this.userView
										.hasTheFunction("06070308"))) {
							context.append("&nbsp;/&nbsp;");
							context.append("<a href='###' onclick=\"editAdjustPoint('"
									+ (String) point_bean.get("p0400")
									+ "','1')\" ><font class='"
									+ this.getTt3CssClassName()
									+ "'>"
									+ ResourceFactory
											.getProperty("label.kh.del")
									+ "</font></a>");
						}
					} else {
						context.append("<a href='###' onclick=\"editAdjustPoint('"
								+ (String) point_bean.get("p0400")
								+ "','2')\" ><font class='"
								+ this.getTt3CssClassName() + "'>调整</font></a>");
						if (!"3".equals(itemtype)
								&& (this.userView.hasTheFunction("06070106")
										|| this.userView
												.hasTheFunction("06070208") || this.userView
										.hasTheFunction("06070308"))) {
							context.append("&nbsp;/&nbsp;");
							context.append("<a href='###' onclick=\"editAdjustPoint('"
									+ (String) point_bean.get("p0400")
									+ "','1')\" ><font class='"
									+ this.getTt3CssClassName()
									+ "'>"
									+ ResourceFactory
											.getProperty("label.kh.del")
									+ "</font></a>");
						}
					}
					isEdit = true;
				} else {
					if (this.planParam.get("PublicPointCannotEdit") != null
							&& "False"
									.equalsIgnoreCase((String) this.planParam
                                            .get("PublicPointCannotEdit"))) {
						context.append("<a href='###' onclick=\"editAdjustPoint('"
								+ (String) point_bean.get("p0400")
								+ "','2')\" ><font class='"
								+ this.getTt3CssClassName() + "'>调整</font></a>");
						isEdit = true;
					}
				}
			} else if (opt == 1) {
				if (!"7".equals(this.model)) {
					if ("True"
							.equalsIgnoreCase((String) this.planParam.get("taskNeedReview"))) {
						context.append("<a href='###' onclick=\"review('"
								+ (String) point_bean.get("p0400")
								+ "','"
								+ isRead
								+ "')\" ><font class='"
								+ this.getTt3CssClassName()
								+ "'>"
								+ ResourceFactory
										.getProperty("info.appleal.state19")
								+ "</font></a>");
						if ("1".equals((String) point_bean.get("hasReview")))
							context.append("<img src='/images/hint.gif' border='0'/>");
						isReview = true;
						isEdit = true;
					}
				}
			}

			if ((opt == 0 || opt == 2)
					&& !isReview
					&& (this.plan_vo.getInt("status") == 4
							|| this.plan_vo.getInt("status") == 6 || this.plan_vo
							.getInt("status") == 7)) {

				if (isFillTrancePoint && !_isFillTrancePoint) {
					this.editableTaskList.add(new CommonData(
							(String) point_bean.get("p0400"),
							(String) point_bean.get("p0407")));
					boolean flag = true;
					if (SystemConfig.getPropertyValue("clientName") != null
							&& "zglt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {

						if (((String) point_bean.get("p0407")).trim().length() == 0)
							flag = false;

					}
					if ("1".equals(this.template_vo.getString("status"))) // 权重
					{
						String p0415 = (String) point_bean.get("p0415");
						if (p0415 == null || p0415.trim().length() == 0
								|| Double.parseDouble(p0415) == 0) {
							flag = false;
						}
					}
					if (flag && isVisable) {
						if (this.TargetTraceItem.length() > 0) {
							if ((this.plan_vo.getInt("status") == 4 || this.plan_vo
									.getInt("status") == 6)
									&& "false"
											.equalsIgnoreCase(this.AllowLeaderTrace)) {
								// 跟踪指标不审批，启动的计划不出现编辑跟踪指标链接
							} else
								context.append("<a href='###' onclick=\"editPoint2('"
										+ (String) point_bean.get("p0400")
										+ "')\" ><font class='"
										+ this.getTt3CssClassName()
										+ "'>"
										+ edit_desc + "</font></a>");
						}
						isEdit = true;
					}
					n++;
				}

				if (!"7".equals(this.model))// =7目标卡带制订
				{
					if ("True"
							.equalsIgnoreCase((String) this.planParam.get("taskNeedReview"))) {
						if (isEdit)
							context.append("&nbsp;/&nbsp;");
						context.append("<a href='###' onclick=\"review('"
								+ (String) point_bean.get("p0400")
								+ "','1')\" ><font class='"
								+ this.getTt3CssClassName()
								+ "'>"
								+ ResourceFactory
										.getProperty("info.appleal.state19")
								+ "</font></a>");
						if ("1".equals((String) point_bean.get("hasReview")))
							context.append("<img src='/images/hint.gif' border='0'/>");
						isReview = true;
					}
				}
			}

		}
		// 已批并且是目标卡代制订 JinChunhai 2013.03.19
		else if ("7".equals(this.model)
				&& ("03".equalsIgnoreCase(this.objectSpFlag)) && this.opt == 1) {
			String p0424 = (String) point_bean.get("p0424");
			String[] temps = null;
			if (p0424.length() > 0)
				temps = p0424.split("/");
			if ("2".equals(item_kind)) {
				if ("True"
						.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew"))) {
					if ("1".equalsIgnoreCase(processing_state)
							|| (temps != null && !temps[0]
									.equalsIgnoreCase(this.userView.getDbname()
											+ this.userView.getA0100())))
						context.append("<a href='###' onclick=\"editAdjustPoint('"
								+ (String) point_bean.get("p0400")
								+ "','3')\" ><font class='"
								+ this.getTt3CssClassName() + "'>调整</font></a>");
					else {
						this.editableTaskList.add(new CommonData(
								(String) point_bean.get("p0400"),
								(String) point_bean.get("p0407")));
						context.append("<a href='###' onclick=\"editPoint3('"
								+ (String) point_bean.get("p0400") + "','"
								+ itemtype + "')\" ><font class='"
								+ this.getTt3CssClassName() + "'>编辑</font></a>");
					}
					if (!"3".equals(itemtype)
							&& (this.userView.hasTheFunction("06070106")
									|| this.userView.hasTheFunction("06070208") || this.userView
									.hasTheFunction("06070308"))) {
						context.append("&nbsp;/&nbsp;");
						if ("1".equalsIgnoreCase(processing_state)
								|| (temps != null && !temps[0]
										.equalsIgnoreCase(this.userView
												.getDbname()
												+ this.userView.getA0100())))
							context.append("<a href='###' onclick=\"editAdjustPoint('"
									+ (String) point_bean.get("p0400")
									+ "','1')\" ><font class='"
									+ this.getTt3CssClassName()
									+ "'>"
									+ ResourceFactory
											.getProperty("label.kh.del")
									+ "</font></a>");
						else
							context.append("<a href='###' onclick=\"delPoint('"
									+ (String) point_bean.get("p0400")
									+ "')\" ><font class='"
									+ this.getTt3CssClassName()
									+ "'>"
									+ ResourceFactory
											.getProperty("label.kh.del")
									+ "</font></a>");
					}
				} else {
					this.editableTaskList.add(new CommonData(
							(String) point_bean.get("p0400"),
							(String) point_bean.get("p0407")));
					context.append("<a href='###' onclick=\"editPoint3('"
							+ (String) point_bean.get("p0400") + "','"
							+ itemtype + "')\" ><font class='"
							+ this.getTt3CssClassName() + "'>" + edit_desc
							+ "</font></a>");
					if (!"3".equals(itemtype)
							&& (this.userView.hasTheFunction("06070106")
									|| this.userView.hasTheFunction("06070208") || this.userView
									.hasTheFunction("06070308")))// itemtype=3是任务下达中强制分配的任务，不能删除
					{
						context.append("&nbsp;/&nbsp;");
						context.append("<a href='###' onclick=\"delPoint('"
								+ (String) point_bean.get("p0400")
								+ "')\" ><font class='"
								+ this.getTt3CssClassName() + "'>"
								+ ResourceFactory.getProperty("label.kh.del")
								+ "</font></a>");
					}
				}
			} else {
				this.editableTaskList.add(new CommonData((String) point_bean
						.get("p0400"), (String) point_bean.get("p0407")));
				context.append("<a href='###' onclick=\"editPoint3('"
						+ (String) point_bean.get("p0400") + "','" + itemtype
						+ "')\" ><font class='" + this.getTt3CssClassName()
						+ "'>" + edit_desc + "</font></a>");
			}

		}
		return context.toString();
	}
	/**
	 * 判断一个计划内是否有考核主体已经评分提交了
	 * @return
	 */
	private boolean confirmScored(){
		boolean bool=false;
		String sql=" select status from per_mainbody where plan_id='"+this.plan_id+"' and object_id='"+this.object_id+"'";
		ContentDAO dao = new ContentDAO(this.conn);
		ResultSet res=null;
		try{
			res=dao.search(sql);
			while(res.next()){
				if("2".equals(res.getString("status")))
					bool=true;
				if(bool)
				   break;
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			if(res!=null){
				try {
					res.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return bool;
	}
	public String changeColor(String context, LazyDynaBean point_bean) {
		String str = context;
		if (point_bean.get("state") != null) {
			String state = (String) point_bean.get("state");
			String chg_type = (String) point_bean.get("chg_type");
			if ("-1".equals(state)) // 调整过的项目
			{
				if ("3".equals(chg_type)) {
					str = "<font class='" + this.getChangeCssClassName() + "'>"
							+ str + "</font>";
				}
			}
		}
		return str;
	}

	/**
	 * 取得目标结果html
	 * 
	 * @param point_bean
	 * @param item_kind
	 * @return
	 */
	public String getGoalResultStr(LazyDynaBean point_bean, String item_kind,
			String a0100, String css_name) {
		StringBuffer ext_html = new StringBuffer("");
		String p0401 = (String) point_bean.get("p0401");
		String p0400 = (String) point_bean.get("p0400");
		String fromflag = (String) point_bean.get("fromflag");
		String point_kind = "";
		String status = "";
		if ("2".equals(fromflag)) {
			point_kind = (String) point_bean.get("pointkind");
			if (point_kind == null)
				point_kind = "";
			status = (String) point_bean.get("status");
		}
		if (this.plan_vo.getInt("method") == 1) // 360度计划
		{
			LazyDynaBean pointBean = (LazyDynaBean) this.pointMap.get(p0401);
			if(pointBean != null) {
				point_kind = (String) pointBean.get("pointkind");
				status = (String) pointBean.get("status");
			}
			if (point_kind != null && "1".equals(point_kind) && status != null
					&& "1".equals(status)) {
				if (this.perPointScoreMap.get(p0401.toLowerCase()) != null) {
					ext_html.append(writeTd(PubFunc.round(
							(String) this.perPointScoreMap.get(p0401
									.toLowerCase()), 2), 0, "right",
							this.td_width, "1", css_name));
				} else {
					ext_html.append(writeTd("&nbsp;", 0, "right",
							this.td_width, "1", css_name));
				}
			} else {
				HashMap map = (HashMap) objectAllEvaluateMap.get(a0100);
				if (map != null && map.get(p0401) != null) {

					LazyDynaBean a_bean = (LazyDynaBean) map.get(p0401);
					if ("1".equals(scoreflag) && "0".equals(point_kind)) {
						// String gradedesc=(String)a_bean.get("gradedesc");

						String gradedesc = (String) a_bean.get("desc2");
						if ("2"
								.equals((String) this.planParam.get("DegreeShowType")))
							gradedesc = (String) a_bean.get("gradedesc");
						ext_html.append(writeTd(gradedesc == null ? ""
								: gradedesc, 0, "left", this.td_width, "1",
								css_name));
					} else
						ext_html.append(writeTd(a_bean == null ? ""
								: (String) a_bean.get("score"), 0, "right",
								this.td_width, "1", css_name));

				} else {
					ext_html.append(writeTd("&nbsp;", 0, "right",
							this.td_width, "1", css_name));
				}
			}

		} else if (this.plan_vo.getInt("method") == 2) // 目标
		{
			if ((fromflag != null && "2".equals(fromflag))
					&& (point_kind != null && "1".equals(point_kind))
					&& (status != null && "1".equals(status))) {
				if (this.perPointScoreMap.get(p0401.toLowerCase()) != null) {
					ext_html.append(writeTd(PubFunc.round(
							(String) this.perPointScoreMap.get(p0401
									.toLowerCase()), 2), 0, "right",
							this.td_width, "1", css_name));
				} else {
					ext_html.append(writeTd("&nbsp;", 0, "right",
							this.td_width, "1", css_name));
				}
			} else {

				HashMap map = (HashMap) objectAllEvaluateMap.get(a0100);
				if (map != null) {
					String tt = "";
					LazyDynaBean a_bean = (LazyDynaBean) map.get(p0400);
					if (a_bean != null) {
						tt = (String) a_bean.get("score");
						if ("1".equals(this.scoreflag)
								&& !"1".equals(point_kind)) // =2混合，=1标度,=4加扣分)point_kind=1是定量指标
						{
							String degree_id = (String) a_bean.get("degree_id");
							if (degree_id != null
									&& degree_id.trim().length() > 0)
								tt = (String) a_bean.get("gradedesc");
						}// 定量取amount,status=1为统一打分指标
						if ("1".equalsIgnoreCase(point_kind)
								&& !"1".equals(status)) {
							tt = (String) a_bean.get("amount");
						}
					}
					ext_html.append(writeTd(tt, 0, "right", this.td_width, "1",
							css_name));
				} else {
					ext_html.append(writeTd("&nbsp;", 0, "right",
							this.td_width, "1", css_name));
				}
			}
		}

		return ext_html.toString();
	}

	/**
	 * 根据不同的操作模式( 1:目标制订 2：目标察看 3：目标评估 4:调整目标 )生成不同的目标卡
	 * 
	 * @param item_kind
	 *            1:共性项目 2：个性项目
	 * @return
	 */
	public String getExtendTd2(LazyDynaBean point_bean, String item_kind,String _itemid) {
		StringBuffer ext_html = new StringBuffer("");
		DecimalFormat myformat1 = new DecimalFormat("########.####");//
		LazyDynaBean abean = null;
		/** 如果对该项目没有权限，则不能操作该项目下的指标 */
		if (itemPrivMap.get(_itemid) != null
				&& "0".equals((String) itemPrivMap.get(_itemid)))
			this.aflag = false;
		if (point_bean != null) {
			String point_item_id = (String) point_bean.get("item_id");
			String itemtype = (String) point_bean.get("itemtype");

			for (int i = 2; i < this.headList.size(); i++) {

				String css_name = "RecordRow_self common_border_color";
				if (i == headList.size() - 1)
					css_name = "RecordRow_self_right common_border_color";
				if (i == 2
						&& SystemConfig.getPropertyValue("clientName") != null
						&& "zglt"
								.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 中国联通操作
					css_name = "RecordRow_lt_self common_border_color";
				abean = (LazyDynaBean) this.headList.get(i);
				String itemType = (String) abean.get("itemType");
				int o_width = this.td_width;

				String itemid = (String) abean.get("itemid");
				if (this.customTdWidthMap.size() > 0
						&& this.customTdWidthMap.get(itemid.toLowerCase()) != null) // 自定义列宽
				{
					this.td_width = Integer
							.parseInt((String) this.customTdWidthMap.get(itemid
									.toLowerCase()));
				} else {
					if ("N".equalsIgnoreCase(itemType)
							&& !"p0419".equalsIgnoreCase(itemid))
						this.td_width = this.td_width - 50;
					if (!"zglt"
							.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))
							&& ("p0413".equalsIgnoreCase(itemid)
									|| "p0415".equalsIgnoreCase(itemid)
									|| "p0421".equalsIgnoreCase(itemid)
									|| "p0423".equalsIgnoreCase(itemid) || "score"
									.equalsIgnoreCase(itemid))) {
						this.td_width = this.td_width - 30;
						if (this.headList.size() < 8
								&& this.customTdWidthMap != null
								&& this.customTdWidthMap.size() <= 0)
							this.td_width = this.td_width - 50;
					}
					if (SystemConfig.getPropertyValue("clientName") != null
							&& "zglt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 中国联通
					{
						if ("P04A0".equalsIgnoreCase(itemid))
							this.td_width = this.td_width * 3;
						if ("P0415".equalsIgnoreCase(itemid))
							this.td_width = this.td_width - 100;
					}
				}

				StringBuffer context = new StringBuffer("");
				if ("score_result".equalsIgnoreCase(itemid)) // 评分调整，展现考核结果列
				{
					ext_html.append(getPerResultTd(point_bean, item_kind,
							css_name));
					// ext_html.append();
				} else if (itemid.charAt(0) == '_') {
					ext_html.append(getGoalResultStr(point_bean, item_kind,
							itemid.substring(1), css_name));
				} else if (itemid.indexOf("reason_") != -1) // 扣分原因
				{
					String p0401 = (String) point_bean.get("p0401");
					String p0400 = (String) point_bean.get("p0400");
					String object_id = itemid.substring(7);
					HashMap map = null;
					if (objectAllEvaluateMap != null)
						map = (HashMap) objectAllEvaluateMap.get(object_id);
					if (map != null
							&& ((this.plan_vo.getInt("method") == 2 && map
									.get(p0400) != null) || (this.plan_vo
									.getInt("method") == 1 && map.get(p0401) != null))) {
						LazyDynaBean a_bean = null;
						if (this.plan_vo.getInt("method") == 2)
							a_bean = (LazyDynaBean) map.get(p0400);
						if (this.plan_vo.getInt("method") == 1)
							a_bean = (LazyDynaBean) map.get(p0401);
						String reasons = (String) a_bean.get("reasons");
						if (reasons == null)
							reasons = "";
						String allreasons = (String) a_bean.get("allreasons");
						if (allreasons == null)
							allreasons = "";
						// allreasons=allreasons.replaceAll("<br>","\r\n");
						// allreasons=allreasons.replaceAll(" ","&nbsp;");
						if (reasons != null && reasons.length() > 40)
							reasons = reasons.substring(0, 40) + "......";
						reasons = reasons.replaceAll("<br>", "\r\n");
						reasons = reasons.replaceAll(" ", "&nbsp;");

						if (reasons.trim().length() > 0) {
							String str = "";
							str = "<table width='100%'  ><tr ><td title=\""
									+ allreasons + "\">" + reasons
									+ "</td></tr><tr>";
							if (this.plan_vo.getInt("method") == 1)
								str += "<td align='center'  ><img title='填写评分说明'  onclick='scoreReason(\""
										+ this.plan_vo.getInt("plan_id")
										+ "\",\""
										+ this.object_id
										+ "\",\""
										+ object_id
										+ "\",\""
										+ p0401
										+ "\",\"1\")'   src='/images/readwrite_obj.gif' border=0></td></tr></table>";
							else
								str += "<td align='center'  ><img title='填写评分说明'  onclick='scoreReason(\""
										+ this.plan_vo.getInt("plan_id")
										+ "\",\""
										+ this.object_id
										+ "\",\""
										+ object_id
										+ "\",\""
										+ p0400
										+ "\",\"1\")'   src='/images/readwrite_obj.gif' border=0></td></tr></table>";
							reasons = str;
						}

						ext_html.append(writeTd(reasons, 0, "left",
								this.td_width, "1", css_name));
					} else {
						ext_html.append(writeTd("&nbsp;", 0, "center",
								this.td_width, "1", css_name));
					}
				} else if ("edit".equalsIgnoreCase(itemid)) {//操作调整
					String readonly = (String) point_bean.get("readonly");
					includeOperateCloumn="1";
					if ("true".equalsIgnoreCase(readonly)) {
						context.append("");
					}
					if("5".equals(this.body_id)&&this.mainbodyBean==null) //本人不作为考核主体，打开目标卡无编辑功能 20170224 dengcan
					{
						context.append("");
					}
					else {
						context.append(getEditContext(point_bean, item_kind,
								abean));
					}
					if (SystemConfig.getPropertyValue("clientName") != null
							&& "bjpt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName")))
						ext_html.append(writeTd(
								changeColor(context.toString(), point_bean), 0,
								"center", this.td_width - 50, "1", css_name));
					else
						ext_html.append(writeTd(
								changeColor(context.toString(), point_bean), 0,
								"center", this.td_width, "1", css_name));
				} else if ("attach".equalsIgnoreCase(itemid)) // 任务附件
				{
					ArrayList list = new ArrayList();
					String _p0400 = (String) point_bean.get("p0400");
					if (taskAttachMap.get(_p0400) != null)
						list = (ArrayList) taskAttachMap.get(_p0400);
					if (list.size() > 0) {
						StringBuffer content = new StringBuffer("");
						for (int e = 0; e < list.size(); e++) {
							LazyDynaBean _abean = (LazyDynaBean) list.get(e);
							String name = (String) _abean.get("name");
							if(name.length()>20) {
								name = name.substring(0, 20)+"...";
							}
							content.append("<tr>");
							content.append("<td><a href='/servlet/performance/fileDownLoad?article_id="
									+ (String) _abean.get("id")
									+ "'  target='_blank'  border='0' >");
							content.append("<image src='/images/detail.gif' border=0 ></a></td><td valign='top' >");
							content.append("<a href='/servlet/performance/fileDownLoad?article_id="
									+ (String) _abean.get("id")
									+ "'  target='_blank'  border='0' title='"+ (String) _abean.get("name")+"' >&nbsp;"
									+name
									+ "</a></td></tr>");

						}
						ext_html.append(writeTd("<table>" + content.toString()
								+ "</table>", 0, "left", this.td_width + 50,
								"1", css_name));
					} else {
						ext_html.append(writeTd("&nbsp;", 0, "center",
								this.td_width + 50, "1", css_name));
					}

				} else if ("p0424".equalsIgnoreCase(itemid)) {
					String value = (String) point_bean.get(itemid);
					String str = "";
					if (value != null && value.trim().length() > 0) {
						str = value.split("/")[1];
					}

					ext_html.append(writeTd(str, 0, "center", this.td_width,
							"1", css_name));
				} else if ("targetscore".equals(itemid)) {
					String value = (String) point_bean.get(itemid);

					ext_html.append(writeTd(value, 0, "right", this.td_width,
							"1", css_name));
				} else if (itemid.indexOf("opinion_") != -1) {
					String object_id = itemid.split("_")[1];
					LazyDynaBean aabean = (LazyDynaBean) sign_point_objectMap
							.get((String) point_bean.get("p0400") + "/"
									+ object_id);
					if (aabean != null) {
						context.append((String) aabean.get("context"));
					}
					ext_html.append(writeTd(
							changeColor(
									context.toString().replaceAll("\r", "<br>"),
									point_bean), 0, "left", this.td_width, "1",
							css_name));
				} else if ("selfScore".equalsIgnoreCase(itemid)) // 显示自我评分
				{
					ext_html.append(writeTd(getEvaluationBox(point_bean, 0), 0,
							"center", this.td_width, "1", css_name));

				} else if ("score".equalsIgnoreCase(itemid)) // 评分
				{
					String degreeShowType = (String) planParam.get("degreeShowType");
					String fromflag = (String) point_bean.get("fromflag");
                    String p0400 = (String) point_bean.get("p0400");
                    String p0401 = (String) point_bean.get("p0401");
                    // 因为存在评价人能看到目标卡但是不允许打分的情况，所以加入以下判断，二级以上领导可以给所有目标卡打分，否则只能给自己负责的目标卡打分 zhanghua
                    String objid="";
                    if (this.plan_vo.getInt("object_type") == 1
                            || this.plan_vo.getInt("object_type") == 3
                            || this.plan_vo.getInt("object_type") == 4) {
                        objid=this.un_functionary ;
                    }else
                        objid=this.object_id;
                    boolean isControl=false;
                    if(this.isOpenGrade_Members()&&(this.mainbodyBean!=null&&(this.mainbodyBean.get("level")==null||Integer.parseInt((String)this.mainbodyBean.get("level"))>0))&&!objid.equalsIgnoreCase(this.userView.getA0100())){
                        isControl=true;
                    }

                    if(isControl&&this.getRaterObjectCardMap()==null)
                        this.setRaterObjectCardMap(this.getRaterObjectCardMap(this.object_id));
                    if(isControl&&!this.getRaterObjectCardMap().containsKey(p0400)) {
                        ext_html.append(writeTd("", 0, "center", this.td_width, "1", css_name));//无法打分
                    }else
                    if("2".equals(fromflag)){//自建

						ArrayList pointGradeList = (ArrayList) this.pointDescMap.get(p0401.toUpperCase());
						if (pointGradeList == null)
							pointGradeList = new ArrayList();
						String pointkind = "0";
						if (pointGradeList != null && pointGradeList.size() > 0) {
							LazyDynaBean _abean = (LazyDynaBean) pointGradeList.get(0);
							pointkind = (String) _abean.get("pointkind"); // 0:定性 1:定量
						}
						if ("2".equals(scoreflag) || "1".equals(pointkind)
								|| "4".equals(scoreflag)
								|| this.addMinusPointStr.indexOf(("'" + p0400 + "'")) != -1) {//定量不走显示标度内容
							ext_html.append(writeTd(getEvaluationBox(point_bean, 1), 0,"center", this.td_width, "1", css_name));
						}else if("1".equals(scoreflag)&& "3".equals(degreeShowType) && this.addMinusPointStr.indexOf(("'"+p0400+"'"))==-1){//设置了“采集标准标度，显示指标标度内容" 并且不是加扣分指标的  zhaoxg add 2016-10-25
							ext_html.append(this.writeTd1(getEvaluationBox(point_bean, 1), 0,"center", this.td_width, "1", css_name,point_bean));
						}else{
							ext_html.append(writeTd(getEvaluationBox(point_bean, 1), 0,"center", this.td_width, "1", css_name));
						}
					}else if("1".equals(scoreflag)&& "3".equals(degreeShowType) && this.addMinusPointStr.indexOf(("'"+p0400+"'"))==-1){//设置了“采集标准标度，显示指标标度内容",并且不是加扣分指标的  zhaoxg add 2016-10-25
						ext_html.append(this.writeTd1(getEvaluationBox(point_bean, 1), 0,"center", this.td_width, "1", css_name,point_bean));
					}else{
						ext_html.append(writeTd(getEvaluationBox(point_bean, 1), 0,"center", this.td_width, "1", css_name));
					}
				} else if ("reasons".equalsIgnoreCase(itemid)) {
					boolean _flag = true;
					if ("1".equals(this.template_vo.getString("status"))) // 权重
					{
						String p0415 = (String) point_bean.get("p0415");
						if (p0415 == null || p0415.trim().length() == 0
								|| Double.parseDouble(p0415) == 0) {
							_flag = false;
						}
					}
					if ("-1".equals((String) point_bean.get("state"))
							&& "3"
									.equals((String) point_bean.get("chg_type")))
						_flag = false;
                    String p0400 = (String) point_bean.get("p0400");
                    // 因为存在评价人能看到目标卡但是不允许打分的情况，所以加入以下判断，二级以上领导可以给所有目标卡打分，否则只能给自己负责的目标卡打分 zhanghua
                    String objid="";
                    if (this.plan_vo.getInt("object_type") == 1
                            || this.plan_vo.getInt("object_type") == 3
                            || this.plan_vo.getInt("object_type") == 4) {
                        objid=this.un_functionary ;
                    }else
                        objid=this.object_id;
                    boolean isControl=false;
                    if(this.isOpenGrade_Members()&&(this.mainbodyBean!=null&&(this.mainbodyBean.get("level")==null||Integer.parseInt((String)this.mainbodyBean.get("level"))>0))&&!objid.equalsIgnoreCase(this.userView.getA0100())){
                        isControl=true;
                    }
                    if(isControl&&this.getRaterObjectCardMap()==null)
                        this.setRaterObjectCardMap(this.getRaterObjectCardMap(this.object_id));
                    if(isControl&&Integer.parseInt(this.mainbodyBean.get("level").toString())<=0&&!this.getRaterObjectCardMap().containsKey(p0400)) {
                        ext_html.append(writeTd("", 0, "center", this.td_width, "1", css_name));//无法打分
                    }else if ((this.itemPrivMap.size() == 0
							|| itemPrivMap.get(point_item_id) == null || "1".equals((String) itemPrivMap
							.get(point_item_id))) && _flag) {
						HashMap map = (HashMap) objectAllEvaluateMap
								.get((String) this.mainbodyBean
										.get("mainbody_id"));

						String str = "<table width='99%'  ><tr><td id='r_"
								+ p0400
								+ "' ></td></tr><tr><td align='center'  >";
						str += "<img title='填写评分说明' onclick='scoreReason(\""
								+ this.plan_vo.getInt("plan_id")
								+ "\",\""
								+ object_id
								+ "\",\""
								+ (String) this.mainbodyBean.get("mainbody_id")
								+ "\",\""
								+ p0400
								+ "\",\"0\")'  src='/images/readwrite_obj.gif' border=0></td></tr></table>";
						if (map != null) {
							if (map.get(p0400) != null) {
								LazyDynaBean a_bean = (LazyDynaBean) map
										.get(p0400);
								String reasons = (String) a_bean.get("reasons");
								if (reasons == null)
									reasons = "";
								String allreasons = (String) a_bean
										.get("allreasons");
								reasons = reasons.replaceAll("<br>", "\r\n");
								reasons = reasons.replaceAll(" ", "&nbsp;");
								if (allreasons == null)
									allreasons = "";
								// allreasons=allreasons.replaceAll("<br>","\r\n");
								// allreasons=allreasons.replaceAll(" ","&nbsp;");
								String valign = "top";
								if (reasons.trim().length() == 0)
									valign = "middle";

								str = "<table width='100%'  ><tr><td id='r_"
										+ p0400 + "' title=\"" + allreasons
										+ "\">" + reasons + "</td></tr><tr>";
								str += "<td align='center'  ><img title='填写评分说明'  onclick='scoreReason(\""
										+ this.plan_vo.getInt("plan_id")
										+ "\",\""
										+ object_id
										+ "\",\""
										+ (String) this.mainbodyBean
												.get("mainbody_id")
										+ "\",\""
										+ p0400
										+ "\",\"0\")'   src='/images/readwrite_obj.gif' border=0></td></tr></table>";

								ext_html.append(writeTd(str, 0, "center",
										this.td_width, "1", css_name));
							} else {
								ext_html.append(writeTd(str, 0, "center",
										this.td_width, "1", css_name));
							}
						} else
							ext_html.append(writeTd(str, 0, "center",
									this.td_width, "1", css_name));
					} else {
						ext_html.append(writeTd("&nbsp;", 0, "center",
								this.td_width, "1", css_name));
					}
				} else if (itemid.charAt(0) == '#'
						&& (!"3".equals(this.model)
								&& !"6".equals(this.model)
								&& (opt == 2 || (opt == 0 && "2".equals((String) this.mainbodyBean
										.get("status")))) && ("True"
								.equalsIgnoreCase((String) this.planParam
                        .get("allowSeeLowerGrade")) || (this.planParam
								.get("AllowSeeAllGrade") != null && "True"
								.equalsIgnoreCase(((String) this.planParam
								.get("AllowSeeAllGrade")).trim()))))) {
					String p0401 = (String) point_bean.get("p0401");
					String p0400 = (String) point_bean.get("p0400");
					LazyDynaBean pointBean = (LazyDynaBean) this.perPointMap
							.get(p0401.toLowerCase());
					String fromflag = (String) point_bean.get("fromflag");
					String point_kind = "";
					String status = "";
					if ("2".equals(fromflag) && pointBean != null) {
						point_kind = (String) pointBean.get("pointkind");
						status = (String) pointBean.get("status");
					}
					if ("2".equals(fromflag) && "1".equals(point_kind)
							&& "1".equals(status)) {
						if (this.perPointScoreMap.get(p0401.toLowerCase()) != null) {
							if (((String) this.perPointScoreMap.get(p0401
									.toLowerCase())).trim().length() == 0
									|| Double
											.parseDouble((String) this.perPointScoreMap
													.get(p0401.toLowerCase())) == 0)
								ext_html.append(writeTd("0", 0, "center",
										this.td_width, "1", css_name));
							else {
								this.priporHashMap.put(p0401, PubFunc.round(
										(String) this.perPointScoreMap
												.get(p0401.toLowerCase()), 2));
								ext_html.append(writeTd(PubFunc.round(
										(String) this.perPointScoreMap
												.get(p0401.toLowerCase()), 2),
										0, "center", this.td_width, "1",
										css_name));
							}
						} else {
							ext_html.append(writeTd("&nbsp;", 0, "center",
									this.td_width, "1", css_name));
						}
					} else {
						String a0100 = itemid.substring(1);
						HashMap map = (HashMap) objectAllEvaluateMap.get(a0100);
						if (map != null) {

							LazyDynaBean _abean = (LazyDynaBean) map.get(p0400);
							if (_abean == null && this.privByOrg) {
								boolean isSelf = false;
								if (("2".equals(this.object_type) && this.object_id
										.equalsIgnoreCase(a0100))
										|| (!"2".equals(this.object_type) && this.un_functionary
												.equalsIgnoreCase(a0100)))
									isSelf = true;

								String _score_org = (String) abean
										.get("score_org");
								String score_org = (String) point_bean
										.get("score_org_id");
								if (_score_org != null
										&& _score_org.length() > 0
										&& score_org != null
										&& score_org.length() > 0) // 考虑下级主体是否符合任务的考核机构
								{
									if (_score_org.indexOf("&") != -1) {
										String[] temps = _score_org.split("&");
										boolean isQ = false;
										for (int e = 0; e < temps.length; e++) {
											if (temps[e] != null
													&& temps[e].trim()
															.equalsIgnoreCase(
																	score_org)) {
												isQ = true;
												break;
											}
										}
										if (isQ || isSelf)
											ext_html.append(writeTd("", 0,
													"center", this.td_width,
													"1", css_name));
										else
											ext_html.append(writeTd(
													"<hr style='color:black size:1px' width='20'/>",
													0, "center", this.td_width,
													"1", css_name));
									} else {
										String[] temps = _score_org.split("`");
										boolean isQ = false;
										for (int e = 0; e < temps.length; e++) {
											if (temps[e] != null
													&& temps[e].trim().length() > 0) {
												if ("UN"
														.equalsIgnoreCase(temps[e].trim())) {
													isQ = true;
													break;
												} else {
													if (score_org
															.trim()
															.startsWith(
																	temps[e].trim()
																			.substring(
																					2))) {
														isQ = true;
														break;
													}
												}
											}
										}

										if (isQ || isSelf)
											ext_html.append(writeTd("", 0,
													"center", this.td_width,
													"1", css_name));
										else
											ext_html.append(writeTd(
													"<hr style='color:black size:1px' width='20'/>",
													0, "center", this.td_width,
													"1", css_name));
									}
								} else {
									String tt = "";
									if (_abean != null) {
										tt = (String) _abean.get("score");
										if ("1".equals(this.scoreflag)
												&& !"1".equals(point_kind)) // =2混合，=1标度,=4加扣分)point_kind=1是定量指标
										{
											String degree_id = (String) _abean
													.get("degree_id");
											if (degree_id != null
													&& degree_id.trim()
															.length() > 0) {
												tt = (String) _abean
														.get("gradedesc");
												this.priporHashMap.put(p0401
														+ "_1", degree_id);
											}
										}// 定量取amount,status=1为统一打分指标
										if ("1".equalsIgnoreCase(point_kind)
												&& !"1".equals(status)) {
											tt = (String) _abean.get("amount");
										}
										this.priporHashMap.put(p0401, tt);
									}
									ext_html.append(writeTd(tt, 0, "center",
											this.td_width, "1", css_name));
								}
							} else {
								String tt = "";
								if (_abean != null) {
									tt = (String) _abean.get("score");
									if ("1".equals(this.scoreflag)
											&& !"1".equals(point_kind)) // =2混合，=1标度,=4加扣分)point_kind=1是定量指标
									{
										String degree_id = (String) _abean
												.get("degree_id");
										if (degree_id != null
												&& degree_id.trim().length() > 0) {
											tt = (String) _abean
													.get("gradedesc");
											this.priporHashMap.put(
													p0401 + "_1", degree_id);
										}
									}// 定量取amount,status=1为统一打分指标
									if ("1".equalsIgnoreCase(point_kind)
											&& !"1".equals(status)) {
										tt = (String) _abean.get("amount");
									}
									this.priporHashMap.put(p0401, tt);
								}
								ext_html.append(writeTd(tt, 0, "center",
										this.td_width, "1", css_name));
							}
						} else {
							ext_html.append(writeTd("&nbsp;", 0, "center",
									this.td_width, "1", css_name));
						}
					}

				} else {
					if ("p0419".equalsIgnoreCase(itemid)) {
						ext_html.append("\r\n<td class='" + css_name
								+ "'  valign='middle' align='left' ");

						ext_html.append(" height='" + td_height + "' ");
						ext_html.append(" width='" + this.td_width + "' ");
						ext_html.append(" >");
						int value = point_bean.get(itemid) != null
								&& ((String) point_bean.get(itemid)).length() > 0 ? Integer
								.parseInt((String) point_bean.get(itemid)) : 0;
							if (value != 0){
									String _value=value+"";
									if(aflag){
										_value = "<font  class=\"" + this.getTt3CssClassName() + "\">"
										+ value + "</font>";
									}else{
										_value = "<font  class=\"" + this.getTt3CssClassName() + "\" color='#DCDCDC'>"
										+ value + "%</font>";
									}
									ext_html.append("<img width='"
											+ value
											+ "px' height=10 src='/images/board_bottom_1.gif' />&nbsp;"
											+ _value + "");
							}else
							ext_html.append("&nbsp;");
						ext_html.append("</td>");
					} else if ("p0413".equalsIgnoreCase(itemid)
							&& "0".equals(this.template_vo.getString("status"))) {
						String readonly = (String) point_bean.get("readonly");
						String str = "<input type='text' size=5 onblur='validateValue(this)' onkeydown='keyDownFunction(this)' ";
						if ("1".equals(item_kind) || "2".equals(itemtype)) {
							if (this.planParam.get("PublicPointCannotEdit") == null
									|| "True"
											.equalsIgnoreCase((String) this.planParam
                                                    .get("PublicPointCannotEdit"))
									|| "2".equals(itemtype)) {
								str += " disabled ";
							} else if ("7".equalsIgnoreCase(this.model))
								str += " disabled ";
							else if ("07".equals(this.objectSpFlag)
									&& !"0"
											.equalsIgnoreCase((String) point_bean
                                                    .get("processing_state"))) {
								str += " disabled ";
							} else if ("01".equals(this.objectSpFlag)
									&& !"0"
											.equalsIgnoreCase((String) point_bean
                                                    .get("processing_state"))) // 状态初始化
							{
								str += " disabled ";
							} else if ("true".equalsIgnoreCase(readonly)) {
								str += " disabled ";
							}
						} else if ("2".equals(item_kind)
								&& "01".equals(this.objectSpFlag)
								&& !"0"
										.equalsIgnoreCase((String) point_bean
                                                .get("processing_state"))) // 状态初始化
						{
							str += " disabled ";
						} else if ("7".equalsIgnoreCase(this.model))
							str += " disabled ";
						else if ("07".equals(this.objectSpFlag))// &&!((String)point_bean.get("processing_state")).equalsIgnoreCase("0"))
						{
							str += " disabled ";
						} else if ("true".equalsIgnoreCase(readonly)) {
							str += " disabled ";
						}
						if (this.TargetCalcItem.indexOf((","
								+ itemid.toUpperCase() + ",")) != -1) // 是计算指标不能编辑
																		// JinChunhai
																		// 2013.04.22
						{
							str += " disabled ";
						}
						str += " value='" + (String) point_bean.get("p0413")
								+ "' name='" + (String) point_bean.get("p0400")
								+ "~p0413'   /> ";

						if ("3"
								.equalsIgnoreCase((String) point_bean.get("chg_type"))
								|| "6".equals(this.model)) // 已删除(调整)目标
							str = (String) point_bean.get("p0413");
						if ("02".equalsIgnoreCase(this.objectSpFlag)
								|| "03".equalsIgnoreCase(this.objectSpFlag)) // 报批状态
						{
							str = (String) point_bean.get("p0413");
						}
						if ("01".equalsIgnoreCase(this.objectSpFlag)
								&& this.isAdjustPoint) {
							// if(!((String)this.planParam.get("taskAdjustNeedNew")).equalsIgnoreCase("True"))
							// //解决 Bug 编号 0019105
							str = (String) point_bean.get("p0413");
						}
						if ("4".equals(this.plan_vo.getString("status")))// 如果计划为启动状态，也不能修改，所以不显示输入框，
						{
							str = (String) point_bean.get("p0413");
						}
						if ("1".equals(itemtype)) // 评分时临时加上的加扣分
							str = "";
						if (this.getFrom_flag() != null
								&& ("1".equals(this.getFrom_flag()) || "0"
										.equals(this.from_flag)))
							str = (String) point_bean.get("p0413");
						ext_html.append(writeTd(changeColor(str, point_bean),
								0, "right", this.td_width, "1", css_name));
					} else if ("p0415".equalsIgnoreCase(itemid)
							&& "1".equals(this.template_vo.getString("status"))) {
						String rank = (String) point_bean.get("p0415");
						String item_id = (String) point_bean.get("item_id");
						String readonly = (String) point_bean.get("readonly");
						if (rank == null || rank.trim().length() == 0)
							rank = "0";
						else
							rank = rank.trim();
						String temp = myformat1
								.format(Double.parseDouble(rank) * 100);
						String str = "<input type='text' size=5   onkeydown='keyDownFunction(this)' ";
						if ("1".equals(item_kind) || "2".equals(itemtype)) {
							if (this.planParam.get("PublicPointCannotEdit") == null
									|| "True"
											.equalsIgnoreCase((String) this.planParam
                                                    .get("PublicPointCannotEdit"))
									|| "2".equals(itemtype))
								str += " disabled ";
							else if ("7".equalsIgnoreCase(this.model))
								str += " disabled ";
							else if ("07".equals(this.objectSpFlag)
									&& !"0"
											.equalsIgnoreCase((String) point_bean
                                                    .get("processing_state"))) {
								str += " disabled ";
							} else if ("01".equals(this.objectSpFlag)
									&& !"0"
											.equalsIgnoreCase((String) point_bean
                                                    .get("processing_state"))) // 状态初始化
							{
								str += " disabled ";
							} else if ("true".equalsIgnoreCase(readonly)) {
								str += " disabled ";
							}
						} else if ("2".equals(item_kind)
								&& "01".equals(this.objectSpFlag)
								&& !"0"
										.equalsIgnoreCase((String) point_bean
                                                .get("processing_state"))) // 状态初始化
						{
							str += " disabled ";

						} else if ("3"
								.equalsIgnoreCase((String) point_bean.get("chg_type")))
							str += " disabled ";
						else if ("7".equalsIgnoreCase(this.model))
							str += " disabled ";
						else if ("07".equals(this.objectSpFlag))// &&!((String)point_bean.get("processing_state")).equalsIgnoreCase("0"))
						{
							str += " disabled ";
						} else if ("true".equalsIgnoreCase(readonly)) {
							str += " disabled ";
						}
						if (this.TargetCalcItem.indexOf((","
								+ itemid.toUpperCase() + ",")) != -1) // 是计算指标不能编辑
																		// JinChunhai
																		// 2013.04.22
						{
							str += " disabled ";
						}
						str += " onblur='validateValue(this)'  value='" + temp
								+ "' name='" + (String) point_bean.get("p0400")
								+ "~p0415' />%";

						if ("3"
								.equalsIgnoreCase((String) point_bean.get("chg_type"))
								|| "6".equals(this.model)) // 已删除(调整)目标
							str = temp + "%";
						if ("02".equalsIgnoreCase(this.objectSpFlag)
								|| "03".equalsIgnoreCase(this.objectSpFlag)) // 报批状态
							str = temp + "%";
						if ("07".equalsIgnoreCase(this.objectSpFlag)
								&& this.isAdjustPoint
								&& "False"
										.equalsIgnoreCase((String) this.planParam
                                                .get("taskAdjustNeedNew")))
							str = temp + "%";

						if ("01".equalsIgnoreCase(this.objectSpFlag)
								&& this.isAdjustPoint) {
							// if(!((String)this.planParam.get("taskAdjustNeedNew")).equalsIgnoreCase("True"))
							// //解决 Bug 编号 0019105
							str = temp + "%";

						}
						if (this.getFrom_flag() != null
								&& ("1".equals(this.getFrom_flag()) || "0"
										.equals(this.from_flag)))
							str = temp + "%";
						if ("4".equals(this.plan_vo.getString("status")))// 启动状态的计划，也不能修改，所以不出现输入框了
							str = temp + "%";
						String p0400 = (String) point_bean.get("p0400");
						if (this.hasAddMinusItem
								&& addMinusPointStr.length() > 0) {
							if (this.addMinusPointStr
									.indexOf("'" + p0400 + "'") != -1)
								str = "";
						}

						ext_html.append(writeTd(changeColor(str, point_bean),
								0, "right", this.td_width, "1", css_name));
					} else if ("p0423".equalsIgnoreCase(itemid)
							&& "1".equals(this.template_vo.getString("status"))) {
						String rank = (String) point_bean.get("p0423");
						if (rank == null || rank.trim().length() == 0)
							rank = "";
						else
							rank = rank.trim();
						String str = "";
						if (rank.length() > 0) {
							String temp = myformat1.format(Double
									.parseDouble(rank) * 100);
							str = temp + "%";
						}
						ext_html.append(writeTd(changeColor(str, point_bean),
								0, "center", this.td_width, "1", css_name));
					}else if ("rater".equalsIgnoreCase(itemid)){// 插入评价人 图片和连接 zhanghua
						String rank = (String) point_bean.get("rater");
						String rank_ = (String) point_bean.get("rater_");
						if (rank == null || rank.trim().length() == 0)
							rank = "&nbsp";
						String str = "";
						String _mainBodyId = "2".equals(this.object_type)? object_id : un_functionary;//如果是个人计划 对象为考核目标 团队计划 对象为团队负责人
						if(this.userView.getA0100().equalsIgnoreCase(_mainBodyId)&&("01".equals(objectSpFlag)|| "07".equals(objectSpFlag))){//仅仅能有自己才能编辑评价人 并且目标卡处于起草或者驳回状态
							str+="<img src=\"/images/add.gif\" style='margin-right:5px;cursor:pointer;vertical-align:middle;'height='13px' ";
							str+= "onclick=\"showPersonPicker('"+PubFunc.encrypt((String)point_bean.get("p0400"))+"')\">";
						}
						str+= "<input type='text' "+(StringUtils.isEmpty(rank_)?"":"title='"+rank_+"'")+" style='height:20px;border:0 !important;vertical-align:middle;line-height:20px;width:98%;'readonly='true' id='"+PubFunc.encrypt((String)point_bean.get("p0400"))+"rater' value='"+rank+"'>";

						ext_html.append(writeTd(changeColor(str, point_bean),
								0, "left", this.td_width, "1", css_name));
					}else if("opinion".equalsIgnoreCase(itemid)) {//插入签批项  图片和连接  zhanghua
						String rank = (String) point_bean.get("opinion");
						if (rank == null || rank.trim().length() == 0)
							rank = "";
						String raterid=(String)point_bean.get("raterid");//评价人a0100 
						String str = "";
						if(StringUtils.isNotBlank(raterid)){//没有指定评价人的 没有编辑功能
							str+=" <img ";
							if(StringUtils.isNotBlank(rank))
								str	+= " style=\"margin:0px 0px 20px 0px\" ;";
							else
								str+=" style='cursor:pointer;'";
							if(raterid.indexOf(this.userView.getA0100())!=-1&&!"03".equals(this.objectSpFlag)&&!"4".equals(this.plan_vo.getString("status"))){//不是本人 且  目标卡不在批准状态 且计划没有启动打分的才可以评价
								str+=" src=\"/images/new_module/row_edit.png\" ";
								str+= "onclick=\"showOpinionWindow('"+PubFunc.encrypt((String)point_bean.get("p0400"))+"','1')\">";//启用编辑功能
								
							}
							else if(StringUtils.isNotBlank(rank)){
								str+=" src=\"/images/new_module/row_view.png\" ";
								str+= "onclick=\"showOpinionWindow('"+PubFunc.encrypt((String)point_bean.get("p0400"))+"','0')\">";
							}
						}
						str+="<textarea ";
						if(StringUtils.isNotBlank(rank))
							str+=" onmouseover='this.title=this.value' style=' height:70px; width:210px; margin-left:2px;margin-top:5px; border:0 !important;overflow:hidden; resize:none; ";
						else
							str+=" style='margin-top:5px; width:210px; margin-left:2px; border:0 !important;overflow:hidden; resize:none;";
						str+="'readonly='true' id='"+PubFunc.encrypt((String)point_bean.get("p0400"))+"opinion'>"+rank+" </textarea>";

						ext_html.append(writeTd(changeColor(str, point_bean),
								0, "left", 250, "1", css_name));
					}else {
						// 目标管理模块备注型指标显示字数
						int MBO_text_size = 50;
						if (SystemConfig.getPropertyValue("MBO_text_size") != null
								&& SystemConfig
										.getPropertyValue("MBO_text_size")
										.trim().length() > 0)
							MBO_text_size = Integer.parseInt(SystemConfig
									.getPropertyValue("MBO_text_size").trim());

						String align = "left";
						if ("N"
								.equalsIgnoreCase((String) abean.get("itemType")))
							align = "right";

						String reasons = (String) point_bean.get(itemid);
						String allreasons = "";
						if ("M"
								.equalsIgnoreCase((String) abean.get("itemType"))) {
							allreasons = (String) point_bean.get(itemid);
							if (reasons != null
									&& reasons.length() > MBO_text_size)
								reasons = reasons.substring(0, MBO_text_size)
										+ "......";
							reasons = reasons.replaceAll("<br>", "\r\n");
							reasons = reasons.replaceAll(" ", "&nbsp;");
							//下面的writeTd()方法中，tip属性修改为Tip()事件，所以不用置换。chent
							//allreasons = allreasons.replaceAll("<br>", "\r\n");
							//allreasons = allreasons.replaceAll(" ", "&nbsp;");
						}
						ext_html.append(writeTd(
								changeColor(reasons, point_bean), 0, align,
								this.td_width, "1", css_name, allreasons));
					}
				}

				this.td_width = o_width;
			}
		} else {
			for (int i = 2; i < this.headList.size(); i++) {
				LazyDynaBean a_bean = (LazyDynaBean) this.headList.get(i);
				String itemType = (String) a_bean.get("itemType");
				int o_width = this.td_width;

				String css_name = "RecordRow_self common_border_color";
				if (i == headList.size() - 1)
					css_name = "RecordRow_self_right common_border_color";
				String itemid = (String) a_bean.get("itemid");
				if (this.customTdWidthMap.size() > 0
						&& this.customTdWidthMap.get(itemid.toLowerCase()) != null) // 自定义列宽
				{
					this.td_width = Integer
							.parseInt((String) this.customTdWidthMap.get(itemid
									.toLowerCase()));
				} else {

					if ("N".equalsIgnoreCase(itemType)
							&& !"p0419".equalsIgnoreCase(itemid))
						this.td_width = this.td_width - 50;
					if (!"zglt"
							.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))
							&& ("p0413".equalsIgnoreCase(itemid)
									|| "p0415".equalsIgnoreCase(itemid)
									|| "p0421".equalsIgnoreCase(itemid)
									|| "p0423".equalsIgnoreCase(itemid) || "score"
									.equalsIgnoreCase(itemid))) {
						this.td_width = this.td_width - 30;
						if (this.headList.size() < 8
								&& this.customTdWidthMap != null
								&& this.customTdWidthMap.size() <= 0)
							this.td_width = this.td_width - 50;
					}
					if (SystemConfig.getPropertyValue("clientName") != null
							&& "zglt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 中国联通
					{
						if ("P04A0".equalsIgnoreCase(itemid))
							this.td_width = this.td_width * 3;
						if ("P0415".equalsIgnoreCase(itemid))
							this.td_width = this.td_width - 100;
					}
				}
				if ("edit".equalsIgnoreCase(itemid)
						&& SystemConfig.getPropertyValue("clientName") != null
						&& "bjpt"
								.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName")))
					ext_html.append(writeTd("&nbsp;", 0, "center",
							this.td_width - 50, "1", css_name));
				else
					ext_html.append(writeTd("&nbsp;", 0, "center",
							this.td_width, "1", css_name));
				this.td_width = o_width;
			}
		}

		return ext_html.toString();
	}

	private HashMap existItemMap = new HashMap();

	/**
	 * 
	 * @param point_bean
	 * @param item_kind
	 *            1:共性项目 2：个性项目
	 * @return
	 */
	public String getPerResultTd(LazyDynaBean point_bean, String item_kind,
			String css_name) {
		StringBuffer str = new StringBuffer("");
		String point_item_id = (String) point_bean.get("item_id");
		String p0400 = (String) point_bean.get("p0400");
		String p0401 = ((String) point_bean.get("p0401")).toLowerCase();
		if ("2".equals(item_kind)) // 个性项目
		{
			if (existItemMap.get(point_item_id) == null) {
				int num = ((Integer) this.itemPointNum.get(point_item_id))
						.intValue();
				String _str = "&nbsp;";
				if (this.perResultScoreMap.get("t_" + point_item_id) != null)
					_str = (String) this.perResultScoreMap.get("t_"
							+ point_item_id);
				str.append(writeTd(_str, num, "center", this.td_width, "1",
						css_name));
				existItemMap.put(point_item_id, "1");
			}
		} else {

			String _str = "&nbsp;";
			if (this.perResultScoreMap.get("c_" + p0401) != null)
				_str = (String) this.perResultScoreMap.get("c_" + p0401);
			str.append(writeTd(_str, 0, "center", this.td_width, "1", css_name));

		}

		return str.toString();
	}

	// 判断是否是考核对象的直接领导
	public String isUnderLeader(String dbname, String objectid, String planid,
			String mainbodyid) {
		String flag = "0";
		try {
			ContentDAO dao = new ContentDAO(this.conn);

			String _objectid = objectid;
			RecordVo plan_vo = getPlanVo(planid);
			if (plan_vo.getInt("object_type") == 1
					|| plan_vo.getInt("object_type") == 3
					|| plan_vo.getInt("object_type") == 4) {
				LazyDynaBean functionary = getMainbodyBean(planid, objectid);
				if (functionary != null)
					_objectid = (String) functionary.get("mainbody_id");
			}
			String sql = "select kh_relations from per_object where plan_id="
					+ planid + " and object_id='" + objectid + "'";
			RowSet rowSet = dao.search(sql);
			int kh_relations = 0;
			if (rowSet.next()) {
				if (rowSet.getString(1) != null)
					kh_relations = rowSet.getInt(1);
			}

			if (kh_relations == 1) {
				sql = "select pmb.* from per_mainbody pmb,per_mainbodyset pmbs where pmb.body_id=pmbs.body_id and pmb.plan_id="
						+ planid + " and ";
				if (Sql_switcher.searchDbServer() == Constant.ORACEL)
					sql += " level_o";
				else
					sql += " level ";
				sql += "=1  and pmb.object_id='" + objectid + "'";
				rowSet = dao.search(sql);
				while (rowSet.next()) {
					String amainbody_id = rowSet.getString("mainbody_id");
					if (amainbody_id.equalsIgnoreCase(mainbodyid)) {
						flag = "1";
						break;
					}
				}
			} else {
				LoadXml loadxml = new LoadXml(this.conn, planid);
				Hashtable planParam = loadxml.getDegreeWhole();
				String aflag = (String) planParam.get("targetAppMode"); // 目标管理审批模式:0-考核关系
																		// 1-汇报关系.
																		// 默认为 0
				if ("0".equals(aflag)) {
					{
						sql = "select pmb.* from per_mainbody_std pmb,per_mainbodyset pmbs where pmb.body_id=pmbs.body_id  and ";
						if (Sql_switcher.searchDbServer() == Constant.ORACEL)
							sql += " level_o";
						else
							sql += " level ";
						sql += "=1  and pmb.object_id='" + _objectid + "'";
						rowSet = dao.search(sql);
						while (rowSet.next()) {
							String amainbody_id = rowSet
									.getString("mainbody_id");
							if (amainbody_id.equalsIgnoreCase(mainbodyid)) {
								flag = "1";
								break;
							}
						}

					}
				} else {
					RenderRelationBo bo = new RenderRelationBo(this.conn);
					ArrayList dbList = new ArrayList();
					dbList.add(dbname);
					String posID = this.userView.getUserPosId();
					if (posID != null && posID.length() > 0) {
						HashMap map = bo.getBodyInfo2(posID, dbList, 3);
						if (map.get(dbname + _objectid) != null) {
							flag = "1";
						}
					}
				}
			}
			rowSet.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return flag;

	}

	/**
	 * ############################导出当前目标卡模板 开始 JinChunhai 2011.02.10
	 * ##################################
	 **/

	private HSSFSheet sheet = null;
	private HSSFCellStyle centerstyle = null;
	private HSSFCellStyle centerstyle2 = null;
	private HSSFCellStyle centerstyle3 = null;
	private HSSFCellStyle centerstyle4 = null;
	private int rowNumber = 0; // 行坐标
	private short colIndexNum = 0; // 纵坐标
	private HSSFRow hssRow = null;

	DecimalFormat myformat1 = new DecimalFormat("########.########");//
	// private int layNum=0;
	private String oname = "";
	private String onlyname = "";
	private String object_type = "";
	private String templateID = "";
	private String status = "";
	private ArrayList kh_objectlist = new ArrayList();
	private ArrayList templateItem_List = new ArrayList();
	private ArrayList parentList = new ArrayList();
	private ArrayList head_List = new ArrayList();
	private ArrayList leafItem_List = new ArrayList();
	private HashMap leafItemLink_Map = new HashMap(); // 叶子项目对应的继承关系
	private HashMap itemToPoint_Map = new HashMap();
	private HashMap childItemLinkMap = new HashMap();
	private HashMap layMap = new HashMap();
	private HashMap ifHasChildMap = new HashMap();
	private HashMap itemHaveFieldList = new HashMap();

	private void init() {
		this.object_type = this.getPlan_vo().getString("object_type");
		if ("2".equals(this.object_type)) {
			Sys_Oth_Parameter sysbo = new Sys_Oth_Parameter(this.conn);
			this.oname = sysbo.getCHKValue(Sys_Oth_Parameter.CHK_UNIQUENESS,
					"0", "name");
			if (this.oname != null && this.oname.trim().length() != 0)
				this.onlyname = DataDictionary.getFieldItem(this.oname)
						.getItemdesc();

		} else {
			RecordVo unit_code_field_constant_vo = ConstantParamter
					.getRealConstantVo("UNIT_CODE_FIELD", this.conn);
			if (unit_code_field_constant_vo != null) {
				this.oname = unit_code_field_constant_vo.getString("str_value");
				
				if (this.oname.indexOf("#") == -1)
	            {
	                	if(DataDictionary.getFieldItem(oname)!=null)
	                		this.onlyname = DataDictionary.getFieldItem(oname).getItemdesc();
	                	else {
							this.oname="";
						}
	             }
				
			}
			if (this.oname == null || this.oname.trim().length() <= 0
					|| "#".equals(this.oname))
				this.oname = "b0110";
			if (this.onlyname == null || this.onlyname.trim().length() <= 0
					|| "#".equals(this.onlyname))
				this.onlyname = "组织机构编码";
		}
	}

	/**
	 * 下载目标卡模板
	 * 
	 * @throws GeneralException
	 */
	public String downLoadObjectiveData(HSSFWorkbook workbook0)
			throws GeneralException {
		String outName = "";
		if (this.oname == null || this.oname.trim().length() <= 0
				|| "#".equals(this.oname))
			throw new GeneralException("系统未定义唯一性指标！");

		if (this.oname != null && this.oname.trim().length() > 0
				&& !"#".equals(this.oname)) {
			FieldItem fielditem = DataDictionary.getFieldItem(this.oname);
			String useFlag = fielditem.getUseflag();
			if ("0".equalsIgnoreCase(useFlag))
				throw new GeneralException("定义的唯一性指标未构库,请构库后再进行此操作！");
		}
		// KhTemplateBo kbo=new KhTemplateBo();
		/** 导出的考核对象信息 */
		this.kh_objectlist = getKh_objectList();
		/** 获取考核计划的模板编号 */
		this.templateID = this.getPlanVo(plan_id).getString("template_id");
		/** 获取模板的表头信息 */
		this.head_List = getHeadList();

		boolean haveOrNot = haveOrNotP04();
		/** 模板对应的所有项目 */
		this.templateItem_List = getTemplateItemList(templateID);
		/** 得到项目中所有的叶子项目 */
		get_LeafItem_List();
		/** 项目的itemid对应的是该项目的所有父亲，爷爷，太爷的列表 */
		this.leafItemLink_Map = getLeafItemLink_Map();
		/** 项目id对应的指标的详细信息列表 */

		if (haveOrNot)
			this.itemHaveFieldList = getP04FieldList();// 指标信息
		else
			this.itemHaveFieldList = getItemHasFieldList();// 指标信息
		/** 除叶子节点外的节点的指标数量 */
		this.childItemLinkMap = this.getChildItemLinkMap();
		this.doMethod2();

		executeP04_commonnessData(); // 判断p04表中是否已为对象产生模板内的共性指标，没有则自动产生
		this.p04List = getP04_List();
		this.templateItemList = getTemplateItemList();
		this.itemToPointMap = getItemToPointMap();
		get_LeafItemList();
		
		
		this.leafItemLinkMap = getLeafItemLinkMap();
		this.itemPointNum = getItemPointNum();
		this.status = (String) this.get_TemplateVo_id(this.templateID)
				.getString("status"); // 判断考核计划的模板类型 0 分值；1 权重

		/** EXCEL页眉 */
		String nameDesc = "";
		String nameId = "";
		String only_name = "";
		LazyDynaBean ab_ean = null;
		for (int i = 0; i < this.kh_objectlist.size(); i++) {
			ab_ean = (LazyDynaBean) this.kh_objectlist.get(i);
			nameDesc = (String) ab_ean.get("codeitemdesc");
			if(sheetNames == null || sheetNames.size()==0 ){
				sheetNames.add(nameDesc);
			}
			else if(sheetNames != null && sheetNames.size()>0) {
				for(int m=0;m<sheetNames.size();m++){
					String temp = (String)sheetNames.get(m);
					if(temp.equals(nameDesc)){
						int count=1;
						for(int n=0;n<sheetNames.size();n++){
							String innerTemp = (String)sheetNames.get(n);
							String tempstr = innerTemp.substring(innerTemp.length()-1);//截取最后一位
							if(innerTemp.indexOf(nameDesc)!=-1 && isDigit(tempstr) ){
								count++;
							}
						}
						nameDesc+=count;
					}
				}
	    		sheetNames.add(nameDesc);
			}
		}
		
		sheet = workbook0.createSheet(nameDesc);
		/** EXCEL样式 */
		centerstyle = style(workbook0, 1);
		centerstyle2 = style(workbook0, 2);
		centerstyle3 = style(workbook0, 3);
		centerstyle4 = style(workbook0, 4);
		outName = this.outExcel(workbook0);
		return outName;
	}

	public HSSFRichTextString cellStr(String context) {
		HSSFRichTextString textstr = new HSSFRichTextString(context);
		return textstr;
	}

	/**
	 * 画excel的格子（合并单元格）
	 * 
	 * @param a
	 * @param b
	 * @param c
	 * @param d
	 * @param content
	 * @param aStyle
	 */
	public void executeCell(int a, short b, int c, short d, String content,
			HSSFCellStyle aStyle, String type, HSSFPatriarch patr,
			String xorzb, String comment) {
		try {
			HSSFComment comm = null;
			HSSFRow row = sheet.getRow(a);
			if (row == null)
				row = sheet.createRow(a);
			
			HSSFCell cell = row.getCell(b);
			if (cell == null)
				cell = row.createCell(b);
			
			if ("num".equalsIgnoreCase(type)) {
				cell.setCellType(HSSFCell.CELL_TYPE_NUMERIC);
				if (content == null || "".trim().equals(content))
					content = "0";// 转换为double时防止报NumberFormatException。
				cell.setCellValue(new Double(content).doubleValue());
			} else {
				if ("str".equalsIgnoreCase(type)) {
					aStyle.setDataFormat(HSSFDataFormat.getBuiltinFormat("text"));// 文本格式
					cell.setCellType(HSSFCell.CELL_TYPE_STRING);
				}
				cell.setCellValue(new HSSFRichTextString(content));
			}
			cell.setCellStyle(aStyle);
			
			if ("yes".equalsIgnoreCase(xorzb)) {
				comm = patr.createComment(new HSSFClientAnchor(a, 0, a, 1,
						(short) (b + 1), a, (short) (b + 2), c + 1));
				comm.setString(new HSSFRichTextString(comment));
				cell.setCellComment(comm);
			}
			short b1 = b;
			while (++b1 <= d) {
				cell = row.getCell(b1);
				if (cell == null)
					cell = row.createCell(b1);
				cell.setCellStyle(aStyle);
			}
			for (int a1 = a + 1; a1 <= c; a1++) {
				row = sheet.getRow(a1);
				if (row == null)
					row = sheet.createRow(a1);
				b1 = b;
				while (b1 <= d) {
					cell = row.getCell(b1);
					if (cell == null)
						cell = row.createCell(b1);
					cell.setCellStyle(aStyle);
					b1++;
				}
			}
			
			ExportExcelUtil.mergeCell(sheet, a, b, c, d);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/** 在项目后加上备注内容，以冒号分隔 郭峰 */
	public void taskExecuteCell(int a, short b, int c, short d, String content,
			HSSFCellStyle aStyle, String type, HSSFPatriarch patr,
			String xorzb, String comment) {
		try {
			HSSFComment comm = null;
			HSSFRow row = sheet.getRow(a);
			if (row == null)
				row = sheet.createRow(a);
			
			HSSFCell cell = row.getCell(b);
			if (cell == null)
				cell = row.createCell(b);
			
			if ("num".equalsIgnoreCase(type)) {
				aStyle.setDataFormat(HSSFDataFormat.getBuiltinFormat("text"));// 文本格式
				cell.setCellType(HSSFCell.CELL_TYPE_NUMERIC);
				cell.setCellValue(new Double(content).doubleValue());
			} else {
				if ("str".equalsIgnoreCase(type)) {
					cell.setCellType(HSSFCell.CELL_TYPE_STRING);
				}
				content = content + "(itemid:" + comment + ")";
				cell.setCellValue(new HSSFRichTextString(content));
			}
			cell.setCellStyle(aStyle);
			
			if ("yes".equalsIgnoreCase(xorzb)) {
				comm = patr.createComment(new HSSFClientAnchor(a, 0, a, 1,
						(short) (b + 1), a, (short) (b + 2), c + 1));
				comm.setString(new HSSFRichTextString(comment));
				cell.setCellComment(comm);
			}
			short b1 = b;
			while (++b1 <= d) {
				cell = row.getCell(b1);
				if (cell == null)
					cell = row.createCell(b1);
				cell.setCellStyle(aStyle);
			}
			for (int a1 = a + 1; a1 <= c; a1++) {
				row = sheet.getRow(a1);
				if (row == null)
					row = sheet.createRow(a1);
				b1 = b;
				while (b1 <= d) {
					cell = row.getCell(b1);
					if (cell == null)
						cell = row.createCell(b1);
					cell.setCellStyle(aStyle);
					b1++;
				}
			}
			
			ExportExcelUtil.mergeCell(sheet, a, b, c, d);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 导出excel
	 * 
	 * @return
	 */
	public String outExcel(HSSFWorkbook workbook0) {
		String outName = "CurrentTemplate_" + PubFunc.getStrg() + ".xls";
		FileOutputStream fileOut = null;
		try {
			// 创建新的Excel 工作簿
			HSSFPatriarch patr = this.sheet.createDrawingPatriarch();
			HSSFRow row = sheet.createRow(0);
			row.setHeight((short) 800);
			HSSFCell cell = null;
			HSSFComment comm = null;

			short n = 0;
			LazyDynaBean ab_ean = null;

			String nameDesc = "";
			String nameId = "";
			String only_name = "";
			for (int i = 0; i < this.kh_objectlist.size(); i++) {
				ab_ean = (LazyDynaBean) this.kh_objectlist.get(i);
				nameDesc = (String) ab_ean.get("codeitemdesc");
				nameId = (String) ab_ean.get("codeitemid");
				only_name = (String) ab_ean.get(oname);
			}
			HSSFCellStyle titleStyle = style(workbook0, 0);
			cell = row.createCell(0);
			cell.setCellValue(cellStr(this.onlyname));
			cell.setCellStyle(titleStyle);
			comm = patr.createComment(new HSSFClientAnchor(0, 0, 0, 1,
					(short) (this.colIndexNum + 1), 0,
					(short) (this.colIndexNum + 2), 1));
			comm.setString(new HSSFRichTextString(this.oname));
			cell.setCellComment(comm);
			this.colIndexNum++;
			n++;
			executeCell(this.rowNumber, this.colIndexNum, this.rowNumber, n,
					only_name, titleStyle, "str", patr, "no", "no");
			this.rowNumber++;
			this.colIndexNum--;
			n--;
			row = sheet.createRow(1);
			if ("2".equals(this.object_type)) {
				cell = row.createCell(0);
				cell.setCellValue(cellStr("姓名"));
				cell.setCellStyle(titleStyle);
				comm = patr.createComment(new HSSFClientAnchor(1, 0, 1, 1,
						(short) (this.colIndexNum + 1), 1,
						(short) (this.colIndexNum + 2), 2));
				comm.setString(new HSSFRichTextString("A0101"));
				cell.setCellComment(comm);
				this.colIndexNum++;
			} else {
				cell = row.createCell(0);
				cell.setCellValue(cellStr("组织名称"));
				cell.setCellStyle(titleStyle);
				comm = patr.createComment(new HSSFClientAnchor(1, 0, 1, 1,
						(short) (this.colIndexNum + 1), 1,
						(short) (this.colIndexNum + 2), 2));
				comm.setString(new HSSFRichTextString("CODEITEMDESC"));
				cell.setCellComment(comm);
				this.colIndexNum++;
			}
			n++;
			executeCell(this.rowNumber, this.colIndexNum, this.rowNumber, n,
					nameDesc, titleStyle, "str", patr, "no", "no");
			this.rowNumber++;
			this.colIndexNum--;

			HashMap existWriteItem = new HashMap();
			LazyDynaBean abean = null;
			LazyDynaBean a_bean = null;
			int columnSize = 0;

			// 输出表头
			row = sheet.createRow(2);
			for (int i = 0; i < this.head_List.size(); i++) {
				abean = (LazyDynaBean) this.head_List.get(i);
				String itemid = (String) abean.get("itemid");
				String itemdesc = (String) abean.get("itemdesc");
				// (Integer.parseInt(String.valueOf(this.lay-1)))
				if (i == 0) {
					ExportExcelUtil.mergeCell(sheet, this.rowNumber,
							(short) this.colIndexNum, this.rowNumber,
							(short) (Short.parseShort(String
									.valueOf(this.lay - 1))));
					for (int k = this.colIndexNum; k < this.lay; k++) {
						cell = row.createCell(k);
						cell.setCellStyle(centerstyle);
						if (k == this.colIndexNum) {
							cell.setCellValue(cellStr(itemdesc));
							comm = patr.createComment(new HSSFClientAnchor(2,
									0, 2, 1, (short) (this.colIndexNum + 1), 2,
									(Short.parseShort(String
											.valueOf(this.lay + 1))), 3));
							comm.setString(new HSSFRichTextString(itemid));
							cell.setCellComment(comm);
						}
					}
					this.colIndexNum += Short.parseShort(String
							.valueOf(this.lay));
				} else if (i == 1) {
					cell = row.createCell((short) this.colIndexNum);
					cell.setCellValue(cellStr(itemdesc));
					cell.setCellStyle(centerstyle);
					comm = patr.createComment(new HSSFClientAnchor(2, 0, 2, 1,
							(short) (this.colIndexNum + 1), 2,
							(short) (this.colIndexNum + 2), 3));
					comm.setString(new HSSFRichTextString("p0407"));
					cell.setCellComment(comm);
					this.colIndexNum++;
				} else if ("edit".equalsIgnoreCase(itemid)
						|| "attach".equalsIgnoreCase(itemid)
						|| itemid.indexOf("opinion_") != -1) {

				} else {
					if (("0".equalsIgnoreCase(status))
							&& "p0415".equalsIgnoreCase(itemid)) {

					} else if (("1".equalsIgnoreCase(status))
							&& "p0413".equalsIgnoreCase(itemid)) {

					} else if (("p0421".equalsIgnoreCase(itemid))
							|| ("p0423".equalsIgnoreCase(itemid))) {

					} else {
						cell = row.createCell((short) this.colIndexNum);
						cell.setCellValue(cellStr(itemdesc));
						cell.setCellStyle(centerstyle);
						comm = patr.createComment(new HSSFClientAnchor(2, 0, 2,
								1, (short) (this.colIndexNum + 1), 2,
								(short) (this.colIndexNum + 2), 3));
						comm.setString(new HSSFRichTextString(itemid));
						cell.setCellComment(comm);
						this.colIndexNum++;
					}
				}
			}
			columnSize = this.colIndexNum;

			// 输出表结构

			int rowNum = 0;
			for (int i = 0; i < this.leafItem_List.size(); i++) {
				abean = (LazyDynaBean) this.leafItem_List.get(i);
				String item_id = (String) abean.get("item_id");
				/** 叶子项目对应的指标数 */
				// int num=((Integer)this.itemPointNum.get(item_id)).intValue();
				// ArrayList
				// pointList=(ArrayList)this.itemToPointMap.get(item_id);
				// ArrayList pointList =
				// (ArrayList)this.itemHaveFieldList.get(item_id);
				// String item_kind=(String)abean.get("kind");
				/** 叶子项目对应的指标数 */
				/*
				 * for(int j=0;j<num;j++) {
				 */
				if (i == 0)
					this.rowNumber++;
				this.colIndexNum = 0;
				rowNum++;
				ArrayList linkParentList = (ArrayList) this.leafItemLink_Map
						.get(item_id);
				int current = linkParentList.size();
				if (current == 1) {
					if (existWriteItem.get(item_id) != null) {
						this.colIndexNum++;
						continue;
					}
					existWriteItem.put(item_id, "1");
					String itemdesc = (String) abean.get("itemdesc");
					/** 画出一个父项目 */
					int colspan = ((itemPointNum.get(item_id) == null ? 0
							: ((Integer) itemPointNum.get(item_id)).intValue()) + (childItemLinkMap
							.get(item_id) == null ? 0
							: ((Integer) childItemLinkMap.get(item_id))
									.intValue()));
					taskExecuteCell(this.rowNumber, this.colIndexNum,
							this.rowNumber + colspan - 1, this.colIndexNum,
							itemdesc, centerstyle3, "str", patr, "yes", item_id);
					this.colIndexNum++;
					/** 父项目包含指标，画出指标 */
					/** 该项目的层数 */
					int layer = Integer.parseInt((String) layMap.get(item_id));
					/** 对应指标列表 */
					ArrayList fieldlistp = (ArrayList) this.itemHaveFieldList
							.get(item_id);
					/** 该项目有指标 */
					if (fieldlistp != null && fieldlistp.size() > 0) {
						for (int h = 0; h < fieldlistp.size(); h++) {
							LazyDynaBean pointbean = (LazyDynaBean) fieldlistp
									.get(h);
							int k = 0;
							for (int f = 0; f < this.lay - layer; f++) {
								executeCell(this.rowNumber,
										(short) (colIndexNum + f),
										this.rowNumber,
										(short) ((colIndexNum + f)), "",
										centerstyle3, "str", patr, "no", "no");
								k++;
							}
							/** 指标名称 */
							executeCell(this.rowNumber,
									(short) (colIndexNum + k), this.rowNumber,
									(short) (colIndexNum + k),
									(String) pointbean.get("name"),
									centerstyle3, "str", patr, "yes",
									(String) pointbean.get("point_id"));
							k++;

							for (int x = 0; x < this.head_List.size(); x++) {
								LazyDynaBean headbean = (LazyDynaBean) this.head_List
										.get(x);
								String point_Id = (String) headbean
										.get("itemid");
								String itemType = (String) headbean
										.get("itemType");
								if (("itemid,p0401,edit,attach"
										.indexOf(point_Id.toLowerCase()) == -1)
										&& (point_Id.indexOf("opinion_") == -1)) {
									if (("0".equalsIgnoreCase(status))
											&& ("p0413"
													.equalsIgnoreCase(point_Id)))/**
									 * 
									 * 项目分值
									 */
									{
										executeCell(
												this.rowNumber,
												(short) (colIndexNum + k),
												this.rowNumber,
												(short) (colIndexNum + k),
												(String) pointbean.get("score"),
												centerstyle4, "num", patr,
												"no", "no");
										k++;
									} else if (("1".equalsIgnoreCase(status))
											&& ("p0415"
													.equalsIgnoreCase(point_Id))) /**
									 * 
									 * 项目权重
									 */
									{
										executeCell(this.rowNumber,
												(short) (colIndexNum + k),
												this.rowNumber,
												(short) (colIndexNum + k),
												(String) pointbean.get("rank"),
												centerstyle4, "num", patr,
												"no", "no");
										k++;
									} else {
										if (("p0413".equalsIgnoreCase(point_Id))
												|| ("p0415"
														.equalsIgnoreCase(point_Id))
												|| ("p0421"
														.equalsIgnoreCase(point_Id))
												|| ("p0423"
														.equalsIgnoreCase(point_Id))) {

										} else {
											if ("N".equalsIgnoreCase(itemType)) {
												executeCell(
														this.rowNumber,
														(short) (colIndexNum + k),
														this.rowNumber,
														(short) (colIndexNum + k),
														(String) pointbean
																.get(point_Id),
														centerstyle4, "num",
														patr, "no", "no");
												k++;
											} else if (("D"
													.equalsIgnoreCase(itemType))
													|| ("M"
															.equalsIgnoreCase(itemType))) {
												executeCell(
														this.rowNumber,
														(short) (colIndexNum + k),
														this.rowNumber,
														(short) (colIndexNum + k),
														(String) pointbean
																.get(point_Id),
														centerstyle2, "str",
														patr, "no", "no");
												k++;
											} else {
												executeCell(
														this.rowNumber,
														(short) (colIndexNum + k),
														this.rowNumber,
														(short) (colIndexNum + k),
														(String) pointbean
																.get(point_Id),
														centerstyle4, "str",
														patr, "no", "no");
												k++;
											}
										}
									}
								}
							}
							k--;
							this.rowNumber++;
						}
					}
					/** 没有指标 **/
					else {
						/** 画出空格 */
						int k = 0;
						for (int f = 0; f < this.lay - layer; f++) {
							executeCell(this.rowNumber,
									(short) (colIndexNum + f), this.rowNumber,
									(short) ((colIndexNum + f)), "",
									centerstyle3, "str", patr, "no", "no");
							k++;
						}
						/** 指标名称 */
						executeCell(this.rowNumber, (short) (colIndexNum + k),
								this.rowNumber, (short) (colIndexNum + k), "",
								centerstyle3, "str", patr, "no", "no");
						k++;

						for (int x = 0; x < this.head_List.size(); x++) {
							LazyDynaBean headbean = (LazyDynaBean) this.head_List
									.get(x);
							String point_Id = (String) headbean.get("itemid");
							String itemType = (String) headbean.get("itemType");
							if (("itemid,p0401,edit,attach".indexOf(point_Id
									.toLowerCase()) == -1)
									&& (point_Id.indexOf("opinion_") == -1)) {
								if (("0".equalsIgnoreCase(status))
										&& ("p0413".equalsIgnoreCase(point_Id)))/**
								 * 
								 * 项目分值
								 */
								{
									executeCell(this.rowNumber,
											(short) (colIndexNum + k),
											this.rowNumber,
											(short) (colIndexNum + k), "",
											centerstyle4, "num", patr, "no",
											"no");
									k++;
								} else if (("1".equalsIgnoreCase(status))
										&& ("p0415".equalsIgnoreCase(point_Id)))/**
								 * 
								 * 项目权重
								 */
								{
									executeCell(this.rowNumber,
											(short) (colIndexNum + k),
											this.rowNumber,
											(short) (colIndexNum + k), "",
											centerstyle4, "num", patr, "no",
											"no");
									k++;
								} else {
									if (("p0413".equalsIgnoreCase(point_Id))
											|| ("p0415"
													.equalsIgnoreCase(point_Id))
											|| ("p0421"
													.equalsIgnoreCase(point_Id))
											|| ("p0423"
													.equalsIgnoreCase(point_Id))) {

									} else {
										if ("N".equalsIgnoreCase(itemType)) {
											executeCell(this.rowNumber,
													(short) (colIndexNum + k),
													this.rowNumber,
													(short) (colIndexNum + k),
													"", centerstyle4, "num",
													patr, "no", "no");
											k++;
										} else if (("D"
												.equalsIgnoreCase(itemType))
												|| ("M"
														.equalsIgnoreCase(itemType))) {
											executeCell(this.rowNumber,
													(short) (colIndexNum + k),
													this.rowNumber,
													(short) (colIndexNum + k),
													"", centerstyle2, "str",
													patr, "no", "no");
											k++;
										} else {
											executeCell(this.rowNumber,
													(short) (colIndexNum + k),
													this.rowNumber,
													(short) (colIndexNum + k),
													"", centerstyle4, "str",
													patr, "no", "no");
											k++;
										}
									}
								}
							}
						}
						k--;
						this.rowNumber++;
					}
				} else {
					/** 叶子项目的所有父项目列表（爷爷，太爷） */
					for (int e = linkParentList.size() - 1; e >= 0; e--) {
						a_bean = (LazyDynaBean) linkParentList.get(e);
						String itemid = (String) a_bean.get("item_id");
						if (existWriteItem.get(itemid) != null) {
							this.colIndexNum++;
							continue;
						}
						existWriteItem.put(itemid, "1");
						String itemdesc = (String) a_bean.get("itemdesc");
						/** 画出一个父项目 */
						int colspan = ((itemPointNum.get(itemid) == null ? 0
								: ((Integer) itemPointNum.get(itemid))
										.intValue()) + (childItemLinkMap
								.get(itemid) == null ? 0
								: ((Integer) childItemLinkMap.get(itemid))
										.intValue()));
						// this.rowNum++;
						taskExecuteCell(this.rowNumber, this.colIndexNum,
								this.rowNumber + colspan - 1, this.colIndexNum,
								itemdesc, centerstyle3, "str", patr, "yes",
								itemid);
						this.colIndexNum++;
						/** 父项目包含指标，画出指标 */
						/** 该项目的层数 */
						int layer = Integer.parseInt((String) layMap
								.get(itemid));
						/** 对应指标列表 */
						ArrayList fieldlistp = (ArrayList) this.itemHaveFieldList
								.get(itemid);
						/** 该项目有指标 */
						if (fieldlistp != null && fieldlistp.size() > 0) {
							for (int h = 0; h < fieldlistp.size(); h++) {
								LazyDynaBean pointbean = (LazyDynaBean) fieldlistp
										.get(h);
								int k = 0;

								for (int f = 0; f < this.lay - layer; f++) {
									executeCell(this.rowNumber,
											(short) (colIndexNum + f),
											this.rowNumber,
											(short) ((colIndexNum + f)), "",
											centerstyle3, "str", patr, "no",
											"no");
									k++;
								}
								/** 指标名称 */
								executeCell(this.rowNumber,
										(short) (colIndexNum + k),
										this.rowNumber,
										(short) (colIndexNum + k),
										(String) pointbean.get("name"),
										centerstyle3, "str", patr, "yes",
										(String) pointbean.get("point_id"));
								k++;
								for (int x = 0; x < this.head_List.size(); x++) {
									LazyDynaBean headbean = (LazyDynaBean) this.head_List
											.get(x);
									String point_Id = (String) headbean
											.get("itemid");
									String itemType = (String) headbean
											.get("itemType");
									if (("itemid,p0401,edit,attach"
											.indexOf(point_Id.toLowerCase()) == -1)
											&& (point_Id.indexOf("opinion_") == -1)) {
										if (("0".equalsIgnoreCase(status))
												&& ("p0413"
														.equalsIgnoreCase(point_Id)))/**
										 * 
										 * 项目分值
										 */
										{
											executeCell(this.rowNumber,
													(short) (colIndexNum + k),
													this.rowNumber,
													(short) (colIndexNum + k),
													(String) pointbean
															.get("score"),
													centerstyle4, "num", patr,
													"no", "no");
											k++;
										} else if (("1"
												.equalsIgnoreCase(status))
												&& ("p0415"
														.equalsIgnoreCase(point_Id)))/**
										 * 
										 * 项目权重
										 */
										{
											executeCell(this.rowNumber,
													(short) (colIndexNum + k),
													this.rowNumber,
													(short) (colIndexNum + k),
													(String) pointbean
															.get("rank"),
													centerstyle4, "num", patr,
													"no", "no");
											k++;
										} else {
											if (("p0413"
													.equalsIgnoreCase(point_Id))
													|| ("p0415"
															.equalsIgnoreCase(point_Id))
													|| ("p0421"
															.equalsIgnoreCase(point_Id))
													|| ("p0423"
															.equalsIgnoreCase(point_Id))) {

											} else {
												if ("N"
														.equalsIgnoreCase(itemType)) {
													executeCell(
															this.rowNumber,
															(short) (colIndexNum + k),
															this.rowNumber,
															(short) (colIndexNum + k),
															(String) pointbean
																	.get(point_Id),
															centerstyle4,
															"num", patr, "no",
															"no");
													k++;
												} else if (("D"
														.equalsIgnoreCase(itemType))
														|| ("M"
																.equalsIgnoreCase(itemType))) {
													executeCell(
															this.rowNumber,
															(short) (colIndexNum + k),
															this.rowNumber,
															(short) (colIndexNum + k),
															(String) pointbean
																	.get(point_Id),
															centerstyle2,
															"str", patr, "no",
															"no");
													k++;
												} else {
													executeCell(
															this.rowNumber,
															(short) (colIndexNum + k),
															this.rowNumber,
															(short) (colIndexNum + k),
															(String) pointbean
																	.get(point_Id),
															centerstyle4,
															"str", patr, "no",
															"no");
													k++;
												}
											}
										}
									}
								}
								k--;
								this.rowNumber++;
							}
						}
						/** 没有指标 **/
						else {
							if (e == 0) {
								int k = 0;
								for (int f = 0; f < this.lay - layer; f++) {
									executeCell(this.rowNumber,
											(short) (colIndexNum + f),
											this.rowNumber,
											(short) ((colIndexNum + f)), "",
											centerstyle3, "str", patr, "no",
											"no");
									k++;
								}
								/** 指标名称 */
								executeCell(this.rowNumber,
										(short) (colIndexNum + k),
										this.rowNumber,
										(short) (colIndexNum + k), "",
										centerstyle3, "str", patr, "no", "no");
								k++;
								for (int x = 0; x < this.head_List.size(); x++) {
									LazyDynaBean headbean = (LazyDynaBean) this.head_List
											.get(x);
									String point_Id = (String) headbean
											.get("itemid");
									String itemType = (String) headbean
											.get("itemType");
									if (("itemid,p0401,edit,attach"
											.indexOf(point_Id.toLowerCase()) == -1)
											&& (point_Id.indexOf("opinion_") == -1)) {
										if (("0".equalsIgnoreCase(status))
												&& ("p0413"
														.equalsIgnoreCase(point_Id)))/**
										 * 
										 * 项目分值
										 */
										{
											executeCell(this.rowNumber,
													(short) (colIndexNum + k),
													this.rowNumber,
													(short) (colIndexNum + k),
													"", centerstyle4, "num",
													patr, "no", "no");
											k++;
										} else if (("1"
												.equalsIgnoreCase(status))
												&& ("p0415"
														.equalsIgnoreCase(point_Id)))/**
										 * 
										 * 项目权重
										 */
										{
											executeCell(this.rowNumber,
													(short) (colIndexNum + k),
													this.rowNumber,
													(short) (colIndexNum + k),
													"", centerstyle4, "num",
													patr, "no", "no");
											k++;
										} else {
											if (("p0413"
													.equalsIgnoreCase(point_Id))
													|| ("p0415"
															.equalsIgnoreCase(point_Id))
													|| ("p0421"
															.equalsIgnoreCase(point_Id))
													|| ("p0423"
															.equalsIgnoreCase(point_Id))) {

											} else {
												if ("N"
														.equalsIgnoreCase(itemType)) {
													executeCell(
															this.rowNumber,
															(short) (colIndexNum + k),
															this.rowNumber,
															(short) (colIndexNum + k),
															"", centerstyle4,
															"num", patr, "no",
															"no");
													k++;
												} else if (("D"
														.equalsIgnoreCase(itemType))
														|| ("M"
																.equalsIgnoreCase(itemType))) {
													executeCell(
															this.rowNumber,
															(short) (colIndexNum + k),
															this.rowNumber,
															(short) (colIndexNum + k),
															"", centerstyle2,
															"str", patr, "no",
															"no");
													k++;
												} else {
													executeCell(
															this.rowNumber,
															(short) (colIndexNum + k),
															this.rowNumber,
															(short) (colIndexNum + k),
															"", centerstyle4,
															"str", patr, "no",
															"no");
													k++;
												}
											}
										}
									}
								}
								k--;
								this.rowNumber++;
							}
						}
					}
				}
				/* } */
			}

			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rowSet = null;

			int index = 0;
			String[] lettersUpper = { "A", "B", "C", "D", "E", "F", "G", "H",
					"I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",
					"U", "V", "W", "X", "Y", "Z" };

			int div = 0;
			int mod = 0;
			int layNum = 0;
			for (int x = 0; x < this.head_List.size(); x++) {
				LazyDynaBean headbean = (LazyDynaBean) this.head_List.get(x);
				String point_Id = (String) headbean.get("itemid");
				String itemType = (String) headbean.get("itemType");
				String codesetid = (String) headbean.get("codesetid");

				if (("itemid,p0401,edit,attach,p0421,p0423".indexOf(point_Id
						.toLowerCase()) == -1)
						&& (point_Id.indexOf("opinion_") == -1))// 过滤
				{
					layNum++;
				}
				if ((("itemid,p0401,edit,attach"
						.indexOf(point_Id.toLowerCase()) == -1) && (point_Id
						.indexOf("opinion_") == -1))
						&& (!"0".equals(codesetid) && !"".equals(codesetid))) {
					int m = 0;
					int beginIndex = 49;// 下拉列表数据源从50行开始放
					StringBuffer codeBuf = new StringBuffer();
					if (!"UM".equals(codesetid) && !"UN".equals(codesetid)
							&& !"@K".equalsIgnoreCase(codesetid)) {
						codeBuf.append("select codesetid,codeitemid,codeitemdesc from codeitem where codesetid='"
								+ codesetid + "' ");
					} else {
						m = loadorg(sheet, row, cell, index, beginIndex, dao,
								codesetid);
						m = m - beginIndex;
					}
					int fromIndex = 49;// 下拉列表框从第50行开始。excel从0行开始
					if (!"UM".equals(codesetid) && !"UN".equals(codesetid)
							&& !"@K".equalsIgnoreCase(codesetid)) {
						rowSet = dao.search(codeBuf.toString());
						while (rowSet.next()) {
							row = sheet.getRow(fromIndex + 0);
							if (row == null)
								row = sheet.createRow(fromIndex + 0);
							cell = row.createCell((short) (208 + index));
							cell.setCellValue(new HSSFRichTextString(rowSet
									.getString("codeitemid")
									+ ":"
									+ rowSet.getString("codeitemdesc")));
							fromIndex++;
							m++;
						}
					}
					if (m == 0)
						m = 2;
					sheet.setColumnWidth((short) (208 + index), (short) 0);
					// String strFormula = "$H" + lettersUpper[index] + "$1:$H"
					// + lettersUpper[index] + "$" + Integer.toString(m); //
					// 表示BA列1-m行作为下拉列表来源数据
					div = index / 26;
					mod = index % 26;
					String strFormula = "$" + lettersUpper[7 + div]
							+ lettersUpper[mod] + "$50:$"
							+ lettersUpper[7 + div] + lettersUpper[mod] + "$"
							+ Integer.toString(m + 49); // 表示HB列第50行至第（50+m）行作为下拉列表来源数据。即从这里取数据
					CellRangeAddressList addressList = new CellRangeAddressList(
							3, 1000, layNum + this.lay, layNum + this.lay);
					DVConstraint dvConstraint = DVConstraint
							.createFormulaListConstraint(strFormula);
					HSSFDataValidation dataValidation = new HSSFDataValidation(
							addressList, dvConstraint);
					dataValidation.setSuppressDropDownArrow(false);
					sheet.addValidationData(dataValidation);

					index++;
					// layNum++;
				}
			}

			for (int i = 0; i <= columnSize; i++) {
				this.sheet.setColumnWidth(Short.parseShort(String.valueOf(i)),
						(short) 6000);
			}
			for (int i = 0; i <= this.rowNumber; i++) {
				hssRow = sheet.getRow(i);
				if (hssRow == null)
					hssRow = sheet.createRow(i);
				hssRow.setHeight((short) 600);
			}
			fileOut = new FileOutputStream(
					System.getProperty("java.io.tmpdir")
							+ System.getProperty("file.separator") + outName);
			workbook0.write(fileOut);
		//	outName = outName.replaceAll(".xls", "#");
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			PubFunc.closeResource(fileOut);
			PubFunc.closeResource(workbook0);
		}
		return outName;
	}

	private int loadorg(HSSFSheet sheet, HSSFRow row, HSSFCell cell, int index,
			int m, ContentDAO dao, String type) throws Exception {
		ResultSet rs = null;
		try {
			String sql = "select codesetid,codeitemid,childid,codeitemdesc,grade from organization where codeitemid=parentid and "
					+ Sql_switcher.dateValue(PubFunc.FormatDate(new Date(),
							"yyyy-MM-dd"))
					+ " between start_date and end_date order by a0000,codeitemid";
			rs = dao.search(sql);
			String codesetid = "";
			String codeitemid = "";
			String childid = "";
			String codeitemdesc = "";
			int grade = 0;
			while (rs.next()) {
				codesetid = rs.getString("codesetid");
				codeitemid = rs.getString("codeitemid");
				childid = rs.getString("childid");
				codeitemdesc = rs.getString("codeitemdesc");
				grade = rs.getInt("grade");
				row = sheet.getRow(m + 0);
				if (row == null)
					row = sheet.createRow(m + 0);
				cell = row.createCell((208 + index));
				StringBuffer sb = new StringBuffer();
				sb.setLength(0);
				for (int i = 1; i < grade; i++) {
					sb.append("  ");
				}
				cell.setCellValue(new HSSFRichTextString(sb.toString()
						+ codeitemid + ":" + codeitemdesc));
				m++;
				if (!codeitemid.equals(childid))
					m = loadchild(sheet, row, cell, index, m, dao, codeitemid,
							type);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (rs != null) {
				rs.close();
			}
		}
		return m;
	}

	private int loadchild(HSSFSheet sheet, HSSFRow row, HSSFCell cell,
			int index, int m, ContentDAO dao, String parentid, String type)
			throws Exception {
		ResultSet rs = null;
		try {
			String sql = null;
			sql = "select codesetid,codeitemid,childid,codeitemdesc,grade from organization where parentid='"
					+ parentid
					+ "' and codesetid<>'@K' and parentid<>codeitemid and "
					+ Sql_switcher.dateValue(PubFunc.FormatDate(new Date(),
							"yyyy-MM-dd"))
					+ " between start_date and end_date order by a0000,codeitemid";
			rs = dao.search(sql);
			String codesetid = "";
			String codeitemid = "";
			String childid = "";
			String codeitemdesc = "";
			int grade = 0;
			while (rs.next()) {
				codesetid = rs.getString("codesetid");
				codeitemid = rs.getString("codeitemid");
				childid = rs.getString("childid");
				codeitemdesc = rs.getString("codeitemdesc");
				grade = rs.getInt("grade");
				row = sheet.getRow(m + 0);
				if (row == null)
					row = sheet.createRow(m + 0);
				cell = row.createCell((208 + index));
				StringBuffer sb = new StringBuffer();
				sb.setLength(0);
				for (int i = 1; i < grade; i++) {
					sb.append("  ");
				}
				cell.setCellValue(new HSSFRichTextString(sb.toString()
						+ codeitemid + ":" + codeitemdesc));
				m++;
				if (!codeitemid.equals(childid))
					m = loadchild(sheet, row, cell, index, m, dao, codeitemid,
							type);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (rs != null) {
				rs.close();
			}
		}
		return m;
	}

	/**
	 * 设置excel的样式
	 * 
	 * @param workbook
	 * @param styles
	 * @return
	 */
	public HSSFCellStyle style(HSSFWorkbook workbook, int styles) {
		HSSFCellStyle style = workbook.createCellStyle();

		switch (styles) {

		case 0:
			HSSFFont fonttitle = fonts(workbook,
					ResourceFactory.getProperty("gz.gz_acounting.black.font"),
					10);
			fonttitle.setBold(true);// 加粗
			style.setFont(fonttitle);
			style.setBorderBottom(BorderStyle.THIN);
			style.setBorderLeft(BorderStyle.THIN);
			style.setBorderRight(BorderStyle.THIN);
			style.setBorderTop(BorderStyle.THIN);
			style.setVerticalAlignment(VerticalAlignment.CENTER);
			style.setFillForegroundColor(HSSFColor.LIGHT_GREEN.index);
			style.setAlignment(HorizontalAlignment.CENTER);
			break;
		case 1:
			style.setFont(fonts(workbook,
					ResourceFactory.getProperty("gz.gz_acounting.m.font"), 10));
			style.setBorderBottom(BorderStyle.THIN);
			style.setBorderLeft(BorderStyle.THIN);
			style.setBorderRight(BorderStyle.THIN);
			style.setBorderTop(BorderStyle.THIN);
			style.setVerticalAlignment(VerticalAlignment.CENTER);
			style.setAlignment(HorizontalAlignment.CENTER);
			style.setFillForegroundColor(HSSFColor.BLUE.index);
			break;
		case 2:
			style.setFont(fonts(workbook,
					ResourceFactory.getProperty("gz.gz_acounting.m.font"), 10));
			style.setBorderBottom(BorderStyle.THIN);
			style.setBorderLeft(BorderStyle.THIN);
			style.setBorderRight(BorderStyle.THIN);
			style.setBorderTop(BorderStyle.THIN);
			style.setVerticalAlignment(VerticalAlignment.CENTER);
			style.setAlignment(HorizontalAlignment.RIGHT);
			style.setDataFormat(HSSFDataFormat.getBuiltinFormat("text"));// 文本格式
			break;
		case 3:
			style.setFont(fonts(workbook,
					ResourceFactory.getProperty("gz.gz_acounting.m.font"), 10));
			style.setBorderBottom(BorderStyle.THIN);
			style.setBorderLeft(BorderStyle.THIN);
			style.setBorderRight(BorderStyle.THIN);
			style.setBorderTop(BorderStyle.THIN);
			style.setVerticalAlignment(VerticalAlignment.CENTER);
			style.setAlignment(HorizontalAlignment.LEFT);
			break;
		case 4:
			style.setFont(fonts(workbook,
					ResourceFactory.getProperty("gz.gz_acounting.m.font"), 10));
			style.setBorderBottom(BorderStyle.THIN);
			style.setBorderLeft(BorderStyle.THIN);
			style.setBorderRight(BorderStyle.THIN);
			style.setBorderTop(BorderStyle.THIN);
			style.setVerticalAlignment(VerticalAlignment.CENTER);
			style.setAlignment(HorizontalAlignment.RIGHT);
			break;
		case 5:
			HSSFFont font15 = fonts(workbook,
					ResourceFactory.getProperty("gz.gz_acounting.m.font"), 12);
			font15.setBold(true);
			style.setFont(font15);
			// style.setBorderBottom(BorderStyle.THIN);
			// style.setBorderLeft(BorderStyle.THIN);
			// style.setBorderRight(BorderStyle.THIN);
			// style.setBorderTop(BorderStyle.THIN);
			style.setVerticalAlignment(VerticalAlignment.CENTER);
			style.setAlignment(HorizontalAlignment.CENTER);
			// style.setFillPattern(HorizontalAlignment.CENTER);
			// style.setFillForegroundColor(HSSFColor.LIGHT_CORNFLOWER_BLUE.index);
			break;
		default:
			style.setFont(fonts(workbook,
					ResourceFactory.getProperty("gz.gz_acounting.m.font"), 12));
			style.setAlignment(HorizontalAlignment.LEFT);
			style.setBorderBottom(BorderStyle.THIN);
			style.setBorderLeft(BorderStyle.THIN);
			style.setBorderRight(BorderStyle.THIN);
			style.setBorderTop(BorderStyle.THIN);
			break;
		}
		style.setWrapText(true);
		return style;
	}

	/**
	 * 设置excel的字体
	 * 
	 * @param workbook
	 * @param fonts
	 * @param size
	 * @return
	 */
	public HSSFFont fonts(HSSFWorkbook workbook, String fonts, int size) {

		HSSFFont font = workbook.createFont();
		font.setFontHeightInPoints((short) size);
		font.setFontName(fonts);
		return font;
	}

	/**
	 * 取得 工作任务信息表中的记录
	 * 
	 * @return
	 */

	// 判断p04表中是否有记录
	public boolean haveOrNotP04() {
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rowSet = null;
			String sql = "";
			if ("2".equals(this.object_type)) {
				sql = ("select count(*) num from p04 where plan_id="
						+ this.plan_vo.getInt("plan_id") + " and a0100='"
						+ this.object_id + "'");
			} else {
				sql = ("select count(*) num from p04 where plan_id="
						+ this.plan_vo.getInt("plan_id") + " and b0110='"
						+ this.object_id + "'");
			}
			rowSet = dao.search(sql);
			if (rowSet.next()) {
				if (rowSet.getInt("num") == 0)
					return false;
				else
					return true;
			}
			if (rowSet != null)
				rowSet.close();

		} catch (Exception e) {
			e.printStackTrace();
		}

		return false;
	}
	public ArrayList getObjectList(){
        ArrayList list = new ArrayList();
        RowSet rowSet = null;
        RowSet rs = null;
        try {
            ContentDAO dao = new ContentDAO(this.conn);

                rowSet = dao
                        .search("select object_id,a0101 from per_object where plan_id="
                                + plan_id
                                + " and object_id='"
                                + object_id
                                + "' order by A0000");
            LazyDynaBean abean = null;
            while (rowSet.next()) {
                abean = new LazyDynaBean();
                    abean.set(
                            "codeitemid",
                            rowSet.getString("object_id") != null ? rowSet
                                    .getString("object_id") : "");
                    abean.set(
                            "codeitemdesc",
                            rowSet.getString("a0101") != null ? rowSet
                                    .getString("a0101") : "");

                list.add(abean);
            }
            if (rowSet != null)
                rowSet.close();
            if (rs != null)
                rs.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return list;
	}
	// 获取对象目标卡信息
		public ArrayList getKh_objectList() {
			ArrayList list = new ArrayList();
			RowSet rowSet = null;
			try {
				ContentDAO dao = new ContentDAO(this.conn);

				if("2".equals(this.object_type)){
					
					rowSet = dao
							.search("select object_id,po.a0101,usra01."+this.oname
									+ " from per_object po "
									+ "left join usra01 on po.object_id=usra01.a0100 "
									+ "where plan_id="+ plan_id
									+ " and object_id='"
									+ object_id
									+ "' order by po.A0000");
				}else {
					if ((oname != null) && (oname.length() > 0)
							&& (!"#".equalsIgnoreCase(oname)))
						rowSet = dao.search("select object_id,po.a0101,b." + oname
								+ " from per_object po left join b01 b on po.object_id=b.b0110 where b.b0110='" + object_id + "' and plan_id="+plan_id);
				}
					
				LazyDynaBean abean = null;
				while (rowSet.next()) {
					abean = new LazyDynaBean();
						abean.set(
								"codeitemid",
								rowSet.getString("object_id") != null ? rowSet
										.getString("object_id") : "");
						abean.set(
								"codeitemdesc",
								rowSet.getString("a0101") != null ? rowSet
										.getString("a0101") : "");

						if ((oname != null) && (oname.length() > 0)
								&& (!"#".equalsIgnoreCase(oname)))
							abean.set(
									oname,
									rowSet.getString(oname) != null ? rowSet
											.getString(oname) : "");


					list.add(abean);
				}
				if (rowSet != null)
					rowSet.close();
			} catch (Exception e) {
				e.printStackTrace();
			}

			return list;

		}

	/**
	 * 取得 模板项目记录
	 * 
	 * @return
	 */
	public ArrayList getTemplateItemList(String templateID) {
		ArrayList list = new ArrayList();
		try {
			HashMap dynaMap = null;
			if (this.perObject_vo != null
					&& this.perObject_vo.getString("body_id") != null
					&& !"".equals(this.perObject_vo.getString("body_id"))) {
				LoadXml loadXml = new LoadXml();
				dynaMap = loadXml
						.getDynaItem(this.plan_vo.getInt("plan_id") + "",
								this.conn,
								this.perObject_vo.getString("body_id"));
			}
			ContentDAO dao = new ContentDAO(this.conn);

			String sql = "select * from  per_template_item where template_id='"
					+ templateID + "' ";
			// 目标制订不显示共性指标 liantong
			if (SystemConfig.getPropertyValue("noShowCommonPonit") != null
					&& "true"
							.equalsIgnoreCase(SystemConfig.getPropertyValue("noShowCommonPonit"))) {
				if (this.plan_vo.getInt("status") == 8)
					sql += " and kind<>1 ";

			}
			// 要根据考核机构 来控制展现
			if (this.privByOrg) {
				String itemid = this.getItemId();
				if (itemid.length() <= 0)
					itemid = "-1";
				else
					itemid = itemid.substring(1);
				// sql+=" and ((kind=2 and item_id in("+itemid+")) or kind=1)";
				sql += " and item_id in(" + itemid + ")";
			}
			sql += " order by seq";
			RowSet rowSet = dao.search(sql);

			String scoreflag = (String) this.planParam.get("scoreflag"); // =2混合，=1标度(默认值=混合)=4加扣分
			String ScoreFromItem = (String) this.planParam.get("ScoreFromItem"); // 按项目权重逐级计算总分，True，False
																					// 默认False；

			// RowSet
			// rowSet=dao.search("select * from  per_template_item where template_id='"+templateID+"'  order by seq");
			LazyDynaBean abean = null;
			while (rowSet.next()) {
				abean = new LazyDynaBean();
				abean.set("item_id", rowSet.getString("item_id"));
				abean.set(
						"parent_id",
						rowSet.getString("parent_id") != null ? rowSet
								.getString("parent_id") : "");
				abean.set(
						"child_id",
						rowSet.getString("child_id") != null ? rowSet
								.getString("child_id") : "");
				abean.set("template_id", rowSet.getString("template_id"));

				String isAddMinusItem = "0";
				String addMinusScore = "";
				String addMinusToScore = "";
				String itemdesc = rowSet.getString("itemdesc");
				String score = rowSet.getString("score") == null ? "0"
						: this.myformat1.format(rowSet.getDouble("score"));
				// 定义的动态权重（分值）

				if (!((scoreflag != null && "4".equals(scoreflag)) || (ScoreFromItem != null && "true"
						.equalsIgnoreCase(ScoreFromItem)))
						&& dynaMap != null
						&& dynaMap.get(this.perObject_vo.getString("body_id")
								+ rowSet.getString("item_id")) != null) {
					HashMap map = (HashMap) dynaMap
							.get(this.perObject_vo.getString("body_id")
									+ rowSet.getString("item_id"));

					if (map.get("isAddMinusItem") != null
							&& !"".equals((String) map.get("isAddMinusItem")))
						isAddMinusItem = (String) map.get("isAddMinusItem");
					if (map.get("addMinusScore") != null
							&& !"".equals((String) map.get("addMinusScore")))
						addMinusScore = (String) map.get("addMinusScore");
					if (map.get("addMinusToScore") != null
							&& !""
									.equals((String) map.get("addMinusToScore")))
						addMinusToScore = (String) map.get("addMinusToScore");
				}

				if ("0".equals(this.template_vo.getString("status"))) // 分值
				{
					if (!(SystemConfig.getPropertyValue("clientName") != null && "zglt".equalsIgnoreCase(
                            SystemConfig
                                    .getPropertyValue("clientName")))) // 中国联通
					{
						if ("1".equals(isAddMinusItem)) {
							if (addMinusScore.trim().length() > 0
									&& addMinusToScore.trim().length() > 0) {
								itemdesc += "(加扣分:" + addMinusScore + "~"
										+ addMinusToScore + ")";
							} else if (addMinusScore.trim().length() > 0) {
								itemdesc += "(加扣分:" + addMinusScore + "~+∞)";
							} else if (addMinusToScore.trim().length() > 0) {
								itemdesc += "(加扣分:-∞~" + addMinusToScore + ")";
							} else
								itemdesc += "(加扣分)";
						} else if (!("0".equals(score)))
							itemdesc += "("
									+ ResourceFactory
											.getProperty("jx.param.mark") + ":"
									+ score + ")";
					}
				} else if ("1".equals(this.template_vo.getString("status"))) // 权重
				{
					if ("1".equals(isAddMinusItem)) {
						if (addMinusScore.trim().length() > 0
								&& addMinusToScore.trim().length() > 0) {
							itemdesc += "(加扣分:" + addMinusScore + "~"
									+ addMinusToScore + ")";
						} else if (addMinusScore.trim().length() > 0) {
							itemdesc += "(加扣分:" + addMinusScore + "~+∞)";
						} else if (addMinusToScore.trim().length() > 0) {
							itemdesc += "(加扣分:-∞~" + addMinusToScore + ")";
						} else
							itemdesc += "(加扣分)";
					} else {
						String rank = rowSet.getString("rank") == null ? "0"
								: this.myformat1.format(rowSet
										.getDouble("rank"));
						if (rank == null || rank.trim().length() == 0)
							rank = "0";
						else
							rank = rank.trim();
						DecimalFormat myformat1 = new DecimalFormat(
								"########.####");//
						String temp = myformat1
								.format(Double.parseDouble(rank) * 100);
						if (!"0".equals(temp)) {
							if (!(SystemConfig.getPropertyValue("clientName") != null && "zglt"
									.equalsIgnoreCase(SystemConfig
                                            .getPropertyValue("clientName")))) // 中国联通
							{
								itemdesc += "("
										+ ResourceFactory
												.getProperty("label.kh.template.qz")
										+ ":" + temp + "％)";
							}
						}
					}
				}

				abean.set("itemdesc", itemdesc);
				abean.set("seq", rowSet.getString("seq"));
				abean.set(
						"kind",
						rowSet.getString("kind") != null ? rowSet
								.getString("kind") : "");
				abean.set("score", rowSet.getString("score") == null ? "0"
						: this.myformat1.format(rowSet.getDouble("score")));
				abean.set("rank", rowSet.getString("rank") == null ? "0"
						: this.myformat1.format(rowSet.getDouble("rank")));
				abean.set(
						"rank_type",
						rowSet.getString("rank_type") != null ? rowSet
								.getString("rank_type") : "");
				list.add(abean);
				if (rowSet.getString("parent_id") == null
						|| "".equals(rowSet.getString("parent_id"))) {
					this.parentList.add(abean);
				}
			}
			if (rowSet != null)
				rowSet.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	// 叶子项目列表
	public void get_LeafItem_List() {
		try {
			LazyDynaBean abean = null;
			for (int i = 0; i < this.templateItem_List.size(); i++) {
				abean = (LazyDynaBean) this.templateItem_List.get(i);
				String parent_id = (String) abean.get("parent_id");
				if (parent_id.length() == 0) {
					setLeafItem(abean);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 递归查找叶子项目
	public void setLeafItem(LazyDynaBean abean) {
		String item_id = (String) abean.get("item_id");
		String child_id = (String) abean.get("child_id");
		// 判断项目下是否有指标
		if (child_id.length() == 0) {
			this.leafItem_List.add(abean);
			return;
		} else {
			LazyDynaBean bean = null;
			for (int i = 0; i < this.p04List.size(); i++) {
				bean = (LazyDynaBean) this.p04List.get(i);
				String _item_id = (String) bean.get("item_id");
				if (_item_id.equalsIgnoreCase(item_id)) {
					this.leafItem_List.add(abean);
					break;
				}
			}
		}
		LazyDynaBean a_bean = null;
		for (int j = 0; j < this.templateItem_List.size(); j++) {
			a_bean = (LazyDynaBean) this.templateItem_List.get(j);
			String parent_id = (String) a_bean.get("parent_id");
			if (parent_id.equals(item_id))
				setLeafItem(a_bean);
		}
	}

	/**
	 * 叶子项目对应的继承关系
	 * 
	 * @return
	 */
	public HashMap getLeafItemLink_Map() {
		HashMap map = new HashMap();
		try {
			LazyDynaBean abean = null;
			for (int i = 0; i < this.leafItem_List.size(); i++) {
				abean = (LazyDynaBean) this.leafItem_List.get(i);
				String item_id = (String) abean.get("item_id");
				String parent_id = (String) abean.get("parent_id");
				ArrayList linkList = new ArrayList();
				getParent_Item(linkList, abean);
				if (linkList.size() > lay)
					lay = linkList.size();
				map.put(item_id, linkList);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	// 寻找继承关系
	public void getParent_Item(ArrayList list, LazyDynaBean abean) {
		String item_id = (String) abean.get("item_id");
		String parent_id = (String) abean.get("parent_id");
		if (parent_id.length() == 0) {
			list.add(abean);
			return;
		}
		LazyDynaBean a_bean = null;
		for (int i = 0; i < templateItem_List.size(); i++) {
			a_bean = (LazyDynaBean) this.templateItem_List.get(i);
			String itemid = (String) a_bean.get("item_id");
			String parentid = (String) a_bean.get("parent_id");
			if (itemid.equals(parent_id)) {
				list.add(abean);
				getParent_Item(list, a_bean);
			}
		}
	}

	/**
	 * 除叶子节点外的节点的指标数量
	 * 
	 * @return
	 */
	public HashMap getChildItemLinkMap() {
		HashMap map = new HashMap();
		for (int i = 0; i < this.templateItem_List.size(); i++) {
			LazyDynaBean bean = (LazyDynaBean) this.templateItem_List.get(i);
			ArrayList list = new ArrayList();
			doMethod(bean, list);
			LazyDynaBean aa_bean = null;
			int n = 0;
			for (int j = 0; j < list.size(); j++) {
				aa_bean = (LazyDynaBean) list.get(j);
				String item_id = (String) aa_bean.get("item_id");
				if (itemToPointMap.get(item_id) != null)
					n += ((ArrayList) itemToPointMap.get(item_id)).size();

			}
			map.put((String) bean.get("item_id"), new Integer(n));
		}
		return map;
	}

	public void doMethod(LazyDynaBean bean, ArrayList list) {
		String itemid = (String) bean.get("item_id");
		String childid = (String) bean.get("child_id");
		if (childid.length() == 0) {
			// list.add(bean);
			return;
		} else {
			list.add(bean);
		}
		for (int j = 0; j < this.templateItem_List.size(); j++) {
			LazyDynaBean a_bean = (LazyDynaBean) this.templateItem_List.get(j);
			String parentid = (String) a_bean.get("parent_id");
			if (parentid.equals(itemid)) {
				doMethod(a_bean, list);
			}
		}
	}

	public void doMethod2() {
		for (int i = 0; i < parentList.size(); i++) {
			LazyDynaBean bean = (LazyDynaBean) parentList.get(i);
			String itemid = (String) bean.get("item_id");
			layMap.put(itemid, "1");
			doM(bean, 1);
		}
	}

	public void doM(LazyDynaBean bean, int lay) {
		lay++;
		for (int i = 0; i < this.templateItem_List.size(); i++) {
			LazyDynaBean a_bean = (LazyDynaBean) this.templateItem_List.get(i);
			String itemid = (String) bean.get("item_id");
			String a_itemid = (String) a_bean.get("item_id");
			String parentid = (String) a_bean.get("parent_id");
			if (parentid.equals(itemid)) {
				ifHasChildMap.put(itemid, "1");
				layMap.put(a_itemid, lay + "");
				doM(a_bean, lay);
			}
		}
	}

	public HashMap getItemHasFieldList() {
		HashMap map = new HashMap();
		ContentDAO dao = new ContentDAO(this.conn);
		RowSet rs = null;
		try {
			for (int i = 0; i < this.templateItem_List.size(); i++) {
				LazyDynaBean bean = (LazyDynaBean) this.templateItem_List
						.get(i);
				String itemid = (String) bean.get("item_id");
				StringBuffer sql = new StringBuffer();
				sql.append("select ptp.point_id,ptp.score,ptp.seq,ptp.rank,po.pointname from per_template_point ptp,per_point po where ptp.point_id=po.point_id and item_id="
						+ itemid + " order by ptp.seq");
				rs = dao.search(sql.toString());
				ArrayList list = new ArrayList();
				while (rs.next()) {
					LazyDynaBean a_bean = new LazyDynaBean();
					a_bean.set("itemid", itemid);
					a_bean.set(
							"point_id",
							rs.getString("point_id") != null ? rs
									.getString("point_id") : "");
					a_bean.set(
							"pointid",
							rs.getString("point_id") != null ? rs
									.getString("point_id") : "");
					a_bean.set("score", rs.getString("score") == null ? "0"
							: this.myformat1.format(rs.getDouble("score")));
					a_bean.set("seq",
							rs.getString("seq") != null ? rs.getString("seq")
									: "");
					a_bean.set(
							"name",
							rs.getString("pointname") != null ? rs
									.getString("pointname") : "");
					a_bean.set("rank", rs.getString("rank") == null ? "0"
							: this.myformat1.format(rs.getDouble("rank")));
					list.add(a_bean);
				}
				map.put(itemid, list);
			}
			if (rs != null)
				rs.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	// 如果p04表中有记录获取p04表中目标卡信息
	public HashMap getP04FieldList() {
		HashMap map = new HashMap();
		ContentDAO dao = new ContentDAO(this.conn);
		RowSet rs = null;
		RowSet rowSet = null;
		try {
			for (int i = 0; i < this.templateItem_List.size(); i++) {
				LazyDynaBean bean = (LazyDynaBean) this.templateItem_List
						.get(i);
				String itemid = (String) bean.get("item_id");
				StringBuffer sql = new StringBuffer();

				if ("2".equals(this.object_type)) {
					sql.append("select * from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and a0100='"
							+ this.object_id
							+ "' and item_id="
							+ itemid
							+ " and (chg_type<>3 or chg_type is null) order by p0400");
				} else {
					sql.append("select * from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and b0110='"
							+ this.object_id
							+ "' and item_id="
							+ itemid
							+ " and (chg_type<>3 or chg_type is null) order by p0400");
				}
				rs = dao.search(sql.toString());
				ArrayList list = new ArrayList();
				while (rs.next()) {
					LazyDynaBean a_bean = new LazyDynaBean();

					LazyDynaBean abean = null;
					for (int j = 0; j < this.head_List.size(); j++) {
						abean = (LazyDynaBean) this.head_List.get(j);
						String item_id = (String) abean.get("itemid");

						if (j > 2) {
							if ("p0413".equalsIgnoreCase(item_id))
								a_bean.set(
										"score",
										rs.getString("p0413") == null ? "0"
												: this.myformat1.format(rs
														.getDouble("p0413")));
							else if ("p0415".equalsIgnoreCase(item_id))
								a_bean.set(
										"rank",
										rs.getString("p0415") == null ? "0"
												: this.myformat1.format(rs
														.getDouble("p0415")));
							if ("p0421".equalsIgnoreCase(item_id)) {
								if (rs.getString("p0421") != null)
									a_bean.set("score", this.myformat1
											.format(rs.getDouble("p0421")));
							} else if ("p0423".equalsIgnoreCase(item_id)) {
								if (rs.getString("p0423") != null)
									a_bean.set("rank", this.myformat1.format(rs
											.getDouble("p0423")));
							} else {
								String point_id = "";
								FieldItem fielditem = DataDictionary
										.getFieldItem(item_id);

								if ((fielditem != null)) {
									if ("D"
											.equalsIgnoreCase(fielditem.getItemtype())) {
										Date dateId = (Date) rs
												.getDate(item_id);
										point_id = String.valueOf(dateId);
										// point_id = new
										// SimpleDateFormat("yyyy-MM-dd").format(point_id);

									} else
										point_id = rs.getString(item_id);

									if (point_id == null
											|| point_id.length() <= 0
											|| "null"
													.equalsIgnoreCase(point_id)
											|| "".equalsIgnoreCase(point_id)) {
										a_bean.set(item_id, "");
									} else {
										if ("A"
												.equalsIgnoreCase(fielditem.getItemtype())) {
											String codesetid = fielditem
													.getCodesetid() == null ? ""
													: fielditem.getCodesetid();
											if ("".equals(codesetid)
													|| "0".equals(codesetid)) {
												a_bean.set(item_id, point_id);
											} else {
												StringBuffer codeBuf = new StringBuffer();
												if (!"UM".equals(codesetid)
														&& !"UN"
																.equals(codesetid)
														&& !"@K"
																.equalsIgnoreCase(codesetid)) {
													codeBuf.append("select codesetid,codeitemid,codeitemdesc from codeitem where codesetid='"
															+ codesetid
															+ "' and codeitemid='"
															+ point_id + "'");
												} else {
													codeBuf.append("select codesetid,codeitemid,codeitemdesc from organization where codesetid='"
															+ codesetid
															+ "' and codeitemid='"
															+ point_id + "'");
												}

												rowSet = dao.search(codeBuf
														.toString());
												String codeitemdesc = "";
												while (rowSet.next()) {
													codeitemdesc = rowSet
															.getString("codeitemdesc");
												}
												a_bean.set(item_id, point_id
														+ ":" + codeitemdesc);
											}
										} else if ("D"
												.equalsIgnoreCase(fielditem.getItemtype())) {
											String point_Date = "";
											if ((point_id != null)
													&& (point_id.trim()
															.length() > 0)
													&& (!"null"
															.equalsIgnoreCase(point_id))
													&& (!""
															.equalsIgnoreCase(point_id)))
												point_Date = point_id
														.substring(0, 10);
											a_bean.set(item_id, point_Date);

										} else
											a_bean.set(item_id, point_id);
									}
								}
							}
						}
					}
					a_bean.set("itemid", itemid);
					a_bean.set("seq",
							rs.getString("seq") != null ? rs.getString("seq")
									: "");
					String fromflag = rs.getString("fromflag");
					// String
					// p0407=(rs.getString("p0407")!=null?rs.getString("p0407"):"");
					// String
					// p0401=(rs.getString("p0401")!=null?rs.getString("p0401"):"");
					a_bean.set(
							"name",
							rs.getString("p0407") != null ? rs
									.getString("p0407") : "");
					if ("2".equals(fromflag)) {
						a_bean.set(
								"pointid",
								rs.getString("p0401") != null ? rs
										.getString("p0401") : "");
					}
					a_bean.set(
							"point_id",
							rs.getString("p0401") != null ? rs
									.getString("p0401") : "");
					list.add(a_bean);
				}
				map.put(itemid, list);
			}
			if (rs != null)
				rs.close();
			if (rowSet != null)
				rowSet.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	/**
	 * 取得 工作任务信息表中的记录
	 * 
	 * @return
	 */
	public ArrayList getP04_List() {
		ArrayList list = new ArrayList();
		HashMap tempMap = new HashMap();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			StringBuffer sql = new StringBuffer(
					"select * from P04 where plan_id="
							+ this.plan_vo.getInt("plan_id"));
			if (this.plan_vo.getInt("object_type") == 1
					|| this.plan_vo.getInt("object_type") == 3
					|| this.plan_vo.getInt("object_type") == 4)
				sql.append(" and b0110='" + this.object_id + "'");
			else if (this.plan_vo.getInt("object_type") == 2)
				sql.append(" and a0100='" + this.object_id + "'");

			sql.append(" and (chg_type!=3 or chg_type is null) ");
			if (this.privByOrg)// 按考核机构限制
			{
				if (this.userView.getUnitIdByBusi("5") != null
						&& this.userView.getUnitIdByBusi("5").length() > 0
						&& !"UN"
								.equalsIgnoreCase(this.userView.getUnitIdByBusi("5")))// &&(this.plan_vo.getInt("status")!=4&&this.plan_vo.getInt("status")!=6&&this.perObject_vo.getString("sp_flag")!=null&&!this.perObject_vo.getString("sp_flag").equals("")&&!this.perObject_vo.getString("sp_flag").equals("01"))
				{
					String temp = this.userView.getUnitIdByBusi("5"); // 操作单位 5:
																		// 绩效管理
																		// 6：培训管理
																		// 7：招聘管理
					String[] arr = temp.split("`");
					StringBuffer t_buf = new StringBuffer();
					for (int i = 0; i < arr.length; i++) {
						if (arr[i] == null || "".equals(arr[i]))
							continue;
						t_buf.append(" or score_org like '"
								+ arr[i].substring(2) + "%'");
					}
					t_buf.append(" or score_org is null or score_org =''");
					sql.append(" and (" + t_buf.toString().substring(3) + ")");
				} else {
					sql.append(" and (UPPER(score_org)='"
							+ this.userView.getUserOrgId()
							+ "' or UPPER(score_org)='"
							+ this.userView.getUserDeptId() + "'");
					sql.append(" or score_org is null or score_org ='')");
				}
			}

			sql.append(" order by item_id asc,seq asc");
			if ("True"
					.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew"))) {
				if (Sql_switcher.searchDbServer() == Constant.ORACEL)
					sql.append(",f_p0400 desc ");
				else
					sql.append(",f_p0400");
				sql.append(",chg_type desc");
			}
			this.tempSQL = sql.toString();
			RowSet rowSet = dao.search(sql.toString());
			LazyDynaBean abean = null;
			ArrayList fieldList = DataDictionary.getFieldList("P04",
					Constant.USED_FIELD_SET);
			SimpleDateFormat fm = new SimpleDateFormat("yyyy-MM-dd");
			if (this.planParam.get("EvalCanNewPoint") != null
					&& "true"
							.equalsIgnoreCase((String) this.planParam.get("EvalCanNewPoint")))
				this.itemtypeMap = new HashMap();
			while (rowSet.next()) {
				abean = new LazyDynaBean();
				abean.set("p0400", rowSet.getString("p0400"));
				abean.set(
						"b0110",
						rowSet.getString("b0110") != null ? rowSet
								.getString("b0110") : "");
				abean.set(
						"e0122",
						rowSet.getString("e0122") != null ? rowSet
								.getString("e0122") : "");
				abean.set(
						"e01a1",
						rowSet.getString("e01a1") != null ? rowSet
								.getString("e01a1") : "");
				abean.set(
						"nbase",
						rowSet.getString("nbase") != null ? rowSet
								.getString("nbase") : "");
				abean.set(
						"a0100",
						rowSet.getString("a0100") != null ? rowSet
								.getString("a0100") : "");
				abean.set(
						"a0101",
						rowSet.getString("a0101") != null ? rowSet
								.getString("a0101") : "");
				abean.set("p0401", rowSet.getString("p0401"));
				abean.set("p0407", Sql_switcher.readMemo(rowSet, "p0407"));
				String summarizes = Sql_switcher.readMemo(rowSet, "summarizes");
				if (ParseXmlBo.hasRecord(summarizes))
					abean.set("hasReview", "1");
				else
					abean.set("hasReview", "0");
				abean.set("p0413", StringUtils.isEmpty(moveZero(rowSet.getString("p0413")))?"0":moveZero(rowSet.getString("p0413")));
				abean.set("p0415", moveZero(rowSet.getString("p0415")));

				abean.set(
						"p0421",
						rowSet.getString("p0421") != null ? rowSet
								.getString("p0421") : "");
				abean.set(
						"p0423",
						rowSet.getString("p0423") != null ? rowSet
								.getString("p0423") : "");
				abean.set(
						"p0424",
						rowSet.getString("p0424") != null ? rowSet
								.getString("p0424") : "");
				abean.set("p0425", Sql_switcher.readMemo(rowSet, "p0425"));
				abean.set(
						"chg_type",
						rowSet.getString("chg_type") != null ? rowSet
								.getString("chg_type") : "0");

				abean.set("plan_id", rowSet.getString("plan_id"));
				abean.set("item_id", rowSet.getString("item_id"));
				abean.set("fromflag", rowSet.getString("fromflag"));
				abean.set(
						"state",
						rowSet.getString("state") != null ? rowSet
								.getString("state") : "0");
				abean.set(
						"itemtype",
						rowSet.getString("itemtype") != null ? rowSet
								.getString("itemtype") : "0");
				if (this.itemtypeMap != null) {
					this.itemtypeMap.put(
							rowSet.getString("p0400"),
							rowSet.getString("itemtype") == null ? "0" : rowSet
									.getString("itemtype"));
				}
				abean.set("processing_state",
						rowSet.getString("processing_state") == null ? "0"
								: rowSet.getString("processing_state"));
				if ("1".equals((String) abean.get("processing_state")))
					processing_state_all = "1";
				abean.set(
						"seq",
						rowSet.getString("seq") != null ? rowSet
								.getString("seq") : "0");
				for (int i = 0; i < fieldList.size(); i++) {
					FieldItem item = (FieldItem) fieldList.get(i);
					String itemid = item.getItemid();
					String str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0400/ITEM_ID/FROMFLAG/P0401/P0407/P0413/P0415/PLAN_ID/STATE/";

					if (str.indexOf("/" + itemid.toUpperCase() + "/") != -1)
						continue;
					if ("score_org".equalsIgnoreCase(itemid)) {
						String value = rowSet.getString(itemid);
						if (value == null || "".equals(value))
							abean.set(itemid, "");
						else {
							if (AdminCode.getCodeName("UN", value) != null
									&& AdminCode.getCodeName("UN", value)
											.length() > 0) {
								abean.set(itemid,
										AdminCode.getCodeName("UN", value));
							} else
								abean.set(itemid,
										AdminCode.getCodeName("UM", value));

						}
					} else if ("D".equalsIgnoreCase(item.getItemtype())) {
						if (rowSet.getDate(itemid) != null)
							abean.set(itemid, fm.format(rowSet.getDate(itemid)));
						else
							abean.set(itemid, "");
					} else if ("M".equalsIgnoreCase(item.getItemtype()))
						abean.set(itemid, Sql_switcher.readMemo(rowSet, itemid)
								.replaceAll("\r\n", "<br>"));
					else {
						if (item.getCodesetid() == null
								|| "0".equals(item.getCodesetid())
								|| item.getCodesetid().trim().length() == 0)
							abean.set(
									itemid,
									rowSet.getString(itemid) != null ? rowSet
											.getString(itemid) : "");
						else {
							if (rowSet.getString(itemid) == null)
								abean.set(itemid, "");
							else {
								abean.set(
										itemid,
										AdminCode.getCodeName(
												item.getCodesetid(),
												rowSet.getString(itemid)));

							}
						}
					}
				}
				tempMap.put(rowSet.getString("p0400"), abean);
				list.add(abean);
			}

			if (this.p04Map.size() == 0)
				this.p04Map = tempMap;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * ############################导出当前目标卡模板 结束
	 * ##################################
	 **/

	public ArrayList getAppealObjectInfoBySeq(String planid, String object_id,
			String mainbody_id) {
		ArrayList list = new ArrayList();
		RowSet rs = null;
		try {
			StringBuffer buf = new StringBuffer("");
			ContentDAO dao = new ContentDAO(this.conn);
			String column = "";
			if (Sql_switcher.searchDbServer() == Constant.ORACEL)
				column = "level_o";
			else
				column = "level";
			if (this.plan_vo.getInt("object_type") == 1
					|| this.plan_vo.getInt("object_type") == 3
					|| this.plan_vo.getInt("object_type") == 4) {
				this.un_functionaryBean = this.getMainbodyBean(
						String.valueOf(this.plan_vo.getInt("plan_id")),
						object_id);
				if (this.un_functionaryBean != null)
					this.un_functionary = (String) this.un_functionaryBean
							.get("mainbody_id");
			}
			if (object_id.equals(this.userView.getA0100())
					|| this.un_functionary.equalsIgnoreCase(this.userView
							.getA0100())) {
				buf.append(" select b0110,e0122,e01a1,a0101,per_mainbody.sp_seq,mainbody_id,pmbs.name,pmbs.body_id,pmbs."
						+ column
						+ " from per_mainbody left join per_mainbodyset pmbs on per_mainbody.body_id=pmbs.body_id ");
				buf.append(" where plan_id=" + planid);
				buf.append(" and object_id='" + object_id + "' ");
				buf.append(" and per_mainbody.sp_seq=(select min(sp_seq) from per_mainbody ");
				buf.append(" where plan_id=" + planid + " and object_id='"
						+ object_id + "' and mainbody_id<>'"
						+ this.userView.getA0100() + "') ");
				buf.append(" order by per_mainbody.sp_seq");
			} else {
				buf.append(" select b0110,e0122,e01a1,a0101,per_mainbody.sp_seq,mainbody_id,pmbs.name,pmbs.body_id,pmbs."
						+ column
						+ " from per_mainbody left join per_mainbodyset pmbs on per_mainbody.body_id=pmbs.body_id ");
				buf.append(" where plan_id=" + planid);
				buf.append(" and object_id='" + object_id + "' ");
				buf.append(" and per_mainbody.sp_seq>(select sp_seq from per_mainbody ");
				buf.append(" where plan_id=" + planid + " and object_id='"
						+ object_id + "' and mainbody_id='" + mainbody_id
						+ "')");
				//buf.append(" and mainbody_id<>'" + object_id + "'");
				buf.append(" and pmbs."+column+"<>5");
				buf.append(" order by per_mainbody.sp_seq ");
			}
			rs = dao.search(buf.toString());
			int i = 0;
			int seq = 0;
			while (rs.next()) {
				if (i == 0) {
					seq = rs.getInt("sp_seq");
				}
				if (seq != rs.getInt("sp_seq"))
					break;
				String b0110 = rs.getString("b0110") != null ? rs
						.getString("b0110") : "";
				String e0122 = rs.getString("e0122") != null ? rs
						.getString("e0122") : "";
				String e01a1 = rs.getString("e01a1") != null ? rs
						.getString("e01a1") : "";
				String a0101 = rs.getString("a0101") != null ? rs
						.getString("a0101") : "";
				if (b0110.length() != 0)
					b0110 = AdminCode.getCodeName("UN", b0110);
				if (e0122.length() != 0)
					e0122 = AdminCode.getCodeName("UM", e0122);
				if (e01a1.length() != 0)
					e01a1 = AdminCode.getCodeName("@K", e01a1);
				String name = rs.getString("name");
				if (this.plan_vo.getInt("plan_type") == 0)
					a0101 = name;
				String body_id = rs.getString(column);
				String amainbody_id = rs.getString("mainbody_id");
				list.add(b0110 + "^" + e0122 + "^" + e01a1 + "^" + a0101 + "^"
						+ amainbody_id + "/" + body_id);
				i++;
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return list;
	}

	/**
	 * 
	 * @param body_id
	 * @param objectid
	 * @param planid
	 * @param mainbody_id
	 * @param flag
	 *            0考核关系 1：汇报关系
	 * @return
	 */
	public ArrayList getAppealObjectInfo(String body_id, String dbname,
			String objectid, String planid, String posID, String flag,
			String object_id) {
		ArrayList list = new ArrayList();
		try {
			ContentDAO dao = new ContentDAO(this.conn);

			String sql = "select kh_relations from per_object where plan_id="
					+ planid + " and object_id='" + object_id + "'";
			RowSet rowSet = dao.search(sql);
			int kh_relations = 0;
			if (rowSet.next()) {
				if (rowSet.getString(1) != null)
					kh_relations = rowSet.getInt(1);
			}

			if (kh_relations == 1) {
				sql = "select pmb.b0110,pmb.e0122,pmb.e01a1,pmb.mainbody_id,pmb.a0101,"
						+ Sql_switcher.isnull("pmb.sp_seq", "10000")
						+ "  sp_seq ,pmbs.name from per_mainbody pmb,per_mainbodyset pmbs where pmb.body_id=pmbs.body_id and pmb.plan_id="
						+ planid + " and ";
				if (Sql_switcher.searchDbServer() == Constant.ORACEL)
					sql += " level_o";
				else
					sql += " level ";
				sql += "=" + body_id + "  and pmb.object_id='" + object_id
						+ "' order by  "
						+ Sql_switcher.isnull("pmb.seq", "10000");
				rowSet = dao.search(sql);
				HashMap seqMap = new HashMap();
				int min_seq = 1000000;
				while (rowSet.next()) {
					String b0110 = rowSet.getString("b0110") != null ? rowSet
							.getString("b0110") : "";
					String e0122 = rowSet.getString("e0122") != null ? rowSet
							.getString("e0122") : "";
					String e01a1 = rowSet.getString("e01a1") != null ? rowSet
							.getString("e01a1") : "";
					String a0101 = rowSet.getString("a0101") != null ? rowSet
							.getString("a0101") : "";
					String name = rowSet.getString("name") != null ? rowSet
							.getString("name") : "";
					String seq = rowSet.getString("sp_seq") != null ? rowSet
							.getString("sp_seq") : "0";

					if (seq.length() > 0) {
						if (Integer.parseInt(seq) < min_seq)
							min_seq = Integer.parseInt(seq);

						if (seqMap.get(seq) != null)
							seqMap.put(seq, String.valueOf(Integer
									.parseInt((String) seqMap.get(seq)) + 1));
						else
							seqMap.put(seq, "1");

					}

					String amainbody_id = rowSet.getString("mainbody_id");
					if (b0110.length() != 0)
						b0110 = AdminCode.getCodeName("UN", b0110);
					if (e0122.length() != 0)
						e0122 = AdminCode.getCodeName("UM", e0122);
					if (e01a1.length() != 0)
						e01a1 = AdminCode.getCodeName("@K", e01a1);

					if (this.plan_vo.getInt("plan_type") == 0)
						a0101 = name;

					list.add(b0110 + "^" + e0122 + "^" + e01a1 + "^" + a0101
							+ "^" + amainbody_id + "/" + body_id);
				}

				// 如果 排名最前的只有1位，那就默认这一位，如果有多位，那就显示多位 （普天）
				if (list.size() > 1 && seqMap.size() > 0) {
					if (seqMap.get(String.valueOf(min_seq)) != null) {
						ArrayList list0 = new ArrayList();
						if ("1"
								.equals((String) seqMap.get(String.valueOf(min_seq))))
							list0.add((String) list.get(0));
						else {
							int num = Integer.parseInt((String) seqMap
									.get(String.valueOf(min_seq)));
							for (int n = 0; n < num; n++) {
								list0.add((String) list.get(n));
							}
						}
						list = list0;
					}
				}

			} else {
				if ("0".equals(flag))// 标准考核关系
				{

					// else //if(list.size()==0)
					{
						sql = "select pmb.*,pmbs.name from per_mainbody_std pmb,per_mainbodyset pmbs where pmb.body_id=pmbs.body_id  and ";
						if (Sql_switcher.searchDbServer() == Constant.ORACEL)
							sql += " level_o";
						else
							sql += " level ";
						sql += "=" + body_id + "  and pmb.object_id='"
								+ objectid + "'";
						sql += " and pmb.body_id in (select body_id from per_plan_body where plan_id="
								+ planid + ")";// 根据考核计划定义的考核主题类别来找报批的主体
						rowSet = dao.search(sql);
						while (rowSet.next()) {
							String b0110 = rowSet.getString("b0110") != null ? rowSet
									.getString("b0110") : "";
							String e0122 = rowSet.getString("e0122") != null ? rowSet
									.getString("e0122") : "";
							String e01a1 = rowSet.getString("e01a1") != null ? rowSet
									.getString("e01a1") : "";
							String a0101 = rowSet.getString("a0101") != null ? rowSet
									.getString("a0101") : "";
							String name = rowSet.getString("name") != null ? rowSet
									.getString("name") : "";
							String amainbody_id = rowSet
									.getString("mainbody_id");
							if (b0110.length() != 0)
								b0110 = AdminCode.getCodeName("UN", b0110);
							if (e0122.length() != 0)
								e0122 = AdminCode.getCodeName("UM", e0122);
							if (e01a1.length() != 0)
								e01a1 = AdminCode.getCodeName("@K", e01a1);

							if (this.plan_vo.getInt("plan_type") == 0)
								a0101 = name;
							list.add(b0110 + "^" + e0122 + "^" + e01a1 + "^"
									+ a0101 + "^" + amainbody_id + "/"
									+ body_id);
						}

					}
				} else {
					RenderRelationBo bo = new RenderRelationBo(this.conn);
					ArrayList dbList = new ArrayList();
					dbList.add(dbname);
					if (posID != null && posID.length() > 0) {
						HashMap map = bo.getBodyInfo2(posID, dbList, 1);
						Set set = map.keySet();
						for (Iterator t = set.iterator(); t.hasNext();) {
							String key = (String) t.next();
							LazyDynaBean abean = (LazyDynaBean) map.get(key);

							String a0100 = (String) abean.get("a0100");
							String b0110 = (String) abean.get("b0110");
							String a0101 = (String) abean.get("a0101");
							String e0122 = (String) abean.get("e0122");
							String e01a1 = (String) abean.get("e01a1");
							if (b0110.length() != 0)
								b0110 = AdminCode.getCodeName("UN", b0110);
							if (e0122.length() != 0)
								e0122 = AdminCode.getCodeName("UM", e0122);
							if (e01a1.length() != 0)
								e01a1 = AdminCode.getCodeName("@K", e01a1);
							if (this.plan_vo.getInt("plan_type") == 0)
								a0101 = "上级";
							list.add(b0110 + "^" + e0122 + "^" + e01a1 + "^"
									+ a0101 + "^" + a0100 + "/" + body_id);
						}

					}
				}
			}
			rowSet.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return list;
	}

	// ////////////////---------------------------------
	/*
	 * public ObjectCardBo(Connection con,UserView userView) { this.conn=con;
	 * this.userView=userView; }
	 * 
	 * 
	 * public ObjectCardBo(Connection con) { this.conn=con; }
	 * 
	 * public ObjectCardBo(Connection con,String plan_id) { this.conn=con;
	 * this.plan_vo=getPlanVo(plan_id); LoadXml loadxml=null;
	 * if(BatchGradeBo.getPlanLoadXmlMap
	 * ().get(String.valueOf(this.plan_vo.getInt("plan_id")))==null) {
	 * loadxml=new
	 * LoadXml(this.conn,String.valueOf(this.plan_vo.getInt("plan_id")));
	 * BatchGradeBo
	 * .getPlanLoadXmlMap().put(String.valueOf(this.plan_vo.getInt("plan_id"
	 * )),loadxml); } else
	 * loadxml=(LoadXml)BatchGradeBo.getPlanLoadXmlMap().get(
	 * String.valueOf(this.plan_vo.getInt("plan_id")));
	 * this.planParam=loadxml.getDegreeWhole(); }
	 */

	public ObjectCardBo(Connection con, UserView userView, String plan_id) {
		this.conn = con;
		this.userView = userView;
		this.plan_vo = getPlanVo(plan_id);
		this.object_type = String.valueOf(this.plan_vo.getInt("object_type"));
        init();
		if (this.plan_vo.getInt("object_type") == 1
				|| this.plan_vo.getInt("object_type") == 3
				|| this.plan_vo.getInt("object_type") == 4) {
			this.un_functionaryBean = this.getMainbodyBean(
					String.valueOf(this.plan_vo.getInt("plan_id")), object_id);
			if (this.un_functionaryBean != null)
				this.un_functionary = (String) this.un_functionaryBean
						.get("mainbody_id");
		}

		LoadXml loadxml = null;
		if (BatchGradeBo.getPlanLoadXmlMap().get(
				String.valueOf(this.plan_vo.getInt("plan_id"))) == null) {
			loadxml = new LoadXml(this.conn, String.valueOf(this.plan_vo
					.getInt("plan_id")));
			BatchGradeBo.getPlanLoadXmlMap().put(
					String.valueOf(this.plan_vo.getInt("plan_id")), loadxml);
		} else
			loadxml = (LoadXml) BatchGradeBo.getPlanLoadXmlMap().get(
					String.valueOf(this.plan_vo.getInt("plan_id")));
		this.planParam = loadxml.getDegreeWhole();

		AnalysePlanParameterBo bo = new AnalysePlanParameterBo(this.conn);
		Hashtable ht_table = bo.analyseParameterXml();
		if (ht_table != null) {
			if (ht_table.get("creatCard_mail") != null)
				this.creatCard_mail = (String) ht_table.get("creatCard_mail");
			if (ht_table.get("creatCard_mail_template") != null)
				this.creatCard_mail_template = (String) ht_table
						.get("creatCard_mail_template");
			if (ht_table.get("evaluateCard_mail") != null)
				this.evaluateCard_mail = (String) ht_table
						.get("evaluateCard_mail");
			if (ht_table.get("evaluateCard_mail_template") != null)
				this.evaluateCard_mail_template = (String) ht_table
						.get("evaluateCard_mail_template");
			if (ht_table.get("TargetTraceItem") != null)
				this.TargetTraceItem = (String) ht_table.get("TargetTraceItem");
			if (ht_table.get("TargetDefineItem") != null
					&& ((String) ht_table.get("TargetDefineItem")).trim()
							.length() > 0)
				this.TargetDefineItem = (","
						+ (String) ht_table.get("TargetDefineItem") + ",")
						.toUpperCase();

			if (ht_table.get("DescriptionItem") != null)
				this.point_explain_item = (String) ht_table
						.get("DescriptionItem");
			if (ht_table.get("PrincipleItem") != null)
				this.point_evaluate_item = (String) ht_table
						.get("PrincipleItem");

			if (this.TargetTraceItem != null
					&& this.TargetTraceItem.trim().length() > 0)
				AllowLeaderTrace = (String) ht_table.get("AllowLeaderTrace");
			else
				AllowLeaderTrace = "false";
			if (ht_table.get("departDutySet") != null)
				this.DeptDutySubSet = (String) ht_table.get("departDutySet");
			if (ht_table.get("projectField") != null)
				this.DeptDutyTargetItem = (String) ht_table.get("projectField");
			if (ht_table.get("validDateField") != null)
				this.DeptDutyDataItem = (String) ht_table.get("validDateField");
			if (ht_table.get("departTextValue") != null)
				this.DeptDutyTextValue = (String) ht_table
						.get("departTextValue");
		}

		if (this.TargetTraceItem == null)
			this.TargetTraceItem = "";

		if (this.planParam.get("TargetTraceEnabled") != null
				&& "True"
						.equalsIgnoreCase((String) this.planParam.get("TargetTraceEnabled"))) {
			if (planParam.get("TargetDefineItem") != null
					&& ((String) planParam.get("TargetDefineItem")).trim()
							.length() > 0)
				TargetDefineItem = (","
						+ ((String) planParam.get("TargetDefineItem")).trim() + ",")
						.toUpperCase(); // 目标卡指标
			if (this.planParam.get("TargetTraceItem") != null
					&& ((String) this.planParam.get("TargetTraceItem")).trim()
							.length() > 0) {
				this.TargetTraceItem = (String) this.planParam
						.get("TargetTraceItem");
				AllowLeaderTrace = (String) this.planParam
						.get("AllowLeaderTrace");
			} else {
				this.TargetTraceItem = "";
				AllowLeaderTrace = "false";
			}
		}

		if (this.TargetTraceItem.length() > 0) {
			String[] temps = this.TargetTraceItem.split(",");
			for (int i = 0; i < temps.length; i++) {
				if (temps[i] != null && temps[i].length() > 0)
					this.hiden_str += temps[i].toUpperCase() + "/";
			}
		}

		if (this.planParam.get("TargetTraceEnabled") != null
				&& "true"
						.equalsIgnoreCase((String) this.planParam.get("TargetTraceEnabled"))) {
			// if(this.TargetCollectItem.trim().length()>0)
			if (this.planParam.get("TargetCollectItem") != null
					&& ((String) this.planParam.get("TargetCollectItem"))
							.trim().length() > 0) {
				this.TargetCollectItem = ((String) this.planParam
						.get("TargetCollectItem"));
				String[] temps = ((String) this.planParam
						.get("TargetCollectItem")).split(",");
				for (int i = 0; i < temps.length; i++) {
					if (temps[i] != null && temps[i].length() > 0)
						this.TargetCollectItem_str += temps[i].toUpperCase()
								+ "/";
				}
			}
		}
		if (this.planParam.get("TargetTraceEnabled") != null
				&& "false"
						.equalsIgnoreCase((String) this.planParam.get("TargetTraceEnabled"))) {
			if (ht_table != null
					&& ht_table.get("TargetCollectItem") != null
					&& ((String) ht_table.get("TargetCollectItem")).trim()
							.length() > 0) {
				this.TargetCollectItem = ((String) ht_table
						.get("TargetCollectItem"));
				String[] temps = ((String) ht_table.get("TargetCollectItem"))
						.split(",");
				for (int i = 0; i < temps.length; i++) {
					if (temps[i] != null && temps[i].length() > 0)
						this.TargetCollectItem_str += temps[i].toUpperCase()
								+ "/";
				}
			}

		}

	}

	public ObjectCardBo(String plan_id, Connection conn, String object_id) {
		this.conn = conn;
		this.userView = userView;
		this.object_id = object_id;
		this.plan_vo = getPlanVo(plan_id);
		if (this.plan_vo.getInt("object_type") == 1
				|| this.plan_vo.getInt("object_type") == 3
				|| this.plan_vo.getInt("object_type") == 4) {
			this.un_functionaryBean = this.getMainbodyBean(
					String.valueOf(this.plan_vo.getInt("plan_id")), object_id);
			if (this.un_functionaryBean != null)
				this.un_functionary = (String) this.un_functionaryBean
						.get("mainbody_id");
		}
		LoadXml loadxml = null;
		if (BatchGradeBo.getPlanLoadXmlMap().get(
				String.valueOf(this.plan_vo.getInt("plan_id"))) == null) {
			loadxml = new LoadXml(this.conn, String.valueOf(this.plan_vo
					.getInt("plan_id")));
			BatchGradeBo.getPlanLoadXmlMap().put(
					String.valueOf(this.plan_vo.getInt("plan_id")), loadxml);
		} else
			loadxml = (LoadXml) BatchGradeBo.getPlanLoadXmlMap().get(
					String.valueOf(this.plan_vo.getInt("plan_id")));
		this.planParam = loadxml.getDegreeWhole();
	}

	public ObjectCardBo(Connection con, String planid, String object_id,
			UserView userView, int opt, String model) {
		this.conn = con;
		this.plan_vo = getPlanVo(planid);
		LoadXml loadxml = new LoadXml(this.conn, String.valueOf(this.plan_vo
				.getInt("plan_id")));
		this.planParam = loadxml.getDegreeWhole();
		this.plan_id=planid;
		this.template_vo = get_TemplateVo();
		this.object_id = object_id;
		this.userView = userView;
		this.isAdjustPoint = getIsAdjustPoint();
		if (this.plan_vo.getInt("object_type") == 1) {
			this.objectSpFlag = "03";
			try {
				ContentDAO dao = new ContentDAO(this.conn);
				RowSet rowSet = dao
						.search("select id,sp_flag from per_object where object_id='"
								+ object_id + "'  and plan_id=" + planid);
				if (rowSet.next()) {
					this.perObject_vo = new RecordVo("per_object");
					this.perObject_vo.setInt("id", rowSet.getInt("id"));
					this.perObject_vo = dao.findByPrimaryKey(this.perObject_vo);
				}

			} catch (Exception e) {

			}
		} else {
			this.p04List = getP04List();
			this.objectSpFlag = getObjectSpFlag(object_id, planid);

		}
		this.opt = opt;
		this.model = model;
		// if(this.model!=null&&this.model.equals("5"))
		// this.td_width=90;

		if (opt != 4) {
			if (opt == 1 && model != null && "2".equals(model)
					&& !"01".equals(this.objectSpFlag)
					&& !"07".equals(this.objectSpFlag))
				this.opt = 2;
			if (opt != 3 & "03".equals(this.objectSpFlag)
					|| "06".equals(this.objectSpFlag))
				this.opt = 2;
			if (opt == 3 && "4".equals(model)
					&& "2".equals(getMainBodyStatus())) {
				this.opt = 2;
			}
		}

		this.mainbodyBean = getMainbodyBean();
		if (this.plan_vo.getInt("object_type") == 1
				|| this.plan_vo.getInt("object_type") == 3
				|| this.plan_vo.getInt("object_type") == 4) {
			this.un_functionaryBean = this.getMainbodyBean(
					String.valueOf(this.plan_vo.getInt("plan_id")), object_id);
			if (this.un_functionaryBean != null)
				this.un_functionary = (String) this.un_functionaryBean
						.get("mainbody_id");
		}
		this.selfEvaluationStatus = getSelfEvaluateStatus();
		this.isSubScore = getIsSubScore();
		if ((this.opt == 3 || (this.opt == 2 && "03".equals(this.objectSpFlag)))
				&& ("true"
						.equalsIgnoreCase((String) this.planParam.get("isShowSubmittedScores"))
						|| "true"
								.equalsIgnoreCase((String) this.planParam.get("WholeEval")) || "true".equalsIgnoreCase((String) this.planParam
						.get("NodeKnowDegree"))))
			this.isAddExtendRow = "1";
		this.perPointMap = getPerPointMap(object_id,
				this.plan_vo.getInt("object_type"), planid);
		AnalysePlanParameterBo bo = new AnalysePlanParameterBo(this.conn);
		Hashtable ht_table = bo.analyseParameterXml();
		if (ht_table != null) {
			if (ht_table.get("creatCard_mail") != null)
				this.creatCard_mail = (String) ht_table.get("creatCard_mail");
			if (ht_table.get("creatCard_mail_template") != null)
				this.creatCard_mail_template = (String) ht_table
						.get("creatCard_mail_template");
			if (ht_table.get("evaluateCard_mail") != null)
				this.evaluateCard_mail = (String) ht_table
						.get("evaluateCard_mail");
			if (ht_table.get("evaluateCard_mail_template") != null)
				this.evaluateCard_mail_template = (String) ht_table
						.get("evaluateCard_mail_template");
			if (ht_table.get("TargetTraceItem") != null)
				this.TargetTraceItem = (String) ht_table.get("TargetTraceItem");
			if (ht_table.get("TargetDefineItem") != null
					&& ((String) ht_table.get("TargetDefineItem")).trim()
							.length() > 0)
				this.TargetDefineItem = (","
						+ (String) ht_table.get("TargetDefineItem") + ",")
						.toUpperCase();

			if (this.TargetTraceItem != null
					&& this.TargetTraceItem.trim().length() > 0)
				AllowLeaderTrace = (String) ht_table.get("AllowLeaderTrace");
			else
				AllowLeaderTrace = "false";
		}
		this.scoreflag = (String) planParam.get("scoreflag"); // =2混合，=1标度,=4加扣分
		/*
		 * this.TargetTraceItem=(String)ht_table.get("TargetTraceItem");
		 * this.creatCard_mail=(String)ht_table.get("creatCard_mail");
		 * this.creatCard_mail_template
		 * =(String)ht_table.get("creatCard_mail_template");
		 * this.evaluateCard_mail=(String)ht_table.get("evaluateCard_mail");
		 * this.evaluateCard_mail_template=(String)ht_table.get(
		 * "evaluateCard_mail_template");
		 */
		if (this.TargetTraceItem == null)
			this.TargetTraceItem = "";

		if (this.planParam.get("TargetTraceEnabled") != null
				&& "True"
						.equalsIgnoreCase((String) this.planParam.get("TargetTraceEnabled"))) {
			if (planParam.get("TargetDefineItem") != null
					&& ((String) planParam.get("TargetDefineItem")).trim()
							.length() > 0)
				TargetDefineItem = (","
						+ ((String) planParam.get("TargetDefineItem")).trim() + ",")
						.toUpperCase(); // 目标卡指标
			if (this.planParam.get("TargetTraceItem") != null
					&& ((String) this.planParam.get("TargetTraceItem")).trim()
							.length() > 0) {
				this.TargetTraceItem = (String) this.planParam
						.get("TargetTraceItem");
				AllowLeaderTrace = (String) this.planParam
						.get("AllowLeaderTrace");
			} else {
				this.TargetTraceItem = "";
				AllowLeaderTrace = "false";
			}
		}

		this.perPointScoreMap = getPerPointScoreMap();

		if ("1".equals(this.template_vo.getString("status"))
				&& this.planParam.get("VerifySameScore") != null
				&& "true"
						.equalsIgnoreCase((String) this.planParam.get("VerifySameScore")))
			this.VerifySameScore = true;

		if ("1".equals(this.template_vo.getString("status"))
				&& this.planParam.get("ScoreFromItem") != null
				&& "true"
						.equalsIgnoreCase((String) this.planParam.get("ScoreFromItem")))
			this.ScoreFromItem = true;
		if (this.TargetTraceItem.length() > 0) {
			String[] temps = this.TargetTraceItem.split(",");
			for (int i = 0; i < temps.length; i++) {
				if (temps[i] != null && temps[i].length() > 0)
					this.hiden_str += temps[i].toUpperCase() + "/";
			}
		}

		if (this.planParam.get("TargetTraceEnabled") != null
				&& !""
						.equals((String) this.planParam.get("TargetTraceEnabled")))
			this.TargetTraceEnabled = (String) this.planParam
					.get("TargetTraceEnabled");
		if (this.planParam.get("TargetTraceEnabled") != null
				&& "true"
						.equalsIgnoreCase((String) this.planParam.get("TargetTraceEnabled"))) {
			// if(this.TargetCollectItem.trim().length()>0)
			if (this.planParam.get("TargetCollectItem") != null
					&& ((String) this.planParam.get("TargetCollectItem"))
							.trim().length() > 0) {
				this.TargetCollectItem = ((String) this.planParam
						.get("TargetCollectItem"));
				String[] temps = ((String) this.planParam
						.get("TargetCollectItem")).split(",");
				for (int i = 0; i < temps.length; i++) {
					if (temps[i] != null && temps[i].length() > 0)
						this.TargetCollectItem_str += temps[i].toUpperCase()
								+ "/";
				}
			}
		}

		if (this.planParam.get("TargetTraceEnabled") != null
				&& "false"
						.equalsIgnoreCase((String) this.planParam.get("TargetTraceEnabled"))) {
			if (ht_table != null
					&& ht_table.get("TargetCollectItem") != null
					&& ((String) ht_table.get("TargetCollectItem")).trim()
							.length() > 0) {
				this.TargetCollectItem = ((String) ht_table
						.get("TargetCollectItem"));
				String[] temps = ((String) ht_table.get("TargetCollectItem"))
						.split(",");
				for (int i = 0; i < temps.length; i++) {
					if (temps[i] != null && temps[i].length() > 0)
						this.TargetCollectItem_str += temps[i].toUpperCase()
								+ "/";
				}
			}
		}

		if (isAdjustPoint || "03".equals(this.objectSpFlag)) {

		} else {
			if (this.TargetTraceItem.length() > 0) {
				String[] temps = this.TargetTraceItem.split(",");
				for (int i = 0; i < temps.length; i++) {
					if (temps[i] != null && temps[i].length() > 0)
						this.hiden_str += temps[i].toUpperCase() + "/";
				}
			}
		}

	}

	public static void main(String[] args) {

		System.out.println(PubFunc.convert64BaseToString("bGl1dGluZywxMQ=="));

		System.out.println(PubFunc.convertTo64Base("liuting,3072"));
	}

	/**
	 * 取得当前团队计划的负责人员
	 * 
	 * @param plan_id
	 * @param object_id
	 * @return
	 */
	public LazyDynaBean getMainbodyBean(String plan_id, String object_id) {
		LazyDynaBean abean = null;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rowSet = dao
					.search("select * from per_mainbody where plan_id="
							+ plan_id + " and object_id='" + object_id
							+ "' and body_id=-1");
			if (rowSet.next()) {
				abean = new LazyDynaBean();
				abean.set("id", rowSet.getString("id"));
				abean.set("body_id", rowSet.getString("body_id"));
				abean.set("object_id", rowSet.getString("object_id"));
				abean.set("mainbody_id", rowSet.getString("mainbody_id"));
				abean.set(
						"status",
						rowSet.getString("status") != null ? rowSet
								.getString("status") : "");
				abean.set("a0101", rowSet.getString("a0101"));
				abean.set(
						"know_id",
						rowSet.getString("know_id") != null ? rowSet
								.getString("know_id") : "");
				abean.set(
						"whole_grade_id",
						rowSet.getString("whole_grade_id") != null ? rowSet
								.getString("whole_grade_id") : "");
				abean.set(
						"wholeEvalScore",
						rowSet.getString("whole_score") == null ? "0" : rowSet
								.getString("whole_score"));
			}
			rowSet.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return abean;
	}

	/**
	 * 取得考核对象的业绩指标分值 (同时包括统一打分)
	 * 
	 * @return
	 */
	public HashMap getPerPointScoreMap() {
		HashMap map = new HashMap();
		try {
			DbWizard dbWizard = new DbWizard(this.conn);
			ContentDAO dao = new ContentDAO(this.conn);
			if (dbWizard
					.isExistTable(
							"per_gather_score_"
									+ this.plan_vo.getInt("plan_id"), false)) {

				RowSet rowSet = dao.search("select * from per_gather_score_"
						+ this.plan_vo.getInt("plan_id") + " where 1=2");
				ResultSetMetaData meta = rowSet.getMetaData();
				String sql = "select pgs.* from  per_gather_score_"
						+ this.plan_vo.getInt("plan_id")
						+ " pgs,per_gather_"
						+ this.plan_vo.getInt("plan_id")
						+ " pg where pg.gather_id=pgs.gather_id and pg.object_id='"
						+ this.object_id + "'";
				rowSet = dao.search(sql);
				if (rowSet.next()) {
					for (int i = 0; i < meta.getColumnCount(); i++) {
						String columnName = meta.getColumnName(i + 1);
						String temp = columnName
								.substring(columnName.length() - 2);
						if ("_S".equalsIgnoreCase(temp)) {
							String temp2 = columnName.substring(2);
							String temp3 = temp2.substring(0,
									temp2.length() - 2);
							map.put(temp3.toLowerCase(),
									rowSet.getString(columnName) != null ? rowSet
											.getString(columnName) : "");
						}
					}

				}
				rowSet.close();
			}
			/** per_result_中的值，已经是计算结果（乘过权重的），显示目标卡和计算的时候，都不对了，2012-08-04 lizw */
			/*
			 * //考核评估中 共享指标 的定量统一打分 LazyDynaBean point_bean=null;
			 * if(dbWizard.isExistTable
			 * ("per_result_"+this.plan_vo.getInt("plan_id"),false)) { RowSet
			 * rowSet
			 * =dao.search("select * from per_result_"+this.plan_vo.getInt(
			 * "plan_id")+" where object_id='"+this.object_id+"'");
			 * if(rowSet.next()) { ResultSetMetaData mt=rowSet.getMetaData();
			 * HashMap amap=new HashMap(); for(int
			 * j=0;j<mt.getColumnCount();j++)
			 * amap.put(mt.getColumnName(j+1).toLowerCase(),"1");
			 * 
			 * 
			 * for(int i=0;i<this.p04List.size();i++) {
			 * point_bean=(LazyDynaBean)this.p04List.get(i); String
			 * fromflag=(String)point_bean.get("fromflag"); String
			 * p0400=(String)point_bean.get("p0400"); String
			 * p0401=(String)point_bean.get("p0401");
			 * 
			 * if(fromflag.equals("2")) //来源KPI指标 { LazyDynaBean
			 * pointBean=(LazyDynaBean
			 * )this.perPointMap.get(p0401.toLowerCase());
			 * 
			 * String point_kind="0"; String status="0"; if(pointBean!=null) {
			 * point_kind=(String)pointBean.get("pointkind");
			 * status=(String)pointBean.get("status"); }
			 * 
			 * //统一打分指标 if(point_kind.equals("1")&&status.equals("1")) { String
			 * point_id=(String)pointBean.get("point_id");
			 * if(amap.get("c_"+point_id.toLowerCase())!=null) {
			 * map.put(point_id.toLowerCase(),
			 * rowSet.getString("C_"+point_id)!=null
			 * ?rowSet.getString("C_"+point_id):""); }
			 * 
			 * } } } } rowSet.close(); }
			 */

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	/**
	 * 判断考核对象是否已被考评人提交过分数
	 * 
	 * @return
	 */
	public String getIsSubScore() {
		String flag = "0";
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			// RowSet
			// rowSet=dao.search("select count(id) from per_mainbody where plan_id="+this.plan_vo.getInt("plan_id")+" and object_id='"+this.object_id+"' and (status=2 or status=1)");
			RowSet rowSet = dao
					.search("select count(id) from per_mainbody where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and object_id='" + this.object_id
							+ "' and status=2 "); // 主体只保存了评分并没有提交，当跟踪指标需审批时，对象看不到操作列
			if (rowSet.next()) {
				if (rowSet.getInt(1) > 0)
					flag = "1";
			}
			rowSet.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return flag;
	}

	/**
	 * 取得 对象计划 下绩效指标信息
	 * 
	 * @param object_id
	 * @param object_type
	 * @param plan_id
	 * @return
	 */
	public HashMap getPerPointMap(String object_id, int object_type,
			String plan_id) {
		HashMap map = new HashMap();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			StringBuffer sql = new StringBuffer(
					" select pp.* from per_point pp, ");
			if (object_type == 2) {
				sql.append(" ( select p0401 from p04 where plan_id=" + plan_id
						+ " and a0100='" + object_id + "' and fromflag=2 ) a ");
			} else {
				sql.append(" ( select p0401 from p04 where plan_id=" + plan_id
						+ " and b0110='" + object_id + "' and fromflag=2 ) a ");
			}
			sql.append(" where upper(pp.point_id)=upper(a.p0401) ");
			RowSet rowSet = dao.search(sql.toString());
			LazyDynaBean abean = null;
			// ArrayList pointList=new ArrayList();
			while (rowSet.next()) {
				String point_id = rowSet.getString("point_id");
				String pointname = rowSet.getString("pointname");
				String visible = rowSet.getString("visible") != null ? rowSet
						.getString("visible") : "0";
				String Status = rowSet.getString("Status") != null ? rowSet
						.getString("Status") : "0";
				String pointkind = rowSet.getString("pointkind");
				abean = new LazyDynaBean();
				abean.set("point_id", point_id);
				abean.set("pointname", pointname);
				abean.set("visible", visible);
				abean.set("pointkind", pointkind);
				abean.set("status", Status);

				abean.set("value", "");

				map.put(point_id.toLowerCase(), abean);
			}
			rowSet.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	// 取得考核对象同一考核区间内所有有绩效报告的目标计划
	public ArrayList getSummaryList(String planID, String cycle, String value,
			String object_id) {
		ArrayList list = new ArrayList();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			StringBuffer sql = new StringBuffer(
					"select per_plan.*,per_object.sp_flag  from per_plan,per_object where  per_plan.plan_id=per_object.plan_id and  per_plan.cycle="
							+ cycle);
			if ("0".equals(cycle)) // by year
				sql.append(" and per_plan.theyear='" + value + "'");
			if ("1".equals(cycle) || "2".equals(cycle)) // by half year
				sql.append(" and per_plan.Thequarter='" + value + "'");
			if ("3".equals(cycle)) // by month
				sql.append(" and per_plan.themonth='" + value + "'");
			sql.append(" and per_object.object_id='" + object_id + "'");
			RowSet frowset = dao.search(sql.toString());
			LoadXml loadxml = null;
			LazyDynaBean abean = null;

			while (frowset.next()) {
				String sp_flag = frowset.getString("sp_flag") != null ? frowset
						.getString("sp_flag") : "";
				if (BatchGradeBo.getPlanLoadXmlMap().get(
						frowset.getString("plan_id")) == null) {
					loadxml = new LoadXml(this.conn,
							frowset.getString("plan_id"));
					BatchGradeBo.getPlanLoadXmlMap().put(
							frowset.getString("plan_id"), loadxml);
				} else
					loadxml = (LoadXml) BatchGradeBo.getPlanLoadXmlMap().get(
							frowset.getString("plan_id"));
				Hashtable planParam = loadxml.getDegreeWhole();

				String SummaryFlag = (String) planParam.get("SummaryFlag"); // 个人总结评价作为评分标准
				if ("True".equalsIgnoreCase(SummaryFlag)) {
					abean = new LazyDynaBean();

					// if(frowset.getInt("status")>=4&&frowset.getInt("status")!=8)
					if ("03".equals(sp_flag)
							|| planID.equalsIgnoreCase(frowset
									.getString("plan_id"))) {
						String model_opt = "read";
						if (object_id
								.equalsIgnoreCase(this.userView.getA0100())) {
							model_opt = "edit";
						}
						if (frowset.getInt("object_type") == 1
								|| frowset.getInt("object_type") == 3
								|| frowset.getInt("object_type") == 4) {
							String un_functionary = "";
							LazyDynaBean un_functionaryBean = getMainbodyBean(
									frowset.getString("plan_id"), object_id);
							if (un_functionaryBean != null)
								un_functionary = (String) un_functionaryBean
										.get("mainbody_id");

							if (un_functionary.equalsIgnoreCase(this.userView
									.getA0100()))
								model_opt = "edit";
						}

						if ("1".equals(isUnderLeader("Usr", object_id,
								frowset.getString("plan_id"),
								this.userView.getA0100()))) {

							abean.set("model_opt", model_opt);
							abean.set("plan_id", frowset.getString("plan_id"));
							abean.set("name", frowset.getString("name"));
							list.add(abean);
						}

					}

				}
			}

			if (frowset != null)
				frowset.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 批转 or 驳回考核对象的绩效报告 opt: =2批准 =3驳回
	 */
	public void optPersonalComment(String opt) {
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			String SummaryFlag = (String) this.planParam.get("SummaryFlag"); // 个人总结评价作为评分标准
			if ("true".equalsIgnoreCase(SummaryFlag)) {
				String _object_id = this.object_id;
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) {
					_object_id = this.un_functionary;
				}
				RowSet rowSet = dao
						.search("select state from  per_article where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and fileflag=1 and Article_type=2 and  a0100='"
								+ _object_id + "'");
				int count = 0;
				int state = 0;
				if (rowSet.next()) {
					count++;
					state = rowSet.getInt(1);
				}
				if (count > 0) {
					if ("2".equals(opt) && state == 1) {
						dao.update("update per_article set state="
								+ opt
								+ ",description='' where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and fileflag=1 and Article_type=2 and  a0100='"
								+ _object_id + "'");
					} else if ("3".equals(opt) && (state == 1 || state == 2))
						dao.update("update per_article set state="
								+ opt
								+ ",description='' where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and fileflag=1 and Article_type=2 and  a0100='"
								+ _object_id + "'");
				}

				if (rowSet != null)
					rowSet.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 取得自我总结脚本(个人总结在自我评价出现，其他人只能查看，目标制订时不用出现)
	 * 
	 * @return
	 */
	public String getPersonalCommentScript(int operate) {
		StringBuffer personalComment = new StringBuffer("");
		String SummaryFlag = (String) this.planParam.get("SummaryFlag"); // 个人总结评价作为评分标准
		boolean flag = false;
		if ("True".equalsIgnoreCase(SummaryFlag)) {
			// if(this.plan_vo!=null&&this.plan_vo.getInt("status")>=4&&this.plan_vo.getInt("status")!=8)
			// if(this.objectSpFlag.equals("03"))
			{
				flag = true;
			}
		}

		if (!flag
				&& SystemConfig.getPropertyValue("show_all_reports") != null
				&& "true"
						.equalsIgnoreCase(SystemConfig.getPropertyValue("show_all_reports"))) {
			if ("1".equals(isUnderLeader("Usr", object_id,
					String.valueOf(this.plan_vo.getInt("plan_id")),
					this.userView.getA0100()))) {
				String value = "";
				if (this.plan_vo.getInt("cycle") == 0) // by year
					value = this.plan_vo.getString("theyear");
				if (this.plan_vo.getInt("cycle") == 1
						|| this.plan_vo.getInt("cycle") == 2) // by half year
					value = this.plan_vo.getString("thequarter");
				if (this.plan_vo.getInt("cycle") == 3) // by month
					value = this.plan_vo.getString("themonth");
				ArrayList list = getSummaryList(
						String.valueOf(this.plan_vo.getInt("plan_id")),
						String.valueOf(this.plan_vo.getInt("cycle")), value,
						this.object_id);
				if (list.size() > 0)
					flag = true;
			}
		}

		if (flag) {
			String model_opt = "read";
			if (operate == 0
					&& this.object_id
							.equalsIgnoreCase(this.userView.getA0100())) {
				model_opt = "edit";
			}
			if (operate == 0
					&& (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3 || this.plan_vo
							.getInt("object_type") == 4)) {
				if (this.un_functionary.equalsIgnoreCase(this.userView
						.getA0100()))
					model_opt = "edit";
			}

			if (operate == 2) // 日志模块进入
				model_opt = "look";

			String desc = "";

			desc = ResourceFactory.getProperty("info.appleal.state11");
			if (this.plan_vo.getInt("object_type") != 2) {
				desc = ResourceFactory.getProperty("info.appleal.state12");
			}

			if (SystemConfig.getPropertyValue("clientName") != null
					&& "bjpt"
							.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName").trim()))
				desc = "附件说明";
			if (SystemConfig.getPropertyValue("clientName") != null
					&& "zglt"
							.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName").trim()))
				desc = "个人总结";
			personalComment.append("<input type='button' value='"
					+ desc
					+ "' onclick=\"showComment('"
					+ model_opt
					+ "','"
					+ this.plan_vo.getInt("plan_id")
					+ "','"
					+ this.object_id
					+ "')\" class='"
					+ ("zglt".equals(
                    SystemConfig.getPropertyValue("clientName")) ? "mybuttonBig" : "mybutton") + "' />");
		}

		return personalComment.toString();
	}

	/**
	 * 取得指标说明脚本
	 * 
	 * @return
	 */
	public String getTargetDeclareScript() {
		String targetDeclare = "";
		String showIndicatorDesc = (String) this.planParam
				.get("ShowIndicatorDesc");
		if (showIndicatorDesc != null
				&& "true".equalsIgnoreCase(showIndicatorDesc)) {
			ContentDAO dao = new ContentDAO(this.conn);
			try {
				RowSet rowSet = dao
						.search("select file_ext from per_plan where plan_id="
								+ this.plan_vo.getInt("plan_id"));
				if (rowSet.next()) {
					String ext = rowSet.getString("file_ext");
					if (ext != null && ext.trim().length() > 0)
						targetDeclare = "<input type='button' value='"
								+ ResourceFactory
										.getProperty("lable.performance.pointDeclare")
								+ "' onclick='showInfo("
								+ this.plan_vo.getInt("plan_id")
								+ ")' class='"
								+ ("zglt"
										.equals(SystemConfig.getPropertyValue("clientName")) ? "mybuttonBig"
										: "mybutton") + "'  />";
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return targetDeclare;
	}

	/**
	 * 取得考核对象的自我评分状态
	 * 
	 * @return
	 */
	public String getSelfEvaluateStatus() {
		String status = "0";
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rowSet = dao
					.search("select status from per_mainbody where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and object_id='" + this.object_id
							+ "' and mainbody_id='" + this.object_id + "'");
			if (rowSet.next()) {
				if (rowSet.getString("status") != null)
					status = rowSet.getString("status") != null ? rowSet
							.getString("status") : "0";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return status;
	}

	/**
	 * 取得 考核主体给考核对象的打分状态
	 * 
	 * @return
	 */
	public String getMainBodyStatus() {
		String status = "0";
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rowSet = dao
					.search("select status from per_mainbody where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and object_id='" + this.object_id
							+ "' and mainbody_id='" + this.userView.getA0100()
							+ "'");
			if (rowSet.next()) {
				if (rowSet.getString("status") != null)
					status = rowSet.getString("status") != null ? rowSet
							.getString("status") : "0";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return status;

	}

	/**
	 * 根据考核对象状态判断卡是否可编辑
	 * 
	 * @return
	 */
	public String getObjectSpFlag(String objectid, String planid) {
		String flag = "01";
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rowSet = dao
					.search("select id,sp_flag from per_object where object_id='"
							+ objectid + "'  and plan_id=" + planid);
			if (rowSet.next()) {
				if (rowSet.getString("sp_flag") != null)
					flag = rowSet.getString("sp_flag");

				this.perObject_vo = new RecordVo("per_object");
				this.perObject_vo.setInt("id", rowSet.getInt("id"));
				this.perObject_vo = dao.findByPrimaryKey(this.perObject_vo);

			}

			/*
			 * if(flag.equals("07")&&isAdjustPoint&&this.plan_vo.getInt("status")
			 * ==4) //如果是调整后的驳回 flag="03";
			 * if(flag.equals("02")&&isAdjustPoint&&this
			 * .plan_vo.getInt("status")==4) //如果是调整后的报批 flag="03";
			 * if(flag.equals
			 * ("03")&&isAdjustPoint&&this.plan_vo.getInt("status")==4)
			 * //如果是调整后的已批 flag="03";
			 */
		} catch (Exception e) {
			e.printStackTrace();
		}
		return flag;
	}

	public RecordVo getPlanVo(String planid) {
		RecordVo vo = new RecordVo("per_plan");
		try {
			vo.setInt("plan_id", Integer.parseInt(planid));
			ContentDAO dao = new ContentDAO(this.conn);
			vo = dao.findByPrimaryKey(vo);
			if (vo.getInt("method") == 0)
				vo.setInt("method", 1);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return vo;
	}

	public RecordVo get_TemplateVo() {
		RecordVo vo = new RecordVo("per_template");
		try {
			vo.setString("template_id", this.plan_vo.getString("template_id"));
			ContentDAO dao = new ContentDAO(this.conn);
			vo = dao.findByPrimaryKey(vo);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return vo;
	}

	public RecordVo get_TemplateVo_id(String template_id) {
		RecordVo vo = new RecordVo("per_template");
		try {
			vo.setString("template_id", template_id);
			ContentDAO dao = new ContentDAO(this.conn);
			vo = dao.findByPrimaryKey(vo);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return vo;
	}

	/**
	 * 判断必填指标是否填写了内容
	 * 
	 * @flag 1:跟踪指标 2：非跟踪指标
	 * @return
	 */
	public String validateFollowPointMustFill(int flag) {
		StringBuffer info = new StringBuffer("");
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			StringBuffer sql = new StringBuffer("");
			RowSet rowSet = null;
			FieldItem fielditem2 = DataDictionary.getFieldItem("p0407");
			String itemdesc = "";
			LoadXml loadxml = null;
			if (BatchGradeBo.getPlanLoadXmlMap().get(
					String.valueOf(this.plan_vo.getInt("plan_id"))) == null) {
				loadxml = new LoadXml(this.conn, String.valueOf(this.plan_vo
						.getInt("plan_id")));
				BatchGradeBo.getPlanLoadXmlMap()
						.put(String.valueOf(this.plan_vo.getInt("plan_id")),
								loadxml);
			} else
				loadxml = (LoadXml) BatchGradeBo.getPlanLoadXmlMap().get(
						String.valueOf(this.plan_vo.getInt("plan_id")));
			Hashtable planParam = loadxml.getDegreeWhole();
			if (planParam.get("TaskNameDesc") != null
					&& !"".equals((String) planParam.get("TaskNameDesc"))) {
				itemdesc = (String) planParam.get("TaskNameDesc");
			} else {
				if (fielditem2 == null
						|| "任务内容"
								.equalsIgnoreCase(fielditem2.getItemdesc().trim())) {
					if (SystemConfig.getPropertyValue("clientName") != null
							&& "zglt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 中国联通
						itemdesc = "工作目标";
					else
						itemdesc = ResourceFactory
								.getProperty("jx.khplan.point");
				} else
					itemdesc = fielditem2.getItemdesc();
			}
			if (this.plan_vo.getInt("object_type") == 1
					|| this.plan_vo.getInt("object_type") == 3
					|| this.plan_vo.getInt("object_type") == 4) {
				rowSet = dao.search("select * from per_mainbody where plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and body_id=-1 and object_id='" + this.object_id
						+ "'");
				if (rowSet.next()) {

				} else
					return info.toString();
			}

			String TargetMustFillItem = "";
			if (this.planParam.get("TargetMustFillItem") != null
					&& ((String) this.planParam.get("TargetMustFillItem"))
							.trim().length() > 0)
				TargetMustFillItem = ((String) this.planParam
						.get("TargetMustFillItem")).trim().toLowerCase();

			ArrayList fieldList = DataDictionary.getFieldList("P04",
					Constant.USED_FIELD_SET);
			 boolean b = false;
             StringBuffer strTemp = new StringBuffer();
			for (int i = 0; i < fieldList.size(); i++) {
				FieldItem item = (FieldItem) fieldList.get(i);
				String itemid = item.getItemid();
				String itemtype = item.getItemtype();
				if("rater".equalsIgnoreCase(itemid))
					continue;
				boolean _flag = false;
				if (flag == 1) {
					if (("," + this.TargetTraceItem.toUpperCase() + ",")
							.indexOf("," + itemid.toUpperCase() + ",") != -1)
						_flag = true;
				} else {
					if (("," + this.TargetTraceItem.toUpperCase() + ","
							+ this.TargetCollectItem.toUpperCase() + ",")
							.indexOf("," + itemid.toUpperCase() + ",") == -1)
						_flag = true;

				}
				if (_flag) {
					if (this.TargetDefineItem.length() > 0
							&& this.TargetDefineItem.toUpperCase().indexOf(
									"," + itemid.toUpperCase() + ",") == -1)
						continue;

					if ("P0425".equalsIgnoreCase(item.getItemid())
							|| "P0427".equalsIgnoreCase(item.getItemid()))
						continue;

					boolean isFill = false;
					if (TargetMustFillItem.length() > 0) {
						if (("," + TargetMustFillItem + ",").indexOf(","
								+ itemid.toLowerCase() + ",") != -1) {
							isFill = true;
						}
					} else if (item.isFillable())
						isFill = true;

					if (isFill) {
						sql.setLength(0);
						sql.append("select count(*) from p04 where plan_id="
								+ this.plan_vo.getInt("plan_id"));
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4)
							sql.append(" and b0110='" + this.object_id + "'");
						else if (this.plan_vo.getInt("object_type") == 2)
							sql.append(" and a0100='" + this.object_id + "'");
						if ("A".equalsIgnoreCase(item.getItemtype()))
							sql.append(" and ( " + itemid + " is null or "
									+ itemid + "=''  or " + itemid + "=' '  )");
						else
							sql.append(" and  " + itemid + " is null ");
						sql.append("  and ( Chg_type!=3 or Chg_type is null ) ");
						if (this.planParam.get("PublicPointCannotEdit") != null
								&& "True"
										.equalsIgnoreCase((String) this.planParam
                                                .get("PublicPointCannotEdit")) && flag == 2) {
							sql.append(" and (p0401 is null or  p0401 not in (select point_id from per_template_point ");
							sql.append(" where item_id in (select item_id from per_template_item where kind=1 and template_id='"
									+ this.template_vo.getString("template_id")
									+ "')) )");

						}
						sql.append(" and (itemtype!=1 or itemtype is null ) and  p0407 is not null  ");
						if (SystemConfig.getPropertyValue("clientName") != null
								&& "zglt"
										.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 联通共性指标可以不填必填项
						{
							sql.append(" and ( item_id not in (select item_id from per_template_item where kind=1 and template_id='"
									+ this.template_vo.getString("template_id")
									+ "') )");

						}

						if ("1".equals(this.template_vo.getString("status"))) // 权重
						{
							sql.append(" and  p0415 is not null and p0415<>0 ");

						}

						rowSet = dao.search(sql.toString());
						if (rowSet.next()) {
							if (rowSet.getInt(1) > 0) {
							    b = true;
							    strTemp.append("    "+item.getItemdesc()+"\r\n");
							}
						}
					}

				}
			}
			if(b){
                info.append("报批失败！\r\n如下项目为必填项：\r\n"+strTemp+"请输入相应的值！");
            }
			if ("".equals(info.toString())) {
				String isTraceOrMust = isTraceOrMust();
				// flag 1:跟踪指标 2：非跟踪指标
				if (("2".equals(isTraceOrMust) && flag == 2)
						|| ("3".equals(isTraceOrMust) && flag == 1))// =0什么也不是=1是跟中=2是必填，=3即使跟踪又是必填
				{
					/*
					 * StringBuffer strsql=new
					 * StringBuffer("select * from per_article  where plan_id="
					 * +planid+" and a0100='"+a_objectID+"' " );
					 * strsql.append(" and lower(nbase)='usr' and task_id="
					 * +_p0400
					 * +"  and article_type=3 and fileflag=2 order by Article_id"
					 * );
					 */
					StringBuffer sql_buf = new StringBuffer();
					sql_buf.append("select p0407 from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id"));
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4)
						sql_buf.append(" and b0110='" + this.object_id + "'");
					else if (this.plan_vo.getInt("object_type") == 2)
						sql_buf.append(" and a0100='" + this.object_id + "'");
					sql_buf.append("  and ( Chg_type!=3 or Chg_type is null ) ");
					if (this.planParam.get("PublicPointCannotEdit") != null
							&& "True"
									.equalsIgnoreCase((String) this.planParam
                                            .get("PublicPointCannotEdit")) && flag == 2) {
						sql_buf.append(" and (p0401 is null or  p0401 not in (select point_id from per_template_point ");
						sql_buf.append(" where item_id in (select item_id from per_template_item where kind=1 and template_id='"
								+ this.template_vo.getString("template_id")
								+ "')) )");
					}
					sql_buf.append(" and (itemtype!=1 or itemtype is null ) and  p0407 is not null  ");
					if (SystemConfig.getPropertyValue("clientName") != null
							&& "zglt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 联通共性指标可以不填必填项
					{
						sql_buf.append(" and ( item_id not in (select item_id from per_template_item where kind=1 and template_id='"
								+ this.template_vo.getString("template_id")
								+ "') )");

					}
					if ("1".equals(this.template_vo.getString("status"))) // 权重
					{
						sql_buf.append(" and  p0415 is not null and p0415<>0 ");
					}
					sql_buf.append(" and p0400 not in (select task_id from per_article where ");
					sql_buf.append(" plan_id=" + this.plan_vo.getInt("plan_id"));
					sql_buf.append(" and a0100='");
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4)
						sql_buf.append(this.un_functionary);
					else if (this.plan_vo.getInt("object_type") == 2)
						sql_buf.append(this.object_id);
					sql_buf.append("' and lower(nbase)='usr' and article_type=3 and fileflag=2");
					sql_buf.append(") order by seq");
					rowSet = dao.search(sql_buf.toString());
					while (rowSet.next()) {
						info.append(rowSet.getString("p0407") + ";\r\n");
					}
					if (info.length() > 0) {
						info.append("\r\n以上" + itemdesc + "没有上传附件！");
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return info.toString();
	}

	/**** 保存目标卡评分 ****/

	public HashMap getPointReasonsMap(String object_id, String mainbody_id,
			String plan_id) {

		HashMap map = new HashMap();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			StringBuffer objectIDs = new StringBuffer("");
			RowSet rowSet = dao
					.search("select * from per_target_evaluation where object_id='"
							+ object_id
							+ "' and mainbody_id='"
							+ mainbody_id
							+ "' and plan_id='" + plan_id + "' ");
			while (rowSet.next()) {
				String scoreCause = Sql_switcher.readMemo(rowSet, "reasons");
				String p0400 = rowSet.getString("p0400");
				map.put(object_id + "/" + mainbody_id + "/"
						+ p0400.toLowerCase(), scoreCause);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public String validateScoreCtrl(ArrayList scoreList) {
		String returninfo = "";
		RowSet rs = null;
		try {
			LoadXml loadxml = null;
			if (BatchGradeBo.getPlanLoadXmlMap().get(
					String.valueOf(this.plan_vo.getInt("plan_id"))) == null) {
				loadxml = new LoadXml(this.conn, String.valueOf(this.plan_vo
						.getInt("plan_id")));
				BatchGradeBo.getPlanLoadXmlMap()
						.put(String.valueOf(this.plan_vo.getInt("plan_id")),
								loadxml);
			} else
				loadxml = (LoadXml) BatchGradeBo.getPlanLoadXmlMap().get(
						String.valueOf(this.plan_vo.getInt("plan_id")));
			Hashtable planParam = loadxml.getDegreeWhole();
			/** 最高标度不超过 */
			String FineRestrict = "false";
			if (planParam.get("FineRestrict") != null)
				FineRestrict = (String) planParam.get("FineRestrict");
			String fineMax = "-1";// 指标得分为A(优秀)的个数(大于0小于1为百分比，大于1为绝对数)
			if (planParam.get("fineMax") != null)
				fineMax = (String) planParam.get("fineMax");
			/** 最高标度不低于 */
			String BadlyRestrict = "false";
			if (planParam.get("BadlyRestrict") != null)
				BadlyRestrict = (String) planParam.get("BadlyRestrict");
			String BadlyMax = "-1";
			if (planParam.get("BadlyMax") != null)
				BadlyMax = (String) planParam.get("BadlyMax");
			int maxCount = 0;// 最高标度个数
			int itemCount = 0;// 所有要限制的指标个数
			/** 如果是加扣分采集方式（this.scoreflag=4），就不做判断了 */
			if (("true".equalsIgnoreCase(FineRestrict) || "true"
					.equalsIgnoreCase(BadlyRestrict))
					&& scoreList != null
					&& !"4".equals(this.scoreflag)) {
				this.pointDescMap = getTemplatePointDetail(); // 取得模板引入的绩效指标标度
				this.p04List = getP04List();
				String scoreflag = (String) this.planParam.get("scoreflag"); // =2混合，=1标度(默认值=混合)=4加扣分
				// itemPrivMap
				/** 加扣分，定量统一打分指标不参与 */
				for (int index = 0; index < scoreList.size(); index++) {
					String[] temp = ((String) scoreList.get(index)).split(":");
					if ("know_id".equalsIgnoreCase(temp[0])) // 了解程度，
						continue;
					if ("whole_id".equalsIgnoreCase(temp[0])) // 总体评价
						continue;
					String p0400 = temp[0].substring(2);
					LazyDynaBean p04_bean = (LazyDynaBean) this.p04Map
							.get(p0400);
					String _item_id = (String) p04_bean.get("item_id");
					String fromflag = (String) p04_bean.get("fromflag");
					String p0407 = (String) p04_bean.get("p0407");
					String p0413 = (String) p04_bean.get("p0413"); // 分值
					String state = (String) p04_bean.get("state");
					String chg_type = (String) p04_bean.get("chg_type");
					/** 没有权限 */
					if (this.itemPrivMap.get(_item_id) != null
							&& "0"
									.equals((String) this.itemPrivMap.get(_item_id))) {
						continue;
					}
					/** 加扣分指标 */
					if (this.hasAddMinusItem
							&& this.addMinusPointStr.length() > 0
							&& this.addMinusPointStr.indexOf("'" + p0400 + "'") != -1) {
						continue;
					}
					/** 调整的历史记录 */
					if ("-1".equals(state) && "3".equals(chg_type))
						continue;
					if (p0413 == null || p0413.trim().length() == 0) {
						if ("1".equals(this.template_vo.getString("status"))) // 权重模板
						{
							p0413 = String.valueOf(this.template_vo
									.getDouble("topscore"));
						} else
							continue;
					}
					if ("null".equals(temp[1]))// 没打分
					{
						itemCount++;
					} else {
						boolean aflag = false;
						if ("2".equals(fromflag)
								&& !temp[1].matches("-?[\\d]+[.]?[\\d]*")) {
							String p0401 = (String) p04_bean.get("p0401");
							ArrayList gradeList = (ArrayList) pointDescMap
									.get(p0401.toUpperCase());
							LazyDynaBean grade_bean = (LazyDynaBean) gradeList
									.get(0);
							String pointkind = (String) grade_bean
									.get("pointkind");
							if (!"1".equals(pointkind))
								aflag = true;
						}
						if ("1".equals(fromflag) || "3".equals(fromflag)|| "5".equals(fromflag)
								|| aflag) // 自建
						{
							// scoreflag =2混合，=1标度(默认值=混合)
							if ("1".equals(scoreflag)
									|| aflag
									|| ("2".equals(scoreflag) && !temp[1]
											.matches("-?[\\d]*[.]?[\\d]*"))) {
								ArrayList pointGradeList = null;

								if ("1".equals(fromflag)
										|| "3".equals(fromflag)|| "5".equals(fromflag) )
									pointGradeList = (ArrayList) pointDescMap
											.get("per_grade_desc");
								else {
									String p0401 = (String) p04_bean
											.get("p0401");
									pointGradeList = (ArrayList) pointDescMap
											.get(p0401.toUpperCase());
								}
								LazyDynaBean _abean = null;
								String degree_id = "";
								double maxvalue = 0;

								for (int j = 0; j < pointGradeList.size(); j++) {
									_abean = (LazyDynaBean) pointGradeList
											.get(j);
									String grade_template_id = "";
									if ("1".equals(fromflag)
											|| "3".equals(fromflag)|| "5".equals(fromflag) )
										grade_template_id = (String) _abean
												.get("grade_template_id");
									else
										grade_template_id = (String) _abean
												.get("gradecode");

									String _gradevalue = (String) _abean
											.get("gradevalue");
									if (Double.parseDouble(_gradevalue) > maxvalue
											|| j == 0) {
										maxvalue = Double
												.parseDouble(_gradevalue);
										degree_id = grade_template_id;
									}
								}
								if (temp[1].equalsIgnoreCase(degree_id))// 是最高
								{
									maxCount++;
								}
								itemCount++;

							} else {
								ArrayList pointGradeList = (ArrayList) pointDescMap
										.get("per_grade_desc");
								LazyDynaBean _abean = null;
								String degree_id = "";
								double _maxScore = 0;
								String _maxGrade = "";
								double _minScore = -1;
								String _minGrade = "";

								int n = 0;
								for (int j = 0; j < pointGradeList.size(); j++) {
									_abean = (LazyDynaBean) pointGradeList
											.get(j);
									String grade_template_id = (String) _abean
											.get("grade_template_id");
									String _gradevalue = (String) _abean
											.get("gradevalue");
									String top_value = (String) _abean
											.get("top_value");
									String bottom_value = (String) _abean
											.get("bottom_value");
									double value = Double.parseDouble(temp[1]);
									double top = Double.parseDouble(PubFunc
											.multiple(top_value, p0413, 2));
									double bottom = Double.parseDouble(PubFunc
											.multiple(bottom_value, p0413, 2));

									if (Float.parseFloat(p0413) < 0) {
										top = Double
												.parseDouble(PubFunc.multiple(
														String.valueOf(1 - Double
																.parseDouble(top_value)),
														p0413, 2));
										bottom = Double
												.parseDouble(PubFunc.multiple(
														String.valueOf(1 - Double
																.parseDouble(bottom_value)),
														p0413, 2));
									}
									if (value <= top && value >= bottom
											&& degree_id.trim().length() == 0) {
										degree_id = grade_template_id;
									}
									if (top > _maxScore || n == 0) {
										_maxScore = top;
										_maxGrade = grade_template_id;
									}
									if ((bottom < _minScore) || n == 0) {
										_minScore = bottom;
										_minGrade = grade_template_id;
									}
									n++;
								}
								if (degree_id.length() == 0) {
									double _score = Double.parseDouble(temp[1]);
									if (_score > _maxScore)
										degree_id = _maxGrade;
									if (_score < _minScore)
										degree_id = _minGrade;
								}
								if (degree_id.equalsIgnoreCase(_maxGrade))
									maxCount++;
								itemCount++;
							}

						} else if ("2".equals(fromflag)) {
							String p0401 = (String) p04_bean.get("p0401");
							ArrayList pointGradeList = (ArrayList) pointDescMap
									.get(p0401.toUpperCase());
							LazyDynaBean grade_bean = (LazyDynaBean) pointGradeList
									.get(0);
							String pointkind = (String) grade_bean
									.get("pointkind");
							String status = (String) grade_bean.get("status");
							/** 定量统一打分指标 */
							if ("1".equals(pointkind) && "1".equals(status)) {
								continue;
							}
							String value = temp[1].trim();
							float pointscore = Float.parseFloat(p0413);
							// String
							// a_info=setPointValue(tempList,temp[1].trim(),gradeList,Float.parseFloat(p0413),scoreflag,pointkind);
							String info = "1";
							String ScaleToDegreeRule = (String) this.planParam
									.get("limitrule"); // 分值转标度规则（1-就高 2-就低
														// 3-就近就高（默认值））
							// String
							// EvalOutLimitStdScore=(String)this.planParam.get("EvalOutLimitStdScore");
							// //评分时得分不受标准分限制True, False, 默认为 False;都加
							int KeepDecimal = Integer
									.parseInt((String) this.planParam
											.get("KeepDecimal")); // 保留小数位

							float _maxScore = 0;
							String _maxGrade = "";
							float _minScore = -1;
							String _minGrade = "";
							String degree_id = "";
							if ((("0".equals(pointkind) && "2"
									.equals(scoreflag)) || "1".equals(pointkind))
									&& value.matches("-?[\\d]+[.]?[\\d]+")
									&& "2".equals(ScaleToDegreeRule)) // 2混合 //
																		// 分值 //
																		// 就低
							{

								for (int i = pointGradeList.size() - 1; i >= 0; i--) {
									LazyDynaBean abean = (LazyDynaBean) pointGradeList
											.get(i);
									String gradecode = (String) abean
											.get("gradecode");
									float top_value = Float
											.parseFloat((String) abean
													.get("top_value"));
									float bottom_value = Float
											.parseFloat((String) abean
													.get("bottom_value"));
									float gradevalue = Float
											.parseFloat((String) abean
													.get("gradevalue"));
									float a_value = Float.parseFloat(value);

									// if(/*EvalOutLimitStdScore.equalsIgnoreCase("true")&&*/pointkind.equals("0"))
									{
										if (top_value * pointscore > _maxScore) {
											_maxScore = top_value * pointscore;
											_maxGrade = gradecode;
										}
										if ((bottom_value * pointscore < _minScore)
												|| _minScore == -1) {
											_minScore = bottom_value
													* pointscore;
											_minGrade = gradecode;
										}
									}

									if ("0".equals(pointkind)) // 定性
									{
										if (a_value <= top_value * pointscore
												&& a_value >= bottom_value
														* pointscore
												&& degree_id.length() == 0) {
											degree_id = gradecode;
											info = "";

										}
									} else // 定量
									{
										if (a_value <= top_value
												&& a_value >= bottom_value
												&& degree_id.length() == 0) {
											degree_id = gradecode;
											info = "";
										}
									}
								}
							} else {
								for (int i = 0; i < pointGradeList.size(); i++) {
									LazyDynaBean abean = (LazyDynaBean) pointGradeList
											.get(i);
									String gradecode = (String) abean
											.get("gradecode");
									float top_value = Float
											.parseFloat((String) abean
													.get("top_value"));
									float bottom_value = Float
											.parseFloat((String) abean
													.get("bottom_value"));
									float gradevalue = Float
											.parseFloat((String) abean
													.get("gradevalue"));

									if (/*
										 * EvalOutLimitStdScore.equalsIgnoreCase(
										 * "true")&&
										 */"0".equals(pointkind)) {
										if (top_value * pointscore > _maxScore) {
											_maxScore = top_value * pointscore;
											_maxGrade = gradecode;
										}
										if ((bottom_value * pointscore < _minScore)
												|| _minScore == -1) {
											_minScore = bottom_value
													* pointscore;
											_minGrade = gradecode;
										}
									}

									if ("0".equals(pointkind)
											&& "2".equals(scoreflag)
											&& value.matches("-?[\\d]+[.]?[\\d]*")) {
										float a_value = Float.parseFloat(value);
										if (a_value <= top_value * pointscore
												&& a_value >= bottom_value
														* pointscore
												&& degree_id.length() == 0) {
											degree_id = gradecode;
											info = "";

										}
									} else {
										if ("0".equals(pointkind)) {
											if (value
													.equalsIgnoreCase(gradecode)) {
												degree_id = value;
												info = "";

											}
										} else // 定量
										{
											float a_value = Float
													.parseFloat(value);
											if (a_value <= top_value
													&& a_value >= bottom_value
													&& degree_id.length() == 0) {
												degree_id = gradecode;
												info = "";
											}
										}
									}
								}
							}
							if (info.length() > 0/*
												 * &&EvalOutLimitStdScore.
												 * equalsIgnoreCase("true")
												 */) // 评分时得分不受标准分限制True, False,
														// 默认为 False;都加
							{
								if ("0".equals(pointkind)
										&& "2".equals(scoreflag)
										&& value.matches("-?[\\d]+[.]?[\\d]*")) {
									float _value = Float.parseFloat(value);
									if (_value > _maxScore) {
										degree_id = _maxGrade;
										info = "";
									}
									if (_value < _minScore) {
										degree_id = _minGrade;
										info = "";

									}
								}
							}
							if (degree_id.equalsIgnoreCase(_maxGrade))
								maxCount++;
							itemCount++;
						}
					}
				}
				if ("true".equalsIgnoreCase(FineRestrict)) {
					BigDecimal fineDB = new BigDecimal(fineMax);
					BigDecimal one = new BigDecimal("1");
					if (fineDB.compareTo(one) >= 0) {
						BigDecimal count = new BigDecimal(
								String.valueOf(maxCount));
						if (count.compareTo(fineDB) > 0)
							returninfo = "最高标度个数，不能超过" + fineMax + "个!";
					} else {
						BigDecimal count = new BigDecimal(
								String.valueOf(maxCount));
						BigDecimal itemcount = new BigDecimal(
								String.valueOf(itemCount));
						BigDecimal div = itemcount.multiply(fineDB).divide(one,
								0, BigDecimal.ROUND_HALF_UP);
						if (count.compareTo(div) > 0)
							returninfo = "最高标度个数，不能超过所有指标个数的"
									+ PubFunc.round(
											(Double.parseDouble(fineMax) * 100)
													+ "", 2) + "%!";
					}
				}
				if ("true".equalsIgnoreCase(BadlyRestrict)) {
					BigDecimal fineDB = new BigDecimal(BadlyMax);
					BigDecimal one = new BigDecimal("1");
					if (fineDB.compareTo(one) >= 0) {
						BigDecimal count = new BigDecimal(
								String.valueOf(maxCount));
						if (fineDB.compareTo(count) > 0)
							returninfo = "最高标度个数，不能低于" + BadlyMax + "个!";
					} else {
						BigDecimal count = new BigDecimal(
								String.valueOf(maxCount));
						BigDecimal itemcount = new BigDecimal(
								String.valueOf(itemCount));
						BigDecimal div = itemcount.multiply(fineDB).divide(one,
								0, BigDecimal.ROUND_HALF_UP);
						if (div.compareTo(count) > 0)
							returninfo = "最高标度个数，不能低于所有指标个数的"
									+ PubFunc
											.round((Double
													.parseDouble(BadlyMax) * 100)
													+ "", 2) + "%!";
					}
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return returninfo;
	}

	/**
	 * 校验评分值是否正确
	 * 
	 * @flag 1:保存 或 2:提交 8:打分完成
	 */
	public String saveTaskScore(ArrayList scoreList, String flag, String body_id) {
		StringBuffer info = new StringBuffer("");
		try {
			FieldItem fielditem2 = DataDictionary.getFieldItem("p0407");
			String aitemdesc = "";
			LoadXml loadxml = null;
			if (BatchGradeBo.getPlanLoadXmlMap().get(
					String.valueOf(this.plan_vo.getInt("plan_id"))) == null) {
				loadxml = new LoadXml(this.conn, String.valueOf(this.plan_vo
						.getInt("plan_id")));
				BatchGradeBo.getPlanLoadXmlMap()
						.put(String.valueOf(this.plan_vo.getInt("plan_id")),
								loadxml);
			} else
				loadxml = (LoadXml) BatchGradeBo.getPlanLoadXmlMap().get(
						String.valueOf(this.plan_vo.getInt("plan_id")));
			Hashtable planParam = loadxml.getDegreeWhole();
			if (planParam.get("TaskNameDesc") != null
					&& !"".equals((String) planParam.get("TaskNameDesc"))) {
				aitemdesc = (String) planParam.get("TaskNameDesc");
			} else {
				if (fielditem2 == null
						|| "任务内容"
								.equalsIgnoreCase(fielditem2.getItemdesc().trim())) {
					if (SystemConfig.getPropertyValue("clientName") != null
							&& "zglt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 中国联通
						aitemdesc = "工作目标";
					else
						aitemdesc = ResourceFactory
								.getProperty("jx.khplan.point");
				} else
					aitemdesc = fielditem2.getItemdesc();
			}
			int KeepDecimal = Integer.parseInt((String) this.planParam
					.get("KeepDecimal")); // 保留小数位
			String EvalOutLimitStdScore = (String) this.planParam
					.get("EvalOutLimitStdScore"); // 评分时得分不受标准分限制True, False,
													// 默认为 False;都加

			this.pointDescMap = getTemplatePointDetail(); // 取得模板引入的绩效指标标度
			this.p04List = getP04List();
			ArrayList resultList = new ArrayList();
			LazyDynaBean grade_bean = null;
			String scoreflag = (String) this.planParam.get("scoreflag"); // =2混合，=1标度(默认值=混合)
																			// =4加扣分
			String know_id = "";
			String whole_id = "";
			ContentDAO dao = new ContentDAO(this.conn);

			HashMap ReasonMap = getPointReasonsMap(this.object_id,
					(String) this.mainbodyBean.get("mainbody_id"),
					String.valueOf(this.plan_vo.getInt("plan_id")));
			if (scoreList != null) {
				int allSameScore = 0;
				int allSameDegreeid = 0;
				String allSameDegreeid_str = "";
				int counter = 0;
				String firstScore = "";
				String thesamedegreeid = "";
				// 判断是否有加扣分指标，处理加扣分是否超出项目定义的分值范围
				if (this.hasAddMinusItem && this.addMinusPointStr.length() > 0) {
					LazyDynaBean a_bean = null;
					LazyDynaBean point_bean = null;
					for (int i = 0; i < templateItemList.size(); i++) {
						a_bean = (LazyDynaBean) this.templateItemList.get(i);
						String itemdesc = (String) a_bean.get("itemdesc");
						String isAddMinusItem = (String) a_bean
								.get("isAddMinusItem");
						String item_id = (String) a_bean.get("item_id");
						String addMinusScore = (String) a_bean
								.get("addMinusScore");
						String addMinusToScore = (String) a_bean
								.get("addMinusToScore");
						if ("1".equals(isAddMinusItem)
								&& !("".equals(addMinusScore) && ""
										.equals(addMinusToScore)))// &&addMinusScore.trim().length()>0&&!addMinusScore.trim().equalsIgnoreCase("0")
						{
							double sumScore = 0d;
							for (int j = 0; j < scoreList.size(); j++) {
								String[] temp = ((String) scoreList.get(j))
										.split(":");
								if ("know_id".equalsIgnoreCase(temp[0]))
									continue;
								if ("whole_id".equalsIgnoreCase(temp[0]))
									continue;
								if ("null".equals(temp[1]))
									continue;

								String p0400 = temp[0].substring(2);
								point_bean = (LazyDynaBean) this.p04Map
										.get(p0400);
								String _item_id = (String) point_bean
										.get("item_id");
								String point_desc = (String) point_bean
										.get("p0407");
								if (_item_id.equalsIgnoreCase(item_id))
									// sumScore+=Double.parseDouble(temp[1]);
									sumScore = Double.parseDouble(temp[1]);
								if ("".equals(addMinusScore)) {
									if (sumScore > Double
											.parseDouble(addMinusToScore)) {
										info.append("\r\n" + itemdesc + "项目下"
												+ point_desc + "的得分不能大于"
												+ addMinusToScore + "分");
										break;
									}
								} else if ("".equals(addMinusToScore)) {
									if (sumScore < Double
											.parseDouble(addMinusScore)) {
										info.append("\r\n" + itemdesc + "项目下"
												+ point_desc + "的得分不能小于"
												+ addMinusScore + "分");
										break;
									}
								} else {
									if (sumScore > Double
											.parseDouble(addMinusToScore)
											|| sumScore < (Double
													.parseDouble(addMinusScore))) {
										info.append("\r\n" + itemdesc + "项目下"
												+ point_desc + "的得分不能大于 "
												+ addMinusToScore + "分，不能小于 "
												+ addMinusScore + "分");
										break;
									}
								}
							}
							/*
							 * if(addMinusScore.equals("")) {
							 * if(sumScore>Double.parseDouble(addMinusToScore))
							 * { info.append("\r\n"+itemdesc+" 项目下任务的加扣分总和不能大于"+
							 * addMinusToScore+"分"); break; } }else
							 * if(addMinusToScore.equals("")){
							 * if(sumScore<Double.parseDouble(addMinusScore)) {
							 * info.append("\r\n"+itemdesc+" 项目下任务的加扣分总和不能小于"+
							 * addMinusScore+"分"); break; } }else{
							 * if(sumScore>Double
							 * .parseDouble(addMinusToScore)||sumScore
							 * <(Double.parseDouble(addMinusScore))) {
							 * info.append
							 * ("\r\n"+itemdesc+" 项目下任务的加扣分总和不能大于 "+addMinusToScore
							 * +"分，不能小于 "+addMinusScore); break; } }
							 */
						}
					}

				}

				if (info.length() == 0) {

					for (int i = 0; i < scoreList.size(); i++) {
						ArrayList tempList = new ArrayList();

						String[] temp = ((String) scoreList.get(i)).split(":");
						if ("know_id".equalsIgnoreCase(temp[0])) {
							counter++;
							if (temp.length == 2)
								know_id = temp[1];
							continue;
						}
						if ("whole_id".equalsIgnoreCase(temp[0])) {
							if (temp.length == 2)
								whole_id = temp[1];
							counter++;
							continue;
						}
						String p0400 = temp[0].substring(2);
						LazyDynaBean abean = (LazyDynaBean) this.p04Map
								.get(p0400);
						String fromflag = (String) abean.get("fromflag");
						String p0407 = (String) abean.get("p0407");
						String p0413 = (String) abean.get("p0413"); // 分值
						String state = (String) abean.get("state");
						String chg_type = (String) abean.get("chg_type");

						if ("-1".equals(state) && "3".equals(chg_type))
							counter++;
						if (p0413 == null || p0413.trim().length() == 0) {
							if ("1"
									.equals(this.template_vo.getString("status"))) // 权重模板
							{
								p0413 = String.valueOf(this.template_vo
										.getDouble("topscore"));
							} else
								continue;
						}

						if ("null".equals(temp[1])) {
							if ("2".equals(flag)) {
								continue;
							}
							
							// 保存时，如果仅填写了评分说明，则将该条记录保留下来。为防止出错，分值指定为0 modify by 刘蒙
							String key = object_id + "/" + this.mainbodyBean.get("mainbody_id") + "/" + p0400;
							String desc = ReasonMap != null ? (String) ReasonMap.get(key) : null;
							if (desc == null || "".equals(desc)) {
								continue;
							} else {
								temp[1] = "0";
							}
						}
						if (this.VerifySameScore)// 打分分数相同，不让提交保存
						{
							if (allSameScore == 0) {
								firstScore = temp[1];
							}
							if (firstScore.equalsIgnoreCase(temp[1])
									|| (!"1".equals(scoreflag)
											&& temp[1]
													.matches("-?[\\d]*[.]?[\\d]*")
											&& firstScore
													.matches("-?[\\d]*[.]?[\\d]*") && Double
											.parseDouble(firstScore) == Double
											.parseDouble(temp[1])))
								allSameScore++;
						}
						IDGenerator idg = new IDGenerator(2, this.conn);
						String id = idg.getId("per_target_evaluation.id");
						tempList.add(new Integer(id));
						tempList.add(new Integer(this.plan_vo.getInt("plan_id")));
						tempList.add(this.object_id);
						tempList.add(this.userView.getA0100());
						tempList.add(new Integer(p0400));

						if (!"null".equals(temp[1])) {

							if (this.hasAddMinusItem
									&& this.addMinusPointStr.length() > 0
									&& this.addMinusPointStr.indexOf("'"
											+ p0400 + "'") != -1) {
								if ("false"
										.equalsIgnoreCase(EvalOutLimitStdScore)&&Float.parseFloat(p0413) != 0
										&& (Float.parseFloat(temp[1]) > Float
												.parseFloat(p0413) || Float
												.parseFloat(temp[1]) < (-Float
												.parseFloat(p0413)))) {//如果勾选 “评分时得分不受标准分值限制”  则这里不控制了   zhaoxg add  2014-7-11
									info.append("\r\n" + p0407 + ":输入值不在±"
											+ p0413 + "内");
									break;
								}
								tempList.add(new Float(temp[1]));
								tempList.add(new Float(0));
								tempList.add("");
							} else {

								if ("4".equals(this.scoreflag)) // 加减分
								{

									String addSubtractType = (String) this.planParam
											.get("addSubtractType"); // 加扣分处理方式
																		// 1:加扣分
																		// 2:加分
																		// 3：扣分
									double d = Double.parseDouble(temp[1]);
									if (addSubtractType != null
											&& "2"
													.equalsIgnoreCase(addSubtractType)) {
										if (d < 0) {
											info.append("\r\n" + p0407
													+ ":输入值不能为负分");
											break;
										}
									}
									if (addSubtractType != null
											&& "3"
													.equalsIgnoreCase(addSubtractType)) {
										if (d > 0) {
											info.append("\r\n" + p0407
													+ ":输入值只能为负分");
											break;
										}
									}
									if ("true"
											.equalsIgnoreCase(EvalOutLimitStdScore)) {
										tempList.add(new Float(temp[1]));
									} else {

										if (Float.parseFloat(p0413) != 0
												&& (Float.parseFloat(temp[1]) > Float
														.parseFloat(p0413) || Float
														.parseFloat(temp[1]) < -Float
														.parseFloat(p0413))) {
											info.append("\r\n"
													+ p0407
													+ ":"
													+ ResourceFactory
															.getProperty("org.performance.errorInfo2"));
											break;
										} else
											tempList.add(new Float(temp[1]));
									}
									tempList.add(new Float(0));
									tempList.add("");

								} else {
									boolean aflag = false;
									if ("2".equals(fromflag)
											&& !temp[1]
													.matches("-?[\\d]+[.]?[\\d]*")) {
										String p0401 = (String) abean
												.get("p0401");
										ArrayList gradeList = (ArrayList) pointDescMap
												.get(p0401.toUpperCase());
										grade_bean = (LazyDynaBean) gradeList
												.get(0);
										String pointkind = (String) grade_bean
												.get("pointkind");
										if (!"1".equals(pointkind))
											aflag = true;
									}

									if ("1".equals(fromflag)
											|| "3".equals(fromflag)
											|| "5".equals(fromflag) || aflag) // 自建
									{
										// scoreflag =2混合，=1标度(默认值=混合)
										if ("1".equals(scoreflag)
												|| aflag
												|| ("2".equals(scoreflag) && !temp[1]
														.matches("-?[\\d]*[.]?[\\d]*"))) {
											ArrayList pointGradeList = null;

											if ("1".equals(fromflag)
													|| "3".equals(fromflag)|| "5".equals(fromflag))
												pointGradeList = (ArrayList) pointDescMap
														.get("per_grade_desc");
											else {
												String p0401 = (String) abean
														.get("p0401");
												pointGradeList = (ArrayList) pointDescMap
														.get(p0401.toUpperCase());
											}

											LazyDynaBean _abean = null;
											String degree_id = "";
											String gradevalue = "";
											for (int j = 0; j < pointGradeList
													.size(); j++) {
												_abean = (LazyDynaBean) pointGradeList
														.get(j);
												String grade_template_id = "";
												if ("1".equals(fromflag)
														|| "3".equals(fromflag)|| "5".equals(fromflag))
													grade_template_id = (String) _abean
															.get("grade_template_id");
												else
													grade_template_id = (String) _abean
															.get("gradecode");

												String _gradevalue = (String) _abean
														.get("gradevalue");
												if (temp[1]
														.equalsIgnoreCase(grade_template_id)) {
													degree_id = grade_template_id;
													gradevalue = _gradevalue;
													break;
												}
											}
											if (degree_id.length() == 0) {
												info.append("\r\n" + p0407
														+ ":输入值不在标度范围内");
												break;
											}

											if (Float.parseFloat(p0413) < 0)
												gradevalue = String
														.valueOf(1 - Double
																.parseDouble(gradevalue));
											tempList.add(new Float(PubFunc
													.multiple(gradevalue,
															p0413, KeepDecimal))); // new
																					// Float(temp[1]));
											tempList.add(new Float(0));
											tempList.add(degree_id);
											thesamedegreeid = degree_id;
										} else {

											if (Float.parseFloat(temp[1]) > Float
													.parseFloat(p0413)
													&& "false"
															.equalsIgnoreCase(EvalOutLimitStdScore)) {
												info.append("\r\n"
														+ p0407
														+ ":"
														+ ResourceFactory
																.getProperty("org.performance.errorInfo2"));
												break;
											} else {
												tempList.add(new Float(PubFunc
														.round(temp[1],
																KeepDecimal)));
												tempList.add(new Float(0));
												ArrayList pointGradeList = (ArrayList) pointDescMap
														.get("per_grade_desc");
												LazyDynaBean _abean = null;
												String degree_id = "";

												double _maxScore = 0;
												String _maxGrade = "";
												double _minScore = -1;
												String _minGrade = "";

												int n = 0;
												for (int j = 0; j < pointGradeList
														.size(); j++) {
													_abean = (LazyDynaBean) pointGradeList
															.get(j);
													String grade_template_id = (String) _abean
															.get("grade_template_id");
													String _gradevalue = (String) _abean
															.get("gradevalue");
													String top_value = (String) _abean
															.get("top_value");
													String bottom_value = (String) _abean
															.get("bottom_value");
													double value = Double
															.parseDouble(temp[1]);
													double top = Double
															.parseDouble(PubFunc
																	.multiple(
																			top_value,
																			p0413,
																			2));
													double bottom = Double
															.parseDouble(PubFunc
																	.multiple(
																			bottom_value,
																			p0413,
																			2));

													if (Float.parseFloat(p0413) < 0) {
														top = Double
																.parseDouble(PubFunc
																		.multiple(
																				String.valueOf(1 - Double
																						.parseDouble(top_value)),
																				p0413,
																				2));
														bottom = Double
																.parseDouble(PubFunc
																		.multiple(
																				String.valueOf(1 - Double
																						.parseDouble(bottom_value)),
																				p0413,
																				2));
													}

													if (value <= top
															&& value >= bottom) {
														degree_id = grade_template_id;
														break;
													}

													if ("true"
															.equalsIgnoreCase(EvalOutLimitStdScore)) {
														if (top > _maxScore
																|| n == 0) {
															_maxScore = top;
															_maxGrade = grade_template_id;
														}
														if ((bottom < _minScore)
																|| n == 0) {
															_minScore = bottom;
															_minGrade = grade_template_id;
														}
													}
													n++;
												}

												if (degree_id.length() == 0) {
													double _score = Double
															.parseDouble(temp[1]);
													if (_score > _maxScore)
														degree_id = _maxGrade;
													if (_score < _minScore)
														degree_id = _minGrade;

												}

												tempList.add(degree_id);
												thesamedegreeid = degree_id;
											}
										}

									} else if ("2".equals(fromflag)) // 绩效指标库
									{
										String p0401 = (String) abean
												.get("p0401");
										ArrayList gradeList = (ArrayList) pointDescMap
												.get(p0401.toUpperCase());
										grade_bean = (LazyDynaBean) gradeList
												.get(0);
										String pointkind = (String) grade_bean
												.get("pointkind");
										String status = (String) grade_bean
												.get("status");
										if ("1".equals(pointkind)
												&& "1".equals(status)) {
											continue;
										}
										if ("1".equals(pointkind)
												&& !temp[1].trim().matches(
														"-?[\\d]+[.]?[\\d]*")) {
											info.append("\r\n" + p0407
													+ "定量指标需填入数值型数据！");
											break;
										}
										StringBuffer a_tmp = new StringBuffer();
										String a_info = setPointValue(tempList,
												temp[1].trim(), gradeList,
												Float.parseFloat(p0413),
												scoreflag, pointkind, a_tmp);
										thesamedegreeid = a_tmp.toString();
										if (a_info.length() > 0) {
											info.append("\r\n"
													+ p0407
													+ ":"
													+ ResourceFactory
															.getProperty("org.performance.errorInfo1"));
											break;
										}

									}

								}
							}
						} else {
							tempList.add(new Float(0));
							tempList.add(new Float(0));
							tempList.add("");
						}

						if (ReasonMap != null) {
							String key = object_id
									+ "/"
									+ (String) this.mainbodyBean
											.get("mainbody_id") + "/" + p0400;
							if (ReasonMap.get(key) != null) {
								String reasons = (String) ReasonMap.get(key);
								tempList.add(reasons);
							} else
								tempList.add("");
						} else {
							tempList.add("");
						}

						resultList.add(tempList);
						/*
						 * int allSameDegreeid=0; String allSameDegreeid_str="";
						 */
						if (i == 0) {
							allSameDegreeid_str = thesamedegreeid;
						}
						if (!allSameDegreeid_str
								.equalsIgnoreCase(thesamedegreeid)) {
							allSameDegreeid_str = thesamedegreeid;
						} else {
							allSameDegreeid++;
						}
					}
					
					//检验总体评价的分值是否在模板总分之内
					if ("true".equalsIgnoreCase((String) this.planParam.get("WholeEval"))) // 总体评价
					{
						
							if("1".equals(this.planParam.get("WholeEvalMode"))){
								
								//20141203  dengcan  如果总体评价分值没填，且没有设置总体评价必填项，无需判断总体评价的分值是否在模板总分之内
								if(this.wholeEvalScore!=null&&this.wholeEvalScore.trim().length()==0&&!"True".equalsIgnoreCase((String)planParam.get("MustFillWholeEval")))
								{
									
								}
								else
								{
								
									if (!(String.valueOf(wholeEvalScore).matches(
										"-?[\\d]+[.]?[\\d]*"))) {
										info.append("\r\n 总体评价需填入数值型数据！");
									}
					
									else if (Double.parseDouble(wholeEvalScore) > this.template_vo.getDouble("topscore") || Double.parseDouble(wholeEvalScore) < 0) {
										info.append("\r\n 总体评价的分值必须在0~"+this.template_vo.getDouble("topscore")+"之间");
									}
								}
								
							}
						
					}
				}

				if (info.length() == 0 && allSameScore != 1
						&& allSameScore == scoreList.size() - counter) {
					if ("1".equals(flag) || "8".equals(flag))
						info.append(ResourceFactory
								.getProperty("org.performance.errorInfo4"));
					if ("2".equals(flag))
						info.append(ResourceFactory
								.getProperty("org.performance.errorInfo3"));
				}
				if (info.length() == 0
						&& allSameDegreeid == scoreList.size() - counter) {
					String SameResultsOption = "1";
					if (this.planParam.get("SameResultsOption") != null)
						SameResultsOption = (String) this.planParam
								.get("SameResultsOption");
					if (info.length() == 0
							&& ("2".equals(SameResultsOption) || "3"
									.equals(SameResultsOption))) {
						// ht.put("NoCanSaveDegrees",NoCanSaveDegrees);
						// ht.put("SameResultsOption",
						// NullToFalse(sameResultsOption));
						if ("2".equals(SameResultsOption))
							info.append("考核对象结果全部相同，不允许保存！");
						else if ("3".equals(SameResultsOption)) {
							String NoCanSaveDegrees = "";
							if (this.planParam.get("NoCanSaveDegrees") != null)
								NoCanSaveDegrees = (String) this.planParam
										.get("NoCanSaveDegrees");
							if (("," + NoCanSaveDegrees.toUpperCase() + ",")
									.indexOf(("," + thesamedegreeid + ",")) != -1)
								info.append("考核对象结果全部相同，不允许保存！");
						}
					}
				}
				if (info.length() == 0
						&& ("2".equals(flag) || "8".equals(flag))
						&& "1".equals(this.mainbodyBean.get("fillctrl"))
						&& resultList.size() == 0) {
					info.append(this.perObject_vo.getString("a0101")
							+ ResourceFactory
									.getProperty("lable.performnace.mustScore")
							+ "!");
				}
				if (info.length() == 0) {
					String tt = this.validateScoreCtrl(scoreList);
					info.append(tt);
				}
				if (info.length() == 0) {

					dao.delete(
							"delete from per_target_evaluation where plan_id="
									+ this.plan_vo.getInt("plan_id")
									+ " and object_id='" + this.object_id
									+ "' and mainbody_id='"
									+ this.userView.getA0100() + "'",
							new ArrayList());
					StringBuffer sql = new StringBuffer(
							"insert into per_target_evaluation (id,plan_id,object_id,mainbody_id,p0400,score,amount,degree_id,reasons) values (?,?,?,?,?,?,?,?,?)");
					if (resultList.size() > 0)
						dao.batchInsert(sql.toString(), resultList);
					String showDeductionCause = (String) this.planParam
							.get("showDeductionCause"); // 显示扣分原因(Ture,
														// False(默认))
					String MustFillCause = (String) this.planParam
							.get("MustFillCause"); // 评分说明是否必填
					/*
					 * <MustFillOptions> // Flag：高于Up 低于Down IsValid: 是否有效，默认为
					 * False <MustFillOption Flag="Up" IsValid="True"
					 * DegreeId="A" /> <MustFillOption Flag="Down"
					 * IsValid="True" DegreeId="A" /> </MustFillOptions>
					 */
					ArrayList MustFillOptionsList = (ArrayList) this.planParam
							.get("MustFillOptionsList");
					RowSet rowSet = null;
					if (("2".equals(flag) || "8".equals(flag))
							&& "True".equalsIgnoreCase(showDeductionCause)
							&& "True".equalsIgnoreCase(MustFillCause)) {
						if (MustFillOptionsList != null
								&& MustFillOptionsList.size() > 0) {
							StringBuffer sql_buf = new StringBuffer();
							sql_buf.append("select pte.reasons,p04.p0407 from per_target_evaluation pte left join p04 on pte.p0400=p04.p0400");
							sql_buf.append(" where ");
							sql_buf.append(" pte.plan_id="
									+ this.plan_vo.getInt("plan_id"));
							sql_buf.append(" and pte.object_id='"
									+ this.object_id + "'");
							sql_buf.append(" and pte.mainbody_id='"
									+ this.userView.getA0100() + "'");
							StringBuffer _str = new StringBuffer();//记录sql语句，用来判断是否有指标评分了
							_str.append(sql_buf.toString());
							boolean aflag = true;
							StringBuffer str = new StringBuffer();
							for (int i = 0; i < MustFillOptionsList.size(); i++) {
								LazyDynaBean abean = (LazyDynaBean) MustFillOptionsList
										.get(i);
								String Flag = (String) abean.get("Flag");
								String IsValid = (String) abean.get("IsValid");
								if ("true".equalsIgnoreCase(IsValid))
									aflag = false;
								String DegreeId = (String) abean
										.get("DegreeId");
								if ("Up".equalsIgnoreCase(Flag)
										&& "true".equalsIgnoreCase(IsValid)) {
									str.append(" or UPPER(pte.degree_id)<'"
											+ DegreeId.toUpperCase() + "'");
								} else if ("Down".equalsIgnoreCase(Flag)
										&& "true".equalsIgnoreCase(IsValid)) {
									str.append(" or UPPER(pte.degree_id)>'"
											+ DegreeId.toUpperCase() + "'");
								}
							}
							if(str.length()>0){
								sql_buf.append(" and (1=2");
								sql_buf.append(str);
								sql_buf.append(")");
							}
							sql_buf.append(" and "
									+ Sql_switcher.length("pte.degree_id")
									+ ">0 order by p04.seq");
							_str.append(" and "
									+ Sql_switcher.length("pte.degree_id")
									+ ">0 order by p04.seq");
							if (aflag) {
								String _sql = "select pte.reasons,p04.p0407 from per_target_evaluation pte left join p04 on pte.p0400=p04.p0400 where pte.plan_id="
										+ this.plan_vo.getInt("plan_id")
										+ " and pte.object_id='"
										+ this.object_id
										+ "' and pte.mainbody_id='"
										+ this.userView.getA0100()
										+ "' order by p04.seq ";
								rowSet = dao.search(_sql);
								while (rowSet.next()) {
									String reasons = Sql_switcher.readMemo(
											rowSet, "reasons");
									if (reasons == null
											|| reasons.trim().length() == 0) {
										info.append(rowSet.getString("p0407")
												+ ";\r\n");
									}
								}
							} else {
								rowSet = dao.search(sql_buf.toString());
								boolean isHaveValue = false;//判断是否打过分了，如果没打分那么也认为评分说明没填 zhaoxg add 2015-12-10
								while (rowSet.next()) {
									String reasons = Sql_switcher.readMemo(
											rowSet, "reasons");
									if (reasons == null
											|| reasons.trim().length() == 0) {
										info.append(rowSet.getString("p0407")
												+ ";\r\n");
									}
								}
								if(_str.toString().length()>0){
									RowSet rs = dao.search(_str.toString());
									if(rs.next()){
										isHaveValue = true;
									}
								}
								if(!isHaveValue){
									info.append("全部指标");
								}
							}
						} else {
							String _sql = "select pte.reasons,p04.p0407 from per_target_evaluation pte left join p04 on pte.p0400=p04.p0400 where pte.plan_id="
									+ this.plan_vo.getInt("plan_id")
									+ " and pte.object_id='"
									+ this.object_id
									+ "' and pte.mainbody_id='"
									+ this.userView.getA0100()
									+ "' order by p04.seq ";
							rowSet = dao.search(_sql);
							while (rowSet.next()) {
								String reasons = Sql_switcher.readMemo(rowSet,
										"reasons");
								if (reasons == null
										|| reasons.trim().length() == 0) {
									info.append(rowSet.getString("p0407")
											+ ";\r\n");
								}
							}
						}
						if (info.length() > 0)
							info.append("\r\n以上" + aitemdesc + "请填写评分说明！");
						if (rowSet != null)
							rowSet.close();
					}
					if (info.length() == 0) {
						if (this.mainbodyBean.get("fillctrl") != null
								&& "1".equals(((String) this.mainbodyBean.get("fillctrl"))
										.trim())) {
							if (validateMustFill(String.valueOf(this.plan_vo
									.getInt("plan_id")),
									this.userView.getA0100(), this.object_id)) {
								if (this.perObject_vo != null)
									info.append(this.perObject_vo
											.getString("a0101"));
								info.append("没有打分不能提交!");
							}
						}
					}
				}
			}
			if (info.length() == 0) {
				if (this.mainbodyBean != null) // 存在
				{
					String sql_str = "update per_mainbody set status=" + flag;
					if (know_id.trim().length() > 0)
						sql_str += ",know_id=" + know_id.trim();
					else
						sql_str += ",know_id=-1";
					// 提交分数的时候再记录时间 JinChunhai 2012.06.12
					if ("2".equals(flag)) {
						Calendar cl = Calendar.getInstance();
						int year = cl.get(Calendar.YEAR);
						int month = cl.get(Calendar.MONTH) + 1;
						int day = cl.get(Calendar.DAY_OF_MONTH);
						int hh = cl.get(Calendar.HOUR_OF_DAY);
						int mm = cl.get(Calendar.MINUTE);
						int ss = cl.get(Calendar.SECOND);
						String dddd = year + "-" + month + "-" + day + " " + hh
								+ ":" + mm + ":" + ss;
						if (Sql_switcher.searchDbServer() == Constant.ORACEL)
							sql_str += ",sub_date=to_date('" + dddd
									+ "','yyyy-mm-dd hh24:mi:ss')";
						else
							sql_str += ",sub_date='" + dddd + "'";
					}
					if (whole_id.trim().length() > 0)
						sql_str += ",whole_grade_id=" + whole_id.trim();
					else
						sql_str += ",whole_grade_id=-1";
					sql_str += " where  plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and object_id='" + this.object_id
							+ "' and mainbody_id='" + this.userView.getA0100()
							+ "'";
					dao.update(sql_str);
				} else {
					RecordVo mainbody_vo = getSelfVo(this.userView.getA0100(),
							this.userView.getDbname());

					RecordVo vo = new RecordVo("per_mainbody");
					IDGenerator idg = new IDGenerator(2, this.conn);
					String id = idg.getId("per_mainbody.id");
					vo.setInt("id", Integer.parseInt(id));
					if ("2".equals(flag))
						vo.setDate("sub_date", new Date());
					vo.setString("b0110", mainbody_vo.getString("b0110"));
					vo.setString("e0122", mainbody_vo.getString("e0122"));
					vo.setString("e01a1", mainbody_vo.getString("e01a1"));
					vo.setString("object_id", this.object_id);
					vo.setString("mainbody_id", this.userView.getA0100());
					vo.setString("a0101", this.userView.getUserFullName());
					String sql0 = "select pms.* from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and  ppb.plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and pms.level=" + body_id;
					if (Sql_switcher.searchDbServer() == Constant.ORACEL)
						sql0 = "select pms.* from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and  ppb.plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and pms.level_o=" + body_id;
					RowSet rowSet = dao.search(sql0);
					if (rowSet.next())
						vo.setInt("body_id", rowSet.getInt("body_id"));

					vo.setInt("plan_id", this.plan_vo.getInt("plan_id"));
					vo.setInt("status", Integer.parseInt(flag));
					if (know_id.trim().length() > 0)
						vo.setInt("know_id", Integer.parseInt(know_id));
					if (whole_id.trim().length() > 0)
						vo.setInt("whole_grade_id", Integer.parseInt(whole_id));

					dao.addValueObject(vo);
				}
				if("2".equals(flag)){
					//-------------------------评分过程   zhaoxg add 2014-3-19-------------------------------------------------
					Calendar cl = Calendar.getInstance();
					int year = cl.get(Calendar.YEAR);
					int month = cl.get(Calendar.MONTH) + 1;
					int day = cl.get(Calendar.DAY_OF_MONTH);
					int hh = cl.get(Calendar.HOUR_OF_DAY);
					int mm = cl.get(Calendar.MINUTE);
					int ss = cl.get(Calendar.SECOND);
					String dddd = year + "-" + month + "-" + day + " " + hh
							+ ":" + mm + ":" + ss;
					RowSet rs=dao.search("select id from per_object where plan_id="+plan_id+" and object_id='"+object_id+"'");
					if(rs.next()){
						RecordVo vo = new RecordVo("per_object");
						vo.setInt("id", rs.getInt("id"));
						vo = dao.findByPrimaryKey(vo);
						initXML(plan_id,object_id);
						Element element = new Element("record");
						element.setAttribute("opt_object",this.userView.getA0100());
						element.setAttribute("name",getName());
						element.setAttribute("date",dddd);
						element.setAttribute("status","2");
						element.setAttribute("status_desc","提交");
						element.setAttribute("reason","");
						element.setAttribute("report_to","");
						setAttributeValue(element);
						String value = saveStrValue();
						vo.setString("score_process", value);
						dao.updateValueObject(vo);
					}
					/**提交全部了 直接制成已办  zhaoxg add 2014-9-1 */
					PendingTask pt = new PendingTask();
					LazyDynaBean bean = new LazyDynaBean();
					String tempsql = "select ISGRADE,OPT from per_plan_body where plan_id="+plan_id+" and BODY_ID=5";
		    		RowSet rs1 = dao.search(tempsql);
		    		boolean isgrade = false;//本人考核主体类别是否参与打分
		    		if(rs1.next() && ("0".equals(rs1.getString("isgrade"))||"".equals(rs1.getString("isgrade")))){
		    			isgrade = true;
		    		}
					
					String sql="";
					if("False".equalsIgnoreCase(NoApproveTargetCanScore)){
						sql="select pm.* from per_mainbody pm,per_object po where pm.object_id=po.object_id and po.plan_id='"+plan_id+"' and pm.plan_id='"+plan_id+"' and pm.mainbody_id='"+this.userView.getA0100()+"' and po.sp_flag='03'  and "+Sql_switcher.isnull("status", "0")+"<>2 ";
					}else{
						sql="select * from per_mainbody pm,per_plan_body pp  where pp.plan_id=pm.plan_id and pm.body_id=pp.body_id and "+Sql_switcher.isnull("pp.isgrade", "0")+"=0"
							+"and  pm.plan_id='"+plan_id+"' and "+Sql_switcher.isnull("status", "0")+"<>2  and mainbody_id='"+this.userView.getA0100()+"' ";
					}
					if(!isgrade){// 不参与评分
						sql += " and pm.body_id<>5";
					}
					bean.set("oper", "start");
					bean.set("sql", sql);
					LazyDynaBean _bean=PerformanceImplementBo.updatePendingTask(this.conn, this.userView,"Usr"+this.userView.getA0100(),plan_id,bean,"2");
					if("update".equals(_bean.get("selfflag"))){
						pt.updatePending("P", "PER"+_bean.get("selfpending_id"), 1, "计划打分", this.userView);
					}
				}
				AsyncEmailBo bo=new AsyncEmailBo(this.conn,this.userView);
				
				if ("2".equals(flag)) {
					/** 发送邮件给审批人 */
//					if (getEvaluateCard_mail().equalsIgnoreCase("true")
//							|| (SystemConfig.getPropertyValue("clientName") != null && SystemConfig
//									.getPropertyValue("clientName")
//									.equalsIgnoreCase("bjpt"))) {

						LazyDynaBean templateBo = null;
						if (this.evaluateCard_mail_template.length() > 0)
							templateBo = getTemplateMailInfo(this.evaluateCard_mail_template);

						String title = "目标卡评估";
						String content = "";
						String objectName = "";

						String appealObject_id = "";
						String appealName = "";
						String abody_id = "";

						if (templateBo != null)
							title = (String) templateBo.get("subject");
						RowSet rowSet = dao
								.search("select a0101 from per_object where plan_id="
										+ this.plan_vo.getInt("plan_id")
										+ " and object_id='" + object_id + "'");
						if (rowSet.next())
							objectName = rowSet.getString(1);
						LoadXml parameter_content = null;
						if (BatchGradeBo.getPlanLoadXmlMap().get(
								this.plan_vo.getInt("plan_id") + "") == null) {

							parameter_content = new LoadXml(this.conn,
									this.plan_vo.getInt("plan_id") + "");
							BatchGradeBo.getPlanLoadXmlMap().put(
									this.plan_vo.getInt("plan_id") + "",
									parameter_content);
						} else {
							parameter_content = (LoadXml) BatchGradeBo
									.getPlanLoadXmlMap()
									.get(this.plan_vo.getInt("plan_id") + "");
						}
						Hashtable params = parameter_content.getDegreeWhole();
						String GradeByBodySeq = "false";// 按考核主体顺序号控制评分流程(True,
														// False默认为False)
						if (params.get("GradeByBodySeq") != null)
							GradeByBodySeq = (String) params
									.get("GradeByBodySeq");
						ArrayList list = null;
						StringBuffer buf = new StringBuffer("");
						if ("true".equalsIgnoreCase(GradeByBodySeq)) {
							list = this.getUpLevelInfo(String
									.valueOf(this.plan_vo.getInt("plan_id")),
									this.object_id, buf);

						} else {
							list = getUpLevelInfo(String.valueOf(this.plan_vo
									.getInt("plan_id")), this.object_id,
									body_id);
							if (list.size() == 0 && !"-2".equals(body_id)) {
								String followBodyId = getfollowBodyid(body_id);
								int currentLevel = getCurrentLevel(followBodyId);
								// 目标卡制订支持几级审批
								String targetMakeSeries = (String) planParam
										.get("targetMakeSeries");
								String aObject_id = object_id;
								if (this.plan_vo.getInt("object_type") == 1
										|| this.plan_vo.getInt("object_type") == 3
										|| this.plan_vo.getInt("object_type") == 4) {
									aObject_id = this.un_functionary;
								}
								for (int i = currentLevel + 1; i <= Integer
										.parseInt(targetMakeSeries); i++) {

									ArrayList appealObjectList = getUpLevelInfo(
											String.valueOf(this.plan_vo
													.getInt("plan_id")),
											this.object_id, followBodyId); // getAppealObjectInfo(followBodyId,
																			// "Usr",
																			// aObject_id,String.valueOf(this.plan_vo.getInt("plan_id")),
																			// "",
																			// "0",object_id);

									if (appealObjectList.size() > 0) {
										list = appealObjectList;
										break;
									}
									followBodyId = getfollowBodyid(followBodyId);
								}
							}
						}
						LazyDynaBean abean = null;
						for (int i = 0; i < list.size(); i++) {
							abean = (LazyDynaBean) list.get(i);
							appealObject_id = (String) abean
									.get("appealObject_id");
							appealName = (String) abean.get("appealName");
							abody_id = (String) abean.get("abody_id");

							// title=objectName+"的"+this.plan_vo.getString("name")+"考核评分已提交，请评分。 来自："+this.userView.getUserFullName();
							title = this.getDBStr("4",
									this.plan_vo.getString("name"), objectName,
									this.userView.getUserFullName());
							if (title == null || "".equals(title))
								title = objectName + "的"
										+ this.plan_vo.getString("name")
										+ "考核评分已提交，请评分。 来自："
										+ this.userView.getUserFullName();
							String model = "4";
							if (this.plan_vo.getInt("object_type") == 1
									|| this.plan_vo.getInt("object_type") == 3
									|| this.plan_vo.getInt("object_type") == 4)
								model = "1";
							// else
							// if(this.userView.getA0100().equals(object_id))
							// model="2";
							content = getEmailContent(appealName,
									this.userView.getUserFullName(),
									objectName, templateBo, 2);
							String url = "/performance/objectiveManage/objectiveCard.do?b_query=query&body_id="
									+ abody_id
									+ "&model="
									+ model
									+ "&opt=2&planid="
									+ PubFunc.encryption(this.plan_vo
											.getInt("plan_id") + "")
									+ "&object_id="
									+ PubFunc.encryption(object_id);
							if (SystemConfig.getPropertyValue("clientName") != null
									&& "bjpt".equalsIgnoreCase(
                                    SystemConfig.getPropertyValue(
                                            "clientName"))) {
								sendMessageToPT(title, content.toString(),
										appealObject_id, "Usr", url, "2");
							}
							/**评分给下个审批人推送待办  zhaoxg add 2014-9-1 */
							PendingTask pt = new PendingTask();
							LazyDynaBean bean = new LazyDynaBean();
							String _title=this.plan_vo.getString("name")+"_(评分)";
							String sql="";
							if("False".equalsIgnoreCase(NoApproveTargetCanScore)){
								sql="select pm.* from per_mainbody pm,per_object po where pm.object_id=po.object_id and po.plan_id='"+plan_id+"' and pm.plan_id='"+plan_id+"' and pm.mainbody_id='"+this.userView.getA0100()+"' and po.sp_flag='03'  and "+Sql_switcher.isnull("status", "0")+"<>2";
							}else{
								sql="select * from per_mainbody pm,per_plan_body pp  where pp.plan_id=pm.plan_id and pm.body_id=pp.body_id and "+Sql_switcher.isnull("pp.isgrade", "0")+"=0"
									+"and  pm.plan_id='"+plan_id+"' and "+Sql_switcher.isnull("status", "0")+"<>2  and mainbody_id='"+this.userView.getA0100()+"'";
							}
							String href="";
	                        if ("2".equals(object_type))
	                        	href = "/performance/objectiveManage/objectiveEvaluate/objective_evaluate_list.do?b_init=init&plan_id=" + plan_id + "&returnflag=8&opt=1&entranceType=0&isSort=0";
	                        else
	                        	href = "/performance/objectiveManage/orgPerformance/org_performance_list.do?b_init=init&plan_id=" + plan_id + "&returnflag=8&opt=1";
							bean.set("oper", "start");
							bean.set("title", _title);
							bean.set("url", href);
							bean.set("sql", sql);
							LazyDynaBean _bean=PerformanceImplementBo.updatePendingTask(this.conn, this.userView,"Usr"+appealObject_id,plan_id,bean,"1");
							if("add".equals(_bean.get("flag"))){
								pt.insertPending("PER"+_bean.get("pending_id"),"P",_title,this.userView.getDbname()+this.userView.getA0100(),"Usr"+appealObject_id,href,0,1,"计划打分",this.userView);	
							}	
							if("update".equals(_bean.get("selfflag"))){
								pt.updatePending("P", "PER"+_bean.get("selfpending_id"), 1, "计划打分", this.userView);
							}
//							this.insertPending(title, content.toString(),
//									appealObject_id, "USR", url, "2");
							if ("true".equalsIgnoreCase(getEvaluateCard_mail())) {
								if ("1".equals(isEmail)) {
									LazyDynaBean _abean = getUserNamePassword("Usr"
											+ appealObject_id);
									String username = (String) _abean
											.get("username");
									String password = (String) _abean
											.get("password");
									String _url="";
									if (email_link)
										_url += this.userView.getServerurl()
												+ "/performance/objectiveManage/objectiveCard.do?b_query=query&body_id="
												+ abody_id
												+ "&model="
												+ model
												+ "&opt=2&planid="
												+ PubFunc
														.encryption(this.plan_vo
																.getInt("plan_id")
																+ "")
												+ "&object_id="
												+ PubFunc.encryption(object_id)
												+ "&appfwd=1&etoken="
												+ PubFunc
														.convertUrlSpecialCharacter(PubFunc
																.convertTo64Base(username
																		+ ","
																		+ password));
//									sendMessage(title, content.toString(),
//											appealObject_id, "Usr");
									LazyDynaBean tempbean=new LazyDynaBean();
									tempbean.set("objectId", "Usr"+appealObject_id);
									tempbean.set("subject", title);
									tempbean.set("bodyText", content);
									tempbean.set("href", _url);
									tempbean.set("hrefDesc", plan_vo.getString("name")+"_(评分)");
									bo.send(tempbean);
									String corpid = (String) ConstantParamter.getAttribute("wx","corpid");  
									if(corpid!=null&&corpid.length()>0){//推送微信公众号  zhaoxg add 2015-5-5
										WeiXinBo.sendMsgToPerson("Usr", appealObject_id, title, content, "http://www.hjsoft.com.cn:8089/UserFiles/Image/tongzhi.png", "");
									}
									String ddcorpid = (String) ConstantParamter.getAttribute("DINGTALK","corpid");  
									if(ddcorpid!=null&&ddcorpid.length()>0){//推送钉钉公众号  xus add 2017-6-2
										DTalkBo.sendMessage( appealObject_id,"Usr", title, content, "http://www.hjsoft.com.cn:8089/UserFiles/Image/tongzhi.png", "");
									}
								}
							}
						}
						if ("true".equalsIgnoreCase(GradeByBodySeq)) {
							if (buf.length() > 0) {
								if (list.size() == 0
										&& SystemConfig
												.getPropertyValue("clientName") != null
										&& "bjpt".equalsIgnoreCase(
                                        SystemConfig.getPropertyValue(
                                                "clientName"))) {
									sendMessageToPT("", "", object_id, "Usr",
											"", "4");
								}
								if (list.size() == 0) {
									this.insertPending("", "", object_id,
											"USR", "", "4");
								}
							}

						} else {
							if (list.size() == 0
									&& SystemConfig
											.getPropertyValue("clientName") != null
									&& "bjpt".equalsIgnoreCase(
                                    SystemConfig.getPropertyValue(
                                            "clientName"))) {
								sendMessageToPT("", "", object_id, "Usr", "",
										"4");
							}
							if (list.size() == 0) {
								this.insertPending("", "", object_id, "USR",
										"", "4");
							}
						}
//					}

					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) {
						if (this.un_functionary.equalsIgnoreCase(this.userView
								.getA0100())) {
							setArticleState(String.valueOf(this.plan_vo
									.getInt("plan_id")), this.un_functionary,
									"usr");
						}
					} else {
						if (object_id
								.equalsIgnoreCase(this.userView.getA0100())) {
							setArticleState(String.valueOf(this.plan_vo
									.getInt("plan_id")), object_id, "usr");
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return info.toString();
	}

	public String validateSameScoreAllNumLess(String flag) {
		String info = "";
		RowSet rs = null;
		RowSet rowSet = null;
		try {
			String SameAllScoreNumLess = (String) this.planParam
					.get("SameAllScoreNumLess");// 总分相同的人数不能等于和多余=0不控制，在0-1之间，按百分比控制，比1大按个数控制，
			ContentDAO dao = new ContentDAO(this.conn);
			if (SameAllScoreNumLess != null && !"".equals(SameAllScoreNumLess)
					&& !"0".equals(SameAllScoreNumLess)) {

				BigDecimal one = new BigDecimal("1");
				BigDecimal zero = new BigDecimal("0");
				BigDecimal sasn = new BigDecimal(SameAllScoreNumLess);
				rowSet = dao.search("select count(*) as num,"
						+ Sql_switcher.isnull("score", "0")
						+ " score from per_mainbody  where  plan_id="
						+ this.plan_vo.getInt("plan_id") + " and mainbody_id='"
						+ this.userView.getA0100() + "' group by score");
				rs = dao.search("select count(*) as num,"
						+ Sql_switcher.isnull("score", "0")
						+ " score from per_mainbody  where  plan_id="
						+ this.plan_vo.getInt("plan_id") + " and mainbody_id='"
						+ this.userView.getA0100() + "' group by score");
				String alertstr = "";
				if (sasn.compareTo(one) > 0)// 按个数
				{

				} else {
					alertstr = "%";
					rowSet = dao
							.search("select count(*) as num from per_mainbody  where  plan_id="
									+ this.plan_vo.getInt("plan_id")
									+ " and mainbody_id='"
									+ this.userView.getA0100() + "'");
					while (rowSet.next()) {
						String all = rowSet.getString(1);
						BigDecimal allbig = new BigDecimal(all);
						sasn = allbig.multiply(sasn).divide(one, 0,
								BigDecimal.ROUND_HALF_UP);
					}
				}
				while (rs.next()) {
					String score = rs.getString(2);
					BigDecimal scoreBig = new BigDecimal(score);
					if (scoreBig.compareTo(zero) == 0)//
						continue;
					BigDecimal allSame = new BigDecimal(rs.getString(1));
					if (allSame.compareTo(new BigDecimal("1")) == 0)// 只有一个人不控制
						continue;
					if (allSame.compareTo(sasn) >= 0) {
						if ("".equals(alertstr)) {
							info = "总分相同的对象个数不能等于或多于" + SameAllScoreNumLess
									+ "个,否则不能提交打分!";
						} else {
							BigDecimal temp = new BigDecimal(
									SameAllScoreNumLess);
							BigDecimal tmp = temp
									.multiply(new BigDecimal("100"));
							info = "总分相同的对象个数不能等于或多于" + (tmp.toString())
									+ alertstr + ",否则不能提交打分!";
						}
						break;
					}
				}
			}
			if (info.length() > 0 && "2".equals(flag)) {
				dao.update("update per_mainbody set status=1 where  plan_id="
						+ this.plan_vo.getInt("plan_id") + " and object_id='"
						+ this.object_id + "' and mainbody_id='"
						+ this.userView.getA0100() + "'");
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (rowSet != null)
					rowSet.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return info;
	}
	/**
	 * 
	 * 判断是否存在已经打完分的主体    
	 * @param @param object_id
	 * @return boolean    
	 * @throws
	 */
	public boolean isExsitMainbodyHaveScored(String object_id) {
		RowSet rs = null;
		try {
			String sql = "";
			ContentDAO dao = new ContentDAO(this.conn);
			sql = "select count(*) from per_mainbody where plan_id="+plan_id+" and object_id='"+this.object_id+"' and  status=2 ";
			rs = dao.search(sql);
			if(rs.next()){//如果存在，返回true
				if(rs.getInt(1)>0)
					return true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null){
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return false;
	}
	
	/**
	 * 
	 * @Title: 判断该主体对当前能打分的对象是否都已评完分   
	 * @Description:   判断该主体对当前能打分的对象是否都已评完分 
	 * @param  String    
	 * @throws
	 */
	public boolean exsitObjectNoScore(String plan_id) throws GeneralException {
		RowSet rs = null;
		try {
			String sql = "";
			ArrayList tempList = null;
			String seq = null;
			String object_id = null;
			ContentDAO dao = new ContentDAO(this.conn);
			LoadXml parameter_content = null;
			if (BatchGradeBo.getPlanLoadXmlMap().get(
					this.plan_vo.getInt("plan_id") + "") == null) {

				parameter_content = new LoadXml(this.conn,
						this.plan_vo.getInt("plan_id") + "");
				BatchGradeBo.getPlanLoadXmlMap().put(
						this.plan_vo.getInt("plan_id") + "",
						parameter_content);
			} else {
				parameter_content = (LoadXml) BatchGradeBo
						.getPlanLoadXmlMap()
						.get(this.plan_vo.getInt("plan_id") + "");
			}
			Hashtable params = parameter_content.getDegreeWhole();
			String GradeByBodySeq = "false";// 按考核主体顺序号控制评分流程(True,False默认为False)
			if (params.get("GradeByBodySeq") != null)
				GradeByBodySeq = (String) params.get("GradeByBodySeq");
			//单人或多人评分页面是否允许自我评分
			String mitiScoreMergeSelfEval = "false";
			if (params.get("mitiScoreMergeSelfEval") != null)
				mitiScoreMergeSelfEval = (String)params.get("mitiScoreMergeSelfEval");
			if("false".equalsIgnoreCase(GradeByBodySeq)){//如果没有设置评分顺序,查找计划内所有对象是否都以评完分
				sql = "select count(*) from per_mainbody where plan_id="+plan_id+" and mainbody_id='"+this.userView.getA0100()+"' and  status<2 ";
				if(!"true".equalsIgnoreCase(mitiScoreMergeSelfEval)) {
					sql+=" and mainbody_id<>object_id";
				}
				rs = dao.search(sql);
				if(rs.next()){//如果存在，返回false
					if(rs.getInt(1)>0)
						return false;
				}
			} else {
				//1、是否存在对该主体没有设置顺序的考核对象
				sql = " select count(*) from per_mainbody where plan_id="+plan_id+" and status<2 and mainbody_id='"+this.userView.getA0100()+"' and seq is null";
				if(!"true".equalsIgnoreCase(mitiScoreMergeSelfEval)) {
					sql+=" and mainbody_id<>object_id";
				}
				rs = dao.search(sql);
				if(rs.next()){//如果存在，返回false
					if(rs.getInt(1)>0)
						return false;
				}
				//2、查找该主体对应最小的顺序号的主体
				ArrayList seqList =  getMinSeq(plan_id);
				for(int i=0;i<seqList.size();i++){
					tempList = (ArrayList)seqList.get(i);
					seq = (String)tempList.get(0);
					object_id = (String)tempList.get(1);
					if(object_id.equals(this.object_id)){
						continue ;
					}
					sql="select count(*) from per_mainbody where plan_id="+plan_id+" and status<2 and seq="+seq+" and object_id='"+object_id+"' and mainbody_id='"+this.userView.getA0100()+"' ";
					rs = dao.search(sql);
					if(rs.next()){//如果存在，返回false
						if(rs.getInt(1)>0)
							return false;
					}
				}
				//3、判断是否存在比该主体顺序号小的并且提交的考核对象
				for(int i=0;i<seqList.size();i++){
					tempList = (ArrayList)seqList.get(i);
					object_id = (String)tempList.get(1);
					if(object_id.equals(this.object_id)){
						continue ;
					}
					sql = "select count(*) from per_mainbody where plan_id="+plan_id+" and status=2 " 
							+"and object_id='"+object_id+"' and seq<(select "+Sql_switcher.isnull("seq", "0")+" "
							+"from per_mainbody where plan_id="+plan_id+" and status<2 and object_id='"+object_id+"' and mainbody_id='"+this.userView.getA0100()+"') ";
					rs = dao.search(sql);
					if(rs.next()){//如果存在，返回false
						if(rs.getInt(1)>0)
							return false;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw GeneralExceptionHandler.Handle(e);
		} finally {
			if(rs != null){
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return true;
	}
	public ArrayList getMinSeq(String plan_id) throws GeneralException {
		ArrayList list = new ArrayList();
		RowSet rs = null;
		String sql = "";
		ArrayList tempList = null;
		ContentDAO dao = new ContentDAO(this.conn);
		try {
			sql = "select object_id, min(" + Sql_switcher.isnull("seq", "9999")
				+ ") from per_mainbody where plan_id="
				+ plan_id + " group by object_id ";
			rs = dao.search(sql);
			while(rs.next()){
				tempList = new ArrayList();
				tempList.add(rs.getString(2));
				tempList.add(rs.getString("object_id"));
				list.add(tempList);
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw GeneralExceptionHandler.Handle(e);
		} finally{
			if(rs != null){
				try {
					rs.close();
				} catch (Exception e2) {
					e2.printStackTrace();
				}
			}
		}
		return list ;
	}
	public ArrayList getUpLevelInfo(String plan_id, String object_id,
			StringBuffer buf) {
		ArrayList list = new ArrayList();
		RowSet rs = null;
		try {
			String sql = "select " + Sql_switcher.isnull("seq", "0")
					+ " as seq from per_mainbody where plan_id="
					+ this.plan_vo.getInt("plan_id") + " and object_id='"
					+ this.object_id + "' and mainbody_id='"
					+ this.userView.getA0100() + "'";
			ContentDAO dao = new ContentDAO(this.conn);
			rs = dao.search(sql);
			String aseq = "";
			while (rs.next())// 取得当前人的序号
			{
				String seq = rs.getString("seq") == null ? "0" : rs
						.getString("seq");
				if ("0".equals(seq))// 没有序号的
					return list;
				aseq = seq;
			}
			rs.close();
			sql = "select max(" + Sql_switcher.isnull("seq", "0")
					+ ") from per_mainbody where plan_id="
					+ this.plan_vo.getInt("plan_id") + " and object_id='"
					+ this.object_id + "' ";
			rs = dao.search(sql);
			String maxseq = "";
			while (rs.next()) {
				maxseq = rs.getString(1);
			}
			rs.close();
			sql = "select mainbody_id,a0101,body_id,"
					+ Sql_switcher.isnull("seq", "0")
					+ " from per_mainbody where plan_id="
					+ this.plan_vo.getInt("plan_id")
					+ " and status<>2 and  object_id='" + this.object_id
					+ "' and seq=" + aseq;
			rs = dao.search(sql);
			if (rs.next())// 还有同级的人没打完分
			{
				return list;
			} else {
				if (aseq.equals(maxseq))// 已经是最高级的了,并且同级都打完分了
				{
					buf.append("ok");
					return list;
				}
				rs.close();
				sql = " select pm.*,";
				if (Sql_switcher.searchDbServer() == Constant.ORACEL)
					sql += " pms.level_o as lv ";
				else
					sql += " pms.level as lv";
				sql += " from (select pm.mainbody_id,pm.a0101,pm.body_id,pm.seq";
				sql += " from per_mainbody pm where plan_id="
						+ this.plan_vo.getInt("plan_id") + " and object_id='"
						+ this.object_id + "'";
				sql += " and seq=(select min(seq) from per_mainbody where plan_id="
						+ this.plan_vo.getInt("plan_id");
				sql += " and object_id='" + this.object_id + "' and seq>"
						+ aseq + ")) pm  ";
				sql += " left join per_mainbodyset pms ";
				sql += " on pm.body_id=pms.body_id";
				rs = dao.search(sql);
				while (rs.next()) {
					LazyDynaBean abean = new LazyDynaBean();
					abean.set("appealObject_id", rs.getString("mainbody_id"));
					abean.set("appealName", rs.getString("a0101"));
					abean.set("abody_id", rs.getString("lv"));
					list.add(abean);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return list;
	}

	public ArrayList getUpLevelInfo(String plan_id, String object_id,
			String level0) {
		ArrayList list = new ArrayList();
		try {
			String level = "";
			// 5:本人 -2：第四级领导 ,-1：第三级领导,0：主管领导,1：直接上级
			if ("5".equals(level0))
				level = "1";
			else if ("1".equals(level0))
				level = "0";
			else if ("0".equals(level0))
				level = "-1";
			else if ("-1".equals(level0))
				level = "-2";

			if (level.length() > 0) {

				ContentDAO dao = new ContentDAO(this.conn);
                String sql = "select pm.mainbody_id,pm.a0101,pm.body_id  from per_mainbody pm,per_mainbodyset pms,per_plan_body pp  "
                    + " where pm.body_id=pms.body_id and  pm.plan_id="
                    + plan_id + " and "+Sql_switcher.isnull("pm.status", "0")+"<>2 and pp.plan_id=pm.plan_id and pm.body_id=pp.body_id and "+Sql_switcher.isnull("pp.isgrade", "0")+"=0 and object_id='" + object_id + "' and ";
				if (Sql_switcher.searchDbServer() == Constant.ORACEL)
					sql += "level_o=" + level;
				else
					sql += "level=" + level;
				RowSet rowSet = dao.search(sql);
				while (rowSet.next()) {

					LazyDynaBean abean = new LazyDynaBean();
					abean.set("appealObject_id",
							rowSet.getString("mainbody_id"));
					abean.set("appealName", rowSet.getString("a0101"));
					abean.set("abody_id", level);
					list.add(abean);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return list;
	}

	// 将考核对象文档记录设为提交状态
	public void setArticleState(String plan_id, String a0100, String nbase) {
		RowSet rs = null;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			StringBuffer sql = new StringBuffer("");
			sql.append("select article_id,content,affix from per_article where");
			sql.append(" Article_type=2 and plan_id=" + plan_id + " and ");
			sql.append(" a0100='" + a0100 + "' and fileflag=1 and ");
			sql.append(" lower(nbase)='" + nbase.toLowerCase() + "' ");
			rs = dao.search(sql.toString());
			ArrayList list = new ArrayList();
			String content = "";
			int article_id = 0;
			if (rs.next()) {
				content = Sql_switcher.readMemo(rs, "content");
				article_id = rs.getInt("article_id");
			} else {
				article_id = this.insertPerArticleRecord(plan_id, 2, 1);
			}
			RecordVo vo = new RecordVo("per_article");
			vo.setInt("article_id", article_id);
			vo = dao.findByPrimaryKey(vo);
			vo.setString("content", content);
			dao.update("delete from per_article where plan_id=" + plan_id
					+ " and a0100='" + this.userView.getA0100()
					+ "' and lower(nbase)='"
					+ this.userView.getDbname().toLowerCase()
					+ "'  and article_type=2 and fileflag=1 and article_id!="
					+ article_id);
			boolean isSub = true;
			isSub = isSub(content, plan_id, this.userView.getA0100(),
					this.userView.getDbname(), 2);
			if (isSub)
				vo.setInt("state", 1);
			else
				vo.setInt("state", 0);
			vo.setString("description", "");
			dao.updateValueObject(vo);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

	}

	/**
	 * 产生 某计划下对象的考核主体记录
	 * 
	 * @param object_id
	 */
	public void producePerMainbodyRecords(String object_id) {
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			if (this.plan_vo.getInt("object_type") == 2) {
				HashMap map = new HashMap();
				RowSet rowSet = dao
						.search("select * from per_mainbody where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and object_id='" + object_id + "'");
				while (rowSet.next())
					map.put(rowSet.getString("mainbody_id"), "1");

				ArrayList mainbodyList = getPerMainBodyList(
						this.plan_vo.getInt("plan_id"), object_id);
				ArrayList recordList = new ArrayList();
				for (int i = 0; i < mainbodyList.size(); i++) {
					LazyDynaBean abean = (LazyDynaBean) mainbodyList.get(i);
					String a0100 = (String) abean.get("a0100");
					if (map.get(a0100) != null)
						continue;
					if (a0100.equalsIgnoreCase(object_id))
						continue;
					RecordVo vo = new RecordVo("per_mainbody");
					IDGenerator idg = new IDGenerator(2, this.conn);
					String id = idg.getId("per_mainbody.id");
					vo.setInt("id", Integer.parseInt(id));
					vo.setString("b0110", (String) abean.get("b0110"));
					vo.setString("e0122", (String) abean.get("e0122"));
					vo.setString("e01a1", (String) abean.get("e01a1"));
					vo.setString("object_id", object_id);
					vo.setString("mainbody_id", a0100);
					vo.setString("a0101", (String) abean.get("a0101"));
					vo.setInt("body_id",
							Integer.parseInt((String) abean.get("body_id")));
					vo.setInt("plan_id", this.plan_vo.getInt("plan_id"));
					vo.setInt("status", 0);
					recordList.add(vo);
				}
				if (recordList.size() > 0)
					dao.addValueObject(recordList);

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String setPointValue(ArrayList tempList, String value,
			ArrayList pointGradeList, float pointscore, String scoreflag,
			String pointkind, StringBuffer thesamedegreeid) {
		String info = "1";
		String ScaleToDegreeRule = (String) this.planParam.get("limitrule"); // 分值转标度规则（1-就高
																				// 2-就低
																				// 3-就近就高（默认值））
		String EvalOutLimitStdScore = (String) this.planParam
				.get("EvalOutLimitStdScore"); // 评分时得分不受标准分限制True, False, 默认为
												// False;都加
		int KeepDecimal = Integer.parseInt((String) this.planParam
				.get("KeepDecimal")); // 保留小数位

		float _maxScore = 0;
		String _maxGrade = "";
		float _minScore = -1;
		String _minGrade = "";

		if ((("0".equals(pointkind) && "2".equals(scoreflag)) || "1"
				.equals(pointkind))
				&& value.matches("-?[\\d]+[.]?[\\d]+")
				&& "2".equals(ScaleToDegreeRule)) // 2混合 // 分值 // 就低
		{

			for (int i = pointGradeList.size() - 1; i >= 0; i--) {
				LazyDynaBean abean = (LazyDynaBean) pointGradeList.get(i);
				String gradecode = (String) abean.get("gradecode");
				float top_value = Float.parseFloat((String) abean
						.get("top_value"));
				float bottom_value = Float.parseFloat((String) abean
						.get("bottom_value"));
				float gradevalue = Float.parseFloat((String) abean
						.get("gradevalue"));
				float a_value = Float.parseFloat(value);

				if ("true".equalsIgnoreCase(EvalOutLimitStdScore)
						&& "0".equals(pointkind)) {
					if (top_value * pointscore > _maxScore) {
						_maxScore = top_value * pointscore;
						_maxGrade = gradecode;
					}
					if ((bottom_value * pointscore < _minScore)
							|| _minScore == -1) {
						_minScore = bottom_value * pointscore;
						_minGrade = gradecode;
					}
				}

				if ("0".equals(pointkind)) // 定性
				{
					if (a_value <= top_value * pointscore
							&& a_value >= bottom_value * pointscore) {
						tempList.add(new Float(PubFunc.round(
								String.valueOf(a_value), KeepDecimal)));
						tempList.add(new Float(0));
						tempList.add(gradecode);
						thesamedegreeid.append(gradecode);
						info = "";
						break;
					}
				} else // 定量
				{
					if (a_value <= top_value && a_value >= bottom_value) {
						tempList.add(new Float(PubFunc.round(
								String.valueOf(gradevalue * pointscore),
								KeepDecimal)));
						tempList.add(new Float(a_value));
						tempList.add(gradecode);
						thesamedegreeid.append(gradecode);
						info = "";
						break;
					}
				}
			}

		} else {

			for (int i = 0; i < pointGradeList.size(); i++) {
				LazyDynaBean abean = (LazyDynaBean) pointGradeList.get(i);
				String gradecode = (String) abean.get("gradecode");
				float top_value = Float.parseFloat((String) abean
						.get("top_value"));
				float bottom_value = Float.parseFloat((String) abean
						.get("bottom_value"));
				float gradevalue = Float.parseFloat((String) abean
						.get("gradevalue"));

				if ("true".equalsIgnoreCase(EvalOutLimitStdScore)
						&& "0".equals(pointkind)) {
					if (top_value * pointscore > _maxScore) {
						_maxScore = top_value * pointscore;
						_maxGrade = gradecode;
					}
					if ((bottom_value * pointscore < _minScore)
							|| _minScore == -1) {
						_minScore = bottom_value * pointscore;
						_minGrade = gradecode;
					}
				}

				if ("0".equals(pointkind) && "2".equals(scoreflag)
						&& value.matches("-?[\\d]+[.]?[\\d]*")) {
					float a_value = Float.parseFloat(value);
					if (a_value <= top_value * pointscore
							&& a_value >= bottom_value * pointscore) {
						tempList.add(new Float(PubFunc.round(
								String.valueOf(a_value), KeepDecimal)));
						tempList.add(new Float(0));
						tempList.add(gradecode);
						thesamedegreeid.append(gradecode);
						info = "";
						break;
					}
				} else {
					if ("0".equals(pointkind)) {
						if (value.equalsIgnoreCase(gradecode)) {
							tempList.add(new Float(PubFunc.round(
									String.valueOf(pointscore * gradevalue),
									KeepDecimal)));
							tempList.add(new Float(0));
							tempList.add(value);
							thesamedegreeid.append(gradecode);
							info = "";
							break;
						}
					} else // 定量
					{
						float a_value = Float.parseFloat(value);
						if (a_value <= top_value && a_value >= bottom_value) {
							tempList.add(new Float(PubFunc.round(
									String.valueOf(gradevalue * pointscore),
									KeepDecimal)));
							tempList.add(new Float(a_value));
							tempList.add(gradecode);
							thesamedegreeid.append(gradecode);
							info = "";
							break;
						}
					}
				}
			}
		}

		if (info.length() > 0 && "true".equalsIgnoreCase(EvalOutLimitStdScore)) // 评分时得分不受标准分限制True,
																				// False,
																				// 默认为
																				// False;都加
		{
			if ("0".equals(pointkind) && "2".equals(scoreflag)
					&& value.matches("-?[\\d]+[.]?[\\d]*")) {
				float _value = Float.parseFloat(value);
				if (_value > _maxScore) {
					tempList.add(new Float(PubFunc.round(
							String.valueOf(_value), KeepDecimal)));
					tempList.add(new Float(0));
					tempList.add(_maxGrade);
					thesamedegreeid.append(_maxGrade);
					info = "";
				}
				if (_value < _minScore) {
					tempList.add(new Float(PubFunc.round(
							String.valueOf(_value), KeepDecimal)));
					tempList.add(new Float(0));
					tempList.add(_minGrade);
					thesamedegreeid.append(_minGrade);
					info = "";

				}
			}

		}

		return info;
	}

	/*** end ***/
	/********************* 生成目标卡html ***************/
	/**
	 * 取得考核主体记录
	 */
	public LazyDynaBean getMainbodyBean() {
		LazyDynaBean abean = null;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			String _str = "level";
			if (Sql_switcher.searchDbServer() == Constant.ORACEL)
				_str = "level_o";

			RowSet rowSet = dao
					.search("select pm.*,pms."
							+ _str
							+ " from per_mainbody pm left join per_mainbodyset pms  on pm.body_id=pms.body_id  where pm.plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and pm.object_id='" + this.object_id
							+ "' and pm.mainbody_id='"
							+ this.userView.getA0100() + "'");
			if (rowSet.next()) {
				abean = new LazyDynaBean();
				abean.set("id", rowSet.getString("id"));
				abean.set("body_id", rowSet.getString("body_id") == null ? ""
						: rowSet.getString("body_id"));
				abean.set("object_id", rowSet.getString("object_id"));
				abean.set("mainbody_id", rowSet.getString("mainbody_id"));
				abean.set(
						"status",
						rowSet.getString("status") != null ? rowSet
								.getString("status") : "0");
				abean.set("a0101", rowSet.getString("a0101"));
				abean.set(
						"know_id",
						rowSet.getString("know_id") != null ? rowSet
								.getString("know_id") : "");
				abean.set(
						"whole_grade_id",
						rowSet.getString("whole_grade_id") != null ? rowSet
								.getString("whole_grade_id") : "");
				abean.set(
						"fillctrl",
						rowSet.getString("fillctrl") != null ? rowSet
								.getString("fillctrl") : "0");
				abean.set("level",
						rowSet.getString(_str) != null ? rowSet.getString(_str)
								: "");
				abean.set(
						"seq",
						rowSet.getString("seq") == null ? "0" : rowSet
								.getString("seq"));
				abean.set(
						"wholeEvalScore",
						rowSet.getString("whole_score") == null ? "0" : rowSet
								.getString("whole_score"));

				//Un_planned 字段为添加多评分人时加入，所以如果是旧包可能出现问题。 2017-11-28 zhanghua
				abean.set("Un_planned",rowSet.getString("Un_planned") == null ? "0" : rowSet
                        .getString("Un_planned"));
			}
			else
			{
				// 如果没有考核主体，则虚拟不存在的考核主体。chent 20170414
				abean = new LazyDynaBean();
				abean.set("body_id", "-10000");
				abean.set("status","0");
				abean.set("Un_planned","1");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return abean;
	}

	public ArrayList getLeafItemArrayList() {
		this.templateItemList = getTemplateItemList();
		get_LeafItemList2();
		return this.leafItemList;
	}

	/** 保存下一级考核主体的分值 */
	private HashMap priporHashMap;
	/** 保存指标类型 */
	private HashMap itemtypeMap;

	/**
	 * 生成目标卡html
	 */
	public String getObjectCardHtml() {

		if ("5".equals(model) || "8".equals(model) || "6".equals(model))// 这几个模块先默认显示i调整记录，以后也加上是否显示按钮
			this.isShowHistoryTask = "1";
		// this.opt=4;
		if ("1".equals(this.isPerformanceShow))
			this.privByOrg = false;
		String html;

		boolean _flag = false;
		executeP04_commonnessData(); // 判断p04表中是否已为对象产生模板内的共性指标，没有则自动产生 放在(this.pointDescMap = getTemplatePointDetail(); // 取得模板引入的绩效指标标度)之前，否则取不到标度
		if (this.plan_vo.getInt("status") != 8) // 计划处于分发，不需要求这些数据，用于优化程序
		{
			this.objectEvaluateValueMap = getObjectEvaluateValueMap(
					this.object_id, this.userView.getA0100()); // 取得考核对象评估结果
			if (isShowSelfScore() || "1".equals(this.isPerformanceShow))
				this.objectSelfEvaluateValueMap = getObjectEvaluateValueMap(
						this.object_id, this.object_id); // 取得考核对象自我评估结果
						
			if (this.opt != 1) {
				this.pointDescMap = getTemplatePointDetail(); // 取得模板引入的绩效指标标度
			}
			if ((this.model != null && ("5".equals(this.model) || "8"
					.equals(this.model)))
					|| ((opt == 2 || (opt == 0 && (this.mainbodyBean != null && "2".equals((String) this.mainbodyBean
							.get("status")))))))// if(((String)this.planParam.get("allowSeeLowerGrade")).equalsIgnoreCase("True"))如果加上这个条件，显示不出来当前考核主体的评分了
			{

				if ("1".equals(this.model) || "2".equals(this.model)
						|| "3".equals(this.model) || "4".equals(this.model))
					this.mainbodyList = getPerMainBodyList2(
							this.plan_vo.getInt("plan_id"), this.object_id);
				else
					this.mainbodyList = getPerMainBodyList(
							this.plan_vo.getInt("plan_id"), this.object_id);
				this.objectAllEvaluateMap = objectAllEvaluateMap(this.object_id);//取得各考核主体评分结果
				_flag = true;
			}
		}
		if("8".equals(this.model))
			this.mainbodyList=new ArrayList();  //评分调整不显示主体评分明细 dengcan 2014-04-26

		if (this.planParam.get("TaskSupportAttach") != null
				&& "True"
						.equalsIgnoreCase((String) this.planParam.get("TaskSupportAttach"))) {
			String _objectid = this.object_id;
			if (this.plan_vo.getInt("object_type") == 1
					|| this.plan_vo.getInt("object_type") == 3
					|| this.plan_vo.getInt("object_type") == 4)
				_objectid = this.un_functionary;
			taskAttachMap = getTaskAttachMap(this.plan_vo.getString("plan_id"),
					_objectid);
		}

		if (this.plan_vo.getInt("status") != 8) // 计划处于分发，不需要求这些数据，用于优化程序
		{
			if (("4".equals(model) || "2".equals(model) || "1".equals(model))
					&& this.objectAllEvaluateMap.size() == 0) {
				if (opt == 2
						|| (this.mainbodyBean != null && "2".equals(this.mainbodyBean.get(
								"status")))
						|| this.plan_vo.getInt("status") == 7) {
					if (!_flag
							&& isShowSelfScore()
							&& this.objectSelfEvaluateValueMap.size() > 0
							&& !this.object_id.equalsIgnoreCase(this.userView
									.getA0100())
							&& !this.un_functionary
									.equalsIgnoreCase(this.userView.getA0100())) {
						_flag = true;
						if ("1".equals(this.model) || "2".equals(this.model)
								|| "3".equals(this.model)
								|| "4".equals(this.model))
							this.mainbodyList = getPerMainBodyList2(
									this.plan_vo.getInt("plan_id"),
									this.object_id);
						else
							this.mainbodyList = getPerMainBodyList(
									this.plan_vo.getInt("plan_id"),
									this.object_id);
						this.objectAllEvaluateMap = objectAllEvaluateMap(this.object_id);
					}
				}
			}
			if (this.planParam.get("showDeductionCause") != null
					&& "True"
							.equalsIgnoreCase((String) this.planParam.get("showDeductionCause"))) // /显示扣分原因
			{
				if (!_flag && this.objectAllEvaluateMap.size() == 0)
					this.objectAllEvaluateMap = objectAllEvaluateMap(this.object_id);
			}
		}

		isZGLT();
		this.p04List = getP04List();

		if (this.p04List.size() == 0 && "8".equals(this.model)) {
			this.p04List = getNullP04List();
		}

		this.templateItemList = getTemplateItemList();
		this.itemToPointMap = getItemToPointMap();
		get_LeafItemList();//获取最左侧顶级
		
		
		
		this.addMinusPointStr = getAddMinusPointStr(); // 获得加扣分指标串 (动态项目设置
														// 定义了加扣分项目)
		
		this.leafItemLinkMap = getLeafItemLinkMap();
		this.itemPointNum = getItemPointNum();
		/** 将上个考核主体打分带入，指标id对应分值和指标ID+“_1”对应标度代码 */
		priporHashMap = new HashMap();

		// 指标未打分时，0 按未打分处理，1 计为最高分，默认值为按未打分处理 2用下面的参数
		if (this.plan_vo.getInt("status") != 8) // 计划处于分发，不需要求这些数据，用于优化程序
		{
			if (this.mainbodyBean != null
					&& "0".equals((String) this.mainbodyBean.get("status"))) {
				String BlankScoreOption = (String) planParam
						.get("BlankScoreOption");
				if ("1".equalsIgnoreCase(BlankScoreOption)) // 计为最高分，默认值为按未打分处理
				{
					this.defaultEvaluateScoreMap = getDefaultEvaluateScoreMap(
							BlankScoreOption, "", this.object_id,
							this.plan_vo.getInt("plan_id"), p04List);
				}
				if ("2".equalsIgnoreCase(BlankScoreOption)) {
					String BlankScoreUseDegree = (String) planParam
							.get("BlankScoreUseDegree"); // 指标未打分，按用户定义的标度,。A|B|C…
					this.defaultEvaluateScoreMap = getDefaultEvaluateScoreMap(
							BlankScoreOption, BlankScoreUseDegree,
							this.object_id, this.plan_vo.getInt("plan_id"),
							p04List);
				}
			}
		}
		if ("8".equals(this.model)) {
			this.perResultScoreMap = getPerResultScoreMap();
		}

		// 用户自定义目标卡列宽
		if (SystemConfig.getPropertyValue("objectCardColumnWidth") != null
				&& SystemConfig.getPropertyValue("objectCardColumnWidth")
						.length() > 0) {
			String temp_str = SystemConfig
					.getPropertyValue("objectCardColumnWidth");
			String[] temps = temp_str.split("~");
			for (int i = 0; i < temps.length; i++) {
				String _temp = temps[i];
				String[] _temps = _temp.split(":");
				if (_temps.length == 2)
					this.customTdWidthMap.put(_temps[0].toLowerCase(),
							_temps[1].trim());
			}
		}

		html = writeHtml2();
		return html;
	}

	/**
	 * 获得对象目标卡中任务的附件
	 * 
	 * @param plan_id
	 * @param _objectid
	 * @return
	 */
	public HashMap getTaskAttachMap(String plan_id, String _objectid) {
		HashMap map = new HashMap();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			StringBuffer strsql = new StringBuffer(
					"select * from per_article  where plan_id=" + plan_id
							+ " and a0100='" + _objectid + "' ");
			strsql.append(" and lower(nbase)='usr' and  article_type=3 order by task_id");
			RowSet rowSet = dao.search(strsql.toString());
			String task_id = "";
			ArrayList alist = new ArrayList();
			while (rowSet.next()) {
				if (rowSet.getInt("fileflag") == 2) // 附件
				{
					if ("".equals(task_id))
						task_id = rowSet.getString("task_id") != null ? rowSet
								.getString("task_id") : "";

					LazyDynaBean abean = new LazyDynaBean();
					abean.set("id", rowSet.getString("Article_id"));
					abean.set(
							"name",
							rowSet.getString("Article_name") != null ? rowSet
									.getString("Article_name") : "");
					String a_task_id = rowSet.getString("task_id") != null ? rowSet
							.getString("task_id") : "";

					if (task_id.equalsIgnoreCase(a_task_id))
						alist.add(abean);
					else {
						map.put(task_id, alist);
						task_id = a_task_id;
						alist = new ArrayList();
						alist.add(abean);
					}
				}
			}
			if (alist.size() > 0)
				map.put(task_id, alist);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public void initData() {
		this.p04List = getP04List();
		this.templateItemList = getTemplateItemList();
		this.addMinusPointStr = getAddMinusPointStr(); // 获得加扣分指标串 (动态项目设置
														// 定义了加扣分项目)
	}

	/**
	 * 获得对象在考核结果表中的最终分值
	 * 
	 * @return
	 */
	public HashMap getPerResultScoreMap() {
		HashMap map = new HashMap();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			String sql = "select * from per_result_" + this.plan_id
					+ " where object_id='" + this.object_id + "'";
			RowSet rs = dao.search(sql);
			int KeepDecimal = Integer.parseInt((String) this.planParam
					.get("KeepDecimal")); // 保留小数位
			if (rs.next()) {
				LazyDynaBean t_bean = null;
				ArrayList pointList = getPointListByPlan(this.plan_vo
						.getString("template_id"));
				for (int i = 0; i < pointList.size(); i++) {
					t_bean = (LazyDynaBean) pointList.get(i);
					String point_id = (String) t_bean.get("point_id");
					if (rs.getString("c_" + point_id) != null)
						map.put("c_" + point_id.toLowerCase(),
								PubFunc.round(
										String.valueOf(rs.getFloat("c_"
												+ point_id)), KeepDecimal));
				}
				for (int i = 0; i < this.leafItemList.size(); i++) {
					t_bean = (LazyDynaBean) this.leafItemList.get(i);
					String t_x = "t_"
							+ ((String) t_bean.get("item_id")).toLowerCase();
					if (rs.getString(t_x) != null)
						map.put(t_x, PubFunc.round(
								String.valueOf(rs.getFloat(t_x)), KeepDecimal));
				}
				map.put("org_grade", rs.getString("Org_Grade") == null ? ""
						: rs.getString("Org_Grade"));
				map.put("a0101", rs.getString("a0101"));
				map.put("score", String.valueOf(rs.getFloat("score")));
				map.put("resultdesc", rs.getString("resultdesc") == null ? ""
						: rs.getString("resultdesc"));
				map.put("ordering",
						rs.getString("ordering") == null ? "" : rs
								.getString("ordering"));
				map.put("score_adjust",
						rs.getString("score_adjust") == null ? "0" : rs
								.getString("score_adjust"));
			}

			if (rs != null)
				rs.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	// 取得 目标考核计划下 某对象的所有考核主体信息
	public ArrayList getPerMainBodyList(int planid, String object_id) {
		ArrayList list = new ArrayList();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			String sql = "select per_mainbody.*,per_mainbodyset.name from per_mainbody ,per_mainbodyset where per_mainbody.body_id=per_mainbodyset.body_id  and plan_id="
					+ planid + " and object_id='" + object_id + "'";
			String cloumn = "level";
			if (Sql_switcher.searchDbServer() == Constant.ORACEL)
				cloumn = "level_o";
			sql += " order by " + cloumn + " desc ";
			RowSet rowSet = dao.search(sql);
			LazyDynaBean abean = null;
			while (rowSet.next()) {
				abean = new LazyDynaBean();
				abean.set("a0100", rowSet.getString("mainbody_id"));
				abean.set("b0110", rowSet.getString("b0110"));
				abean.set("a0101", rowSet.getString("a0101"));
				abean.set(
						"e0122",
						rowSet.getString("e0122") != null ? rowSet
								.getString("e0122") : "");
				abean.set("e01a1", rowSet.getString("e01a1"));
				abean.set("body_id", body_id);
				abean.set("body_name", rowSet.getString("name"));
				abean.set(
						"status",
						rowSet.getString("status") != null ? rowSet
								.getString("status") : "0");
				abean.set(
						"fillctrl",
						rowSet.getString("fillctrl") != null ? rowSet
								.getString("fillctrl") : "0");
				list.add(abean);
			}

			/*
			 * 
			 * 
			 * String sql="select pms.body_id,pms.name ";
			 * if(Sql_switcher.searchDbServer()==Constant.ORACEL)
			 * sql+=",level_o"; else sql+=",level "; sql+=
			 * " from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and  ppb.plan_id="
			 * +this.plan_vo.getInt("plan_id"); RowSet rowSet=dao.search(sql);
			 * LazyDynaBean personnelInfo=getPersonnelInfo("Usr",object_id);
			 * String e01a1= (String)personnelInfo.get("e01a1");
			 * RenderRelationBo bo=new
			 * RenderRelationBo(this.conn,this.userView); while(rowSet.next()) {
			 * String body_id=(String)rowSet.getString("body_id"); String
			 * name=(String)rowSet.getString("name"); String
			 * level=rowSet.getString(3);
			 * if(this.plan_vo.getInt("object_type")==2) { ArrayList alist=new
			 * ArrayList(); alist.add("Usr");
			 * 
			 * if(!level.equals("5")) { HashMap
			 * map=bo.getBodyInfo2(e01a1,alist,Integer.parseInt(body_id));
			 * if(body_id.equals("2")) map.remove("Usr"+object_id);
			 * if(map!=null&&map.size()>0) { Set keySet=map.keySet();
			 * for(Iterator t=keySet.iterator();t.hasNext();) { String
			 * key=(String)t.next(); LazyDynaBean
			 * abean=(LazyDynaBean)map.get(key); abean.set("body_id", body_id);
			 * abean.set("body_name",name); list.add(abean); } } } else { RowSet
			 * rowSet2=dao.search(
			 * "select a0100,b0110,a0101,e0122,e01a1 from  Usra01 where a0100='"
			 * +object_id+"'"); LazyDynaBean abean=null; while(rowSet2.next()) {
			 * abean=new LazyDynaBean ();
			 * abean.set("a0100",rowSet2.getString("a0100"));
			 * abean.set("b0110",rowSet2.getString("b0110"));
			 * abean.set("a0101",rowSet2.getString("a0101"));
			 * abean.set("e0122",rowSet2
			 * .getString("e0122")!=null?rowSet2.getString("e0122"):"");
			 * abean.set("e01a1",rowSet2.getString("e01a1"));
			 * abean.set("body_id", body_id); abean.set("body_name",name);
			 * list.add(abean); } } } else
			 * if(this.plan_vo.getInt("object_type")==1) { RowSet
			 * rowSet2=dao.search
			 * ("select * from per_mainbody where plan_id="+planid
			 * +" and object_id='"+object_id+"' and body_id="+body_id);
			 * while(rowSet2.next()) { LazyDynaBean abean=new LazyDynaBean();
			 * abean.set("a0100", rowSet2.getString("mainbody_id"));
			 * abean.set("a0101",rowSet2.getString("a0101"));
			 * abean.set("body_id", body_id); abean.set("body_name",name);
			 * list.add(abean); } } }
			 */

		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	// 取得 目标考核计划下 某对象的所有考核主体信息
	public ArrayList getPerMainBodyList2(int planid, String object_id) {
		ArrayList list = new ArrayList();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			String sql = "select per_mainbody.*,per_mainbodyset.name from per_mainbody ,per_mainbodyset where per_mainbody.body_id=per_mainbodyset.body_id  and plan_id="
					+ planid + " and object_id='" + object_id + "'";

			String cloumn = "level";
			if (Sql_switcher.searchDbServer() == Constant.ORACEL)
				cloumn = "level_o";
			sql += " and per_mainbodyset." + cloumn + " in (5,2,1,0,-1)";
			sql += " order by " + cloumn + " desc ";
			RowSet rowSet = dao.search(sql);
			LazyDynaBean abean = null;
			while (rowSet.next()) {
				abean = new LazyDynaBean();
				abean.set("a0100", rowSet.getString("mainbody_id"));
				abean.set("b0110", rowSet.getString("b0110"));
				abean.set("a0101", rowSet.getString("a0101"));
				abean.set(
						"e0122",
						rowSet.getString("e0122") != null ? rowSet
								.getString("e0122") : "");
				abean.set("e01a1", rowSet.getString("e01a1"));
				abean.set("body_id", body_id);
				abean.set("body_name", rowSet.getString("name"));
				abean.set(
						"status",
						rowSet.getString("status") != null ? rowSet
								.getString("status") : "0");
				abean.set(
						"fillctrl",
						rowSet.getString("fillctrl") != null ? rowSet
								.getString("fillctrl") : "0");
				list.add(abean);
			}

			/*
			 * 
			 * 
			 * String sql="select pms.body_id,pms.name ";
			 * if(Sql_switcher.searchDbServer()==Constant.ORACEL)
			 * sql+=",level_o"; else sql+=",level "; sql+=
			 * " from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and  ppb.plan_id="
			 * +this.plan_vo.getInt("plan_id"); RowSet rowSet=dao.search(sql);
			 * LazyDynaBean personnelInfo=getPersonnelInfo("Usr",object_id);
			 * String e01a1= (String)personnelInfo.get("e01a1");
			 * RenderRelationBo bo=new
			 * RenderRelationBo(this.conn,this.userView); while(rowSet.next()) {
			 * String body_id=(String)rowSet.getString("body_id"); String
			 * name=(String)rowSet.getString("name"); String
			 * level=rowSet.getString(3);
			 * if(this.plan_vo.getInt("object_type")==2) { ArrayList alist=new
			 * ArrayList(); alist.add("Usr");
			 * 
			 * if(!level.equals("5")) { HashMap
			 * map=bo.getBodyInfo2(e01a1,alist,Integer.parseInt(body_id));
			 * if(body_id.equals("2")) map.remove("Usr"+object_id);
			 * if(map!=null&&map.size()>0) { Set keySet=map.keySet();
			 * for(Iterator t=keySet.iterator();t.hasNext();) { String
			 * key=(String)t.next(); LazyDynaBean
			 * abean=(LazyDynaBean)map.get(key); abean.set("body_id", body_id);
			 * abean.set("body_name",name); list.add(abean); } } } else { RowSet
			 * rowSet2=dao.search(
			 * "select a0100,b0110,a0101,e0122,e01a1 from  Usra01 where a0100='"
			 * +object_id+"'"); LazyDynaBean abean=null; while(rowSet2.next()) {
			 * abean=new LazyDynaBean ();
			 * abean.set("a0100",rowSet2.getString("a0100"));
			 * abean.set("b0110",rowSet2.getString("b0110"));
			 * abean.set("a0101",rowSet2.getString("a0101"));
			 * abean.set("e0122",rowSet2
			 * .getString("e0122")!=null?rowSet2.getString("e0122"):"");
			 * abean.set("e01a1",rowSet2.getString("e01a1"));
			 * abean.set("body_id", body_id); abean.set("body_name",name);
			 * list.add(abean); } } } else
			 * if(this.plan_vo.getInt("object_type")==1) { RowSet
			 * rowSet2=dao.search
			 * ("select * from per_mainbody where plan_id="+planid
			 * +" and object_id='"+object_id+"' and body_id="+body_id);
			 * while(rowSet2.next()) { LazyDynaBean abean=new LazyDynaBean();
			 * abean.set("a0100", rowSet2.getString("mainbody_id"));
			 * abean.set("a0101",rowSet2.getString("a0101"));
			 * abean.set("body_id", body_id); abean.set("body_name",name);
			 * list.add(abean); } } }
			 */

		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 取得计划模板id
	 * 
	 * @param template_id
	 * @return
	 */
	public ArrayList getPointListByPlan(String template_id) {
		ArrayList pointList = new ArrayList();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			StringBuffer sql = new StringBuffer(
					"select po.point_id,po.pointname,po.pointkind,pi.item_id,po.visible,po.fielditem,po.status,pp.score,po.status,pp.score,po.Kh_content,po.Gd_principle ");
			sql.append(" from per_template_item pi,per_template_point pp,per_point po ");
			sql.append(" where pi.item_id=pp.item_id and pp.point_id=po.point_id  and template_id='"
					+ template_id + "' ");
			sql.append(" order by pp.seq ");
			pointList = dao.searchDynaList(sql.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return pointList;
	}

	/**
	 * 取得 考核对象 目标默认值
	 * 
	 * @param object_id
	 * @param plan_id
	 * @param p04List
	 * @param BlankScoreOption
	 *            // 指标未打分时，0 按未打分处理，1 计为最高分，默认值为按未打分处理 2用下面的参数
	 * @param BlankScoreUseDegree
	 *            //指标未打分，按用户定义的标度, 具体选自标准标度中, 如果指标中没有所定义标度，按未打分处理。A|B|C…
	 * @return
	 */
	public HashMap getDefaultEvaluateScoreMap(String BlankScoreOption,
			String BlankScoreUseDegree, String object_id, int plan_id,
			ArrayList p04List) {
		HashMap map = new HashMap();

		LazyDynaBean point_bean = null;
		String scoreflag = (String) this.planParam.get("scoreflag"); // =2混合，=1标度(默认值=混合)=4加扣分
		if ("4".equals(scoreflag))
			return map;
		for (int i = 0; i < p04List.size(); i++) {
			point_bean = (LazyDynaBean) this.p04List.get(i);
			String fromflag = (String) point_bean.get("fromflag");
			String p0400 = (String) point_bean.get("p0400");
			String p0401 = (String) point_bean.get("p0401");
			String p0413 = (String) point_bean.get("p0413");
			String p0415 = (String) point_bean.get("p0415");
			String chg_type = (String) point_bean.get("chg_type");

			if (chg_type != null && "3".equals(chg_type))
				continue;
			if (addMinusPointStr != null
					&& addMinusPointStr.indexOf(("'" + p0400 + "'")) != -1)// 如果是加扣分，有打分范围控制了，就不用取默认分数了，
				continue;
			boolean flag = true;
			if ("2".equals(fromflag)) // 来源KPI指标
			{
				LazyDynaBean pointBean = (LazyDynaBean) this.perPointMap
						.get(p0401.toLowerCase());
				String point_kind = "0";
				String status = "0";
				if (pointBean != null) {
					point_kind = (String) pointBean.get("pointkind");
					status = (String) pointBean.get("status");
				}

				// 统一打分指标
				if ("1".equals(point_kind) && "1".equals(status)) {
					if (this.perPointScoreMap.get(p0401.toLowerCase()) != null) {
						String score = "";
						if (((String) this.perPointScoreMap.get(p0401
								.toLowerCase())).trim().length() == 0
								|| Double
										.parseDouble((String) this.perPointScoreMap
												.get(p0401.toLowerCase())) == 0)
							score = "0";
						else
							score = PubFunc.round(
									(String) this.perPointScoreMap.get(p0401
											.toLowerCase()), 2);
						flag = false;
						map.put(p0400, score);
					}
				} else {

					ArrayList pointGradeList = (ArrayList) this.pointDescMap
							.get(p0401.toUpperCase());
					if (pointGradeList == null)
						pointGradeList = new ArrayList();
					String pointkind = "0";
					if (pointGradeList != null && pointGradeList.size() > 0) {
						LazyDynaBean abean = (LazyDynaBean) pointGradeList
								.get(0);
						pointkind = (String) abean.get("pointkind"); // 0:定性
																		// 1:定量
					}
					if ("0".equals(pointkind)) // 定性
					{
						if ("1".equals(scoreflag)) // 标度
						{
							if (pointGradeList.size() > 0) {
								if ("1".equalsIgnoreCase(BlankScoreOption)) // 计为最高
								{
									LazyDynaBean a_bean = (LazyDynaBean) pointGradeList
											.get(0);
									map.put(p0400,
											(String) a_bean.get("gradecode"));
								}
								if ("2".equalsIgnoreCase(BlankScoreOption)) //
								{
									map.put(p0400, BlankScoreUseDegree);
								}
							}
						} else if ("2".equals(scoreflag)) // 混合
						{

							if ("1".equalsIgnoreCase(BlankScoreOption)) // 计为最高
							{
								if (p0413 != null && !"".equals(p0413))
									map.put(p0400, p0413);
							}
							if ("2".equalsIgnoreCase(BlankScoreOption)) //
							{
								LazyDynaBean a_bean = null;
								for (int j = 0; j < pointGradeList.size(); j++) {
									a_bean = (LazyDynaBean) pointGradeList
											.get(j);
									String grade_template_id = (String) a_bean
											.get("gradecode");
									String gradevalue = (String) a_bean
											.get("gradevalue");
									if (grade_template_id
											.equalsIgnoreCase(BlankScoreUseDegree)) {
										if (p0413 == null || "".equals(p0413))
											break;
										map.put(p0400, PubFunc.multiple(
												gradevalue, p0413, 1));
										break;
									}
								}
							}
						}

					}
					if ("1".equals(pointkind)) // 定量
					{
						if (pointGradeList.size() > 0) {
							if ("1".equalsIgnoreCase(BlankScoreOption)) // 计为最高
							{
								LazyDynaBean a_bean = (LazyDynaBean) pointGradeList
										.get(0);
								map.put(p0400, (String) a_bean.get("top_value"));
							}
							if ("2".equalsIgnoreCase(BlankScoreOption)) //
							{
								LazyDynaBean a_bean = null;
								for (int j = 0; j < pointGradeList.size(); j++) {
									a_bean = (LazyDynaBean) pointGradeList
											.get(j);
									String grade_template_id = (String) a_bean
											.get("gradecode");
									String gradevalue = (String) a_bean
											.get("gradevalue");
									if (grade_template_id
											.equalsIgnoreCase(BlankScoreUseDegree)) {
										map.put(p0400, (String) a_bean
												.get("top_value"));
										break;
									}
								}
							}
						}

					}
				}

			} else {
				ArrayList pointGradeList = (ArrayList) this.pointDescMap
						.get("per_grade_desc");
				if (pointGradeList == null)
					pointGradeList = new ArrayList();
				if ("1".equals(scoreflag)) // 标度
				{
					if (pointGradeList.size() > 0) {
						if ("1".equalsIgnoreCase(BlankScoreOption)) // 计为最高
						{
							LazyDynaBean a_bean = (LazyDynaBean) pointGradeList
									.get(0);
							map.put(p0400,
									(String) a_bean.get("grade_template_id"));
						}
						if ("2".equalsIgnoreCase(BlankScoreOption)) //
						{
							map.put(p0400, BlankScoreUseDegree);
						}
					}
				} else if ("2".equals(scoreflag)) // 混合
				{

					if ("1".equalsIgnoreCase(BlankScoreOption)) // 计为最高
					{
						if (p0413 != null && !"".equals(p0413))
							map.put(p0400, p0413);
					}
					if ("2".equalsIgnoreCase(BlankScoreOption)) //
					{
						LazyDynaBean a_bean = null;
						for (int j = 0; j < pointGradeList.size(); j++) {
							a_bean = (LazyDynaBean) pointGradeList.get(j);
							String grade_template_id = (String) a_bean
									.get("grade_template_id");
							String gradevalue = (String) a_bean
									.get("gradevalue");
							if (grade_template_id
									.equalsIgnoreCase(BlankScoreUseDegree)) {
								if (p0413 == null || "".equals(p0413))
									break;
								map.put(p0400,
										PubFunc.multiple(gradevalue, p0413, 1));
								break;
							}
						}
					}
				}
			}

		}
		return map;
	}

	/**
	 * 取得 各考核主体打分结果
	 * 
	 * @param object_id
	 * @return
	 */
	public HashMap objectAllEvaluateMap(String object_id) {
		HashMap map = new HashMap();
		HashMap allMap = new HashMap();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			StringBuffer mainbodyids = new StringBuffer("");
			int KeepDecimal = Integer.parseInt((String) this.planParam
					.get("KeepDecimal")); // 保留小数位
			RowSet rowSet = null;
			if (this.plan_vo.getInt("method") == 1) // 360度计划
			{

				String sql = "select per_table_"
						+ this.plan_vo.getInt("plan_id")
						+ ".*,per_grade.gradedesc,per_grade_template.gradedesc desc2 from per_table_"
						+ this.plan_vo.getInt("plan_id")
						+ " left join per_grade "
						+ " on per_table_"
						+ this.plan_vo.getInt("plan_id")
						+ ".point_id=per_grade.point_id and per_table_"
						+ this.plan_vo.getInt("plan_id")
						+ ".degree_id=per_grade.gradecode "
						+ " left join per_grade_template"
						+ " on per_grade.gradecode=per_grade_template.grade_template_id "
						+ " where object_id='" + object_id
						+ "' order by mainbody_id";
				rowSet = dao.search(sql);
				LazyDynaBean abean = new LazyDynaBean();
				HashMap pubMap = new HashMap();
				ArrayList pointList = getPointListByPlan(this.plan_vo
						.getString("template_id"));
				for (int i = 0; i < pointList.size(); i++) {
					LazyDynaBean point_bean = (LazyDynaBean) pointList.get(i);
					String point_kind = (String) point_bean.get("pointkind");
					String status = (String) point_bean.get("status");
					String point_id = (String) point_bean.get("point_id");
					this.pointMap.put(point_id, point_bean);
					// 统一打分指标
					if ("1".equals(point_kind) && "1".equals(status)) {
						if (this.perPointScoreMap.get(point_id.toLowerCase()) != null) {
							abean = new LazyDynaBean();
							abean.set("id", "-1");
							abean.set("point_id", point_id);
							if (((String) this.perPointScoreMap.get(point_id
									.toLowerCase())).trim().length() == 0
									|| Double
											.parseDouble((String) this.perPointScoreMap
													.get(point_id.toLowerCase())) == 0)
								abean.set("score", "0");
							else
								abean.set("score", PubFunc.round(
										(String) this.perPointScoreMap
												.get(point_id.toLowerCase()),
										KeepDecimal));
							abean.set("amount", "0");
							abean.set("degree_id", "");
							pubMap.put(point_id, abean);

						}
					}
				}
				ArrayList mainbodyList = new ArrayList();
				String mainbody_id = "";
				ResultSetMetaData dt = rowSet.getMetaData();
				boolean isreasons = false;
				for (int i = 0; i < dt.getColumnCount(); i++) {
					if ("reasons".equalsIgnoreCase(dt.getColumnName(i + 1)))
						isreasons = true;
				}

				while (rowSet.next()) {
					if (mainbody_id.length() == 0)
						mainbody_id = rowSet.getString("mainbody_id");
					if (!mainbody_id.equals(rowSet.getString("mainbody_id"))) {
						mainbodyList.add(mainbody_id);
						mainbodyids.append(",'" + mainbody_id + "'");
						map.putAll(pubMap);
						allMap.put(mainbody_id, map);
						mainbody_id = rowSet.getString("mainbody_id");
						map = new HashMap();
					}
					abean = new LazyDynaBean();
					String id = rowSet.getString("id");
					String score = rowSet.getString("score") != null ? PubFunc
							.round(rowSet.getString("score"), KeepDecimal) : "";
					String amount = rowSet.getString("amount") != null ? moveZero(rowSet
							.getString("amount")) : "";
					String point_id = rowSet.getString("point_id");
					String degree_id = rowSet.getString("degree_id") != null ? rowSet
							.getString("degree_id") : "";
					String gradedesc = Sql_switcher.readMemo(rowSet,
							"gradedesc");
					String desc2 = Sql_switcher.readMemo(rowSet, "desc2");
					String reasons = "";
					String allreasons = "";
					if (isreasons) {
						reasons = Sql_switcher.readMemo(rowSet, "reasons");
						allreasons = Sql_switcher.readMemo(rowSet, "reasons") == null ? ""
								: Sql_switcher.readMemo(rowSet, "reasons");
					}
					if (reasons != null && reasons.length() > 50)
						reasons = reasons.substring(0, 50) + "......";
					abean.set("allreasons", allreasons);
					abean.set("id", id);
					abean.set("point_id", point_id);
					abean.set("score", score);
					abean.set("amount", amount);
					abean.set("degree_id", degree_id);
					abean.set("reasons", reasons);
					abean.set("gradedesc", gradedesc);
					abean.set("desc2", desc2);
					map.put(point_id, abean);
				}
				mainbodyids.append(",'" + mainbody_id + "'");
				mainbodyList.add(mainbody_id);
				map.putAll(pubMap);
				allMap.put(mainbody_id, map);
			} else if (this.plan_vo.getInt("method") == 2) // 目标计划
			{

				StringBuffer buf = new StringBuffer("");
				buf.append("select T.*,pgt.GRADEDESC desc2 from (select pte.*,p04.p0401 from per_target_evaluation pte,p04 ");
				buf.append("where pte.plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ "  and pte.object_id='" + this.object_id
						+ "' and pte.p0400=p04.p0400)T ");
				buf.append("left join  per_grade_template pgt on T.degree_id=pgt.grade_template_id order by T.mainbody_id ");
				rowSet = dao.search(buf.toString()/*
												 * "select * from per_target_evaluation where plan_id="
												 * +
												 * this.plan_vo.getInt("plan_id"
												 * )
												 * +" and object_id='"+object_id
												 * +"'  order by mainbody_id "
												 */);

				LazyDynaBean abean = new LazyDynaBean();
				String mainbody_id = "";
				LazyDynaBean point_bean = null;
				HashMap pubMap = new HashMap();
				for (int i = 0; i < this.p04List.size(); i++) {
					point_bean = (LazyDynaBean) this.p04List.get(i);
					String fromflag = (String) point_bean.get("fromflag");
					String p0400 = (String) point_bean.get("p0400");
					String p0401 = (String) point_bean.get("p0401");
					if ("2".equals(fromflag)) // 来源KPI指标
					{
						LazyDynaBean pointBean = (LazyDynaBean) this.perPointMap
								.get(p0401.toLowerCase());
						String point_kind = "0";
						String status = "0";
						if (pointBean != null) {
							point_kind = (String) pointBean.get("pointkind");
							status = (String) pointBean.get("status");
						}

						// 统一打分指标
						if ("1".equals(point_kind) && "1".equals(status)) {
							if (this.perPointScoreMap.get(p0401.toLowerCase()) != null) {
								abean = new LazyDynaBean();
								abean.set("id", "-1");
								abean.set("p0400", p0400);
								if (((String) this.perPointScoreMap.get(p0401
										.toLowerCase())).trim().length() == 0
										|| Double
												.parseDouble((String) this.perPointScoreMap
														.get(p0401
																.toLowerCase())) == 0)
									abean.set("score", "0");
								else
									abean.set("score", PubFunc.round(
											(String) this.perPointScoreMap
													.get(p0401.toLowerCase()),
											KeepDecimal));
								abean.set("amount", "0");
								abean.set("degree_id", "");
								pubMap.put(p0400, abean);

							}
						}

					}
				}
				ArrayList mainbodyList = new ArrayList();
				while (rowSet.next()) {
					if (mainbody_id.length() == 0)
						mainbody_id = rowSet.getString("mainbody_id");
					if (!mainbody_id.equals(rowSet.getString("mainbody_id"))) {
						mainbodyList.add(mainbody_id);
						mainbodyids.append(",'" + mainbody_id + "'");
						map.putAll(pubMap);
						allMap.put(mainbody_id, map);
						mainbody_id = rowSet.getString("mainbody_id");
						map = new HashMap();
					}
					abean = new LazyDynaBean();
					String id = rowSet.getString("id");
					String p0400 = rowSet.getString("p0400");
					String score = rowSet.getString("score") != null ? PubFunc
							.round(rowSet.getString("score"), KeepDecimal) : "";
					String amount = rowSet.getString("amount") != null ? moveZero(rowSet
							.getString("amount")) : "";
					String degree_id = rowSet.getString("degree_id") != null ? rowSet
							.getString("degree_id") : "";
					String reasons = Sql_switcher.readMemo(rowSet, "reasons");
					if (reasons != null && reasons.length() > 50)
						reasons = reasons.substring(0, 50) + "......";
					String allreasons = Sql_switcher
							.readMemo(rowSet, "reasons") == null ? ""
							: Sql_switcher.readMemo(rowSet, "reasons");
					abean.set("allreasons", allreasons);
					abean.set("id", id);
					abean.set("p0400", p0400);
					abean.set("score", score);
					abean.set("amount", amount);
					abean.set("degree_id", degree_id);
					abean.set("reasons", reasons);
					String desc = "";
					if (degree_id.trim().length() > 0) {
						desc = Sql_switcher.readMemo(rowSet, "desc2");
					}
					abean.set("gradedesc", desc);
					map.put(p0400, abean);
				}
				mainbodyids.append(",'" + mainbody_id + "'");
				mainbodyList.add(mainbody_id);
				map.putAll(pubMap);
				allMap.put(mainbody_id, map);

			}
			/** 加扣分时要特殊处理 */
			if ("4".equals(this.scoreflag)) {
				rowSet = dao
						.search("select mainbody_id from per_mainbody where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and object_id='"
								+ object_id
								+ "'"
								+ " and status=2 and mainbody_id not in ("
								+ (mainbodyids.length() > 0 ? mainbodyids
										.substring(1) : "'-1'") + ")");
				while (rowSet.next()) {
					if (mainbodyids.indexOf(",'"
							+ rowSet.getString("mainbody_id") + "'") == -1) {
						mainbodyids.append(",'"
								+ rowSet.getString("mainbody_id") + "'");
						allMap.put(rowSet.getString("mainbody_id"),
								new HashMap());
					}
				}
			}

			BatchGradeBo batchGradeBo = new BatchGradeBo(this.conn);
			if (mainbodyids.length() > 0) {
				ArrayList nodeKnowDegreeList = getExtendInfoValue("1", "");
				String EvalClass = (String) this.planParam.get("EvalClass"); // 在计划参数中的等级分类ID
				String GradeClass = "";
				if (EvalClass == null || EvalClass.trim().length() < 0
						|| "0".equals(EvalClass.trim()))
					GradeClass = (String) this.planParam.get("GradeClass"); // 等级分类ID
				else
					GradeClass = (String) this.planParam.get("EvalClass");
				ArrayList wholeArrayList = getExtendInfoValue("2", GradeClass);
				rowSet = dao
						.search("select  *  from per_mainbody where   mainbody_id in ("
								+ mainbodyids.substring(1)
								+ ") and plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and object_id='" + object_id + "'");
				while (rowSet.next()) {
					String a_mainbody_id = rowSet.getString("mainbody_id");
					if (allMap.get(a_mainbody_id) != null) {
						HashMap amap = (HashMap) allMap.get(a_mainbody_id);

						if ("true"
								.equalsIgnoreCase((String) this.planParam.get("NodeKnowDegree"))) // 了解程度
						{

							String know_id = "";
							if (rowSet.getString("know_id") != null)
								know_id = rowSet.getString("know_id");
							String know_str = "";
							for (int i = 0; i < nodeKnowDegreeList.size(); i++) {
								String[] temp = (String[]) nodeKnowDegreeList
										.get(i);

								if (temp[0].equals(know_id))
									know_str = temp[1];
							}
							amap.put("know_str", know_str);
						}
						if ("true"
								.equalsIgnoreCase((String) this.planParam.get("WholeEval"))
								|| "true"
										.equalsIgnoreCase((String) this.planParam
                                                .get("DescriptiveWholeEval"))) // 总体评价
						{

							String whole_id = "";
							String whole_str = "";
							if (rowSet.getString("whole_grade_id") != null)
								whole_id = rowSet.getString("whole_grade_id");
							String a_bodyid = rowSet.getString("body_id");

							if ("true"
									.equalsIgnoreCase((String) this.planParam.get("WholeEval"))) {
								if("0".equals((String) this.planParam.get("WholeEvalMode"))) { //面谈记录显示出总体评价  pjf 2014.01.10
									for (int i = 0; i < wholeArrayList.size(); i++) {
										String[] temp = (String[]) wholeArrayList
												.get(i);
	
										if (temp[0].equals(whole_id))
											whole_str = temp[1];
	
									}
								} else{
									String tempScore = PubFunc.round( rowSet.getString("whole_score"), KeepDecimal);
									whole_str = tempScore;
								}
							}
							if ("true"
									.equalsIgnoreCase((String) this.planParam
                                            .get("DescriptiveWholeEval"))) {
								whole_str += "&nbsp;&nbsp;<img  style=\"cursor:hand\"  src=\"/images/table.gif\"  ";
								if (this.opt == 2)
									whole_str += " onclick=\"javascript:showWindow2('"
											+ "~"+SafeCode.encode(PubFunc.convertTo64Base(this.plan_id))
											+ "','"
											+ "~"+SafeCode.encode(PubFunc.convertTo64Base(object_id))
											+ "','"
											+ "~"+SafeCode.encode(PubFunc.convertTo64Base(a_mainbody_id))
											+ "','"
											+ "~"+SafeCode.encode(PubFunc.convertTo64Base(a_bodyid))
											+ "')\" > ";
								else
									whole_str += " onclick=\"javascript:showWindow('"
											+ "~"+SafeCode.encode(PubFunc.convertTo64Base(this.plan_id))
											+ "','"
											+ "~"+SafeCode.encode(PubFunc.convertTo64Base(object_id))
											+ "','"
											+ "~"+SafeCode.encode(PubFunc.convertTo64Base(a_mainbody_id))
											+ "','"
											+ "~"+SafeCode.encode(PubFunc.convertTo64Base(a_bodyid))
											+ "')\" >  ";
							}
							amap.put("whole_str", whole_str);
						}
						String score = "0";
						if (this.plan_vo.getInt("method") == 2) {
							if (rowSet.getString("score") != null)
								score = rowSet.getString("score");
						} else {

							score = String.valueOf(batchGradeBo
									.getObjectTotalScore(this.plan_vo
											.getInt("plan_id"), a_mainbody_id,
											this.plan_vo
													.getString("template_id"),
											object_id, this.userView));

						}
						amap.put("score", PubFunc.round(score, KeepDecimal));// getScore(a_mainbody_id,object_id));

					}

				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return allMap;
	}

	/**
	 * 取得考核对象评估结果
	 * 
	 * @return
	 */
	public HashMap getObjectEvaluateValueMap(String object_id,
			String mainbody_id) {
		HashMap map = new HashMap();
		RowSet rowSet = null;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			if (this.plan_vo.getInt("method") == 2) {
				StringBuffer buf = new StringBuffer("");
				buf.append("select T.*,pgt.GRADEDESC desc2 from (select pte.*,p04.p0401 from per_target_evaluation pte,p04 ");
				buf.append("where pte.plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ "  and pte.object_id='" + this.object_id
						+ "' and pte.p0400=p04.p0400");
				buf.append(" and pte.mainbody_id='" + mainbody_id + "'");
				buf.append(")T ");
				buf.append("left join  per_grade_template pgt on T.degree_id=pgt.grade_template_id order by T.mainbody_id ");
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) {
					if (object_id.equals(mainbody_id)
							&& this.un_functionary != null
							&& this.un_functionary.length() > 0) {
						buf.setLength(0);
						buf.append("select T.*,pgt.GRADEDESC desc2 from (select pte.*,p04.p0401 from per_target_evaluation pte,p04 ");
						buf.append("where pte.plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ "  and pte.object_id='" + this.object_id
								+ "' and pte.p0400=p04.p0400");
						buf.append(" and pte.mainbody_id='"
								+ this.un_functionary + "'");
						buf.append(")T ");
						buf.append("left join  per_grade_template pgt on T.degree_id=pgt.grade_template_id order by T.mainbody_id ");
						// sql="select * from per_target_evaluation where plan_id="+this.plan_vo.getInt("plan_id")+" and object_id='"+object_id+"' and mainbody_id='"+this.un_functionary+"'";
					}
				}
				/*
				 * String
				 * sql="select * from per_target_evaluation where plan_id="
				 * +this.plan_vo.getInt("plan_id")+" and object_id='"+object_id+
				 * "' and mainbody_id='"+mainbody_id+"'";
				 * if(this.plan_vo.getInt(
				 * "object_type")==1||this.plan_vo.getInt(
				 * "object_type")==3||this.plan_vo.getInt("object_type")==4) {
				 * if
				 * (object_id.equals(mainbody_id)&&this.un_functionary!=null&&this
				 * .un_functionary.length()>0)
				 * sql="select * from per_target_evaluation where plan_id="
				 * +this.plan_vo.getInt("plan_id")+" and object_id='"+object_id+
				 * "' and mainbody_id='"+this.un_functionary+"'"; }
				 */

				rowSet = dao.search(buf.toString());
				LazyDynaBean abean = new LazyDynaBean();
				int KeepDecimal = Integer.parseInt((String) this.planParam
						.get("KeepDecimal")); // 保留小数位
				while (rowSet.next()) {
					abean = new LazyDynaBean();
					String id = rowSet.getString("id");
					String p0400 = rowSet.getString("p0400");
					String score = rowSet.getString("score") != null ? PubFunc
							.round(rowSet.getString("score"), KeepDecimal) : "";
					String amount = rowSet.getString("amount") != null ? moveZero(rowSet
							.getString("amount")) : "";
					String degree_id = rowSet.getString("degree_id") != null ? rowSet
							.getString("degree_id") : "";
					abean.set("id", id);
					abean.set("p0400", p0400);
					abean.set("score", score);
					abean.set("amount", amount);
					abean.set("degree_id", degree_id);
					abean.set("gradedesc",
							Sql_switcher.readMemo(rowSet, "desc2"));
					map.put(p0400, abean);
				}

				LazyDynaBean point_bean = null;
				for (int i = 0; i < this.p04List.size(); i++) {
					point_bean = (LazyDynaBean) this.p04List.get(i);
					String fromflag = (String) point_bean.get("fromflag");
					String p0400 = (String) point_bean.get("p0400");
					String p0401 = (String) point_bean.get("p0401");
					if ("2".equals(fromflag)) // 来源KPI指标
					{
						LazyDynaBean pointBean = (LazyDynaBean) this.perPointMap
								.get(p0401.toLowerCase());
						String point_kind = "0";
						String status = "0";
						if (pointBean != null) {
							point_kind = (String) pointBean.get("pointkind");
							status = (String) pointBean.get("status");
						}

						// 统一打分指标
						if ("1".equals(point_kind) && "1".equals(status)) {
							if (this.perPointScoreMap.get(p0401.toLowerCase()) != null) {
								abean = new LazyDynaBean();
								abean.set("id", "-1");
								abean.set("p0400", p0400);
								if (((String) this.perPointScoreMap.get(p0401
										.toLowerCase())).trim().length() == 0
										|| Double
												.parseDouble((String) this.perPointScoreMap
														.get(p0401
																.toLowerCase())) == 0)
									abean.set("score", "0");
								else
									abean.set("score", PubFunc.round(
											(String) this.perPointScoreMap
													.get(p0401.toLowerCase()),
											KeepDecimal));
								abean.set("amount", "0");
								abean.set("degree_id", "");
								map.put(p0400, abean);

							}
						}

					}

				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	/**
	 * 取得模板引入的绩效指标标度
	 * 
	 * @return
	 */
	public HashMap getTemplatePointDetail() {
		HashMap map = new HashMap();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			HashMap usedPointMap = new HashMap(); // 解决已删除的指标不要报出没有上下限 2009-2-3
			StringBuffer sql0 = new StringBuffer("");
			sql0.append(" select distinct p0401 from p04 where plan_id="
					+ this.plan_vo.getInt("plan_id") + " ");
			if (this.plan_vo.getInt("object_type") == 1
					|| this.plan_vo.getInt("object_type") == 3
					|| this.plan_vo.getInt("object_type") == 4) // 部门
				sql0.append(" and b0110='" + this.object_id);
			else
				sql0.append(" and a0100='" + this.object_id);
			sql0.append("' and fromflag=2  and ( Chg_type is null or  Chg_type<>3 ) ");
			RowSet rowSet = dao.search(sql0.toString());
			while (rowSet.next()) {
				usedPointMap.put(rowSet.getString(1).toLowerCase(), "1");
			}

			// 目标考核自评的时候，会执行ArrayList gradeList = (ArrayList) pointDescMap.get(p0401);
			// 其中p0401包含的字母全是大写，因此，未避免出错，在向pointDescMap里塞值的时候就转成大写 modify by 刘蒙
			StringBuffer sql = new StringBuffer();
			sql.append("select per_grade.point_id point_id,per_grade.gradevalue,per_grade.gradedesc,per_grade.gradecode,per_grade.top_value,per_grade.bottom_value,");
			sql.append("per_point.pointkind,per_grade_template.gradedesc desc2,per_point.status from " +
					"per_grade,per_point,per_grade_template where  per_grade.point_id=per_point.point_id  and per_grade.gradecode=per_grade_template.grade_template_id " +
					"and (per_grade.top_value<>0 or per_grade.bottom_value<>0) and upper(per_grade.point_id) in ( ");
			sql.append(" select distinct upper(p0401) from p04 where plan_id="
					+ this.plan_vo.getInt("plan_id") + " ");
			if (this.plan_vo.getInt("object_type") == 1
					|| this.plan_vo.getInt("object_type") == 3
					|| this.plan_vo.getInt("object_type") == 4) // 部门
				sql.append(" and b0110='" + this.object_id);
			else
				sql.append(" and a0100='" + this.object_id);
			sql.append("' and fromflag=2  ) order by per_grade.point_id,per_grade.grade_id");
			rowSet = dao.search(sql.toString());
			LazyDynaBean abean = null;
			String pointId = "";
			ArrayList tempList = new ArrayList();
			HashMap existMap = new HashMap();
			while (rowSet.next()) {
				abean = new LazyDynaBean();
				String point_id = rowSet.getString("point_id") != null ? rowSet
						.getString("point_id") : "";
				String gradevalue = rowSet.getString("gradevalue") != null ? rowSet
						.getString("gradevalue") : "";
				String gradedesc = rowSet.getString("gradedesc") != null ? rowSet
						.getString("gradedesc") : "";
				String gradecode = rowSet.getString("gradecode") != null ? rowSet
						.getString("gradecode") : "";
				String top_value = rowSet.getString("top_value") != null ? rowSet
						.getString("top_value") : "";
				String bottom_value = rowSet.getString("bottom_value") != null ? rowSet
						.getString("bottom_value") : "";
				String pointkind = rowSet.getString("pointkind") != null ? rowSet
						.getString("pointkind") : "";
				String status = rowSet.getString("status") != null ? rowSet
						.getString("status") : "0";
				if ("".equals(pointId))
					pointId = point_id;

				if (top_value.length() == 0 || bottom_value.length() == 0) {
					// System.out.println(point_id);

					if (existMap.get(point_id) == null
							&& usedPointMap.get(point_id.toLowerCase()) != null) {
						perPointNoGrade = "1";
						this.noGradeItem += "," + point_id;
						existMap.put(point_id, "1");
					}

				}
				if (!point_id.equals(pointId)) {
					if (tempList.size() == 0) {

						if (existMap.get(pointId) == null
								&& usedPointMap.get(pointId.toLowerCase()) != null) {
							perPointNoGrade = "1";
							this.noGradeItem += "," + pointId;
							existMap.put(pointId, "1");
						}
					}
					map.put(pointId.toUpperCase(), tempList);
					pointId = point_id;
					tempList = new ArrayList();
				}
				abean.set(
						"desc2",
						rowSet.getString("desc2") != null ? rowSet
								.getString("desc2") : "");
				abean.set("point_id", point_id);
				abean.set("gradevalue", gradevalue);
				abean.set("gradedesc", gradedesc);
				abean.set("gradecode", gradecode);
				abean.set("top_value", top_value);
				abean.set("bottom_value", bottom_value);
				abean.set("pointkind", pointkind);
				abean.set("status", status);
				tempList.add(abean);
			}
			if (tempList.size() == 0) {

				if (existMap.get(pointId) == null
						&& usedPointMap.get(pointId.toLowerCase()) != null) {
					perPointNoGrade = "1";
					this.noGradeItem += "," + pointId;
					existMap.put(pointId, "1");
				}
			}
			map.put(pointId.toUpperCase(), tempList);

			rowSet = dao
					.search("select * from per_grade_template where (top_value<>0 or bottom_value<>0) order by gradevalue desc");
			tempList = new ArrayList();
			while (rowSet.next()) {
				String gradevalue = rowSet.getString("gradevalue") != null ? rowSet
						.getString("gradevalue") : "";
				String gradedesc = rowSet.getString("gradedesc") != null ? rowSet
						.getString("gradedesc") : "";
				String top_value = rowSet.getString("top_value") != null ? rowSet
						.getString("top_value") : "";
				String bottom_value = rowSet.getString("bottom_value") != null ? rowSet
						.getString("bottom_value") : "";
				abean = new LazyDynaBean();
				abean.set("gradevalue", gradevalue);
				abean.set("gradedesc", gradedesc);
				abean.set("top_value", top_value);
				abean.set("bottom_value", bottom_value);
				abean.set("grade_template_id",
						rowSet.getString("grade_template_id"));
				tempList.add(abean);
			}
			map.put("per_grade_desc", tempList);

			// if(perPointNoGrade.equals("0"))
			{
				sql.setLength(0);
				// 预测小写的point_id会出错，目前错误还没发生 modify by 刘蒙
				sql.append("select point_id from per_point where  upper(point_id) in (  select distinct upper(p0401) from p04 where plan_id="
						+ this.plan_vo.getInt("plan_id"));
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql.append(" and b0110='" + this.object_id);
				else
					sql.append(" and a0100='" + this.object_id);
				sql.append("' and fromflag=2 )");
				rowSet = dao.search(sql.toString());
				while (rowSet.next()) {
					if (map.get(rowSet.getString("point_id").toUpperCase()) == null) {

						if (existMap.get(rowSet.getString("point_id")) == null
								&& usedPointMap.get(rowSet
										.getString("point_id").toLowerCase()) != null) {
							perPointNoGrade = "1";
							this.noGradeItem += ","
									+ rowSet.getString("point_id");
							existMap.put(rowSet.getString("point_id"), "1");
						}
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	/**
	 * 写html
	 * 
	 * @return
	 */
	public String writeHtml() {

		StringBuffer htmlContext = new StringBuffer("");
		HashMap existWriteItem = new HashMap();
		LazyDynaBean abean = null;
		LazyDynaBean a_bean = null;

		// 输出表头
		extendtHead.append("<tr class='trDeep_self'  height='25' >\r\n");
		extendtHead
				.append("<td class='TableRow_2rows_locked'  valign='middle' align='center'  colspan='"
						+ this.lay
						+ "'>"
						+ ResourceFactory.getProperty("train.job.itemName")
						+ "</td>\r\n");
		// if(this.model!=null&&this.model.equals("5"))
		extendtHead.append("<td class='TableRow_2rows_locked' width='"
				+ this.td_width + "'  valign='middle' align='center' >"
				+ ResourceFactory.getProperty("menu.field") + "/"
				+ ResourceFactory.getProperty("per.achivement.task")
				+ "</td>\r\n");
		// else
		// extendtHead.append("<td class='TableRow_2rows_locked'  valign='middle' align='center' >"+ResourceFactory.getProperty("menu.field")+"/"+ResourceFactory.getProperty("per.achivement.task")+"</td>\r\n");

		int rowNum = 0;
		for (int i = 0; i < this.leafItemList.size(); i++) {
			abean = (LazyDynaBean) this.leafItemList.get(i);
			String item_id = (String) abean.get("item_id");
			int num = ((Integer) this.itemPointNum.get(item_id)).intValue();
			ArrayList pointList = (ArrayList) this.itemToPointMap.get(item_id);
			String item_kind = (String) abean.get("kind");
			ArrayList linkParentList = (ArrayList) this.leafItemLinkMap
					.get(item_id); // **
			a_bean = (LazyDynaBean) linkParentList
					.get(linkParentList.size() - 1);
			String aitemid = (String) a_bean.get("item_id");
			int anum = ((Integer) this.itemPointNum.get(aitemid)).intValue();
			if (anum > num && this.itemToPointMap.get(aitemid) != null
					&& existWriteItem.get(aitemid) == null) {

				for (int e = linkParentList.size() - 1; e >= 0; e--) {

					a_bean = (LazyDynaBean) linkParentList.get(e);
					String a_itemid = (String) a_bean.get("item_id");
					String itemdesc = (String) a_bean.get("itemdesc");

					if (a_itemid.equals(item_id))
						break;
					if (this.itemToPointMap.get(a_itemid) != null) {
						ArrayList apointList = (ArrayList) this.itemToPointMap
								.get(a_itemid);
						for (int j = 0; j < apointList.size(); j++) {
							htmlContext.append("<tr>\r\n");
							if (existWriteItem.get(a_itemid) == null) {
								htmlContext.append(writeTd(itemdesc,
										((Integer) itemPointNum.get(a_itemid))
												.intValue(), "left",
										this.td_width, "1",
										"RecordRow_self_locked common_border_color"));
							}
							existWriteItem.put(a_itemid, "1");
							LazyDynaBean pointBean = (LazyDynaBean) apointList
									.get(j);
							/*
							 * if(linkParentList.size()==2)
							 * htmlContext.append(writePointGrid
							 * (this.lay-e-1,apointList,j,item_kind,item_id));
							 * else
							 */
							htmlContext.append(writePointGrid(
									linkParentList.size() - e, apointList, j,
									item_kind, item_id));

							if (apointList == null)
								htmlContext.append(getExtendTd(null, null));
							else
								htmlContext.append(getExtendTd(
										(LazyDynaBean) apointList.get(j),
										item_kind));
						}
					} else {

					}
				}
				htmlContext.append("</tr>\r\n");
			}
			// ****

			for (int j = 0; j < num; j++) {
				htmlContext.append("<tr>\r\n");
				rowNum++;
				// ArrayList
				// linkParentList=(ArrayList)this.leafItemLinkMap.get(item_id);
				int current = linkParentList.size();
				for (int e = linkParentList.size() - 1; e >= 0; e--) {
					a_bean = (LazyDynaBean) linkParentList.get(e);
					String itemid = (String) a_bean.get("item_id");
					if (existWriteItem.get(itemid) != null)
						continue;
					existWriteItem.put(itemid, "1");
					String itemdesc = (String) a_bean.get("itemdesc");
					String kind = (String) a_bean.get("kind");
					if ("2".equals(kind)) {
						kind = "2/" + itemid;
						if ("0".equals(this.template_vo.getString("status"))) // 分值
						{
							if (!"0".equals((String) a_bean.get("score")))
								itemdesc += "&nbsp;&nbsp;("
										+ ResourceFactory
												.getProperty("jx.param.mark")
										+ ":&nbsp;"
										+ (String) a_bean.get("score") + ")";
						} else if ("1".equals(
                                this.template_vo.getString("status"))) // 权重
						{
							String rank = (String) a_bean.get("rank");
							if (rank == null || rank.trim().length() == 0)
								rank = "0";
							else
								rank = rank.trim();
							DecimalFormat myformat1 = new DecimalFormat(
									"########.####");//
							String temp = myformat1.format(Double
									.parseDouble(rank) * 100);
							if (!"0".equals(temp))
								itemdesc += "&nbsp;&nbsp;("
										+ ResourceFactory
												.getProperty("label.kh.template.qz")
										+ ":&nbsp;" + temp + "％)";
						}
					}

					htmlContext.append(writeTd(itemdesc,
							((Integer) itemPointNum.get(itemid)).intValue(),
							"left", this.td_width, kind,
							"RecordRow_self_locked common_border_color"));
				}

				htmlContext.append(writePointGrid(current, pointList, j,
						item_kind, item_id));
				if (pointList == null)
					htmlContext.append(getExtendTd(null, null));
				else
					htmlContext.append(getExtendTd(
							(LazyDynaBean) pointList.get(j), item_kind));
				htmlContext.append("</tr>\r\n");
			}

		}

		int width = 0;

		width = (this.lay + 1) * this.td_width + this.td_width * this.extendNum;
		int height = rowNum * this.td_height;
		StringBuffer titleHtml = new StringBuffer(
				"<table   class='ListTable_self' width='" + width
						+ "' height='" + height + "' >");
		StringBuffer html = new StringBuffer(titleHtml.toString());
		extendtHead.append("</tr>\r\n");
		html.append(extendtHead.toString());
		html.append(htmlContext.toString());

		if (this.model != null && "5".equals(this.model)) {

			html.append(getOtherInputHtml2());

		} else {
			if ("1".equals(this.isAddExtendRow) && this.opt != 4) {
				html.append("<tr><td height='40' class='RecordRow_self common_border_color' colspan='"
						+ (this.lay + extendNum + 1) + "' >");
				html.append(getOtherInputHtml());
				html.append("</td></tr>");
			}
		}

		html.append("</table>");
		return html.toString();
	}

	// opt 1:了解程度 2:总体评价 3总分
	public String getHtmlByCondition(String opt) {

		String lastId = "";
		if (this.headList.size() > 0) {
			LazyDynaBean abean = (LazyDynaBean) this.headList.get(this.headList
					.size() - 1);
			lastId = (String) abean.get("itemid");
		}
		StringBuffer str = new StringBuffer("");
		ArrayList fieldList = DataDictionary.getFieldList("P04",
				Constant.USED_FIELD_SET);

		if ("5".equals(this.model) && this.plan_vo.getInt("method") == 1)
			fieldList = new ArrayList();
		String item_str = "";
		String item_str2 = "";
		String map_key = "";
		if ("1".equals(opt)) {
			item_str = "NodeKnowDegree"; // 了解程度
			map_key = "know_str";
		}
		if ("2".equals(opt)) {
			item_str = "WholeEval"; // 总体评价
			item_str2 = "DescriptiveWholeEval";
			map_key = "whole_str";
		}
		if ("3".equals(opt))
			map_key = "score";

		if ("3".equals(opt)
				|| ("2".equals(opt) && ("true"
						.equalsIgnoreCase((String) this.planParam.get(item_str)) || "true".equalsIgnoreCase((String) this.planParam
						.get(item_str2))))
				|| "true"
						.equalsIgnoreCase((String) this.planParam.get(item_str))) //
		{
			str.append("<tr>");
			if ("1".equals(opt)) {
				String cssname = "RecordRow_self_locked common_border_color";
				if (ctrl_css == 0) {
					cssname = "RecordRow_self_locked_whole common_border_color";
				}
				str.append(writeTd2(ResourceFactory
						.getProperty("lable.statistic.knowdegree"),
						this.lay + 1, "left", this.td_width, cssname));
				ctrl_css++;
			} else if ("2".equals(opt)) {
				String cssname = "RecordRow_self_locked common_border_color";
				if (ctrl_css == 0) {
					cssname = "RecordRow_self_locked_whole common_border_color";
				}
				str.append(writeTd2(ResourceFactory
						.getProperty("lable.statistic.wholeeven"),
						this.lay + 1, "left", this.td_width, cssname));
				ctrl_css++;
			} else if ("3".equals(opt)) {
				String cssname = "RecordRow_self_locked_last common_border_color";
				if (ctrl_css == 0) {
					cssname = "RecordRow_self_locked_whole common_border_color";
				}
				str.append(writeTd2("总分", this.lay + 1, "left", this.td_width,
						cssname));
				ctrl_css++;
			}			
			for (int i = 0; i < fieldList.size(); i++) {
				FieldItem item = (FieldItem) fieldList.get(i);
				String itemid = item.getItemid();
				String astr = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0425/P0427/P0407/P0413/P0415/P0421/P0423/PLAN_ID/STATE/";

				if (this.model != null && "5".equals(this.model)) {
					astr = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0425/P0427/P0407/P0415/P0421/P0423/PLAN_ID/STATE/";
					if ("1".equals(this.template_vo.getString("status")))
						astr = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0425/P0427/P0407/P0421/P0423/PLAN_ID/STATE/";
				}
				if (astr.indexOf("/" + itemid.toUpperCase() + "/") != -1)
					continue;
				if (this.TargetDefineItem.length() > 0
						&& this.TargetDefineItem.indexOf(","
								+ itemid.toUpperCase() + ",") == -1)
					continue;

				if ("1".equals(item.getState())) {
					n++;
					this.extendNum++;
					if (lastId != null
							&& lastId.equalsIgnoreCase(item.getItemid())) {
						str.append("<td class='RecordRow_self_right common_border_color' ");
					} else
						str.append("<td class='RecordRow_self common_border_color' ");//
					str.append(" valign='middle' align='center' >&nbsp;</td>\r\n");
				}
			}
			if (this.model != null && "5".equals(this.model)) {

				if (this.plan_vo.getInt("method") != 1) {
					if (this.planParam.get("TaskSupportAttach") != null
							&& "True"
									.equalsIgnoreCase((String) this.planParam
                                            .get("TaskSupportAttach"))) {
						n++;
						this.extendNum++;
						if (lastId != null && "attach".equalsIgnoreCase(lastId)) {
							str.append("<td class='RecordRow_self_right common_border_color' ");
						} else
							str.append("<td class='RecordRow_self common_border_color' ");//
						str.append(" valign='middle' align='center' >&nbsp;</td>\r\n");
					}
				}
			} else if (this.model != null && !"8".equals(this.model)) {
				if (this.planParam.get("TaskSupportAttach") != null
						&& "True"
								.equalsIgnoreCase((String) this.planParam.get("TaskSupportAttach"))) {
					n++;
					this.extendNum++;
					if (lastId != null && "attach".equalsIgnoreCase(lastId)) {
						str.append("<td class='RecordRow_self_right common_border_color' ");
					} else
						str.append("<td class='RecordRow_self common_border_color' ");//
					str.append(" valign='middle' align='center' >&nbsp;</td>\r\n");
				}
			}
			for (int i = 0; i < this.mainbodyList.size(); i++) {
				this.extendNum++;
				LazyDynaBean abean = (LazyDynaBean) this.mainbodyList.get(i);
				String a0101 = (String) abean.get("a0101");
				String a0100 = (String) abean.get("a0100");
				String status = (String) abean.get("status");
				HashMap map = (HashMap) objectAllEvaluateMap.get(a0100);

				if ("5".equals(this.model)) {
					if (status == null || !"2".equalsIgnoreCase(status)) // 如果没有提交过分数，则不显示此打分人列啦
						continue;

					if (SystemConfig.getPropertyValue("clientName") != null
							&& "bjpt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {

					} else if (this.planParam.get("ShowLeaderEval") != null
							&& "True"
									.equalsIgnoreCase((String) this.planParam.get("ShowLeaderEval"))) {

					} else {
						if (this.userView.getA0100().equals(this.object_id)
								|| (this.userView.getA0100() != null
										&& !"".equals(this.userView.getA0100()) && this.userView
										.getA0100().equals(this.un_functionary))) {
							if (this.from_flag != null
									&& ("1".equals(this.from_flag) || "0"
											.equals(this.from_flag))) {
								if (!this.userView.getA0100().equalsIgnoreCase(
										a0100))
									continue;
							}
						}
					}
				}
				String cssName = "RecordRow_self common_border_color";
				if (lastId != null && lastId.equalsIgnoreCase(("_" + a0100))) {
					cssName = "RecordRow_self_right common_border_color";
				} else
					cssName = "RecordRow_self common_border_color";
				if (map != null) {
					String astr = (String) map.get(map_key);
					str.append(writeTd(astr, 0, "center", (this.td_width - 50),
							"1", cssName));
				} else {
					str.append(writeTd("&nbsp;", 0, "center",
							(this.td_width - 50), "1", cssName));
				}

				if (this.planParam.get("showDeductionCause") != null
						&& "True"
								.equalsIgnoreCase((String) this.planParam.get("showDeductionCause"))) // /显示扣分原因
				{
					String acssName = "RecordRow_self common_border_color";
					if (lastId != null
							&& lastId.equalsIgnoreCase(("reason_" + a0100))) {
						acssName = "RecordRow_self_right common_border_color";
					} else
						acssName = "RecordRow_self common_border_color";
					str.append(writeTd("&nbsp;", 0, "center",
							(this.td_width - 50), "1", acssName));
				}
			}
			if ("5".equals(this.model) && "0".equals(this.from_flag)) {
				n++;
				this.extendNum++;
				str.append("<td class='RecordRow_self_right common_border_color' ");
				str.append(" valign='middle' align='center' >&nbsp;</td>\r\n");

			}
            if(this.isOpenGrade_Members() && isShowOpinion != 1){
                str.append(writeTd("&nbsp;",
                    0, "center", 0, "1",
                    "RecordRow_self_right common_border_color"));
                str.append(writeTd("&nbsp;",
                    0, "center", 0, "1",
                    "RecordRow_self_right common_border_color"));
            }
			str.append("</tr>\r\n");

		}

		return str.toString();
	}

	private int ctrl_css = 0;

	/**
	 * 取得 总分 or 了解程度 or 总体评价代码 评分等级
	 * 
	 * @return
	 */
	public String getOtherInputHtml2() {
		StringBuffer str = new StringBuffer("");
		try {

			if ("8".equals(this.model)) // 等级 ，总分，排名
			{
				str.append(getHtmlByCondition2("1"));
				str.append(getHtmlByCondition2("2"));
				String showGrpOrder = (String) this.planParam
						.get("ShowGrpOrder"); // 当前计划是否显示排名
				if (!(showGrpOrder != null && "false"
						.equalsIgnoreCase(showGrpOrder))) {
					str.append(getHtmlByCondition2("3"));
				}
			} else {
				/*
			    if (!this.object_id.equals(this.userView.getA0100())){//本人不需要查看这几行,wangrd 20141215
			        str.append(getHtmlByCondition("1"));
			        str.append(getHtmlByCondition("2"));
			        str.append(getHtmlByCondition("3"));
			    }
			    else {
			        getHtmlByCondition("3");//只是执行一遍，不返回任何值，为了得到extendnum bug6356  20141231
			    }*/
				//20160718 dengcan  jazz:20839
            	str.append(getHtmlByCondition("1"));
                str.append(getHtmlByCondition("2"));
                str.append(getHtmlByCondition("3"));
                
				int KeepDecimal = Integer.parseInt((String) this.planParam
						.get("KeepDecimal")); // 保留小数位
				ContentDAO dao = new ContentDAO(this.conn);
				RowSet rowSet = dao
						.search("select resultdesc,exX_object,score from per_result_"
								+ this.plan_vo.getInt("plan_id")
								+ " where object_id='" + this.object_id + "'");
				if (rowSet.next()) {
					/* xus 19/12/18 【56489】V77绩效管理自助：谷歌，考核沟通/面谈记录，记录表多线 */
					str.append("<tr><td height='40' class='RecordRow_self_locked2 common_border_color' style='BORDER-LEFT: #94B6E6 0pt solid;' colspan='"
							+ (this.lay - 1 + this.headList.size()) + "' >");
					if (rowSet.getString(1) != null) {
						str.append("&nbsp;&nbsp;<font class='"
								+ this.getTt3CssClassName()
								+ "'>考核等级:</font>&nbsp;" + rowSet.getString(1));
					}
					String ss = SystemConfig
							.getPropertyValue("visibleLevelRatio");
					if (!"false"
							.equalsIgnoreCase(SystemConfig.getPropertyValue("visibleLevelRatio"))) {
						if (rowSet.getString(2) != null)
							str.append("&nbsp;&nbsp;&nbsp;&nbsp;<font class='"
									+ this.getTt3CssClassName()
									+ "'>等级系数:</font>&nbsp;"
									+ PubFunc.round(rowSet.getString(2), 2));
					}
					if (rowSet.getString(3) != null)
						str.append("&nbsp;&nbsp;&nbsp;&nbsp;<font class='"
								+ this.getTt3CssClassName()
								+ "'>总分:</font>&nbsp;"
								+ PubFunc.round(rowSet.getString(3),
										KeepDecimal));

					str.append("&nbsp;</td></tr>");
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return str.toString();
	}

	// opt 1:等级 2:总分 3排名
	public String getHtmlByCondition2(String opt) {

		StringBuffer str = new StringBuffer("");
		String item_str = "等级";
		if ("2".equals(opt))
			item_str = "总分";
		else if ("3".equals(opt))
			item_str = "排名";

		str.append("<tr>"
				+ writeTd2(item_str, this.lay + 1, "left", this.td_width,
						"RecordRow_self_locked"));

		item_str = "&nbsp;";
		if ("1".equals(opt)) {
			if (this.perResultScoreMap.get("resultdesc") != null)
				item_str = (String) this.perResultScoreMap.get("resultdesc");
			str.append("\r\n<td class='RecordRow_self_right'  height='40' id=\"resultdesc_td\"  valign='middle' align='left' ");
			str.append(" colspan='" + (headOtherMainbodyList.size() + 1) + "' ");
			str.append(" >");
			str.append(item_str);
			str.append("</td>");
		} else if ("2".equals(opt)) {
			String score = "";
			if (this.perResultScoreMap.get("score") != null
					&& this.isVisibleScoreBox) {
				String keepDecimal = (String) this.planParam.get("KeepDecimal");
				score = PubFunc.round(
						(String) this.perResultScoreMap.get("score"),
						Integer.parseInt(keepDecimal));
			}
			item_str = "<input onkeydown=\"checkKeyCode();\" type=\"text\" class=\"Input_self2\" name='totalScore'  id='totalScore' value=\""
					+ score + "\"  style='width: 65.0px' />";
			item_str += "<input type=\"hidden\"  id=\"totalScore_score\" value=\"0\" />";// 指标分值
			item_str += "<input type=\"hidden\"  id=\"totalScore_oldscore\" value=\""
					+ score + "\" />";// 点击调整进去用户操作前页面显示的分值

			str.append(writeTd2(item_str, headOtherMainbodyList.size() + 1,
					"left", this.td_width, "RecordRow_self_right") + "</tr>");

		} else if ("3".equals(opt)) {
			if (this.perResultScoreMap.get("ordering") != null)
				item_str = (String) this.perResultScoreMap.get("ordering");
			str.append("\r\n<td class='RecordRow_self_right'  height='40'  id=\"ordering_td\"  valign='middle' align='left' ");
			str.append(" colspan='" + (headOtherMainbodyList.size() + 1) + "' ");
			str.append(" >");
			str.append(item_str);
			str.append("</td>");
		}

		return str.toString();
	}

	private String writeTd2(String context, int colspan, String align,
			int width, String classname) {
		StringBuffer td = new StringBuffer("");
		td.append("\r\n<td class='" + classname
				+ "'  height='40' valign='middle' align='" + align + "' ");
		td.append(" colspan='" + colspan + "' ");
		td.append(" >&nbsp;&nbsp;");
		td.append(context);
		td.append("&nbsp;</td>");
		return td.toString();
	}

	/**
	 * 取得 总分 or 了解程度 or 总体评价代码
	 * 
	 * @return
	 */
	public String getOtherInputHtml() {

		StringBuffer str = new StringBuffer("<table><tr>");
		try {
			//考核主体为确认时，不显示总分 chent 20151111 start
			ContentDAO dao = new ContentDAO(this.conn);
			String count = "";
			String opt = "0";
			String sql = "select p.opt from per_mainbody m, per_plan_body p where m.plan_id="+this.plan_vo.getInt("plan_id")+" and m.plan_id=p.plan_id and m.body_id=p.body_id and m.mainbody_id='"+this.userView.getA0100()+"'";
			RowSet rs = dao.search(sql);
			while(rs.next()){
				opt = rs.getString("opt");//获取打分|确认标识
			}
			if(!"1".equals(opt)){//打分时
				count = getScore(this.userView.getA0100(), this.object_id);
			}
			
			if ("true"
					.equalsIgnoreCase((String) this.planParam.get("isShowSubmittedScores")) && this.isVisibleScoreBox) {
				str.append("<td align='left' ><font class='"
						+ this.getTt3CssClassName()
						+ "'>"
						+ ResourceFactory
								.getProperty("label.kh.template.total")
						+ ":</font>&nbsp;</td>");
				str.append("<td align='left' id='totalScore' width='50'  ><font class='"
						+ this.getTt3CssClassName()
						+ "'>"
						+ count
						+ "</font></td>");
			}
			//考核主体为确认时，不显示总分 chent 20151111 end
			/*
			 * if(((String)this.planParam.get("NodeKnowDegree")).equalsIgnoreCase
			 * ("true")) //了解程度 {
			 * 
			 * str.append("<td align='left' >"+ResourceFactory.getProperty(
			 * "lable.statistic.knowdegree")+":</td>"); String know_id="";
			 * if(this.mainbodyBean!=null)
			 * know_id=(String)this.mainbodyBean.get("know_id"); ArrayList
			 * nodeKnowDegreeList=getExtendInfoValue("1","");
			 * str.append("<td align='left' width='100'  ><select name='know_id' "
			 * ); if(this.opt==2) str.append(" disabled ");
			 * str.append(" ><option value=''></option>"); for(int
			 * i=0;i<nodeKnowDegreeList.size();i++) { String[]
			 * temp=(String[])nodeKnowDegreeList.get(i);
			 * str.append("<option value='"+temp[0]+"' ");
			 * if(temp[0].equals(know_id)) str.append(" selected ");
			 * str.append(">"+temp[1]+"</option>");
			 * 
			 * } str.append("</select></td>"); }
			 */
			if (("true"
					.equalsIgnoreCase((String) this.planParam.get("WholeEval")) || "true".equalsIgnoreCase((String) this.planParam
					.get("DescriptiveWholeEval")))
					&& this.isVisibleScoreBox) // 总体评价 or 总体评价描述
			{
				if (this.plan_vo != null && this.plan_vo.getInt("status") >= 4) {
					str.append("<td align='left' nowrap ><font class='"
							+ this.getTt3CssClassName()
							+ "'>"
							+ ResourceFactory
									.getProperty("lable.statistic.wholeeven")
							+ ":</font></td>");
					String whole_id = "";
					if (this.mainbodyBean != null)
						whole_id = (String) this.mainbodyBean
								.get("whole_grade_id");

					String EvalClass = (String) this.planParam.get("EvalClass"); // 在计划参数中的等级分类ID
					String GradeClass = "";
					if (EvalClass == null || EvalClass.trim().length() < 0
							|| "0".equals(EvalClass.trim()))
						GradeClass = (String) this.planParam.get("GradeClass"); // 等级分类ID
					else
						GradeClass = (String) this.planParam.get("EvalClass");

					ArrayList wholeArrayList = getExtendInfoValue("2",
							GradeClass);

					str.append("<td align='left'   nowrap  ><font class='"
							+ this.getTt3CssClassName() + "'>");
					String totalAppFormula =(String)this.planParam.get("TotalAppFormula"); // 总体评价的计算公式，默认为空
					if ("true"
							.equalsIgnoreCase((String) this.planParam.get("WholeEval"))) {
						if("0".equals((String) this.planParam.get("WholeEvalMode"))) {//总体评价采集方式: 0-录入等级，1-录入分值
							str.append("<select name='whole_id'  ");
							if (this.opt != 2
									||(this.mainbodyBean!=null && "2"
											.equals((String) this.mainbodyBean.get("status")))
									||( totalAppFormula!=null && totalAppFormula.trim().length()>0)	//zzk 2014/2/26 总体评价录入等级 设置了计算公式 则下拉框不让选
							)
								str.append(" disabled ");
							
							str.append(" ><option value=''></option>");
							for (int i = 0; i < wholeArrayList.size(); i++) {
								String[] temp = (String[]) wholeArrayList.get(i);
								str.append("<option value='" + temp[0] + "' ");
								if (temp[0].equals(whole_id))
									str.append(" selected ");
								str.append(">" + temp[1] + "</option>");
							}
							str.append("</select>");
						}
						else if("1".equals((String) this.planParam.get("WholeEvalMode"))){
							int KeepDecimal = Integer.parseInt((String) this.planParam.get("KeepDecimal")); // 保留小数位
							String tempScore = PubFunc.round(wholeEvalScore, KeepDecimal);
							//String tempScore = wholeEvalScore;
							String tempstatus = (String)this.mainbodyBean.get("status");
		                	if("0".equals(tempstatus))
		                		tempScore = "";
							str.append("<input type='text' id='wholeEvalScoreId' value='"+tempScore+"' onkeydown='keyDownFunction(this)' size=10 name='wholeEvalScore' ");
							if (this.opt != 2) // 如果为目标查看
							{
								str.append(" disabled ");
								str.append("class='TEXT_NB'");

							} else {

								if ((this.mainbodyBean != null && "2".equals((String) this.mainbodyBean
												.get("status")))) {
									str.append(" disabled ");
									str.append("class='TEXT_NB'");

								}

							}
							str.append(" />");
						}
					}

					if ("true"
							.equalsIgnoreCase((String) this.planParam.get("DescriptiveWholeEval"))) {
						str.append("&nbsp;&nbsp;<img  style=\"cursor:hand\"  src=\"/images/table.gif\"  ");
						if (this.opt != 2
								|| (this.mainbodyBean != null && "2".equals((String) this.mainbodyBean
										.get("status"))))
							str.append(" onclick=\"javascript:showWindow2('"
									+ this.plan_vo.getInt("plan_id") + "','"
									+ this.object_id + "','"
									+ this.userView.getA0100() + "',"
									+ this.body_id + ")\" >  ");
						else
							str.append(" onclick=\"javascript:showWindow('"
									+ this.plan_vo.getInt("plan_id") + "','"
									+ this.object_id + "','"
									+ this.userView.getA0100() + "',"
									+ this.body_id + ")\" >   ");
					}
					str.append("</font></td>");
				}
			}

			str.append("</tr></table>");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return str.toString();
	}

	/**
	 * 得到 了解程度 或 总体评价的选项信息
	 * 
	 * @param flag
	 *            1:了解程度 2：总体评价
	 * @param gradeClass
	 *            等级分类ID
	 * @return
	 */
	public ArrayList getExtendInfoValue(String flag, String gradeClass)
			throws GeneralException {
		ArrayList list = new ArrayList();
		ContentDAO dao = new ContentDAO(this.conn);
		RowSet rowSet = null;
		try {
			if ("1".equals(flag))
				rowSet = dao
						.search("select know_id,name from per_know where status=1 order by seq ");
			else if ("2".equals(flag))
				rowSet = dao
						.search("select pds.id,pds.itemname from per_degree pd,per_degreedesc pds where pd.degree_id=pds.degree_id and pd.degree_id="
								+ gradeClass);
			while (rowSet.next()) {
				String[] temp = new String[2];
				temp[0] = rowSet.getString(1);
				temp[1] = rowSet.getString(2);
				list.add(temp);
			}
		} catch (Exception e) {
			e.printStackTrace();
			throw GeneralExceptionHandler.Handle(e);
		}
		return list;
	}

	/** -----------------计算加扣分总分--------------------- */

	/**
	 * 0: 叶子节点 1：根节点
	 */
	public HashMap getNodeItemMap(int opt) {
		HashMap map = new HashMap();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			StringBuffer sql = new StringBuffer(
					"select item_id,parent_id,score,rank  from  per_template_item ");
			if (opt == 0) {
				sql.append(" where item_id not in (select parent_id  from  per_template_item where template_id='"
						+ this.plan_vo.getString("template_id")
						+ "' and parent_id is not null ) ");
				sql.append(" and  template_id='"
						+ this.plan_vo.getString("template_id") + "' ");
			} else
				sql.append(" where  template_id='"
						+ this.plan_vo.getString("template_id")
						+ "' and ( parent_id is null ) ");
			RowSet rowSet = dao.search(sql.toString());
			while (rowSet.next()) {
				LazyDynaBean abean = new LazyDynaBean();
				abean.set("item_id", rowSet.getString("item_id"));
				abean.set(
						"parent_id",
						rowSet.getString("parent_id") != null ? rowSet
								.getString("parent_id") : "");
				abean.set(
						"score",
						rowSet.getString("score") != null ? rowSet
								.getString("score") : "0");
				abean.set(
						"rank",
						rowSet.getString("rank") != null ? rowSet
								.getString("rank") : "0");
				map.put(rowSet.getString("item_id"), abean);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public String getScore2(String mainbody_id, String object_id) {
		String score = "";
		ArrayList _templateItemList = getTemplateItemList();
		HashMap rootNodeMap = getlayItemMap(_templateItemList);
		ArrayList p04List = getP04List();
		HashMap nodeItemMap = getNodeItemMap(0); // 叶子节点
		HashMap topItemMap = getNodeItemMap(1); // 根节点
		ArrayList _list = new ArrayList();
		HashMap itemScoreMap = new HashMap();
		LazyDynaBean p04bean = null;

		HashMap p04ValueMap = getEvaluationMap(object_id, mainbody_id,
				this.plan_vo.getInt("plan_id"));

		Set key = nodeItemMap.keySet();
		for (Iterator t = key.iterator(); t.hasNext();) {
			String _key = (String) t.next();
			LazyDynaBean abean = (LazyDynaBean) nodeItemMap.get(_key);
			String item_id = (String) abean.get("item_id");
			String self_score = (String) abean.get("score");
			double _score = 0;
			for (int e = 0; e < p04List.size(); e++) {
				p04bean = (LazyDynaBean) p04List.get(e);
				String p04_item_id = (String) p04bean.get("item_id");
				String itemtype = (String) p04bean.get("itemtype");
				if (p04_item_id.equals(item_id)) {
					String p0400 = (String) p04bean.get("p0400");
					if (p04ValueMap.get(p0400) != null) {
						_score += Double.parseDouble((String) p04ValueMap
								.get(p0400));
					}
				}
			}

			LazyDynaBean _abean = new LazyDynaBean();
			_abean.set("item_id", item_id);
			_abean.set("score",
					PubFunc.add(self_score, String.valueOf(_score), 2));
			itemScoreMap.put(item_id, _abean);
		}

		BigDecimal totalScore = new BigDecimal("0");
		key = topItemMap.keySet();
		LazyDynaBean _bean = null;

		ContentDAO dao = new ContentDAO(this.conn);
		HashMap _itemPrivMap = new HashMap();

		try {
			String _body_id = this.body_id;
			RowSet rowSet = dao
					.search("select body_id from per_mainbody where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and object_id='" + this.object_id
							+ "' and mainbody_id='" + mainbody_id + "'  ");
			if (rowSet.next())
				_body_id = rowSet.getString("body_id");
			if (_body_id != null && _body_id.trim().length() > 0) {
				rowSet = dao.search("select * from per_itempriv_"
						+ this.plan_vo.getInt("plan_id") + " where body_id="
						+ _body_id + " and object_id='" + object_id + "'");
				if (rowSet.next()) {
					ResultSetMetaData mt = rowSet.getMetaData();
					for (int i = 0; i < mt.getColumnCount(); i++) {
						String columnName = mt.getColumnName(i + 1);
						if (columnName.length() > 2
								&& "C_".equalsIgnoreCase(
                                columnName.substring(0, 2))) {
							_itemPrivMap
									.put(columnName.substring(2),
											rowSet.getString(columnName) != null ? rowSet
													.getString(columnName)
													: "0");
						}
					}
				}

			}
			if (rowSet != null)
				rowSet.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		for (Iterator t = key.iterator(); t.hasNext();) {
			String _key = (String) t.next();
			LazyDynaBean abean = (LazyDynaBean) topItemMap.get(_key);
			String item_id = (String) abean.get("item_id");
			String self_score = (String) abean.get("score");
			String rank = (String) abean.get("rank");
			BigDecimal key_score = new BigDecimal("0");

			HashMap map = (HashMap) rootNodeMap.get(item_id);
			Set keySet = map.keySet();
			int num = 0;
			for (Iterator tt = keySet.iterator(); tt.hasNext();) {
				String itemid = (String) tt.next();
				if (!(_itemPrivMap.get(itemid) != null && "0".equals((String) _itemPrivMap
						.get(itemid)))) {
					num++;
					_bean = (LazyDynaBean) itemScoreMap.get(itemid);
					key_score = key_score.add(new BigDecimal((String) _bean
							.get("score")));
				}
			}
			if (num > 0) {
				key_score = key_score.divide(new BigDecimal(num), 2,
						BigDecimal.ROUND_HALF_UP);
				totalScore = totalScore.add(key_score.multiply(new BigDecimal(
						rank)));
			}

		}

		score = PubFunc.round(totalScore.toString(), 2);

		return score;
	}

	public HashMap getEvaluationMap(String object_id, String mainbody_id,
			int plan_id) {
		HashMap map = new HashMap();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			String sql = "select * from per_target_evaluation where plan_id="
					+ plan_id + " and object_id='" + object_id
					+ "'  and mainbody_id='" + mainbody_id + "'";
			RowSet rowSet = dao.search(sql);
			while (rowSet.next()) {
				map.put(rowSet.getString("p0400"), rowSet.getString("score"));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	/**
	 * 取得各层的item
	 * 
	 * @param _itemList
	 * @return
	 */
	public HashMap getlayItemMap(ArrayList _itemList) {
		HashMap rootMap = new HashMap();
		LazyDynaBean abean = null;
		ArrayList tempList = new ArrayList();
		for (int i = 0; i < _itemList.size(); i++) {
			abean = (LazyDynaBean) _itemList.get(i);
			String parent_id = (String) abean.get("parent_id");
			String item_id = (String) abean.get("item_id");
			if (parent_id.trim().length() == 0) {
				HashMap nodeMap = new HashMap();
				getlayItemList2(_itemList, item_id, nodeMap);
				rootMap.put(item_id, nodeMap);
			}
		}
		return rootMap;
	}

	public void getlayItemList2(ArrayList _itemList, String item_id, HashMap map) {

		LazyDynaBean abean2 = null;

		ArrayList _list = new ArrayList();
		for (int k = 0; k < _itemList.size(); k++) {
			abean2 = (LazyDynaBean) _itemList.get(k);
			String parent_id = (String) abean2.get("parent_id");
			if (parent_id.equals(item_id))
				_list.add(abean2);
		}
		if (_list.size() > 0) {
			for (int j = 0; j < _list.size(); j++) {
				abean2 = (LazyDynaBean) _list.get(j);
				String _item_id = (String) abean2.get("item_id");
				getlayItemList2(_itemList, _item_id, map);

			}
		} else
			map.put(item_id, "1");

	}

	/** -----------------end--------------------- */

	private String ascore = "0";

	public String getaScore() {
		return ascore;
	}

	public String getScore(String mainbody_id, String object_id) {
		String score = "0";
		RowSet rowSet = null;
		try {
			ContentDAO dao = new ContentDAO(this.conn);

			if (this.plan_vo.getInt("method") == 1) // 360度计划
			{
				BatchGradeBo batchGradeBo = new BatchGradeBo(this.conn);
				float _score = batchGradeBo.getObjectTotalScore(
						this.plan_vo.getInt("plan_id"), mainbody_id,
						this.plan_vo.getString("template_id"), object_id,
						this.userView);
				score = String.valueOf(_score);
				ascore = score;
			} else if (this.plan_vo.getInt("method") == 2) // 目标
			{
				if ("4".equals(this.scoreflag)
						&& this.planParam.get("EvalCanNewPoint") != null
						&& "true"
								.equalsIgnoreCase((String) this.planParam.get("EvalCanNewPoint")))// 加扣分
				{

					score = getScore2(mainbody_id, object_id);
					ascore = score;
				} else if ("4".equals(this.scoreflag)) {
					String sql = "select sum(score) from per_target_evaluation where plan_id="
							+ this.plan_vo.getInt("plan_id");
					sql += " and object_id='" + object_id
							+ "' and mainbody_id='" + mainbody_id + "'";
					if ("1".equals(this.template_vo.getString("status"))) {
						sql = "select sum(pte.score*p04.p0415) from per_target_evaluation pte,p04 where p04.plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and pte.plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and p04.p0400=pte.p0400 "
								+ " and pte.object_id='"
								+ object_id
								+ "' and pte.mainbody_id='" + mainbody_id + "'";
					}
					rowSet = dao.search(sql);
					if (rowSet.next()) {
						int KeepDecimal = Integer
								.parseInt((String) this.planParam
										.get("KeepDecimal")); // 保留小数位
						score = PubFunc.round(rowSet.getString(1), KeepDecimal);
						ascore = score;
					}

				} else {
					boolean isCalTask_score = false;
					String task_score_str = "";
					if (this.planParam.get("TargetTraceEnabled") != null
							&& "True"
									.equalsIgnoreCase((String) this.planParam
                                            .get("TargetTraceEnabled"))) {
						String TargetCalcItem = ""; // 目标卡计算指标属性，P04中指标，以逗号分隔，顺序从前到后
						if (planParam.get("TargetCalcItem") != null
								&& ((String) planParam.get("TargetCalcItem"))
										.trim().length() > 0)
							TargetCalcItem = ((String) planParam
									.get("TargetCalcItem")).trim();

						if (TargetCalcItem.length() > 0) {
							String[] temps = TargetCalcItem.split(",");

							ArrayList fieldList = (ArrayList) DataDictionary
									.getFieldList("P04",
											Constant.USED_FIELD_SET).clone();
							FieldItem item = new FieldItem();
							item.setItemid("per_target_evaluation.score");
							item.setItemdesc("评分");
							item.setItemtype("N");
							item.setDecimalwidth(4);
							item.setItemlength(12);
							fieldList.add(item);

							for (int i = 0; i < temps.length; i++) {
								if (temps[i].length() > 0) {
									rowSet = dao
											.search("select expression,itemtype from t_hr_busiField  where upper(fieldsetid)='P04'  and upper(itemid)='"
													+ temps[i].toUpperCase()
													+ "' ");
									if (rowSet.next()) {
										String expression = Sql_switcher
												.readMemo(rowSet, "expression");
										String itemtype = rowSet
												.getString("itemtype");
										int y_type = YksjParser.FLOAT;
										if ("A".equalsIgnoreCase(itemtype))
											y_type = YksjParser.STRVALUE;
										if ("D".equalsIgnoreCase(itemtype))
											y_type = YksjParser.DATEVALUE;
										if (expression.trim().length() > 0) {
											if ("task_score"
													.equalsIgnoreCase(
                                                            temps[i].trim())) {
												isCalTask_score = true;
												YksjParser yp = new YksjParser(
														this.userView,
														fieldList,
														YksjParser.forNormal,
														y_type,
														YksjParser.forPerson,
														"Ht", "");
												yp.run(expression, this.conn,
														"", "p04");
												task_score_str = yp.getSQL();
											}
											/*
											 * if(!temps[i].trim().equalsIgnoreCase
											 * ("task_score")) { String _str="";
											 * if
											 * (this.plan_vo.getInt("object_type"
											 * )==1||this.plan_vo.getInt(
											 * "object_type"
											 * )==3||this.plan_vo.getInt
											 * ("object_type")==4)
											 * _str=" and b0110='"
											 * +object_id+"'"; else
											 * if(this.plan_vo
											 * .getInt("object_type")==2)
											 * _str=" and a0100='"
											 * +object_id+"'";
											 * 
											 * 
											 * if(formular_sql.toLowerCase().indexOf
											 * (
											 * "per_target_evaluation.score")==-
											 * 1) {
											 * dao.update("update p04 set "+
											 * temps[i]+"=("+formular_sql+
											 * ") where plan_id="
											 * +this.plan_vo.getInt("plan_id")+
											 * "   and ( p04.chg_type<>3 or p04.chg_type is null ) "
											 * +_str); } } else {
											 * 
											 * task_score_str=formular_sql; }
											 */

										}
									}
								}
							}
						}
					}

					String _str = "per_target_evaluation.score";
					if (isCalTask_score)
						_str = "(" + task_score_str + ")";
					String _str2 = "";
					if (this.hasAddMinusItem && addMinusPointStr.length() > 0) {
						_str2 = " and per_target_evaluation.p0400 not in ("
								+ this.addMinusPointStr + ")";
					}
					if ("0".equals(this.template_vo.getString("status"))) // 分值
					{
						rowSet = dao
								.search("select "
										+ Sql_switcher.isnull("sum(" + _str
												+ ")", "0")
										+ "  from per_target_evaluation,p04 where per_target_evaluation.p0400=p04.p0400 "
										+ _str2
										+ " and per_target_evaluation.plan_id="
										+ this.plan_vo.getInt("plan_id")
										+ " and per_target_evaluation.object_id='"
										+ object_id
										+ "' and per_target_evaluation.mainbody_id='"
										+ mainbody_id
										+ "' and ( p04.chg_type<>3 or p04.chg_type is null ) ");
					} else {
						rowSet = dao
								.search("select "
										+ Sql_switcher.isnull("sum(" + _str
												+ "*p04.p0415)", "0")
										+ "  from per_target_evaluation,p04 where per_target_evaluation.p0400=p04.p0400 "
										+ _str2
										+ " and per_target_evaluation.plan_id="
										+ this.plan_vo.getInt("plan_id")
										+ " and per_target_evaluation.object_id='"
										+ object_id
										+ "' and per_target_evaluation.mainbody_id='"
										+ mainbody_id
										+ "' and ( p04.chg_type<>3 or p04.chg_type is null ) ");

					}
					if (this.ScoreFromItem
							&& "1".equals(this.template_vo.getString("status"))) {
						score = this.getStepByStepScore(
								((String) this.planParam
										.get("taskAdjustNeedNew")), null, 0, 1);
					} else {
						if (perPointMap.size() == 0)
							this.perPointMap = getPerPointMap(object_id,
									this.plan_vo.getInt("object_type"),
									this.plan_vo.getInt("plan_id") + "");
						if (this.perPointScoreMap.size() == 0)
							this.perPointScoreMap = getPerPointScoreMap();
						if (rowSet.next()) {
							score = rowSet.getString(1);
							LazyDynaBean point_bean = null;
							for (int i = 0; i < this.p04List.size(); i++) {
								point_bean = (LazyDynaBean) this.p04List.get(i);
								String fromflag = (String) point_bean
										.get("fromflag");
								String p0400 = (String) point_bean.get("p0400");
								String p0401 = (String) point_bean.get("p0401");
								String p0415 = (String) point_bean.get("p0415");
								if ("2".equals(fromflag)) // 来源KPI指标
								{
									LazyDynaBean pointBean = (LazyDynaBean) this.perPointMap
											.get(p0401.toLowerCase());
									String point_kind = "0";
									String status = "0";
									if (pointBean != null) {
										point_kind = (String) pointBean
												.get("pointkind");
										status = (String) pointBean
												.get("status");
									}

									// 统一打分指标
									if ("1".equals(point_kind)
											&& "1".equals(status)) {
										if (this.hasAddMinusItem&&addMinusPointStr.length() > 0) {//如果该统一打分指标同时也是加扣分项，那么此处不算分，下面算加扣分的时候再算，以免算两次   zhaoxg add 2014-9-22
											if(this.addMinusPointStr.toUpperCase().indexOf("'"+p0400.toUpperCase()+"'")!=-1){
												continue;
											}
										}
										if (this.perPointScoreMap.get(p0401
												.toLowerCase()) != null
												&& ((String) this.perPointScoreMap
														.get(p0401
																.toLowerCase()))
														.trim().length() > 0) {
											// abean.set("score",
											// PubFunc.round((String)this.perPointScoreMap.get(p0401.toLowerCase()),2));

											if ("0".equals(this.template_vo.getString(
													"status")))
												score = PubFunc
														.add(score,
																(String) this.perPointScoreMap
																		.get(p0401
																				.toLowerCase()),
																2);
											else // 权重
											{
												String _value = PubFunc
														.multiple(
																(String) this.perPointScoreMap
																		.get(p0401
																				.toLowerCase()),
																p0415, 2);
												score = PubFunc.add(score,
														_value, 2);
											}
										}
									}
								}
							}
							if (this.hasAddMinusItem
									&& addMinusPointStr.length() > 0) {
								rowSet = dao
										.search("select "
												+ Sql_switcher.isnull("sum(per_target_evaluation.score)","0")
												+ "  from per_target_evaluation,p04 where per_target_evaluation.p0400=p04.p0400 and per_target_evaluation.p0400  in ("
												+ this.addMinusPointStr
												+ ") and per_target_evaluation.plan_id="
												+ this.plan_vo.getInt("plan_id")
												+ " and per_target_evaluation.object_id='"
												+ object_id
												+ "' and per_target_evaluation.mainbody_id='"
												+ mainbody_id
												+ "' and ( p04.chg_type<>3 or p04.chg_type is null ) ");
								if (rowSet.next()) {
									String _score = rowSet.getString(1);
									score = PubFunc.add(score, _score, 2);
								}
								HashMap dynaMap = null;
								if (this.perObject_vo != null
										&& this.perObject_vo
												.getString("body_id") != null
										&& !"".equals(this.perObject_vo.getString(
												"body_id"))) {
									LoadXml loadXml = new LoadXml();
									dynaMap = loadXml
											.getDynaItem(
													this.plan_vo
															.getInt("plan_id")
															+ "",
													this.conn,
													this.perObject_vo
															.getString("body_id"));
								}
								StringBuffer sql = new StringBuffer(
										"select distinct item_id from P04 where plan_id="
												+ this.plan_vo
														.getInt("plan_id"));
								if (this.plan_vo.getInt("object_type") == 1
										|| this.plan_vo.getInt("object_type") == 3
										|| this.plan_vo.getInt("object_type") == 4)
									sql.append(" and b0110='" + this.object_id
											+ "'");
								else if (this.plan_vo.getInt("object_type") == 2)
									sql.append(" and a0100='" + this.object_id
											+ "'");
								sql.append(" and ( chg_type<>3 or chg_type is null ) ");
								rowSet = dao.search(sql.toString());
								while (rowSet.next()) {
									if (rowSet.getString("item_id") != null
											&& rowSet.getString("item_id")
													.trim().length() > 0) {
										if (dynaMap != null
												&& dynaMap
														.get(this.perObject_vo
																.getString("body_id")
																+ rowSet.getString("item_id")) != null) {
											HashMap map = (HashMap) dynaMap
													.get(this.perObject_vo
															.getString("body_id")
															+ rowSet.getString("item_id"));
											String dyna_value = moveZero((String) map
													.get("dyna_value"));
											if (map.get("isAddMinusItem") != null
													&& "1"
															.equals((String) map
                                                                    .get("isAddMinusItem"))) {
												if (dyna_value.length() > 0) {
													if ("0"
															.equals(this.template_vo
                                                                    .getString("status"))) {
														score = PubFunc.add(
																score,
																dyna_value, 2);
													} else // 权重
													{
														score = PubFunc
																.add(score,
																		String.valueOf(Double
																				.parseDouble(dyna_value)
																				* this.template_vo
																						.getDouble("topscore")),
																		2);
													}
												}
											}
										}
									}
								}
							}
						}
					}
					if (isCalTask_score) {
						String _astr = "per_target_evaluation.score";
						String _astr2 = "";
						if (this.hasAddMinusItem
								&& addMinusPointStr.length() > 0) {
							_astr2 = " and per_target_evaluation.p0400 not in ("
									+ this.addMinusPointStr + ")";
						}
						if ("0".equals(this.template_vo.getString("status"))) // 分值
						{
							rowSet = dao
									.search("select "
											+ Sql_switcher.isnull("sum("
													+ _astr + ")", "0")
											+ "  from per_target_evaluation,p04 where per_target_evaluation.p0400=p04.p0400 "
											+ _astr2
											+ " and per_target_evaluation.plan_id="
											+ this.plan_vo.getInt("plan_id")
											+ " and per_target_evaluation.object_id='"
											+ object_id
											+ "' and per_target_evaluation.mainbody_id='"
											+ mainbody_id
											+ "' and ( p04.chg_type<>3 or p04.chg_type is null ) ");
						} else {
							rowSet = dao
									.search("select "
											+ Sql_switcher.isnull("sum("
													+ _astr + "*p04.p0415)",
													"0")
											+ "  from per_target_evaluation,p04 where per_target_evaluation.p0400=p04.p0400 "
											+ _astr2
											+ " and per_target_evaluation.plan_id="
											+ this.plan_vo.getInt("plan_id")
											+ " and per_target_evaluation.object_id='"
											+ object_id
											+ "' and per_target_evaluation.mainbody_id='"
											+ mainbody_id
											+ "' and ( p04.chg_type<>3 or p04.chg_type is null ) ");

						}
						if (this.ScoreFromItem
								&& "1".equals(
                                this.template_vo.getString("status"))) {
							ascore = this.getStepByStepScore(
									((String) this.planParam
											.get("taskAdjustNeedNew")), null,
									0, 1);
						} else {
							if (rowSet.next()) {
								ascore = rowSet.getString(1);
								LazyDynaBean point_bean = null;
								for (int i = 0; i < this.p04List.size(); i++) {
									point_bean = (LazyDynaBean) this.p04List
											.get(i);
									String fromflag = (String) point_bean
											.get("fromflag");
									String p0400 = (String) point_bean
											.get("p0400");
									String p0401 = (String) point_bean
											.get("p0401");
									String p0415 = (String) point_bean
											.get("p0415");
									if ("2".equals(fromflag)) // 来源KPI指标
									{
										LazyDynaBean pointBean = (LazyDynaBean) this.perPointMap
												.get(p0401.toLowerCase());
										String point_kind = "0";
										String status = "0";
										if (pointBean != null) {
											point_kind = (String) pointBean
													.get("pointkind");
											status = (String) pointBean
													.get("status");
										}

										// 统一打分指标
										if ("1".equals(point_kind)
												&& "1".equals(status)) {
											if (this.hasAddMinusItem&&addMinusPointStr.length() > 0) {//如果该统一打分指标同时也是加扣分项，那么此处不算分，下面算加扣分的时候再算，以免算两次   zhaoxg add 2014-9-22
												if(this.addMinusPointStr.toUpperCase().indexOf("'"+p0400.toUpperCase()+"'")!=-1){
													continue;
												}
											}
											if (this.perPointScoreMap.get(p0401
													.toLowerCase()) != null
													&& ((String) this.perPointScoreMap
															.get(p0401
																	.toLowerCase()))
															.trim().length() > 0) {
												// abean.set("score",
												// PubFunc.round((String)this.perPointScoreMap.get(p0401.toLowerCase()),2));

												if ("0".equals(this.template_vo.getString(
														"status")))
													ascore = PubFunc
															.add(ascore,
																	(String) this.perPointScoreMap
																			.get(p0401
																					.toLowerCase()),
																	2);
												else // 权重
												{
													String _value = PubFunc
															.multiple(
																	(String) this.perPointScoreMap
																			.get(p0401
																					.toLowerCase()),
																	p0415, 2);
													ascore = PubFunc.add(
															ascore, _value, 2);
												}
											}
										}
									}
								}
								if (this.hasAddMinusItem
										&& addMinusPointStr.length() > 0) {
									rowSet = dao
											.search("select "
													+ Sql_switcher.isnull(
															"sum(" + _astr
																	+ ")", "0")
													+ "  from per_target_evaluation,p04 where per_target_evaluation.p0400=p04.p0400 and per_target_evaluation.p0400  in ("
													+ this.addMinusPointStr
													+ ") and per_target_evaluation.plan_id="
													+ this.plan_vo
															.getInt("plan_id")
													+ " and per_target_evaluation.object_id='"
													+ object_id
													+ "' and per_target_evaluation.mainbody_id='"
													+ mainbody_id
													+ "' and ( p04.chg_type<>3 or p04.chg_type is null ) ");
									if (rowSet.next()) {
										// score=PubFunc.round(rowSet.getString(1),1);
										String _score = rowSet.getString(1);
										ascore = PubFunc.add(ascore, _score, 2);
									}
									HashMap dynaMap = null;
									if (this.perObject_vo != null
											&& this.perObject_vo
													.getString("body_id") != null
											&& !"".equals(this.perObject_vo.getString(
													"body_id"))) {
										LoadXml loadXml = new LoadXml();
										dynaMap = loadXml.getDynaItem(
												this.plan_vo.getInt("plan_id")
														+ "", this.conn,
												this.perObject_vo
														.getString("body_id"));
									}
									StringBuffer sql = new StringBuffer(
											"select distinct item_id from P04 where plan_id="
													+ this.plan_vo
															.getInt("plan_id"));
									if (this.plan_vo.getInt("object_type") == 1
											|| this.plan_vo
													.getInt("object_type") == 3
											|| this.plan_vo
													.getInt("object_type") == 4)
										sql.append(" and b0110='"
												+ this.object_id + "'");
									else if (this.plan_vo.getInt("object_type") == 2)
										sql.append(" and a0100='"
												+ this.object_id + "'");
									sql.append(" and ( chg_type<>3 or chg_type is null ) ");
									rowSet = dao.search(sql.toString());
									while (rowSet.next()) {
										if (rowSet.getString("item_id") != null
												&& rowSet.getString("item_id")
														.trim().length() > 0) {
											if (dynaMap != null
													&& dynaMap
															.get(this.perObject_vo
																	.getString("body_id")
																	+ rowSet.getString("item_id")) != null) {
												HashMap map = (HashMap) dynaMap
														.get(this.perObject_vo
																.getString("body_id")
																+ rowSet.getString("item_id"));
												String dyna_value = moveZero((String) map
														.get("dyna_value"));
												if (map.get("isAddMinusItem") != null
														&& "1"
																.equals((String) map
                                                                        .get("isAddMinusItem"))) {
													if (dyna_value.length() > 0) {
														if ("0"
																.equals(this.template_vo
                                                                        .getString(
                                                                                "status"))) {
															ascore = PubFunc
																	.add(ascore,
																			dyna_value,
																			2);
														} else // 权重
														{
															ascore = PubFunc
																	.add(ascore,
																			String.valueOf(Double
																					.parseDouble(dyna_value)
																					* this.template_vo
																							.getDouble("topscore")),
																			2);
														}
													}
												}
											}
										}
									}
								}
							}
						}
					} else {
						ascore = score;
					}// if end
				}
			}
			int KeepDecimal = Integer.parseInt((String) this.planParam
					.get("KeepDecimal")); // 保留小数位
			score = PubFunc.round(score, KeepDecimal);
			ascore = PubFunc.round(ascore, KeepDecimal);
			//考核主体为确认时，不显示总分 chent 20151111 start
			String opt = "0";
			String sql = "select p.opt,m.score from per_mainbody m, per_plan_body p where m.plan_id="+this.plan_vo.getInt("plan_id")+" and m.plan_id=p.plan_id and m.body_id=p.body_id and object_id='"+object_id+"' and m.mainbody_id='"+mainbody_id+"'";
			RowSet ors = dao.search(sql);
			while(ors.next()){
			    opt = ors.getString("opt");//获取打分|确认标识
			}
			if("1".equals(opt)){//确认时
			    score = "0.0";
			}
			//考核主体为确认时，不显示总分 chent 20151111 end
			dao.update("update per_mainbody set score='" + score
					+ "' where plan_id=" + this.plan_vo.getInt("plan_id")
					+ "  and mainbody_id='" + mainbody_id + "' and object_id='"
					+ object_id + "'");
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (rowSet != null) {
				try {
					rowSet.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		return score;
	}

	/**
	 * 在新建，编辑，编辑跟踪指标，调整时将计算指标计算
	 * 
	 * @param p0400
	 */
	public void calcFormulaField(String p0400) {
		RowSet rowSet = null;
		try {
			AnalysePlanParameterBo bo = new AnalysePlanParameterBo(this.conn);
			Hashtable ht_table = bo.analyseParameterXml();
			String astr = "";
			if (ht_table != null && ht_table.get("TargetCollectItem") != null)
				astr = (String) ht_table.get("TargetCollectItem");
			if ((this.planParam.get("TargetTraceEnabled") != null && "True".equalsIgnoreCase((String) this.planParam
					.get("TargetTraceEnabled")))
					|| (astr != null && !"".equals(astr))) {
				String TargetCalcItem = ""; // 目标卡计算指标属性，P04中指标，以逗号分隔，顺序从前到后
				if (planParam.get("TargetCalcItem") != null
						&& ((String) planParam.get("TargetCalcItem")).trim()
								.length() > 0)
					TargetCalcItem = ((String) planParam.get("TargetCalcItem"))
							.trim();
				if ("".equals(TargetCalcItem))
					TargetCalcItem = astr;
				if (TargetCalcItem.length() > 0) {
					String[] temps = TargetCalcItem.split(",");
					ArrayList fieldList = (ArrayList) DataDictionary
							.getFieldList("P04", Constant.USED_FIELD_SET)
							.clone();
					FieldItem item = new FieldItem();
					item.setItemid("per_target_evaluation.score");
					item.setItemdesc("评分");
					item.setItemtype("N");
					item.setDecimalwidth(4);
					item.setItemlength(12);
					fieldList.add(item);

					ContentDAO dao = new ContentDAO(this.conn);
					for (int i = 0; i < temps.length; i++) {
						if (temps[i].length() > 0) {
							rowSet = dao
									.search("select expression,itemtype from t_hr_busiField  where upper(fieldsetid)='P04'  and upper(itemid)='"
											+ temps[i].toUpperCase() + "' ");
							if (rowSet.next()) {
								String expression = Sql_switcher.readMemo(
										rowSet, "expression");
								String itemtype = rowSet.getString("itemtype");
								int y_type = YksjParser.FLOAT;
								if ("A".equalsIgnoreCase(itemtype))
									y_type = YksjParser.STRVALUE;
								if ("D".equalsIgnoreCase(itemtype))
									y_type = YksjParser.DATEVALUE;
								if (expression.trim().length() > 0) {
									YksjParser yp = new YksjParser(
											this.userView, fieldList,
											YksjParser.forNormal, y_type,
											YksjParser.forPerson, "Ht", "");
									if(expression.indexOf("执行存储过程") != -1){
									    expression = expression.replaceAll("考核计划号", this.plan_id);
									    expression = expression.replaceAll("考核对象ID", this.object_id);
									}
									yp.run(expression, this.conn, "", "p04");//如果执行的是存储过程，则不走下面程序
									if (expression.indexOf("执行存储过程") != -1)
						                return;
									String formular_sql = yp.getSQL();
									if (!"task_score".equalsIgnoreCase(
                                            temps[i].trim())) {
										if (formular_sql.toLowerCase().indexOf(
												"per_target_evaluation.score") == -1) {
											dao.update("update p04 set "
													+ temps[i] + "=("
													+ formular_sql
													+ ") where p0400=" + p0400);
										}
									}
								}
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rowSet != null) {
					rowSet.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 是否显示自我评分
	 * 
	 * @return
	 */
	public boolean isShowSelfScore() {
		boolean flag = false;
		if ("03".equals(this.objectSpFlag)) {
			String SelfScoreInDirectLeader = (String) this.planParam
					.get("SelfScoreInDirectLeader"); // 整型（Boolean为兼容）：0和False
														// 为不能查看，1（True）为直接上级可查看，2为所有上级，3为所有考核主体.
			if ("3".equals(SelfScoreInDirectLeader)
					|| (("True".equalsIgnoreCase(SelfScoreInDirectLeader) || "1"
							.equals(SelfScoreInDirectLeader)) && "1".equals(this.body_id))
					|| ("2".equals(SelfScoreInDirectLeader) && ("0"
							.equals(this.body_id)
							|| "1".equals(this.body_id)
							|| "-1".equals(this.body_id) || "-2"
							.equals(this.body_id)))) {
				flag = true;
			}
		}
		// flag=true;
		return flag;
	}

	int serial_number = 1;
	int n = 0;

	/**
	 * 根据不同的操作模式( 1:目标制订 2：目标察看 3：目标评估 4:调整目标 )生成不同的目标卡
	 * 
	 * @param item_kind
	 *            1:共性项目 2：个性项目
	 * @return
	 */
	public String getExtendTd(LazyDynaBean point_bean, String item_kind) {
		StringBuffer ext_html = new StringBuffer("");
		DecimalFormat myformat1 = new DecimalFormat("########.####");//
		ArrayList fieldList = DataDictionary.getFieldList("P04",
				Constant.USED_FIELD_SET);
		if (this.model != null && "5".equals(this.model)) {
			if (isFirst) {

				for (int i = 0; i < fieldList.size(); i++) {
					FieldItem item = (FieldItem) fieldList.get(i);
					String itemid = item.getItemid();
					// String
					// str="/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0407/P0413/P0415/P0421/P0423/PLAN_ID/STATE/";

					String str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0407/P0415/P0421/P0423/PLAN_ID/STATE/";
					if ("1".equals(this.template_vo.getString("status")))
						str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0407/P0413/P0421/P0423/PLAN_ID/STATE/";

					if (str.indexOf("/" + itemid.toUpperCase() + "/") != -1)
						continue;
					if ("1".equals(item.getState())) {
						n++;
						this.extendNum++;

						extendtHead.append("<td class='TableRow_2rows' width='"
								+ this.td_width + "' ");
						extendtHead.append(" valign='middle' align='center' >"
								+ item.getItemdesc() + "</td>\r\n");
					}
				}

				for (int i = 0; i < this.mainbodyList.size(); i++) {
					this.extendNum++;
					LazyDynaBean abean = (LazyDynaBean) this.mainbodyList
							.get(i);
					String a0101 = (String) abean.get("a0101");
					String a0100 = (String) abean.get("a0100");
					String body_name = (String) abean.get("body_name");
					if (this.plan_vo.getInt("plan_type") == 0) {
						a0101 = "XXXX";
						body_name = "--";
					}
					extendtHead.append("<td class='TableRow_2rows'  width='"
							+ this.td_width
							+ "'  nowrap valign='middle' align='center' >"
							+ a0101 + "(" + body_name + ")</td>\r\n");
				}
			}
			if (point_bean == null) {

				for (int i = 0; i < fieldList.size(); i++) {
					FieldItem item = (FieldItem) fieldList.get(i);
					String itemid = item.getItemid();
					// String
					// str="/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0407/P0413/P0415/P0421/P0423/PLAN_ID/STATE/";
					String str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0407/P0415/P0421/P0423/PLAN_ID/STATE/";
					if ("1".equals(this.template_vo.getString("status")))
						str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0407/P0413/P0421/P0423/PLAN_ID/STATE/";

					if (str.indexOf("/" + itemid.toUpperCase() + "/") != -1)
						continue;
					if ("1".equals(item.getState())) {
						ext_html.append(writeTd("&nbsp;", 0, "center",
								this.td_width, "1", "RecordRow_self"));
					}
				}
				for (int i = 0; i < this.mainbodyList.size(); i++) {
					ext_html.append(writeTd("&nbsp;", 0, "center",
							this.td_width, "1", "RecordRow_self"));
				}
			} else {
				String itemtype = (String) point_bean.get("itemtype");
				String p0400 = (String) point_bean.get("p0400");
				LazyDynaBean a_bean = null;

				for (int i = 0; i < fieldList.size(); i++) {
					FieldItem item = (FieldItem) fieldList.get(i);
					String itemid = item.getItemid();
					// String
					// str="/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0407/P0413/P0415/P0421/P0423/PLAN_ID/STATE/";
					String str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0407/P0415/P0421/P0423/PLAN_ID/STATE/";
					if ("1".equals(this.template_vo.getString("status")))
						str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0407/P0413/P0421/P0423/PLAN_ID/STATE/";
					if (str.indexOf("/" + itemid.toUpperCase() + "/") != -1)
						continue;
					if ("1".equals(item.getState())) {
						if ("p0419".equalsIgnoreCase(itemid)) {
							ext_html.append("\r\n<td class='RecordRow_self'  valign='middle' align='left' ");

							ext_html.append(" height='" + td_height + "' ");
							ext_html.append(" width='" + this.td_width + "' ");
							ext_html.append(" >");
							int value = point_bean.get(itemid) != null
									&& ((String) point_bean.get(itemid))
											.length() > 0 ? Integer
									.parseInt((String) point_bean.get(itemid))
									: 0;
								if (value != 0){
										String _value=value+"";
										if(aflag){
											_value = "<font  class=\"" + this.getTt3CssClassName() + "\">"
											+ value + "</font>";
										}else{
											_value = "<font  class=\"" + this.getTt3CssClassName() + "\" color='#DCDCDC'>"
											+ value + "%</font>";
										}
										ext_html.append("<img width='"
												+ value
												+ "px' height=10 src='/images/board_bottom_1.gif' />&nbsp;"
												+ _value + "");
								}else
								ext_html.append("&nbsp;");
							ext_html.append("</td>");
						} else {
							String align = "left";
							if ("N".equalsIgnoreCase(item.getItemtype()))
								align = "right";
							ext_html.append(writeTd(
									(String) point_bean.get(itemid), 0, align,
									this.td_width, "1", "RecordRow_self"));
						}
					}
				}

				for (int i = 0; i < this.mainbodyList.size(); i++) {
					String p0401 = (String) point_bean.get("p0401");
					LazyDynaBean pointBean = (LazyDynaBean) this.perPointMap
							.get(p0401.toLowerCase());
					String fromflag = (String) point_bean.get("fromflag");
					String point_kind = "";
					String status = "";
					if ("2".equals(fromflag)) {
						point_kind = (String) pointBean.get("pointkind");
						status = (String) pointBean.get("status");
					}
					if ("2".equals(fromflag) && "1".equals(point_kind)
							&& "1".equals(status)) {
						if (this.perPointScoreMap.get(p0401.toLowerCase()) != null) {
							ext_html.append(writeTd(PubFunc.round(
									(String) this.perPointScoreMap.get(p0401
											.toLowerCase()), 2), 0, "center",
									this.td_width, "1", "RecordRow_self"));
						} else {
							ext_html.append(writeTd("&nbsp;", 0, "center",
									this.td_width, "1", "RecordRow_self"));
						}
					} else {
						LazyDynaBean abean = (LazyDynaBean) this.mainbodyList
								.get(i);
						String a0101 = (String) abean.get("a0101");
						String a0100 = (String) abean.get("a0100");
						HashMap map = (HashMap) objectAllEvaluateMap.get(a0100);
						if (map != null) {
							a_bean = (LazyDynaBean) map.get(p0400);
							ext_html.append(writeTd(a_bean == null ? ""
									: (String) a_bean.get("score"), 0,
									"center", this.td_width, "1",
									"RecordRow_self"));
						} else {
							ext_html.append(writeTd("&nbsp;", 0, "center",
									this.td_width, "1", "RecordRow_self"));
						}
					}
				}
			}

		} else {

			if (isFirst) {
				if (this.opt == 4 && this.plan_vo.getInt("object_type") == 2) // 4:调整目标
				{
					this.extendNum++;
					extendtHead.append("<td class='TableRow_2rows'  width='"
							+ this.td_width
							+ "'  valign='middle' align='center' >"
							+ ResourceFactory.getProperty("kh.field.opt")
							+ "</td>\r\n");

					this.extendNum++;
					extendtHead.append("<td class='TableRow_2rows' width='"
							+ this.td_width
							+ "'   valign='middle' align='center' >"
							+ ResourceFactory.getProperty("jx.param.mark")
							+ "</td>\r\n");
					if ("1".equals(this.template_vo.getString("status"))) {
						this.extendNum++;
						extendtHead
								.append("<td class='TableRow_2rows'  width='"
										+ this.td_width
										+ "'  valign='middle' align='center' >"
										+ ResourceFactory
												.getProperty("label.kh.template.qz")
										+ "</td>\r\n");
					}

					this.extendNum++;
					String desc = "调整后分值";
					if ("1".equals(this.template_vo.getString("status"))) {
						desc = "调整后权重";
					}
					extendtHead.append("<td class='TableRow_2rows'   width='"
							+ this.td_width
							+ "'  valign='middle' align='center' >" + desc
							+ "</td>\r\n");
					this.extendNum++;
					FieldItem item = DataDictionary.getFieldItem("p0425");
					extendtHead
							.append("<td class='TableRow_2rows' width='150'  valign='middle' align='center' >"
									+ item.getItemdesc() + "</td>\r\n");

					for (int i = 0; i < fieldList.size(); i++) {
						item = (FieldItem) fieldList.get(i);
						String itemid = item.getItemid();
						if ("p0425".equalsIgnoreCase(itemid))
							continue;
						String str = this.hiden_str;
						if (str.indexOf("/" + itemid.toUpperCase() + "/") != -1)
							continue;
						if ("1".equals(item.getState())) {
							n++;
							this.extendNum++;

							extendtHead
									.append("<td class='TableRow_2rows'  width='"
											+ this.td_width + "'  ");
							// if(itemid.equalsIgnoreCase("p0419"))
							// extendtHead.append(" width='100px' ");
							extendtHead
									.append(" valign='middle' align='center' >"
											+ item.getItemdesc() + "</td>\r\n");
						}
					}

				} else {

					if (this.plan_vo.getInt("object_type") == 2) {
						// 将操作列移到目标内容后
						if (this.plan_vo.getInt("status") == 4 && this.opt == 2
								&& "03".equals(this.objectSpFlag)
								&& "1".equals(isSubScore)) {

						} else if (this.plan_vo.getInt("status") != 7
								&& this.plan_vo.getInt("status") != 4
								&& this.plan_vo.getInt("status") != 6) {
							if (this.opt == 1
									|| ("2".equals(model) && opt != 1 && !"2"
											.equals(selfEvaluationStatus))) {
								if (!(!isAdjustPoint && "02"
										.equals(this.objectSpFlag))) // 调整前的报批,不出现编辑列
								{
									this.extendNum++;
									extendtHead
											.append("<td class='TableRow_2rows'   width='"
													+ this.td_width
													+ "'  valign='middle' align='center' >"
													+ ResourceFactory
															.getProperty("kh.field.opt")
													+ "</td>\r\n");
								}
							}
						} else if (this.plan_vo.getInt("status") == 4
								&& this.userView.getA0100().equals(
										this.object_id)) {
							this.extendNum++;
							extendtHead
									.append("<td class='TableRow_2rows'   width='"
											+ this.td_width
											+ "'  valign='middle' align='center' >"
											+ ResourceFactory
													.getProperty("kh.field.opt")
											+ "</td>\r\n");
						}

						for (int i = 0; i < fieldList.size(); i++) {
							FieldItem item = (FieldItem) fieldList.get(i);
							String itemid = item.getItemid();
							String str = this.hiden_str;
							if (str.indexOf("/" + itemid.toUpperCase() + "/") != -1)
								continue;
							if ("1".equals(item.getState())) {
								n++;
								this.extendNum++;

								extendtHead
										.append("<td class='TableRow_2rows'  width='"
												+ this.td_width + "'  ");
								// if(itemid.equalsIgnoreCase("p0419"))
								// extendtHead.append(" width='100px' ");
								extendtHead
										.append(" valign='middle' align='center' >"
												+ item.getItemdesc()
												+ "</td>\r\n");
							}
						}
					}
					this.extendNum++;
					extendtHead.append("<td class='TableRow_2rows'  width='"
							+ this.td_width
							+ "'  valign='middle' align='center' >"
							+ ResourceFactory.getProperty("jx.param.mark")
							+ "</td>\r\n");
					if ("1".equals(this.template_vo.getString("status"))) {
						this.extendNum++;
						extendtHead
								.append("<td class='TableRow_2rows'   width='"
										+ this.td_width
										+ "'  valign='middle' align='center' >"
										+ ResourceFactory
												.getProperty("label.kh.template.qz")
										+ "</td>\r\n");
					}

					if (this.opt == 2 && "2".equals(this.model)
							&& isAdjustPoint) {
						this.extendNum++;
						String desc = "调整后分值";
						if ("1".equals(this.template_vo.getString("status"))) {
							desc = "调整后权重";
						}
						extendtHead
								.append("<td class='TableRow_2rows'  width='"
										+ this.td_width
										+ "'   valign='middle' align='center' >"
										+ desc + "</td>\r\n");
					}

					if ((this.opt == 2 || this.opt == 3)
							&& "03".equals(this.objectSpFlag)) {
						if (isShowSelfScore()
								&& this.objectSelfEvaluateValueMap.size() > 0
								&& !this.object_id
										.equalsIgnoreCase(this.userView
												.getA0100())) {
							this.extendNum++;
							extendtHead
									.append("<td class='TableRow_2rows'  width='"
											+ this.td_width
											+ "'   valign='middle' align='center' >"
											+ ResourceFactory
													.getProperty("org.performance.selfScore")
											+ "</td>\r\n");
						}

						this.extendNum++;
						if (this.userView.getA0100().equals(this.object_id))
							extendtHead
									.append("<td class='TableRow_2rows'   width='"
											+ this.td_width
											+ "'  valign='middle' align='center' >"
											+ ResourceFactory
													.getProperty("org.performance.selfevaluation")
											+ "</td>\r\n");
						else
							extendtHead
									.append("<td class='TableRow_2rows'   width='"
											+ this.td_width
											+ "'  valign='middle' align='center' >"
											+ ResourceFactory
													.getProperty("jx.khplan.Appraisal")
											+ "</td>\r\n");

					}

				}

			}

			if (point_bean != null) {
				String itemtype = (String) point_bean.get("itemtype");
				if (this.opt == 4 && this.plan_vo.getInt("object_type") == 2) // 4:调整目标
				{

					if ("true"
							.equalsIgnoreCase((String) this.planParam.get("taskCanSign"))) // 需要签批
					{
						StringBuffer context = new StringBuffer("");
						if (!"3".equals((String) point_bean.get("chg_type")))
							context.append("<a href=\"###\" onclick=\"sign('"
									+ (String) point_bean.get("p0400")
									+ "')\" >签批</a>");
						else
							context.append("&nbsp;");
						ext_html.append(writeTd(context.toString(), 0,
								"center", this.td_width, "1", "RecordRow_self"));
					} else {

						if ("2".equals(item_kind)) {
							StringBuffer context = new StringBuffer("");

							if ("2".equals(optColumnType)
									&& "true"
											.equalsIgnoreCase((String) this.planParam
                                                    .get("taskAdjustNeedNew"))) {
								if (!"3"
										.equals((String) point_bean.get("chg_type"))) {
									context.append("<a href=\"###\" onclick=\"editAdjustPoint('"
											+ (String) point_bean.get("p0400")
											+ "','3')\" >调整</a>");
									if (this.userView
											.hasTheFunction("06070106")
											|| this.userView
													.hasTheFunction("06070208")
											|| this.userView
													.hasTheFunction("06070308")) {
										context.append("&nbsp;/&nbsp;");
										context.append("<a href=\"###\" onclick=\"editAdjustPoint('"
												+ (String) point_bean
														.get("p0400")
												+ "','1')\" >"
												+ ResourceFactory
														.getProperty("label.kh.del")
												+ "</a>");
									}
								} else {
									context.append("&nbsp;");
								}
							} else {
								if (point_bean.get("state") != null
										&& "-1"
												.equals((String) point_bean.get("state"))
										&& point_bean.get("chg_type") != null
										&& "2"
												.equals((String) point_bean.get("chg_type"))) {
									context.append("<a href=\"###\" onclick=\"editPoint('"
											+ (String) point_bean.get("p0400")
											+ "','" + itemtype + "')\" >编辑</a>");
									if (this.userView
											.hasTheFunction("06070106")
											|| this.userView
													.hasTheFunction("06070208")
											|| this.userView
													.hasTheFunction("06070308")) {
										context.append("&nbsp;/&nbsp;");
										context.append("<a href=\"###\" onclick=\"delPoint('"
												+ (String) point_bean
														.get("p0400")
												+ "')\" >"
												+ ResourceFactory
														.getProperty("label.kh.del")
												+ "</a>");
									}
								} else {
									context.append("<a href=\"###\" onclick=\"editAdjustPoint('"
											+ (String) point_bean.get("p0400")
											+ "','2')\" >编辑</a>");
									if (this.userView
											.hasTheFunction("06070106")
											|| this.userView
													.hasTheFunction("06070208")
											|| this.userView
													.hasTheFunction("06070308")) {
										context.append("&nbsp;/&nbsp;");
										context.append("<a href=\"###\" onclick=\"editAdjustPoint('"
												+ (String) point_bean
														.get("p0400")
												+ "','1')\" >"
												+ ResourceFactory
														.getProperty("label.kh.del")
												+ "</a>");
									}
								}
							}

							ext_html.append(writeTd(context.toString(), 0,
									"center", this.td_width, "1",
									"RecordRow_self"));
						} else {
							StringBuffer context = new StringBuffer("");
							if (this.planParam.get("PublicPointCannotEdit") != null
									&& "False"
											.equalsIgnoreCase((String) this.planParam
                                                    .get("PublicPointCannotEdit")))
								context.append("<a href=\"###\" onclick=\"editAdjustPoint('"
										+ (String) point_bean.get("p0400")
										+ "','2')\" >编辑</a>");
							ext_html.append(writeTd(context.toString(), 0,
									"center", this.td_width, "1",
									"RecordRow_self"));
						}
					}

					String str = "";
					String str2 = "";
					str = (String) point_bean.get("p0413");
					ext_html.append(writeTd(str, 0, "center", this.td_width,
							"1", "RecordRow_self"));
					if ("1".equals(this.template_vo.getString("status"))) {
						str2 = (String) point_bean.get("p0415");
						String rank = (String) point_bean.get("p0415");
						if (rank == null || rank.trim().length() == 0)
							rank = "0";
						else
							rank = rank.trim();
						String temp = myformat1
								.format(Double.parseDouble(rank) * 100);
						str2 = temp + "%";
						ext_html.append(writeTd(str2, 0, "center",
								this.td_width, "1", "RecordRow_self"));
					}
					String value_after = (String) point_bean.get("p0421");
					if ("1".equals(this.template_vo.getString("status"))) {
						value_after = (String) point_bean.get("p0423");
						if (value_after != null && value_after.length() > 0) {

							String temp = myformat1.format(Double
									.parseDouble(value_after) * 100);
							value_after = temp + "%";
						}
					} else {
						if (value_after.length() > 0)
							value_after = myformat1.format(Double
									.parseDouble(value_after));
					}
					ext_html.append(writeTd(value_after, 0, "center",
							this.td_width, "1", "RecordRow_self"));
					ext_html.append(writeTd((String) point_bean.get("p0425"),
							0, "left", 150, "1", "RecordRow_self"));

					for (int i = 0; i < fieldList.size(); i++) {
						FieldItem item = (FieldItem) fieldList.get(i);
						String itemid = item.getItemid();
						if ("p0425".equalsIgnoreCase(itemid))
							continue;
						String astr = this.hiden_str;
						if (astr.indexOf("/" + itemid.toUpperCase() + "/") != -1)
							continue;
						if ("1".equals(item.getState())) {

							if ("p0419".equalsIgnoreCase(itemid)) {
								ext_html.append("\r\n<td class='RecordRow_self'  valign='middle' align='left' ");

								ext_html.append(" height='" + td_height + "' ");
								ext_html.append(" width='" + this.td_width
										+ "' ");
								ext_html.append(" >");
								int value = point_bean.get(itemid) != null
										&& ((String) point_bean.get(itemid))
												.length() > 0 ? Integer
										.parseInt((String) point_bean
												.get(itemid)) : 0;
										if (value != 0){
											String _value=value+"";
											if(aflag){
												_value = "<font  class=\"" + this.getTt3CssClassName() + "\">"
												+ value + "</font>";
											}else{
												_value = "<font  class=\"" + this.getTt3CssClassName() + "\" color='#DCDCDC'>"
												+ value + "%</font>";
											}
											ext_html.append("<img width='"
													+ value
													+ "px' height=10 src='/images/board_bottom_1.gif' />&nbsp;"
													+ _value + "");
									}else
									ext_html.append("&nbsp;");
								ext_html.append("</td>");
							} else {
								String align = "left";
								if ("N".equalsIgnoreCase(item.getItemtype()))
									align = "right";
								ext_html.append(writeTd(
										(String) point_bean.get(itemid), 0,
										align, this.td_width, "1",
										"RecordRow_self"));
							}
						}
					}

				} else {
					String fromflag = (String) point_bean.get("fromflag"); // 1,自建（不进KPI库）
																			// 2,来源KPI指标
																			// 3,岗位职责
																			// 4,来源于素质型库

					if (this.plan_vo.getInt("status") == 4 && this.opt == 2
							&& "03".equals(this.objectSpFlag)
							&& "1".equals(isSubScore)) {

					} else if (this.plan_vo.getInt("status") != 7
							&& this.plan_vo.getInt("status") != 4
							&& this.plan_vo.getInt("status") != 6) {
						if (!(!isAdjustPoint && "02".equals(this.objectSpFlag))) // 调整前的报批,不出现编辑列
						{
							// 将操作列移到目标内容后
							if ("2".equals(model) && opt != 1
									&& !"2".equals(selfEvaluationStatus)) {
								if ("2".equals(item_kind)) {
									if ("false"
											.equalsIgnoreCase(this.AllowLeaderTrace)
											|| ("true"
													.equalsIgnoreCase(this.AllowLeaderTrace) && "true"
													.equalsIgnoreCase(this
													.isAllowAppealTrancePoint()))) {
										ext_html.append(writeTd(
												"<a href=\"###\" onclick=\"editPoint2('"
														+ (String) point_bean
																.get("p0400")
														+ "')\" >编辑</a>", 0,
												"center", 80, "1",
												"RecordRow_self"));
									} else {
										ext_html.append(writeTd("", 0,
												"center", 80, "1",
												"RecordRow_self"));
									}
								} else {
									if (this.planParam
											.get("PublicPointCannotEdit") != null
											&& "False"
													.equalsIgnoreCase((String) this.planParam
                                                            .get("PublicPointCannotEdit"))) {
										if ("false"
												.equalsIgnoreCase(this.AllowLeaderTrace)
												|| ("true"
														.equalsIgnoreCase(this.AllowLeaderTrace) && "true"
														.equalsIgnoreCase(
                                                                this
                                                                .isAllowAppealTrancePoint())))
											ext_html.append(writeTd(
													"<a href=\"###\" onclick=\"editPoint2('"
															+ (String) point_bean
																	.get("p0400")
															+ "')\" >编辑</a>",
													0, "center", 80, "1",
													"RecordRow_self"));
										else
											ext_html.append(writeTd("", 0,
													"center", 80, "1",
													"RecordRow_self"));
									} else
										ext_html.append(writeTd("", 0,
												"center", 80, "1",
												"RecordRow_self"));
								}

							}
							if (this.opt == 1) {

								if ("2".equals(item_kind)) {
									StringBuffer context = new StringBuffer("");
									context.append("<a href=\"###\" onclick=\"editPoint('"
											+ (String) point_bean.get("p0400")
											+ "','" + itemtype + "')\" >编辑</a>");
									if (this.userView
											.hasTheFunction("06070106")
											|| this.userView
													.hasTheFunction("06070208")
											|| this.userView
													.hasTheFunction("06070308")) {
										context.append("&nbsp;/&nbsp;");
										context.append("<a href=\"###\" onclick=\"delPoint('"
												+ (String) point_bean
														.get("p0400")
												+ "')\" >"
												+ ResourceFactory
														.getProperty("label.kh.del")
												+ "</a>");
									}
									ext_html.append(writeTd(context.toString(),
											0, "center", this.td_width, "1",
											"RecordRow_self"));
								} else {
									StringBuffer context = new StringBuffer("");
									if (this.planParam
											.get("PublicPointCannotEdit") != null
											&& "False"
													.equalsIgnoreCase((String) this.planParam
                                                            .get("PublicPointCannotEdit")))
										context.append("<a href=\"###\" onclick=\"editPoint('"
												+ (String) point_bean
														.get("p0400")
												+ "','"
												+ itemtype + "')\" >编辑</a>");
									ext_html.append(writeTd(context.toString(),
											0, "center", this.td_width, "1",
											"RecordRow_self"));
									// ext_html.append(writeTd("&nbsp;",0,"center",80,"1","RecordRow_self"));
								}

							}
						}
					} else if (this.plan_vo.getInt("status") == 4
							&& this.userView.getA0100().equals(this.object_id)) {
						if ("2".equals(item_kind)) {
							if ("false".equalsIgnoreCase(this.AllowLeaderTrace)
									|| ("true"
											.equalsIgnoreCase(this.AllowLeaderTrace) && "true"
											.equalsIgnoreCase(this
											.isAllowAppealTrancePoint()))) {
								if ("false"
										.equalsIgnoreCase(this.AllowLeaderTrace)) {
									// 跟踪指标不审批，启动的计划不出现编辑跟踪指标链接
									ext_html.append(writeTd("", 0, "center",
											80, "1", "RecordRow_self"));
								} else
									ext_html.append(writeTd(
											"<a href=\"###\" onclick=\"editPoint2('"
													+ (String) point_bean
															.get("p0400")
													+ "')\" >编辑</a>", 0,
											"center", 80, "1", "RecordRow_self"));

							} else
								ext_html.append(writeTd("", 0, "center", 80,
										"1", "RecordRow_self"));
						} else {
							if (this.planParam.get("PublicPointCannotEdit") != null
									&& "False"
											.equalsIgnoreCase((String) this.planParam
                                                    .get("PublicPointCannotEdit"))) {
								if ("false"
										.equalsIgnoreCase(this.AllowLeaderTrace)
										|| ("true"
												.equalsIgnoreCase(this.AllowLeaderTrace) && "true"
												.equalsIgnoreCase(this
												.isAllowAppealTrancePoint()))) {
									if ("false"
											.equalsIgnoreCase(this.AllowLeaderTrace)) {
										// 跟踪指标不审批，启动的计划不出现编辑跟踪指标链接
										ext_html.append(writeTd("", 0,
												"center", 80, "1",
												"RecordRow_self"));
									} else
										ext_html.append(writeTd(
												"<a href=\"###\" onclick=\"editPoint2('"
														+ (String) point_bean
																.get("p0400")
														+ "')\" >编辑</a>", 0,
												"center", 80, "1",
												"RecordRow_self"));
								} else
									ext_html.append(writeTd("", 0, "center",
											80, "1", "RecordRow_self"));
							} else
								ext_html.append(writeTd("", 0, "center", 80,
										"1", "RecordRow_self"));
						}

					}

					if ("1".equals(item_kind)) {
						/*
						 * for(int i=0;i<n;i++) {
						 * ext_html.append(writeTd("&nbsp;"
						 * ,0,"center",80,"1","RecordRow_self")); }
						 */
						if (this.plan_vo.getInt("object_type") == 2) {
							for (int i = 0; i < fieldList.size(); i++) {
								FieldItem item = (FieldItem) fieldList.get(i);
								String itemid = item.getItemid();
								String str = this.hiden_str;
								if (str.indexOf("/" + itemid.toUpperCase()
										+ "/") != -1)
									continue;
								if ("1".equals(item.getState())) {
									if ("p0419".equalsIgnoreCase(itemid)) {
										ext_html.append("\r\n<td class='RecordRow_self'  valign='middle' align='left' ");

										ext_html.append(" height='" + td_height
												+ "' ");
										ext_html.append(" width='"
												+ this.td_width + "' ");
										ext_html.append(" >");
										int value = point_bean.get(itemid) != null
												&& ((String) point_bean
														.get(itemid)).length() > 0 ? Integer
												.parseInt((String) point_bean
														.get(itemid)) : 0;
											if (value != 0){
													String _value=value+"";
													if(aflag){
														_value = "<font  class=\"" + this.getTt3CssClassName() + "\">"
														+ value + "</font>";
													}else{
														_value = "<font  class=\"" + this.getTt3CssClassName() + "\" color='#DCDCDC'>"
														+ value + "%</font>";
													}
													ext_html.append("<img width='"
															+ value
															+ "px' height=10 src='/images/board_bottom_1.gif' />&nbsp;"
															+ _value + "");
											}else
											ext_html.append("&nbsp;");
										ext_html.append("</td>");
									} else {
										String align = "left";
										if ("N"
												.equalsIgnoreCase(item.getItemtype()))
											align = "right";
										ext_html.append(writeTd(
												(String) point_bean.get(itemid),
												0, align, this.td_width, "1",
												"RecordRow_self"));
									}
								}
							}
						}
						ext_html.append(writeTd(
								(String) point_bean.get("p0413"), 0, "center",
								this.td_width, "1", "RecordRow_self"));
						if ("1".equals(this.template_vo.getString("status"))) {
							String rank = (String) point_bean.get("p0415");
							if (rank == null || rank.trim().length() == 0)
								rank = "0";
							else
								rank = rank.trim();
							String temp = myformat1.format(Double
									.parseDouble(rank) * 100);
							ext_html.append(writeTd(temp + "%", 0, "center",
									this.td_width, "1", "RecordRow_self"));
						}

						if (this.opt == 2 && "2".equals(this.model)
								&& isAdjustPoint) {
							String value_after = (String) point_bean
									.get("p0421");
							if ("1"
									.equals(this.template_vo.getString("status"))) {
								value_after = (String) point_bean.get("p0423");
								if (value_after != null
										&& value_after.length() > 0) {

									String temp = myformat1.format(Double
											.parseDouble(value_after) * 100);
									value_after = temp + "%";
								}
							} else {
								if (value_after.length() > 0)
									value_after = myformat1.format(Double
											.parseDouble(value_after));
							}
							ext_html.append(writeTd(value_after, 0, "center",
									this.td_width, "1", "RecordRow_self"));
						}

					} else {
						if (this.plan_vo.getInt("object_type") == 2) {
							for (int i = 0; i < fieldList.size(); i++) {
								FieldItem item = (FieldItem) fieldList.get(i);
								String itemid = item.getItemid();
								String str = this.hiden_str;
								if (str.indexOf("/" + itemid.toUpperCase()
										+ "/") != -1)
									continue;
								if ("1".equals(item.getState())) {
									if ("p0419".equalsIgnoreCase(itemid)) {
										ext_html.append("\r\n<td class='RecordRow_self'  valign='middle' align='left' ");

										ext_html.append(" height='" + td_height
												+ "' ");
										ext_html.append(" width='"
												+ this.td_width + "' ");
										ext_html.append(" >");
										int value = point_bean.get(itemid) != null
												&& ((String) point_bean
														.get(itemid)).length() > 0 ? Integer
												.parseInt((String) point_bean
														.get(itemid)) : 0;
											if (value != 0){
													String _value=value+"";
													if(aflag){
														_value = "<font  class=\"" + this.getTt3CssClassName() + "\">"
														+ value + "</font>";
													}else{
														_value = "<font  class=\"" + this.getTt3CssClassName() + "\" color='#DCDCDC'>"
														+ value + "%</font>";
													}
													ext_html.append("<img width='"
															+ value
															+ "px' height=10 src='/images/board_bottom_1.gif' />&nbsp;"
															+ _value + "");
												}else
											ext_html.append("&nbsp;");
										ext_html.append("</td>");
									} else {
										String align = "left";
										if ("N"
												.equalsIgnoreCase(item.getItemtype()))
											align = "right";
										ext_html.append(writeTd(
												(String) point_bean.get(itemid),
												0, align, this.td_width, "1",
												"RecordRow_self"));
									}
								}
							}
						}
						String str = "";
						String str2 = "";
						if ("4".equals(this.model)
								|| ("2".equals(this.model) && this.opt == 3)
								|| "1".equals(this.model)) // 如果为目标评估
						{
							str = (String) point_bean.get("p0413");
							if ("1"
									.equals(this.template_vo.getString("status"))) {
								str2 = (String) point_bean.get("p0415");
								String rank = (String) point_bean.get("p0415");
								if (rank == null || rank.trim().length() == 0)
									rank = "0";
								else
									rank = rank.trim();
								String temp = myformat1.format(Double
										.parseDouble(rank) * 100);
								str2 = temp + "%";
							}
						} else {
							str = "<input type='text' size=5 onblur='validateValue(this)' onkeydown='keyDownFunction(this)'   value='"
									+ (String) point_bean.get("p0413")
									+ "' name='"
									+ (String) point_bean.get("p0400")
									+ "~p0413'   ";
							str2 = "";
							if ("1"
									.equals(this.template_vo.getString("status")) || this.opt == 2) {
								str = (String) point_bean.get("p0413");
								// str+=" readOnly ";
								String rank = (String) point_bean.get("p0415");
								if (rank == null || rank.trim().length() == 0)
									rank = "0";
								else
									rank = rank.trim();
								String temp = myformat1.format(Double
										.parseDouble(rank) * 100);

								str2 = "<input type='text' size=5   onkeydown='keyDownFunction(this)'   onblur='validateValue(this)'  value='"
										+ temp
										+ "' name='"
										+ (String) point_bean.get("p0400")
										+ "~p0415' ";
								if (this.opt == 2 || this.opt == 3) {
									// str2+=" readOnly ";
									// str2=(String)point_bean.get("p0415");

									str2 = temp + "%";

								} else
									str2 += " />% ";
							} else
								str += " />";

						}

						ext_html.append(writeTd(str, 0, "center",
								this.td_width, "1", "RecordRow_self"));
						if ("1".equals(this.template_vo.getString("status")))
							ext_html.append(writeTd(str2, 0, "center",
									this.td_width, "1", "RecordRow_self"));

						if (this.opt == 2 && "2".equals(this.model)
								&& isAdjustPoint) {
							String value_after = (String) point_bean
									.get("p0421");
							if ("1"
									.equals(this.template_vo.getString("status"))) {
								value_after = (String) point_bean.get("p0423");
								if (value_after != null
										&& value_after.length() > 0) {

									String temp = myformat1.format(Double
											.parseDouble(value_after) * 100);
									value_after = temp + "%";
								}
							} else {
								if (value_after.length() > 0)
									value_after = myformat1.format(Double
											.parseDouble(value_after));
							}
							ext_html.append(writeTd(value_after, 0, "center",
									this.td_width, "1", "RecordRow_self"));
						}

					}

					if (this.opt == 4) {
						if ("2".equals(item_kind)) {

						}

					} else {
						// 展现评估输入框
						if ((this.opt == 2 || this.opt == 3)
								&& "03".equals(this.objectSpFlag)) {
							if (isShowSelfScore()
									&& this.objectSelfEvaluateValueMap.size() > 0
									&& !this.object_id
											.equalsIgnoreCase(this.userView
													.getA0100()))
								ext_html.append(writeTd(
										getEvaluationBox(point_bean, 0), 0,
										"center", this.td_width, "1",
										"RecordRow_self"));

							if (this.userView.getA0100().equals(this.object_id)) // 本人评估
								ext_html.append(writeTd(
										getEvaluationBox(point_bean, 1), 0,
										"center", this.td_width, "1",
										"RecordRow_self"));
							else
								ext_html.append(writeTd(
										getEvaluationBox(point_bean, 1), 0,
										"center", this.td_width, "1",
										"RecordRow_self"));

						}
					}
				}
			} else {

				for (int i = 0; i < n; i++) {
					ext_html.append(writeTd("&nbsp;", 0, "center",
							this.td_width, "1", "RecordRow_self"));
				}

				if (!(!isAdjustPoint && "02".equals(this.objectSpFlag))) // 调整前的报批,不出现编辑列
				{
					ext_html.append(writeTd("&nbsp;", 0, "center",
							this.td_width, "1", "RecordRow_self"));
				}

				if (this.opt == 4 && "2".equals(this.model)) {
					ext_html.append(writeTd("&nbsp;", 0, "center",
							this.td_width, "1", "RecordRow_self"));
					ext_html.append(writeTd("&nbsp;", 0, "center",
							this.td_width, "1", "RecordRow_self"));
					ext_html.append(writeTd("&nbsp;", 0, "center",
							this.td_width, "1", "RecordRow_self"));
				}

				if ("1".equals(this.template_vo.getString("status")))
					ext_html.append(writeTd("&nbsp;", 0, "center",
							this.td_width, "1", "RecordRow_self"));

				if (this.opt == 1)
					ext_html.append(writeTd("&nbsp;", 0, "center",
							this.td_width, "1", "RecordRow_self"));
				else if ((this.opt == 2 || this.opt == 3)
						&& "03".equals(this.objectSpFlag))
					ext_html.append(writeTd("&nbsp;", 0, "center",
							this.td_width, "1", "RecordRow_self"));
			}

		}

		this.isFirst = false;
		return ext_html.toString();
	}

	/**
	 * 生成评估输入框评代码
	 * 
	 * @param point_bean
	 * @param flag
	 *            0:自我评分结果 1:主体评分结果
	 * @return
	 */
	public String getEvaluationBox(LazyDynaBean point_bean, int flag) {
		StringBuffer sql = new StringBuffer("");
		String fromflag = (String) point_bean.get("fromflag");
		String p0400 = (String) point_bean.get("p0400");
		String p0401 = (String) point_bean.get("p0401");
		String chg_type = (String) point_bean.get("chg_type");
		String point_item_id = (String) point_bean.get("item_id");
		LazyDynaBean valueBean = null; // 标度值
		if (flag == 1 && this.objectEvaluateValueMap.get(p0400) != null)
			valueBean = (LazyDynaBean) this.objectEvaluateValueMap.get(p0400);
		if (flag == 0 && this.objectSelfEvaluateValueMap.get(p0400) != null)
			valueBean = (LazyDynaBean) this.objectSelfEvaluateValueMap
					.get(p0400);

		String scoreflag = (String) this.planParam.get("scoreflag"); // =2混合，=1标度(默认值=混合)=4加扣分
		String degreeShowType = (String) this.planParam.get("degreeShowType");//3:设置了“采集标准标度，显示指标标度内容"  zhaoxg add 2016-10-25
		degreeShowType = degreeShowType==null||degreeShowType.length()==0?"1":degreeShowType;
		
		if ("1".equals(fromflag) || "3".equals(fromflag)
				|| "5".equals(fromflag)) // 自建（不进KPI库）
		{
			if (flag == 0) {
				/** flag=0是自评分，没有负责一说。不受复制限制 */
				String tt = "";
				if (valueBean != null) {
					LazyDynaBean pointBean = (LazyDynaBean) this.perPointMap
							.get(p0401.toLowerCase());
					String point_kind = "";
					String status = "";
					if ("2".equals(fromflag)) {
						point_kind = (String) pointBean.get("pointkind");
						status = (String) pointBean.get("status");
					}
					tt = (String) valueBean.get("score");
					if ("1".equals(this.scoreflag) && !"1".equals(point_kind)) // =2混合，=1标度,=4加扣分)point_kind=1是定量指标
					{
						String degree_id = (String) valueBean.get("degree_id");
						if (degree_id != null && degree_id.trim().length() > 0) {
							tt = (String) valueBean.get("gradedesc");
							this.priporHashMap.put(p0401 + "_1", degree_id);
						}
					}// 定量取amount,status=1为统一打分指标
					if ("1".equalsIgnoreCase(point_kind) && !"1".equals(status)) {
						tt = (String) valueBean.get("amount");
					}
					this.priporHashMap.put(p0401, tt);
					sql.append(tt);
				}
				/*
				 * if(valueBean!=null&&((String)valueBean.get("score")).length()>
				 * 0) { sql.append((String)valueBean.get("score"));
				 * this.priporHashMap.put(p0401,
				 * (String)valueBean.get("score"));
				 * if(valueBean.get("degree_id")
				 * !=null&&((String)valueBean.get("degree_id"
				 * )).trim().length()>0) this.priporHashMap.put(p0401+"_1",
				 * (String)valueBean.get("degree_id")); }
				 */

			} else {
				if ("1".equals(scoreflag)&&this.addMinusPointStr.indexOf(("'"+p0400+"'"))==-1)// &&!fromflag.equals("3")fromflag=3为引入职责指标，按一般任务走
				{
					if("1".equals(scoreflag)&& "3".equals(degreeShowType)){//设置了“采集标准标度，显示指标标度内容"  zhaoxg add 2016-10-25

						String a_value = valueBean != null ? (String) valueBean.get("degree_id") : "";
						sql.append(a_value);
					}else{
						// per_grade_desc
						ArrayList pointGradeList = (ArrayList) this.pointDescMap.get("per_grade_desc");
						if (pointGradeList == null)
							pointGradeList = new ArrayList();
						
						sql.append("\r\n<select name='s_" + p0400 + "' ");
						if (this.opt != 2|| (itemPrivMap.get(point_item_id) != null && "0".equals((String) itemPrivMap.get(point_item_id)))) // 如果为目标查看
							sql.append(" disabled ");
						else {
							String state = (String) point_bean.get("state");
							// String chg_type=(String)point_bean.get("chg_type");
							if (("-1".equals(state) && "3".equals(chg_type))|| (this.mainbodyBean != null && "2".equals((String) this.mainbodyBean
											.get("status")))|| (itemPrivMap.get(point_item_id) != null && "0".equals((String) itemPrivMap
													.get(point_item_id)))) {
								sql.append(" disabled ");
							}
						}
						sql.append(" >");
						String a_value = "";
						if (valueBean != null)
							a_value = (String) valueBean.get("degree_id");
						if (a_value == null || a_value.trim().length() == 0) // 默认值
						{
							if (itemPrivMap.get(point_item_id) == null|| "1".equals((String) itemPrivMap.get(point_item_id))) {
								if (this.mainbodyBean != null&& "0".equals((String) this.mainbodyBean.get("status"))) {
									String BlankScoreOption = (String) planParam
									.get("BlankScoreOption");
									if (!"0".equals(BlankScoreOption)&& this.defaultEvaluateScoreMap != null&& this.defaultEvaluateScoreMap.size() > 0) {
										if (this.defaultEvaluateScoreMap.get(p0400) != null)a_value = (String) this.defaultEvaluateScoreMap.get(p0400);
										
									}
								}
							}
						}
						
						/*
						 * if(a_value==null||a_value.equals("")) {
						 */
						if (itemPrivMap.get(point_item_id) == null
								|| "1"
								.equals((String) itemPrivMap.get(point_item_id))) {
							if ("true".equalsIgnoreCase(this.getIsCopyScore())) {
								if (this.priporHashMap.get(p0401 + "_1") != null
										&& !"3".equals(chg_type)) {
									a_value = (String) this.priporHashMap.get(p0401
											+ "_1");
								}
								
							}
						}
						/* } */
						sql.append("\r\n<option value=''></option>");
						for (int i = 0; i < pointGradeList.size(); i++) {
							LazyDynaBean a_bean = (LazyDynaBean) pointGradeList.get(i);
							String grade_template_id = (String) a_bean.get("grade_template_id");
							String gradedesc = (String) a_bean.get("gradedesc");
							sql.append("\r\n<option value='" + grade_template_id
									+ "' ");
							if (a_value.equals(grade_template_id))
								sql.append("selected");
							sql.append(" >" + gradedesc + "</option>");
						}
						sql.append("</select>");
						
						if (SystemConfig.getPropertyValue("clientName") != null
								&& "zglt"
								.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {
							
							if (((String) point_bean.get("p0407")).trim().length() == 0) {
								sql.setLength(0);
							}
						}
						
						if ("1".equals(this.template_vo.getString("status"))) // 权重
						{
							String p0415 = (String) point_bean.get("p0415");
							if (p0415 == null || p0415.trim().length() == 0
									|| Double.parseDouble(p0415) == 0) {
								sql.setLength(0);
							}
						}else{
                            //49883 分值模板 标准分值为0则不需要打分。haosl 2019-07-11
                            String p0413 = (String) point_bean.get("p0413");
                            if (StringUtils.isBlank(p0413)
                                    || "0".equals(p0413)) {
                                sql.setLength(0);
                            }
                        }
					}

				} else {

					String jsFunction = "validateValue(this,\"null\")";
					if (this.hasAddMinusItem
							&& this.addMinusPointStr.length() > 0
							&& this.addMinusPointStr.indexOf("'" + p0400 + "'") != -1)
						jsFunction = "validateNum(this,\"null\")";
					sql.append("\r\n<input type='text' name='s_"
							+ p0400
							+ "'  onkeydown='keyDownFunction(this)'    size=5  onblur='"
							+ jsFunction + "' ");

					if (this.opt != 2
							|| (itemPrivMap.get(point_item_id) != null && "0".equals((String) itemPrivMap
									.get(point_item_id)))) // 如果为目标查看
					{
						sql.append(" disabled ");
						sql.append("class='TEXT_NB'");

					} else {

						String state = (String) point_bean.get("state");
						// String chg_type=(String)point_bean.get("chg_type");
						if (("-1".equals(state) && "3".equals(chg_type))
								|| (this.mainbodyBean != null && "2".equals((String) this.mainbodyBean
										.get("status")))
								|| (itemPrivMap.get(point_item_id) != null && "0".equals((String) itemPrivMap
										.get(point_item_id)))) {
							sql.append(" disabled ");
							sql.append("class='TEXT_NB'");

						}

					}

					if (valueBean != null
							&& ((String) valueBean.get("score")).length() > 0
							&& "false".equalsIgnoreCase(this.getIsCopyScore()))
						sql.append(" value='" + (String) valueBean.get("score")
								+ "' ");
					else {
						/** 复制分数和默认分数，应该是不相关的两个 */
						String value = valueBean != null ? (String) valueBean
								.get("score") : "";
						// boolean _flag=true;
						if (this.mainbodyBean != null
								&& "0"
										.equals((String) this.mainbodyBean.get("status"))) {
							if (itemPrivMap.get(point_item_id) == null
									|| "1"
											.equals((String) itemPrivMap.get(point_item_id))) {
								String BlankScoreOption = (String) planParam
										.get("BlankScoreOption");
								if (!"0".equals(BlankScoreOption)
										&& this.defaultEvaluateScoreMap != null
										&& this.defaultEvaluateScoreMap.size() > 0) {
									if (this.defaultEvaluateScoreMap.get(p0400) != null) {
										// sql.append(" value='"+(String)this.defaultEvaluateScoreMap.get(p0400)+"' ");
										// _flag=false;
										value = (String) this.defaultEvaluateScoreMap
												.get(p0400);
									}

								}
							}
						}

						// if(_flag)
						// {
						if (itemPrivMap.get(point_item_id) == null
								|| "1"
										.equals((String) itemPrivMap.get(point_item_id))) {
							if ("true".equalsIgnoreCase(this.getIsCopyScore())) {
								if (this.priporHashMap.get(p0401) != null
										&& !"3".equals(chg_type)) {
									// sql.append(" value='"+(String)this.priporHashMap.get(p0401)+"' ");
									value = (String) this.priporHashMap
											.get(p0401);
								}

							}
						}
						// }
						sql.append(" value='" + value + "'");
					}
					sql.append(" />");

					if (SystemConfig.getPropertyValue("clientName") != null
							&& "zglt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {
						if (((String) point_bean.get("p0407")).trim().length() == 0) {
							sql.setLength(0);
						}
					}

					if ("1".equals(this.template_vo.getString("status"))) // 权重
					{
						String p0415 = (String) point_bean.get("p0415");
						if (p0415 == null || p0415.trim().length() == 0
								|| Double.parseDouble(p0415) == 0) {

							if (this.hasAddMinusItem
									&& this.addMinusPointStr.length() > 0
									&& this.addMinusPointStr.indexOf("'"
											+ p0400 + "'") != -1) {

							} else {
								// 个性指标，需要取得计划的TargetDefineItem参数,P0415 -> 权重 add by 刘蒙
								String targetDefineItem = (String) planParam.get("TargetDefineItem");
								boolean isP0415 = targetDefineItem.indexOf("P0415") == -1 ? false : true;
								if (isP0415) {
									sql.setLength(0);
								}
							}
						}
					}else{
                        //49883 分值模板 标准分值为0则不需要打分。haosl 2019-07-11
                        String p0413 = (String) point_bean.get("p0413");
                        if (StringUtils.isBlank(p0413)
                                || "0".equals(p0413)) {
                            sql.setLength(0);
                        }
                    }

				}
			}
		}

		if ("2".equals(fromflag)) // 来源KPI指标
		{
			LazyDynaBean pointBean = (LazyDynaBean) this.perPointMap.get(p0401
					.toLowerCase());
			String point_kind = "0";
			String status = "0";
			if (pointBean != null) {
				point_kind = (String) pointBean.get("pointkind");
				status = (String) pointBean.get("status");
			}

			ArrayList pointGradeList = (ArrayList) this.pointDescMap.get(p0401.toUpperCase());
			if (pointGradeList == null)
				pointGradeList = new ArrayList();
			String pointkind = "0";
			if (pointGradeList != null && pointGradeList.size() > 0) {
				LazyDynaBean abean = (LazyDynaBean) pointGradeList.get(0);
				pointkind = (String) abean.get("pointkind"); // 0:定性 1:定量
			}

			if ("2".equals(scoreflag) || "1".equals(pointkind)
					|| "4".equals(scoreflag)
					|| this.addMinusPointStr.indexOf(("'" + p0400 + "'")) != -1) {
				if (flag == 0) {
					if ("1".equals(point_kind) && "1".equals(status)) {

					} else if (valueBean != null) {
						if ("3".equals(fromflag)) {
							sql.append((String) valueBean.get("score"));
							this.priporHashMap.put(p0401,
									(String) valueBean.get("score"));
							if (valueBean.get("degree_id") != null
									&& ((String) valueBean.get("degree_id"))
											.trim().length() > 0)
								this.priporHashMap.put(p0401 + "_1",
										(String) valueBean.get("degree_id"));
						} else if ("0".equals(pointkind)
								|| (this.hasAddMinusItem
										&& this.addMinusPointStr.length() > 0 && this.addMinusPointStr
										.indexOf("'" + p0400 + "'") != -1)) {
							sql.append((String) valueBean.get("score"));
							this.priporHashMap.put(p0401,
									(String) valueBean.get("score"));
							if (valueBean.get("degree_id") != null
									&& ((String) valueBean.get("degree_id"))
											.trim().length() > 0)
								this.priporHashMap.put(p0401 + "_1",
										(String) valueBean.get("degree_id"));
						} else if ("1".equals(pointkind)) {
							sql.append((String) valueBean.get("amount"));
							this.priporHashMap.put(p0401,
									(String) valueBean.get("amount"));
							if (valueBean.get("degree_id") != null
									&& ((String) valueBean.get("degree_id"))
											.trim().length() > 0)
								this.priporHashMap.put(p0401 + "_1",
										(String) valueBean.get("degree_id"));
						}

					}
				} else {
					String jsFunction = "validateValue(this,\"null\")";
					if (this.hasAddMinusItem
							&& this.addMinusPointStr.length() > 0
							&& this.addMinusPointStr.indexOf("'" + p0400 + "'") != -1)
						jsFunction = "validateNum(this,\"null\")";
					sql.append("\r\n<input type='text' name='p_"
							+ p0400
							+ "'  size=5  onkeydown='keyDownFunction(this)'    onblur='"
							+ jsFunction + "' ");
					boolean _flag = false;
					if (this.opt != 2
							|| ("1".equals(point_kind) && "1".equals(status))
							|| (itemPrivMap.get(point_item_id) != null && "0".equals((String) itemPrivMap
									.get(point_item_id)))) // 如果为目标查看
					{
						sql.append(" disabled ");
						sql.append(" class='TEXT_NB' ");
						_flag = true;
					} else {
						String state = (String) point_bean.get("state");
						// String chg_type=(String)point_bean.get("chg_type");
						if (("-1".equals(state) && "3".equals(chg_type))
								|| (this.mainbodyBean != null && "2".equals((String) this.mainbodyBean
										.get("status")))
								|| (itemPrivMap.get(point_item_id) != null && "0".equals((String) itemPrivMap
										.get(point_item_id)))) {
							sql.append(" disabled ");
							sql.append("class='TEXT_NB'");
							_flag = true;
						}
					}

					if ("1".equals(point_kind)
							&& "1".equals(status)
							&& !(this.hasAddMinusItem
									&& this.addMinusPointStr.length() > 0 && this.addMinusPointStr
									.indexOf("'" + p0400 + "'") != -1)) {
						if (this.perPointScoreMap.get(p0401.toLowerCase()) != null) {
							if (((String) this.perPointScoreMap.get(p0401
									.toLowerCase())).trim().length() == 0
									|| Double
											.parseDouble(((String) this.perPointScoreMap
													.get(p0401.toLowerCase()))) == 0) {
								if (itemPrivMap.get(point_item_id) == null
										|| "1"
												.equals((String) itemPrivMap
                                                        .get(point_item_id))) {
									if (this.priporHashMap.get(p0401) != null
											&& "true"
													.equalsIgnoreCase(this.getIsCopyScore())
											&& !"3".equals(chg_type))
										sql.append(" value='"
												+ (String) this.priporHashMap
														.get(p0401) + "' ");
									else
										sql.append(" value='0' ");
								}

							} else {
								if (this.priporHashMap.get(p0401) != null
										&& "true"
												.equalsIgnoreCase(this.getIsCopyScore())
										&& !"3".equals(chg_type))
									sql.append(" value='"
											+ (String) this.priporHashMap
													.get(p0401) + "' ");
								else
									sql.append(" value='"
											+ PubFunc
													.round((String) this.perPointScoreMap
															.get(p0401
																	.toLowerCase()),
															2) + "' ");
							}
						}
					} else if (valueBean != null) {
						if ("0".equals(pointkind)
								|| (this.hasAddMinusItem
										&& this.addMinusPointStr.length() > 0 && this.addMinusPointStr
										.indexOf("'" + p0400 + "'") != -1)) {
							if (this.priporHashMap.get(p0401) != null
									&& "true".equalsIgnoreCase(
                                    this.getIsCopyScore()) && !"3".equals(chg_type))
								sql.append(" value='"
										+ (String) this.priporHashMap
												.get(p0401) + "' ");
							else
								sql.append(" value='"
										+ (String) valueBean.get("score")
										+ "' ");
						} else if ("1".equals(pointkind)) {
							sql.append(" value='"
									+ (String) valueBean.get("amount") + "' ");
						}

					} else {
						String a_value = valueBean != null ? (String) valueBean
								.get("score") : "";
						// boolean _flag2=true;
						if (this.mainbodyBean != null
								&& "0"
										.equals((String) this.mainbodyBean.get("status"))) {
							if (itemPrivMap.get(point_item_id) == null
									|| "1"
											.equals((String) itemPrivMap.get(point_item_id))) {
								String BlankScoreOption = (String) planParam
										.get("BlankScoreOption");
								if (!"0".equals(BlankScoreOption)
										&& this.defaultEvaluateScoreMap != null
										&& this.defaultEvaluateScoreMap.size() > 0) {
									if (this.defaultEvaluateScoreMap.get(p0400) != null) {
										a_value = (String) this.defaultEvaluateScoreMap
												.get(p0400);
										// _flag2=false;
									}

								}
							}
						}

						// if(_flag2)
						// {
						if (itemPrivMap.get(point_item_id) == null
								|| "1"
										.equals((String) itemPrivMap.get(point_item_id))) {
							if (this.priporHashMap.get(p0401) != null
									&& "true".equalsIgnoreCase(
                                    this.getIsCopyScore()) && !"3".equals(chg_type)) {
								a_value = (String) this.priporHashMap
										.get(p0401);
							}
						}
						// }
						sql.append(" value='" + a_value + "' ");
					}
					sql.append(" />");

					if (SystemConfig.getPropertyValue("clientName") != null
							&& "zglt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {

						if (((String) point_bean.get("p0407")).trim().length() == 0) {
							sql.setLength(0);
						}

					}

					if ("1".equals(this.template_vo.getString("status"))) // 权重
					{
						String p0415 = (String) point_bean.get("p0415");
						if (p0415 == null || p0415.trim().length() == 0
								|| Double.parseDouble(p0415) == 0) {
							// 需要取得计划的TargetDefineItem参数,P0415 -> 权重 add by 刘蒙
							String targetDefineItem = (String) planParam.get("TargetDefineItem");
							boolean isP0415 = targetDefineItem.indexOf("P0415") == -1 ? false : true;
							if (isP0415) {
								sql.setLength(0);
							}
						}
					}else{
                        //49883 分值模板 标准分值为0则不需要打分。haosl 2019-07-11
                        String p0413 = (String) point_bean.get("p0413");
                        if (StringUtils.isBlank(p0413)
                                || "0".equals(p0413)) {
                            sql.setLength(0);
                        }
                    }
				}
			} else if ("1".equals(scoreflag) && "0".equals(pointkind)) {
				if("1".equals(scoreflag)&& "3".equals(degreeShowType)){//设置了“采集标准标度，显示指标标度内容"  zhaoxg add 2016-10-25
					String a_value = valueBean != null ? (String) valueBean.get("degree_id") : "";
					sql.append(a_value);
				}else if (flag == 0) {
					String a_value = valueBean != null ? (String) valueBean
							.get("degree_id") : "";
					if (valueBean != null) {
						a_value = (String) valueBean.get("degree_id");
					} else {

						// boolean _flag2=true;
						if (this.mainbodyBean != null
								&& "0"
										.equals((String) this.mainbodyBean.get("status"))) {
							if (itemPrivMap.get(point_item_id) == null
									|| "1"
											.equals((String) itemPrivMap.get(point_item_id))) {
								String BlankScoreOption = (String) planParam
										.get("BlankScoreOption");
								if (!"0".equals(BlankScoreOption)
										&& this.defaultEvaluateScoreMap != null
										&& this.defaultEvaluateScoreMap.size() > 0) {
									if (this.defaultEvaluateScoreMap.get(p0400) != null) {
										a_value = (String) this.defaultEvaluateScoreMap
												.get(p0400);
										// _flag2=false;
									}

								}
							}
						}
					}
					/*
					 * this.priporHashMap.put(p0401,
					 * (String)valueBean.get("score"));
					 * if(valueBean.get("degree_id"
					 * )!=null&&((String)valueBean.get
					 * ("degree_id")).trim().length()>0)
					 */
					this.priporHashMap.put(p0401 + "_1", a_value);
					for (int i = 0; i < pointGradeList.size(); i++) {
						LazyDynaBean a_bean = (LazyDynaBean) pointGradeList
								.get(i);
						String gradecode = (String) a_bean.get("gradecode");
						String gradedesc = (String) a_bean.get("desc2");
						if ("2"
								.equals((String) this.planParam.get("DegreeShowType")))
							gradedesc = (String) a_bean.get("gradedesc");

						if (a_value.equals(gradecode))
							sql.append(gradedesc);
					}
				} else {

					sql.append("\r\n<select name='p_" + p0400 + "' ");
					if (this.opt != 2
							|| (itemPrivMap.get(point_item_id) != null && "0".equals((String) itemPrivMap
									.get(point_item_id)))) // 如果为目标查看
						sql.append(" disabled ");
					else {
						String state = (String) point_bean.get("state");
						// String chg_type=(String)point_bean.get("chg_type");
						if (("-1".equals(state) && "3".equals(chg_type))
								|| (this.mainbodyBean != null && "2".equals((String) this.mainbodyBean
										.get("status")))
								|| (itemPrivMap.get(point_item_id) != null && "0".equals((String) itemPrivMap
										.get(point_item_id)))) {
							sql.append(" disabled ");
						}
					}
					sql.append(" >");
					String a_value = valueBean != null ? (String) valueBean
							.get("degree_id") : "";
					if (valueBean != null
							&& "false".equalsIgnoreCase(this.getIsCopyScore()))
						a_value = (String) valueBean.get("degree_id");
					else {
						// boolean _flag2=true;
						if (this.mainbodyBean != null
								&& "0"
										.equals((String) this.mainbodyBean.get("status"))) {
							if (itemPrivMap.get(point_item_id) == null
									|| "1"
											.equals((String) itemPrivMap.get(point_item_id))) {
								String BlankScoreOption = (String) planParam
										.get("BlankScoreOption");
								if (!"0".equals(BlankScoreOption)
										&& this.defaultEvaluateScoreMap != null
										&& this.defaultEvaluateScoreMap.size() > 0) {
									if (this.defaultEvaluateScoreMap.get(p0400) != null) {
										a_value = (String) this.defaultEvaluateScoreMap
												.get(p0400);
										// _flag2=false;
									}

								}
							}
						}
						// if(_flag2)
						// {
						if (itemPrivMap.get(point_item_id) == null
								|| "1"
										.equals((String) itemPrivMap.get(point_item_id))) {
							if (this.priporHashMap.get(p0401 + "_1") != null
									&& "true".equalsIgnoreCase(
                                    this.getIsCopyScore()) && !"3".equals(chg_type))
								a_value = (String) this.priporHashMap.get(p0401
										+ "_1");
						}
						// }
					}
					sql.append("\r\n<option value=''></option>");
					for (int i = 0; i < pointGradeList.size(); i++) {
						LazyDynaBean a_bean = (LazyDynaBean) pointGradeList
								.get(i);
						String gradecode = (String) a_bean.get("gradecode");
						String gradedesc = (String) a_bean.get("desc2");
						if ("2"
								.equals((String) this.planParam.get("DegreeShowType")))
							gradedesc = (String) a_bean.get("gradedesc");
						sql.append("\r\n<option value='" + gradecode + "' ");
						if (a_value.equals(gradecode))
							sql.append("selected");
						sql.append(" >" + gradedesc + "</option>");
					}
					sql.append("</select>");

					if (SystemConfig.getPropertyValue("clientName") != null
							&& "zglt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {

						if (((String) point_bean.get("p0407")).trim().length() == 0) {
							sql.setLength(0);
						}

					}
					if ("1".equals(this.template_vo.getString("status"))) // 权重
					{
						String p0415 = (String) point_bean.get("p0415");
						if (p0415 == null || p0415.trim().length() == 0
								|| Double.parseDouble(p0415) == 0) {
							// 需要取得计划的TargetDefineItem参数,P0415 -> 权重 add by 刘蒙
							String targetDefineItem = (String) planParam.get("TargetDefineItem");
							boolean isP0415 = targetDefineItem.indexOf("P0415") == -1 ? false : true;
							if (isP0415) {
								sql.setLength(0);
							}
						}
					}else{
                        //49883 分值模板 标准分值为0则不需要打分。haosl 2019-07-11
                        String p0413 = (String) point_bean.get("p0413");
                        if (StringUtils.isBlank(p0413)
                                || "0".equals(p0413)) {
                            sql.setLength(0);
                        }
                    }

				}
			}

		}
		return sql.toString();
	}

	/**
	 * 画空格　和　指标格
	 * 
	 * @param current
	 * @param pointList
	 * @param j
	 * @return
	 */
	public String writePointGrid(int current, ArrayList pointList, int j,
			String item_kind, String item_id) {
		StringBuffer tempHtml = new StringBuffer("");
		LazyDynaBean point_bean = null;

		int item_width = this.td_width;
		if (this.customTdWidthMap.size() > 0
				&& this.customTdWidthMap.get("itemid") != null) // 自定义列宽
			item_width = Integer.parseInt((String) this.customTdWidthMap
					.get("itemid")) / this.lay;
		else if ("bjpt".equalsIgnoreCase(
                SystemConfig.getPropertyValue("clientName")))
			item_width = item_width - 50;

		for (int e = current; e < this.lay; e++) {
			if (this.lastItemid != null
					&& item_id.equalsIgnoreCase(this.lastItemid)
					&& (pointList == null || j == pointList.size() - 1))
				tempHtml.append(writeTd("&nbsp;", 1, "left", item_width, "1",
						"RecordRow_self_locked_last common_border_color"));
			else
				tempHtml.append(writeTd("&nbsp;", 1, "left", item_width, "1",
						"RecordRow_self_locked common_border_color"));
		}
		int p0401width = this.td_width + this.td_width / 2;
		if (SystemConfig.getPropertyValue("clientName") != null
				&& "zglt"
						.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) // 中国联通
			p0401width = this.td_width - 50;
		if (this.customTdWidthMap.size() > 0
				&& this.customTdWidthMap.get("p0401") != null) // 自定义列宽
			p0401width = Integer.parseInt((String) this.customTdWidthMap
					.get("p0401"));

		if (pointList == null) {
			if (this.lastItemid != null
					&& item_id.equalsIgnoreCase(this.lastItemid)
					&& (pointList == null || j == pointList.size() - 1))
				tempHtml.append(writeTd("&nbsp;", 0, "left", p0401width, "1",
						"RecordRow_self_locked_last common_border_color"));
			else
				tempHtml.append(writeTd("&nbsp;", 0, "left", p0401width, "1",
						"RecordRow_self_locked common_border_color"));
		} else {

			String css_name = "RecordRow_self_locked common_border_color";
			if (this.headList.size() == 2)
				css_name = "RecordRow_self_locked2 common_border_color";
			if (this.lastItemid != null
					&& item_id.equalsIgnoreCase(this.lastItemid)
					&& (pointList == null || j == pointList.size() - 1))
				css_name = "RecordRow_self_locked_last common_border_color";
			point_bean = (LazyDynaBean) pointList.get(j);
			// tempHtml.append(writeTd((String)point_bean.get("p0407"),0,"left",this.td_width,"1","RecordRow_self_locked"));

			StringBuffer td = new StringBuffer("");
			td.append("\r\n<td class='" + css_name+"'   valign='middle' align='left' style='table-layout:fixed;word-wrap:break-word;word-break:break-all;' ");//字母也能换行   zhaoxg add 2014-7-29
			td.append(" height='" + td_height + "' ");
			// if(this.model!=null&&this.model.equals("5"))
			// td.append("  width='100'");
			// else
			td.append("  width='" + p0401width + "'");
			boolean aflag = true;
			/** 如果对该项目没有权限，则不能操作该项目下的指标 */
			if (itemPrivMap.get(item_id) != null
					&& "0".equals((String) itemPrivMap.get(item_id)))
				aflag = false;
			if (this.model != null
					&& ("5".equals(this.model) || "8".equals(this.model))) {

			} else {
				if (item_kind.length() > 0 && !"1".equals(item_kind) && aflag) {

					td.append(" onDblClick='clearPoint(this)' ");
					String fromflag = (String) point_bean.get("fromflag");
					if ("2".equals(fromflag)) {
						td.append(" onClick='selectPoint(\"" + item_id
								+ "\",\"" + (String) point_bean.get("p0400")
								+ "\",this);showDateSelectBox(this,\""
								+ ((String) point_bean.get("p0401")) + "\")' ");
						td.append(" onmouseout='Element.hide(\"date_panel\");' onmouseover=\"this.style.cursor='pointer'\" ");
					} else
						td.append(" onClick='selectPoint(\"" + item_id
								+ "\",\"" + (String) point_bean.get("p0400")
								+ "\",this)' ");
					// td.append(" bgcolor='#FFFFCC' ");
				} else {
					String p0401 = (String) point_bean.get("p0401");
					if (this.perPointMap.get(p0401.toLowerCase()) != null) {
						LazyDynaBean abean = (LazyDynaBean) this.perPointMap
								.get(p0401.toLowerCase());
						String visible = (String) abean.get("visible");
						if ("1".equals(visible))
							td.append("  onclick=\"showDateSelectBox(this,'"
									+ p0401 + "');\"  onmouseout='Element.hide(\"date_panel\");' onmouseover=\"this.style.cursor='pointer'\" ");
						else if ("2".equals(visible))
							td.append("  onclick=\"showDateSelectBox2(this,'"
									+ p0401 + "');\" onmouseout='Element.hide(\"date_panel\");'  onmouseover=\"this.style.cursor='pointer'\" ");
					}
				}
			}
			td.append(" >");
			String context = (String) point_bean.get("p0407");

			/*
			 * if(this.opt==2)
			 * this.numberMap.put((String)point_bean.get("p0400"),
			 * serial_number+""); if(this.opt==2) {
			 * context=serial_number+"."+context; serial_number++; } else
			 */
			{

				if ((point_bean.get("f_p0400") == null || ((String) point_bean
						.get("f_p0400")).trim().length() == 0)
						&& (SystemConfig.getPropertyValue("noNumber_objective") == null
								|| SystemConfig.getPropertyValue(
										"noNumber_objective").length() == 0 || "false"
								.equalsIgnoreCase(SystemConfig
                        .getPropertyValue("noNumber_objective")))) {

					this.numberMap.put((String) point_bean.get("p0400"),
							serial_number + "");
					context = serial_number + "." + context;
					serial_number++;

				}
				/*
				 * else
				 * if(this.mainbodyBean!=null&&this.mainbodyBean.get("status"
				 * )!=null
				 * &&((String)this.mainbodyBean.get("status")).equals("2")) {
				 * context=serial_number+"."+context; serial_number++; }
				 */
				else if (((this.plan_vo.getInt("status") == 8
						|| this.plan_vo.getInt("status") == 5 || ((this.plan_vo
						.getInt("status") == 4 || this.plan_vo.getInt("status") == 6) && (planParam
						.get("NoShowTargetAdjustHistory") == null || "False"
						.equalsIgnoreCase((String) planParam
						.get("NoShowTargetAdjustHistory")))))
						&& (isShowHistoryTask != null
								&& isShowHistoryTask.trim().length() > 0 && "0"
								.equals(isShowHistoryTask)) && (this.planParam
						.get("taskAdjustNeedNew") != null && "True".equalsIgnoreCase((String) this.planParam
						.get("taskAdjustNeedNew"))))
						&& (SystemConfig.getPropertyValue("noNumber_objective") == null
								|| SystemConfig.getPropertyValue(
										"noNumber_objective").length() == 0 || "false"
								.equalsIgnoreCase(SystemConfig
                        .getPropertyValue("noNumber_objective")))) {
					this.numberMap.put((String) point_bean.get("p0400"),
							serial_number + "");
					context = serial_number + "." + context;
					serial_number++;
				} else if ((this.plan_vo.getInt("status") >= 4 && this.plan_vo
						.getInt("status") != 8)
						&& (SystemConfig.getPropertyValue("noNumber_objective") == null
								|| SystemConfig.getPropertyValue(
										"noNumber_objective").length() == 0 || "false"
								.equalsIgnoreCase(SystemConfig
                        .getPropertyValue("noNumber_objective")))) {
					if (this.planParam.get("NoShowTargetAdjustHistory") != null
							&& "True"
									.equalsIgnoreCase((String) this.planParam
                                            .get("NoShowTargetAdjustHistory"))) {
						this.numberMap.put((String) point_bean.get("p0400"),
								serial_number + "");
						context = serial_number + "." + context;
						serial_number++;
					}
				}

				if (point_bean.get("f_p0400") != null
						&& ((String) point_bean.get("f_p0400")).trim().length() > 0
						&& (this.isShowHistoryTask != null && "1"
								.equals(this.isShowHistoryTask))) {
					String f_p0400 = (String) point_bean.get("f_p0400");
					this.numberMap.put((String) point_bean.get("p0400"),
							(String) numberMap.get(f_p0400));
				}
			}
			String p0400 = (String) point_bean.get("p0400");
			String content = this.getStringContent(p0400);
			StringBuffer info = new StringBuffer();
			info.append('"');
			info.append(content);
			info.append('"');
			context = context.replaceAll("\r\n", "<br>").replaceAll(" ",
					"&nbsp;&nbsp;");
			String context_add = context;
			String tipText = PubFunc.hireKeyWord_filter(info.toString());
			if(aflag){
				context_add = "<font onmouseover='Tip(" + tipText
						+ ",STICKY,true);' onmouseout='tt_HideInit();' class=\"" + this.getTt3CssClassName()
						+ "\">" + context_add + "</font>";
			}else{
				context_add = "<font onmouseover='Tip(" + tipText
						+ ",STICKY,true);' onmouseout='tt_HideInit();' class=\"" + this.getTt3CssClassName()
						+ "\" color='#DCDCDC'>" + context_add + "</font>";
			}
			if(aflag){
				context = "<font  class=\"" + this.getTt3CssClassName() + "\">"
				+ context + "</font>";
			}else{
				context = "<font  class=\"" + this.getTt3CssClassName() + "\" color='#DCDCDC'>"
				+ context + "</font>";
			}

			if (point_bean.get("state") != null) {
				String state = (String) point_bean.get("state");
				String chg_type = (String) point_bean.get("chg_type");
				boolean _flag = true;
				if (this.plan_vo.getInt("status") >= 4
						&& this.plan_vo.getInt("status") != 8) {
					if (this.planParam.get("NoShowTargetAdjustHistory") != null
							&& "True"
									.equalsIgnoreCase((String) this.planParam
                                            .get("NoShowTargetAdjustHistory")))
						_flag = false;
				} else if ((this.plan_vo.getInt("status") == 8
						|| this.plan_vo.getInt("status") == 5 || ((this.plan_vo
						.getInt("status") == 4 || this.plan_vo.getInt("status") == 6) && (planParam
						.get("NoShowTargetAdjustHistory") == null || "False"
						.equalsIgnoreCase((String) planParam
						.get("NoShowTargetAdjustHistory")))))
						&& (isShowHistoryTask != null
								&& isShowHistoryTask.trim().length() > 0 && "0"
								.equals(isShowHistoryTask))
						&& (this.planParam.get("taskAdjustNeedNew") != null && "True"
								.equalsIgnoreCase((String) this.planParam
                                        .get("taskAdjustNeedNew"))))
					_flag = false;

				if (isShowHistoryTask != null
						&& isShowHistoryTask.trim().length() > 0
						&& "0".equals(isShowHistoryTask)) {
					if (this.planParam.get("taskAdjustNeedNew") != null
							&& "true"
									.equalsIgnoreCase((String) this.planParam
                                            .get("taskAdjustNeedNew")))
						_flag = false;
				}

				if ("-1".equals(state) && _flag) // 调整过的项目
				{
					if ("1".equals(chg_type))
						context = context_add
								+ "&nbsp;&nbsp;<img src='/images/icon_tgsx.gif' border=0 >&nbsp;";
					else if ("2".equals(chg_type)) {

						if (point_bean.get("f_p0400") == null
								|| ((String) point_bean.get("f_p0400")).trim()
										.length() == 0)
							context = context_add
									+ "&nbsp;&nbsp;<img src='/images/add.gif' border=0 >&nbsp;";
						else
							context = context_add
									+ "&nbsp;&nbsp;<img src='/images/icon_tgsx.gif' border=0 >&nbsp;";

					} else if ("3".equals(chg_type)) {
						context = changeColor(context_add, point_bean)
								+ "&nbsp;&nbsp;<img src='/images/icon_wtgsx.gif' border=0 >&nbsp;";
						// context+="&nbsp;&nbsp;<img src='/images/icon_wtgsx.gif' border=0 >&nbsp;";
					}
				}
			}

			if (this.plan_vo.getInt("status") != 7
					&& (("2".equals(this.model) && ("03"
							.equals(this.realSpFlag))) || ("1".equals(this.model)
							&& this.un_functionary
									.equalsIgnoreCase(this.userView.getA0100()) && ("03"
							.equals(this.realSpFlag))))
					&& (!"1".equals(this.isPerformanceShow) || !"rz"
							.equals(this.fromModel))
					&& (getDataJson((String) point_bean.get("p0400"))))
				context += "&nbsp;<img src=\"/images/link.gif\" alt=\"任务分解\" BORDER='0' style='cursor:hand;' onclick=\"checkPerStion(this,'"
						+ this.plan_id
						+ "','"
						+ (String) point_bean.get("p0400")
						+ "','"
						+ this.extJsonWidth + "');\">&nbsp;&nbsp;";

			// if(this.opt!=2&&point_bean.get("f_p0400")!=null&&((String)point_bean.get("f_p0400")).trim().length()>0)
			// context+="<br>";
			if ("4".equals(this.model)|| "1".equals(this.model)|| "2".equals(this.model)) {//评估打分
			    if ((this.opt==2||this.opt==0) && ("".equals(this.from_flag) || "0".equals(this.from_flag)) 
			            && ("5".equals((String) point_bean.get("fromflag")))) {//链接工作任务p08 wangrd 20141201
			        String p0401 = (String) point_bean.get("p0401");
			        if (p0401!=null){
			            context="<a href=\"javascript:void(0)\" onclick=\"openP08Task(event,'"+
			            WorkPlanUtil.encryption((String) point_bean.get("p0400"))
			            +"','"+WorkPlanUtil.encryption(p0401)+"')\">"+context+"</a>";
			        }
			    }
            }
			if (point_bean.get("f_p0400") != null
					&& ((String) point_bean.get("f_p0400")).trim().length() > 0) {
				String str = "<table width='100%' height='100%' ><tr><td>&nbsp;&nbsp;&nbsp;&nbsp;</td><td>"
						+ context + "</td></tr></table>";
				if (this.plan_vo.getInt("status") >= 4
						&& this.plan_vo.getInt("status") != 8) {
					if (this.planParam.get("NoShowTargetAdjustHistory") != null
							&& "True"
									.equalsIgnoreCase((String) this.planParam
                                            .get("NoShowTargetAdjustHistory")))
						str = context;
					else if (isShowHistoryTask != null
							&& isShowHistoryTask.trim().length() > 0
							&& "0".equals(isShowHistoryTask))
						str = context;
				} else if ((this.plan_vo.getInt("status") == 8
						|| this.plan_vo.getInt("status") == 5 || ((this.plan_vo
						.getInt("status") == 4 || this.plan_vo.getInt("status") == 6) && (planParam
						.get("NoShowTargetAdjustHistory") == null || "False"
						.equalsIgnoreCase((String) planParam
						.get("NoShowTargetAdjustHistory")))))
						&& (this.planParam.get("taskAdjustNeedNew") != null && "True"
								.equalsIgnoreCase((String) this.planParam
                                        .get("taskAdjustNeedNew")))) {
					if (isShowHistoryTask != null
							&& isShowHistoryTask.trim().length() > 0
							&& "0".equals(isShowHistoryTask))
						str = context;
				}
				td.append(str);
			} else {
				td.append(context);
			}
			String itemtype = (String) point_bean.get("itemtype");
			String scoreStatus = ((this.mainbodyBean == null || mainbodyBean
					.get("status") == null) ? "0" : (String) mainbodyBean
					.get("status"));
			if (aflag
					&& !"2".equals(scoreStatus)
					&& "1".equals(itemtype)
					&& ((this.model != null && "4".equals(this.model))
							|| ("1".equals(this.model) && this.opt == 2) || ("2"
							.equals(this.model) && this.opt == 2))) {
				if (this.userView.hasTheFunction("06070402")) {
					this.editableTaskList.add(new CommonData(
							(String) point_bean.get("p0400"),
							(String) point_bean.get("p0407")));
					td.append("&nbsp;&nbsp;");
					td.append("<a href='###' onclick=\"editEvalCanNewPoint('"
							+ (String) point_bean.get("p0400")
							+ "')\" ><font class='" + this.getTt3CssClassName()
							+ "'>编辑</font></a>");
					td.append("&nbsp;/&nbsp;");
					td.append("<a href='###' onclick=\"delPoint('"
							+ (String) point_bean.get("p0400")
							+ "')\" ><font class='" + this.getTt3CssClassName()
							+ "'>"
							+ ResourceFactory.getProperty("label.kh.del")
							+ "</font></a>");
				}
			}
			td.append("&nbsp;</td>");

			tempHtml.append(td.toString());
		}
		return tempHtml.toString();
	}

	// 判断是否又把此任务向下分解了
	public boolean getDataJson(String p0400) {
		boolean json = false;
		RowSet rowSet = null;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			// String sql =
			// "select to_a0100 from per_designate_task where p0400='" + p0400 +
			// "' order by group_id ";
			String sql = "select count(p0400) num from p04 where p0400 in (select to_p0400 from per_designate_task where p0400='"
					+ p0400 + "') ";
			rowSet = dao.search(sql);
			int num = 0;
			while (rowSet.next()) {
				num = rowSet.getInt("num");
				if (num > 0)
					json = true;
			}
			if (rowSet != null)
				rowSet.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return json;
	}
	private String writeTd1(String context, int rowspan, String align,
			int width, String kind, String classname,LazyDynaBean point_bean) {
		StringBuffer td = new StringBuffer("");
		try{
			td.append("\r\n<td class='" + classname + "' style='table-layout:fixed;word-wrap:break-word;word-break:break-all;' valign='middle' align='"+ align +"' ");
			if (rowspan != 0)
				td.append(" rowspan='" + rowspan + "' ");
			else
				td.append(" height='" + td_height + "' ");
			if (width != 0)
				td.append("  width='" + width + "'");
			
			String p0401 = (String) point_bean.get("p0401");
			String p0400 = (String) point_bean.get("p0400");
			String point_item_id = (String) point_bean.get("item_id");
			String chg_type = (String) point_bean.get("chg_type");
			String state = (String) point_bean.get("state");
			String fromflag = (String) point_bean.get("fromflag");
			if ("1".equals(fromflag) || "3".equals(fromflag)|| "5".equals(fromflag)) // 自建（不进KPI库）
			{
				p0401 = "per_standdegree";
			}
			
			if (this.opt != 2||(itemPrivMap.get(point_item_id)!=null&& "0".equals((String)itemPrivMap.get(point_item_id)))){ // 如果为目标查看
				
			}else if (("-1".equals(state)&& "3".equals(chg_type))||(this.mainbodyBean != null && "2".equals((String) this.mainbodyBean.get("status")))
						||(itemPrivMap.get(point_item_id) != null&& "0".equals((String) itemPrivMap.get(point_item_id)))){
					
			}else{
				td.append("  onclick='showSetBox(this,\""+p0400+"\",\""+p0401+"\",\"" +context+ "\")' ");
			}
			
			if(aflag){
				td.append(" >&nbsp;<font id=\"pp"+p0400+"\" class=\"" + this.getTt3CssClassName() + "\">");
			}else{
				td.append(" >&nbsp;<font id=\"pp"+p0400+"\" class=\"" + this.getTt3CssClassName() + "\"  color='#DCDCDC'>");
			}
			td.append(context);
			td.append("</font>&nbsp;<input type='hidden' name=\"p_"+p0400+"\" value=\""+context+"\" /></td>");
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		return td.toString();
	}
	private String writeTd(String context, int rowspan, String align,
			int width, String kind, String classname) {
		StringBuffer td = new StringBuffer("");
		try{
			td.append("\r\n<td class='" + classname + "' style='table-layout:fixed;word-wrap:break-word;word-break:break-all;' valign='middle' align='"
					+ align + "' ");
			if (rowspan != 0)
				td.append(" rowspan='" + rowspan + "' ");
			else
				td.append(" height='" + td_height + "' ");
			if (width != 0)
				td.append("  width='" + width + "'");
			if (this.model != null
					&& ("5".equals(this.model) || "8".equals(this.model))) {

			} else {
				if (kind != null && kind.indexOf("/") != -1
						&& "2".equals(kind.split("/")[0])) {
					String[] templates = kind.split("/");
					
					if (this.itemPrivMap!=null&&this.itemPrivMap.get(templates[1]) != null&& "0".equals((String) this.itemPrivMap.get(templates[1]))) //20141119 dengcan
					{
						 
					}
					else
					{
						td.append(" onDblClick='clearItem(\"" + templates[1]
								+ "\",this)'  onClick='selectItem(\"" + templates[1]
								+ "\",this)' onmouseover=\"this.style.cursor='pointer'\" ");
					}
					// td.append(" bgcolor='#FFFFCC' ");
				}
			}
			if(aflag){
				td.append(" >&nbsp;<font class=\"" + this.getTt3CssClassName() + "\">");
			}else{
				td.append(" >&nbsp;<font class=\"" + this.getTt3CssClassName() + "\"  color='#DCDCDC'>");
			}
			
			td.append(context);
			td.append("</font>&nbsp;</td>");
		}catch(Exception e)
		{
			e.printStackTrace();
		}


		return td.toString();
	}

	// 此方法用于备注型指标的省略展现
	private String writeTd(String context, int rowspan, String align,
			int width, String kind, String classname, String allreasons) {
		StringBuffer td = new StringBuffer("");
		//tittle内容太长时，用tip属性的话页面显示不全。修改为Tip()事件，onmouseout时解除。chent
		String tip = "";
		String tipOut = "";
		if(allreasons.length() > 0){
            String str = allreasons.replaceAll("\r\n", " ").replaceAll("\n", " ").replaceAll("<br>"," ");
            str = PubFunc.hireKeyWord_filter(str);
            tip = "Tip('" + str + "',STICKY ,true)";
            //haosl delete 20180609 不替换特殊字符时导致 title提示无法显示
            //tip = "Tip('" + allreasons + "',STICKY ,true)";
            tipOut = "onmouseout='UnTip()''";
		}
		// 避免title与div提示框同时显示，将描述写入到tip自定义属性中 lium
		td.append("<td class='" + classname + "'  valign='middle' align='"
				+ align + "' onmouseover=\"" + tip + "\" " + tipOut + "\" "
						+ " style='table-layout:fixed;word-wrap:break-word;word-break:break-all;' ");
		if (rowspan != 0)
			td.append(" rowspan='" + rowspan + "' ");
		else
			td.append(" height='" + td_height + "' ");
		if (width != 0)
			td.append("  width='" + width + "'");
		if (this.model != null
				&& ("5".equals(this.model) || "8".equals(this.model))) {

		} else {
			if (kind != null && kind.indexOf("/") != -1
					&& "2".equals(kind.split("/")[0])) {
				String[] templates = kind.split("/");
				
				if (this.itemPrivMap!=null&&this.itemPrivMap.get(templates[1]) != null&& "0".equals((String) this.itemPrivMap.get(templates[1]))) //20141119 dengcan
				{
					 
				}
				else
				{
				
					td.append(" onDblClick='clearItem(\"" + templates[1]
						+ "\",this)'  onClick='selectItem(\"" + templates[1]
						+ "\",this)' ");
				}
				// td.append(" bgcolor='#FFFFCC' ");
			}
		}
		if(aflag){
			td.append(" ><font class=\"" + this.getTt3CssClassName() + "\">");
		}else{
			td.append(" ><font class=\"" + this.getTt3CssClassName() + "\"  color='#DCDCDC'>");
		}
		context = context.replaceAll("\n", "<br>").replaceAll(" ","&nbsp;&nbsp;");
		td.append(context);
		td.append("</font>&nbsp;</td>");
		//2013.11.21 pjf 解决大文本显示时间太短
		td.append("<div id='title_show' style='position:absolute;display:none;border:solid 1px #999999;' class='common_background_color'> ");
		td.append("</div>");
		return td.toString();
	}

	private String writeTd(String context, int rowspan, String align,
			int width, String kind, String classname, boolean opt) {
		StringBuffer td = new StringBuffer("");
		td.append("\r\n<td class='" + classname + "'  valign='middle' align='"
				+ align + "' ");
		if (rowspan != 0)
			td.append(" rowspan='" + rowspan + "' ");
		else
			td.append(" height='" + td_height + "' ");
		td.append("  width='" + width + "'");
		if (this.model != null && "5".equals(this.model)) {

		} else {
			if (opt) {
				if (kind != null && kind.indexOf("/") != -1
						&& "2".equals(kind.split("/")[0])) {
					String[] templates = kind.split("/");
					
					if (this.itemPrivMap!=null&&this.itemPrivMap.get(templates[1]) != null&& "0".equals((String) this.itemPrivMap.get(templates[1]))) //20141119 dengcan
					{
						 
					}
					else
					{
						td.append(" onDblClick='clearItem(\"" + templates[1]
							+ "\",this)'  onClick='selectItem(\""
							+ templates[1] + "\",this)' ");
					}
					// td.append(" bgcolor='#FFFFCC' ");
				}
			}
		}
		if(aflag){
			td.append(" >&nbsp;<font class=\"" + this.getTt3CssClassName() + "\">");
		}else{
			td.append(" >&nbsp;<font class=\"" + this.getTt3CssClassName() + "\"  color='#DCDCDC'>");
		}
		td.append(context);
		td.append("</font>&nbsp;</td>");
		return td.toString();
	}

	/**
	 * 取得项目拥有的节点数
	 * 
	 * @return
	 */
	public HashMap getItemPointNum() {
		HashMap map = new HashMap();
		LazyDynaBean a_bean = null;
		LazyDynaBean aa_bean = null;
		for (int i = 0; i < templateItemList.size(); i++) {
			a_bean = (LazyDynaBean) this.templateItemList.get(i);
			ArrayList list = new ArrayList();
			getLeafItemList(a_bean, list);
			int n = 0;
			for (int j = 0; j < list.size(); j++) {
				aa_bean = (LazyDynaBean) list.get(j);
				String item_id = (String) aa_bean.get("item_id");
				if (itemToPointMap.get(item_id) != null)
					n += ((ArrayList) itemToPointMap.get(item_id)).size();
				else
					n += 1;
			}
			map.put((String) a_bean.get("item_id"), new Integer(n));
		}
		return map;
	}

	public void getLeafItemList(LazyDynaBean abean, ArrayList list) {
		String item_id = (String) abean.get("item_id");
		String child_id = (String) abean.get("child_id");

		if (child_id.length() == 0) {
			list.add(abean);
			return;
		} else if (itemToPointMap.get(item_id) != null) // **
		{
			list.add(abean);
		}

		LazyDynaBean a_bean = null;
		for (int j = 0; j < this.templateItemList.size(); j++) {
			a_bean = (LazyDynaBean) this.templateItemList.get(j);
			String parent_id = (String) a_bean.get("parent_id");
			if (parent_id.equals(item_id))
				getLeafItemList(a_bean, list);
		}

	}

	/**
	 * 叶子项目对应的继承关系
	 * 
	 * @return
	 */
	public HashMap getLeafItemLinkMap() {
		HashMap map = new HashMap();
		try {
			LazyDynaBean abean = null;
			for (int i = 0; i < this.leafItemList.size(); i++) {
				abean = (LazyDynaBean) this.leafItemList.get(i);
				String item_id = (String) abean.get("item_id");
				String parent_id = (String) abean.get("parent_id");
				ArrayList linkList = new ArrayList();
				getParentItem(linkList, abean);
				if (linkList.size() > lay)
					lay = linkList.size();
				map.put(item_id, linkList);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	// 寻找继承关系
	public void getParentItem(ArrayList list, LazyDynaBean abean) {
		String item_id = (String) abean.get("item_id");
		String parent_id = (String) abean.get("parent_id");
		if (parent_id.length() == 0) {
			list.add(abean);
			return;
		}
		LazyDynaBean a_bean = null;
		for (int i = 0; i < templateItemList.size(); i++) {
			a_bean = (LazyDynaBean) this.templateItemList.get(i);
			String itemid = (String) a_bean.get("item_id");
			String parentid = (String) a_bean.get("parent_id");
			if (itemid.equals(parent_id)) {
				list.add(abean);
				getParentItem(list, a_bean);
			}

		}

	}

	public void isZGLT() {
		try {
			String zglt = SystemConfig.getPropertyValue("clientName");
			if (zglt == null || "".equals(zglt)
					|| !"zglt".equalsIgnoreCase(zglt))
				return;
			else {
				ContentDAO dao = new ContentDAO(this.conn);
				RowSet rowSet = null;
				String template_id = this.plan_vo.getString("template_id");
				String itemid = "";
				rowSet = dao
						.search("select item_id from per_template_item where UPPER(template_id)='"
								+ template_id.toUpperCase() + "' and kind=2");
				int i = 0;
				while (rowSet.next()) {
					if (i != 0)
						itemid += ",";
					itemid += rowSet.getString("item_id");
					i++;
				}
				if (itemid == null || "".equals(itemid))
					return;
				StringBuffer sql = new StringBuffer(
						"select count(p0400) from P04 where plan_id="
								+ this.plan_vo.getInt("plan_id"));
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4)
					sql.append(" and b0110='" + this.object_id + "'");
				else if (this.plan_vo.getInt("object_type") == 2)
					sql.append(" and a0100='" + this.object_id + "'");
				sql.append(" and item_id in(" + itemid + ")");
				rowSet = dao.search(sql.toString());
				int count = 0;
				if (rowSet.next()) {
					count = rowSet.getInt(1);
				}
				rowSet.close();
				if (count == 0) {
					if (!"".equals(itemid)) {
						String[] arr = itemid.split(",");
						String mbo_card_tasks = SystemConfig
								.getPropertyValue("mbo_card_tasks");
						String macth = "^\\d+$";
						if (mbo_card_tasks == null || "".equals(mbo_card_tasks)
								|| !mbo_card_tasks.matches(macth))
							mbo_card_tasks = "5";
						int task = Integer.parseInt(mbo_card_tasks);
						for (int j = 0; j < arr.length; j++) {
							int seq = getP0400Seq(null, task);
							if (seq == 0)
								seq = 1;
							String id = arr[j];
							ArrayList list = new ArrayList();
							for (int index = 0; index < task; index++) {
								sql.setLength(0);
								sql.append("insert into p04 (p0400,b0110,");
								if (this.plan_vo.getInt("object_type") == 2)
									sql.append("e0122,e01a1,nbase,a0100,a0101,");
								else
									sql.append("a0101,");
								sql.append("p0401,plan_id,Item_id,fromflag,state,seq )values(?,?,");
								if (this.plan_vo.getInt("object_type") == 2)
									sql.append("?,?,?,?,?,");
								else
									sql.append("?,");
								sql.append("?,?,?,?,?,?)");
								RecordVo selfVo = null;
								if (this.plan_vo.getInt("object_type") == 2)
									selfVo = getSelfVo(this.object_id,
											this.userView.getDbname());
								ArrayList tempList = new ArrayList();
								IDGenerator idg = new IDGenerator(2, conn);
								String p0400 = idg.getId("P04.P0400");
								tempList.add(new Integer(p0400));
								if (this.plan_vo.getInt("object_type") == 1
										|| this.plan_vo.getInt("object_type") == 3
										|| this.plan_vo.getInt("object_type") == 4) // 部门
									tempList.add(this.object_id);
								else if (this.plan_vo.getInt("object_type") == 2)// 人员
								{
									tempList.add(selfVo.getString("b0110"));
									tempList.add(selfVo.getString("e0122"));
									tempList.add(selfVo.getString("e01a1"));
									tempList.add(this.userView.getDbname());
									tempList.add(selfVo.getString("a0100"));
									tempList.add(selfVo.getString("a0101"));
								} else {
									String tp = AdminCode.getCodeName("UN",
											this.object_id);
									if (tp != null && tp.length() > 0)
										tempList.add(tp);
									else
										tempList.add(AdminCode.getCodeName(
												"UM", this.object_id));
								}
								tempList.add(String.valueOf(id));
								// tempList.add("任务"+seq);
								tempList.add(new Integer(this.plan_vo
										.getInt("plan_id")));
								tempList.add(new Integer(id));
								tempList.add(new Integer(1));
								tempList.add(new Integer(0));
								tempList.add(new Integer(seq));
								seq++;
								list.add(tempList);
							}
							dao.batchInsert(sql.toString(), list);
						}
					}
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 判断p04表中是否已为对象产生模板内的共性指标，没有则自动产生
	 */
	public void executeP04_commonnessData() {
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			StringBuffer sql = new StringBuffer(
					"select count(p0400) from P04 where plan_id="
							+ this.plan_vo.getInt("plan_id"));
			if (this.plan_vo.getInt("object_type") == 1
					|| this.plan_vo.getInt("object_type") == 3
					|| this.plan_vo.getInt("object_type") == 4)
				sql.append(" and b0110='" + this.object_id + "'");
			else if (this.plan_vo.getInt("object_type") == 2)
				sql.append(" and a0100='" + this.object_id + "'");
			sql.append(" and item_id in (select item_id from per_template_item where ");
			sql.append(" (kind=1 or kind is null) and UPPER(template_id)='"
					+ this.plan_vo.getString("template_id").toUpperCase()
					+ "') ");
			RowSet rowSet = dao.search(sql.toString());
			int count = 0;
			if (rowSet.next()) {
				count = rowSet.getInt(1);
			}
			if (count == 0) {
				sql.setLength(0);
				sql.append("insert into p04 (p0400,b0110,");
				if (this.plan_vo.getInt("object_type") == 2)
					sql.append("e0122,e01a1,nbase,a0100,a0101,");
				else
					sql.append("a0101,");
				sql.append("p0401,p0407,p0413,p0415,plan_id,Item_id,fromflag,state,seq )values(?,?,");
				if (this.plan_vo.getInt("object_type") == 2)
					sql.append("?,?,?,?,?,");
				else
					sql.append("?,");
				sql.append("?,?,?,?,?,?,?,?,?)");
				String sql_str = "select ptp.point_id,ptp.score,ptp.rank,pp.pointname,ptp.item_id,ptp.seq from per_template_item pti,per_template_point ptp,per_point pp"
						+ " where pti.item_id=ptp.item_id and ptp.point_id=pp.point_id and pti.template_id='"
						+ (String) this.plan_vo.getString("template_id")
						+ "' order by ptp.seq";
				rowSet = dao.search(sql_str);
				ArrayList list = new ArrayList();
				RecordVo selfVo = null;
				if (this.plan_vo.getInt("object_type") == 2
						&& this.userView.getDbname() != null
						&& this.userView.getDbname().trim().length() > 0)
					selfVo = getSelfVo(this.object_id,
							this.userView.getDbname());
				if ((("5".equals(this.model) && ("1".equals(this.from_flag) || "0"
						.equals(this.from_flag))) || "8".equals(this.model) || ("7"
						.equals(this.model) && this.plan_vo.getInt("object_type") == 2))
						&& this.plan_vo.getInt("object_type") == 2) // 绩效评估-绩效面谈
					selfVo = getSelfVo(this.object_id, "Usr");
				int seq = 1;
				while (rowSet.next()) {
					ArrayList tempList = new ArrayList();
					IDGenerator idg = new IDGenerator(2, conn);
					String id = idg.getId("P04.P0400");
					tempList.add(new Integer(id));
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
					{
						tempList.add(this.object_id);
						if (AdminCode.getCodeName("UN", this.object_id) != null
								&& !""
										.equals(AdminCode.getCodeName("UN", this.object_id))) {
							tempList.add(AdminCode.getCodeName("UN",
									this.object_id));
						} else if (AdminCode.getCodeName("UM", this.object_id) != null
								&& !""
										.equals(AdminCode.getCodeName("UM", this.object_id))) {
							tempList.add(AdminCode.getCodeName("UM",
									this.object_id));
						} else {
							tempList.add("");
						}
					} else if (this.plan_vo.getInt("object_type") == 2)// 人员
					{
						if (selfVo != null) {
							tempList.add(selfVo.getString("b0110"));
							tempList.add(selfVo.getString("e0122"));
							tempList.add(selfVo.getString("e01a1"));
							tempList.add(this.userView.getDbname());
							tempList.add(selfVo.getString("a0100"));
							tempList.add(selfVo.getString("a0101"));
						} else {
							tempList.add("");
							tempList.add("");
							tempList.add("");
							tempList.add("");
							tempList.add("");
							tempList.add("");
						}
					}
					// tempList.add(String.valueOf(id));
					tempList.add(rowSet.getString("point_id"));
					tempList.add(rowSet.getString("pointname"));
					tempList.add(new Float(rowSet.getFloat("score")));
					tempList.add(new Float(rowSet.getFloat("rank")));
					tempList.add(new Integer(this.plan_vo.getInt("plan_id")));
					tempList.add(new Integer(rowSet.getInt("item_id")));
					tempList.add(new Integer(2));
					tempList.add(new Integer(0));
					tempList.add(new Integer(seq));
					// tempList.add(new Integer(rowSet.getInt("seq")));
					list.add(tempList);
					seq++;
				}
                //北京市政存在重复点击，考虑性能问题提，暂不加同步，执行插入操作前删除一遍。haosl 2019年2月27日
                StringBuffer delSql = new StringBuffer(
                        "delete from P04 where plan_id="
                                + this.plan_vo.getInt("plan_id"));
                if (this.plan_vo.getInt("object_type") == 1
                        || this.plan_vo.getInt("object_type") == 3
                        || this.plan_vo.getInt("object_type") == 4)
                    delSql.append(" and b0110='" + this.object_id + "'");
                else if (this.plan_vo.getInt("object_type") == 2)
                    delSql.append(" and a0100='" + this.object_id + "'");
                delSql.append(" and item_id in (select item_id from per_template_item where ");
                delSql.append(" (kind=1 or kind is null) and UPPER(template_id)='"
                        + this.plan_vo.getString("template_id").toUpperCase()
                        + "') ");
                dao.delete(delSql.toString(),new ArrayList());
				dao.batchInsert(sql.toString(), list);

				// 指标解释指标
				if (this.point_explain_item.trim().length() > 0) {
					sql.setLength(0);
					if (Sql_switcher.searchDbServer() == Constant.ORACEL) {
						sql.append("update p04 set "
								+ this.point_explain_item
								+ "=(select description from per_point where p04.p0401=per_point.point_id)");
						sql.append(" where ");
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4) // 部门
							sql.append(" b0110='" + this.object_id + "'");
						else if (this.plan_vo.getInt("object_type") == 2)// 人员
							sql.append(" a0100='" + this.object_id + "'");
						sql.append(" and plan_id="
								+ this.plan_vo.getInt("plan_id"));
						//------------------------------------11
						sql.append(" and exists(");
						sql.append(" select null from  per_point where p04.p0401=per_point.point_id ");
						sql.append(")");
						//-----------------------------------
					} else {
						sql.append("update p04 set p04."
								+ this.point_explain_item
								+ "=per_point.description from p04,per_point where p04.p0401=per_point.point_id ");
						sql.append(" and ");
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4) // 部门
							sql.append(" b0110='" + this.object_id + "'");
						else if (this.plan_vo.getInt("object_type") == 2)// 人员
							sql.append(" a0100='" + this.object_id + "'");
						sql.append(" and plan_id="
								+ this.plan_vo.getInt("plan_id"));
					}
					dao.update(sql.toString());
				}

				// 指标说明指标
				if (this.point_evaluate_item.trim().length() > 0) {
					sql.setLength(0);
					if (Sql_switcher.searchDbServer() == Constant.ORACEL) {
						sql.append("update p04 set "
								+ this.point_evaluate_item
								+ "=(select gd_principle from per_point where p04.p0401=per_point.point_id)");
						sql.append(" where ");
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4) // 部门
							sql.append(" b0110='" + this.object_id + "'");
						else if (this.plan_vo.getInt("object_type") == 2)// 人员
							sql.append(" a0100='" + this.object_id + "'");
						sql.append(" and plan_id="
								+ this.plan_vo.getInt("plan_id"));
						//------------------------------------
						sql.append(" and exists(");
						sql.append(" select null from  per_point where p04.p0401=per_point.point_id ");
						sql.append(")");
						//-----------------------------------
					} else {
						sql.append("update p04 set p04."
								+ this.point_evaluate_item
								+ "=per_point.gd_principle from p04,per_point where p04.p0401=per_point.point_id ");
						sql.append(" and ");
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4) // 部门
							sql.append(" b0110='" + this.object_id + "'");
						else if (this.plan_vo.getInt("object_type") == 2)// 人员
							sql.append(" a0100='" + this.object_id + "'");
						sql.append(" and plan_id="
								+ this.plan_vo.getInt("plan_id"));
					}
					dao.update(sql.toString());
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public RecordVo getSelfVo(String object_id, String dbname) {
		RecordVo vo = new RecordVo(dbname.toLowerCase() + "a01");
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			vo.setString("a0100", object_id);
			vo = dao.findByPrimaryKey(vo);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return vo;
	}

	/**
	 * 取得 模板项目记录
	 * 
	 * @return
	 */
	public ArrayList getTemplateItemList() {
		ArrayList list = new ArrayList();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			String sql = "select * from  per_template_item where template_id='"
					+ this.plan_vo.getString("template_id") + "' ";
			// 目标制订不显示共性指标 liantong
			if (SystemConfig.getPropertyValue("noShowCommonPonit") != null
					&& "true"
							.equalsIgnoreCase(SystemConfig.getPropertyValue("noShowCommonPonit"))) {
				if (this.plan_vo.getInt("status") == 8)
					sql += " and kind<>1 ";

			}
			// 要根据考核机构 来控制展现
			if (this.privByOrg) {
				String itemid = this.getItemId();
				if (itemid.length() <= 0)
					itemid = "-1";
				else
					itemid = itemid.substring(1);
				// sql+=" and ((kind=2 and item_id in("+itemid+")) or kind=1)";
				sql += " and (item_id in(" + itemid + ")";
				String tmpstr = this.getGXItem(itemid);
				if (tmpstr.length() <= 0)
					tmpstr = "-1";
				sql += " or item_id in(" + tmpstr.substring(1) + ")";// 没有任务的个性项目也展现出来
				sql += ")";
			}
			sql += " order by seq";
			RowSet rowSet = dao.search(sql);
			HashMap dynaMap = null;
			if (this.perObject_vo != null
					&& this.perObject_vo.getString("body_id") != null
					&& !"".equals(this.perObject_vo.getString("body_id"))) {
				LoadXml loadXml = new LoadXml();
				dynaMap = loadXml
						.getDynaItem(this.plan_vo.getInt("plan_id") + "",
								this.conn,
								this.perObject_vo.getString("body_id"));
			}

			String scoreflag = (String) this.planParam.get("scoreflag"); // =2混合，=1标度(默认值=混合)=4加扣分
			String ScoreFromItem = (String) this.planParam.get("ScoreFromItem"); // 按项目权重逐级计算总分，True，False
																					// 默认False；

			LazyDynaBean abean = null;
			while (rowSet.next()) {
				abean = new LazyDynaBean();
				abean.set("item_id", rowSet.getString("item_id"));
				abean.set(
						"parent_id",
						rowSet.getString("parent_id") != null ? rowSet
								.getString("parent_id") : "");
				abean.set(
						"child_id",
						rowSet.getString("child_id") != null ? rowSet
								.getString("child_id") : "");
				abean.set("template_id", rowSet.getString("template_id"));
				abean.set("itemdesc", rowSet.getString("itemdesc"));
				abean.set("seq", rowSet.getString("seq"));
				abean.set(
						"kind",
						rowSet.getString("kind") != null ? rowSet
								.getString("kind") : "1");
				abean.set(
						"score",
						rowSet.getString("score") != null ? moveZero(rowSet
								.getString("score")) : "");
				abean.set(
						"rank",
						rowSet.getString("rank") != null ? moveZero(rowSet
								.getString("rank")) : "");
				abean.set(
						"rank_type",
						rowSet.getString("rank_type") != null ? rowSet
								.getString("rank_type") : "");// 权重类型=0固定，=1动态
				String MaxCount = "0";
				String MinCount = "0";
				String MaxValue = "0";
				String dyna = "0";
				String isAddMinusItem = "0";
				String addMinusScore = "";
				String addMinusToScore = "";
				// 定义的动态权重（分值）
				if (dynaMap != null
						&& dynaMap.get(this.perObject_vo.getString("body_id")
								+ rowSet.getString("item_id")) != null) {
					HashMap map = (HashMap) dynaMap
							.get(this.perObject_vo.getString("body_id")
									+ rowSet.getString("item_id"));
					String dyna_value = moveZero((String) map.get("dyna_value"));
					// 分值模板
					if ("0".equals(this.template_vo.getString("status"))) {
						abean.set("score", dyna_value);
					} else {
						abean.set("rank", dyna_value);
					}
					if (map.get("MaxCount") != null
							&& !"".equals((String) map.get("MaxCount")))
						MaxCount = (String) map.get("MaxCount");
					if (map.get("MinCount") != null
							&& !"".equals((String) map.get("MinCount")))
						MinCount = (String) map.get("MinCount");
					if (map.get("MaxValue") != null
							&& !"".equals((String) map.get("MaxValue")))
						MaxValue = (String) map.get("MaxValue");
					dyna = "1";

					if (!((scoreflag != null && "4".equals(scoreflag)) || (ScoreFromItem != null && "true"
							.equalsIgnoreCase(ScoreFromItem)))
							&& map.get("isAddMinusItem") != null
							&& !"".equals((String) map.get("isAddMinusItem")))
						isAddMinusItem = (String) map.get("isAddMinusItem");
					if (!((scoreflag != null && "4".equals(scoreflag)) || (ScoreFromItem != null && "true"
							.equalsIgnoreCase(ScoreFromItem)))
							&& map.get("addMinusScore") != null
							&& !"".equals((String) map.get("addMinusScore")))
						addMinusScore = (String) map.get("addMinusScore");
					if (!((scoreflag != null && "4".equals(scoreflag)) || (ScoreFromItem != null && "true"
							.equalsIgnoreCase(ScoreFromItem)))
							&& map.get("addMinusToScore") != null
							&& !""
									.equals((String) map.get("addMinusToScore")))
						addMinusToScore = (String) map.get("addMinusToScore");

				}

				if ("1".equals(isAddMinusItem)) // 判断模板中是否有加扣分项目
					this.hasAddMinusItem = true;

				abean.set("dyna", dyna);
				abean.set("MaxCount", MaxCount);
				abean.set("MinCount", MinCount);
				abean.set("MaxValue", MaxValue);

				abean.set("isAddMinusItem", isAddMinusItem);
				abean.set("addMinusScore", addMinusScore);
				abean.set("addMinusToScore", addMinusToScore);
				list.add(abean);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 移除小数点后面的零
	 * 
	 * @param number
	 */
	public String moveZero(String number) {
		DecimalFormat df = new DecimalFormat("###############.#####");
		if (number == null || number.length() == 0)
			return "";
		return df.format(Double.parseDouble(number));
	}

	/**
	 * 取得项目对应任务map
	 * 
	 * @return
	 */
	public HashMap getItemToPointMap() {
		HashMap map = new HashMap();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			LazyDynaBean abean = null;
			HashMap membersMap=null;
			String objid="";
            if (this.plan_vo.getInt("object_type") == 1
                    || this.plan_vo.getInt("object_type") == 3
                    || this.plan_vo.getInt("object_type") == 4) {
                objid=this.un_functionary ;
            }else
                objid=this.object_id;
			//如果启用了多评价人 并且处于评价或者评分状态，并且不是二级以上领导和自己，则只能看到自己做为评价人或者没有设定评价人的目标卡
			//this.mainbodyBean.get("level")==null 说明当前用户不是考核主体 而是评价人
			String isShowAllobjectCardByRater=SystemConfig.getPropertyValue("isShowAllobjectCardByRater");//评价时是否仅展示评价人涉及的目标卡false 或者空 仅展示涉及到的，true仅展示全部
			if(this.isOpenGrade_Members()&&!this.userView.getA0100().equalsIgnoreCase(objid)&&((this.opt==3&&!"true".equalsIgnoreCase(isShowAllobjectCardByRater))||this.opt==2||this.opt==0)){
				if((this.mainbodyBean!=null&&(this.mainbodyBean.get("level")==null||Integer.parseInt((String)this.mainbodyBean.get("level"))>0)))
				membersMap=this.getRaterObjectCardMap(this.getObject_id());//需要受到控制的
			}
			if(!"1".equals(this.mainbodyBean.get("Un_planned"))&&Integer.parseInt((String)this.mainbodyBean.get("level"))==1&&membersMap!=null&&membersMap.size()==0)//如果本身就是原有直属领导，并且没有被指定为评价人，那么能够查看所有记录，但是不能评分 zhanghua2017-11-29
                membersMap=null;
			
			//如果启动了多评价人。那么将所有没有 任务目标的项目隐藏。zhanghua 
				for (int i = 0; i < this.p04List.size(); i++) {
					abean = (LazyDynaBean) this.p04List.get(i);
					String p0400 = (String) abean.get("p0400");
					String item_id = (String) abean.get("item_id");
					if(membersMap!=null&&!membersMap.containsKey(p0400))
						continue;
					if (map.get(item_id) != null) {
						ArrayList tempList = (ArrayList) map.get(item_id);
						tempList.add(abean);
						map.put(item_id, tempList);
					} else {
						ArrayList tempList = new ArrayList();
						tempList.add(abean);
						map.put(item_id, tempList);
					}
				}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	public boolean getIsAdjustPoint() {
		boolean flag = false;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			StringBuffer sql = new StringBuffer(
					"select count(*) from P04 where plan_id="
							+ this.plan_vo.getInt("plan_id"));
			if (this.plan_vo.getInt("object_type") == 1
					|| this.plan_vo.getInt("object_type") == 3
					|| this.plan_vo.getInt("object_type") == 4)
				sql.append(" and b0110='" + this.object_id + "'");
			else if (this.plan_vo.getInt("object_type") == 2)
				sql.append(" and a0100='" + this.object_id + "'");
			sql.append(" and state=-1");
			RowSet rowSet = dao.search(sql.toString());
			if (rowSet.next()) {
				if (rowSet.getInt(1) > 0)
					flag = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return flag;
	}

	/**
	 * 取得所有共性|个性 项目的任务
	 * 
	 * @return
	 */
	public ArrayList getCommonTask(int kind) {
		ArrayList list = new ArrayList();
		RowSet rs = null;
		try {
			StringBuffer buf = new StringBuffer();
			buf.append("select p0400,p0413,p0415*100 as p0415 from p04 where plan_id=");
			buf.append(this.plan_id);
			buf.append(" and ");
			if (this.plan_vo.getInt("object_type") == 2) {
				buf.append(" a0100='" + this.object_id + "'");
			} else {
				buf.append(" b0110='" + this.object_id + "'");
			}
			buf.append(" and ( ( state=-1 and (chg_type!=3 or chg_type is null) ) or state is null or state<>-1 )");
			buf.append(" and item_id in (select item_id from  per_template_item ");
			buf.append(" where  UPPER(template_id)='"
					+ this.plan_vo.getString("template_id").toUpperCase() + "'");
			if (kind != 3)// =3查全部
				buf.append(" and kind=" + kind);
			buf.append(")");
			ContentDAO dao = new ContentDAO(this.conn);
			rs = dao.search(buf.toString());
			while (rs.next()) {
				String temp = "";
				String p0400 = rs.getString("p0400");
				String p0413 = moveZero(rs.getString("p0413"));
				String p0415 = moveZero(rs.getString("p0415"));
				if ("1".equals(this.template_vo.getString("status")))// 权重
				{
					temp = p0400 + "/" + p0415;
				} else {
					temp = p0400 + "/" + p0413;
				}
				list.add(temp);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return list;
	}

	/**
	 * 取得 工作任务信息表中的记录
	 * 
	 * @return
	 */
	public ArrayList getP04List() {
		ArrayList list = new ArrayList();
		HashMap tempMap = new HashMap();
		try {
			ContentDAO dao = new ContentDAO(this.conn);

			StringBuffer sql = new StringBuffer("select * from P04 ");
			StringBuffer sqlWhere=new StringBuffer( "where plan_id="+this.plan_vo.getInt("plan_id"));
			if (this.plan_vo.getInt("object_type") == 1
					|| this.plan_vo.getInt("object_type") == 3
					|| this.plan_vo.getInt("object_type") == 4)
				sqlWhere.append(" and b0110='" + this.object_id + "'");
			else if (this.plan_vo.getInt("object_type") == 2)
				sqlWhere.append(" and P04.a0100='" + this.object_id + "'");

			// if(opt==2||(this.mainbodyBean!=null&&((String)this.mainbodyBean.get("status")).equalsIgnoreCase("2"))||(this.plan_vo.getInt("status")>=4&&this.plan_vo.getInt("status")!=8))

			if ((this.plan_vo.getInt("status") == 8
					|| this.plan_vo.getInt("status") == 5 || ((this.plan_vo
					.getInt("status") == 4 || this.plan_vo.getInt("status") == 6) && (planParam
					.get("NoShowTargetAdjustHistory") == null || "False"
					.equalsIgnoreCase((String) planParam
					.get("NoShowTargetAdjustHistory")))))
					&& (this.planParam.get("taskAdjustNeedNew") != null && "True".equalsIgnoreCase((String) this.planParam
							.get("taskAdjustNeedNew")))) {
				if (isShowHistoryTask != null
						&& isShowHistoryTask.trim().length() > 0
						&& "0".equals(isShowHistoryTask)) {
					sqlWhere.append(" and ( ( state=-1 and (chg_type!=3 or chg_type is null) ) or state is null or state<>-1 )");
				}
			} else if (this.plan_vo.getInt("status") >= 4
					&& this.plan_vo.getInt("status") != 8) {
				if (this.planParam.get("NoShowTargetAdjustHistory") != null
						&& "True"
								.equalsIgnoreCase((String) this.planParam
                                        .get("NoShowTargetAdjustHistory")))
					sqlWhere.append(" and ( ( state=-1 and (chg_type!=3 or chg_type is null) ) or state is null or state<>-1 )");
			}
			/*
			 * if(this.opt!=4) {
			 * if(!(this.opt==2&&!this.userView.getA0100().equalsIgnoreCase
			 * (this.object_id)&&this.objectSpFlag.equals("07")))
			 * sql.append(" and (Chg_type is null or Chg_type<>3  ) "); }
			 */
			if (this.privByOrg)// 按考核机构限制
			{
				// 在审批时，不是权限内的也可查看，但是只读
				if (this.plan_vo.getInt("status") < 4
						|| this.plan_vo.getInt("status") == 8) {
					StringBuffer a_sql = new StringBuffer("");
					a_sql.append(sqlWhere.toString() + " ");
					if (this.userView.getUnitIdByBusi("5") != null
							&& this.userView.getUnitIdByBusi("5").length() > 0
							&& !"UN"
									.equalsIgnoreCase(this.userView.getUnitIdByBusi("5")))// &&(this.plan_vo.getInt("status")!=4&&this.plan_vo.getInt("status")!=6&&this.perObject_vo.getString("sp_flag")!=null&&!this.perObject_vo.getString("sp_flag").equals("")&&!this.perObject_vo.getString("sp_flag").equals("01"))
					{
						String temp = this.userView.getUnitIdByBusi("5"); // 操作单位
																			// 5:
																			// 绩效管理
																			// 6：培训管理
																			// 7：招聘管理
						String[] arr = temp.split("`");
						StringBuffer t_buf = new StringBuffer();
						for (int i = 0; i < arr.length; i++) {
							if (arr[i] == null || "".equals(arr[i]))
								continue;
							t_buf.append(" or score_org like '"
									+ arr[i].substring(2) + "%'");
						}
						t_buf.append(" or score_org is null or score_org =''");
						a_sql.append(" and (" + t_buf.toString().substring(3)
								+ ")");
					} else {
						a_sql.append(" and (UPPER(score_org)='"
								+ this.userView.getUserOrgId()
								+ "' or UPPER(score_org)='"
								+ this.userView.getUserDeptId() + "'");
						a_sql.append(" or score_org is null or score_org ='')");
					}
					a_sql.append(" order by item_id asc,seq asc");
					this.getSelfScoreOrg(a_sql.toString());
				} else {
					if (this.userView.getUnitIdByBusi("5") != null
							&& this.userView.getUnitIdByBusi("5").length() > 0
							&& !"UN"
									.equalsIgnoreCase(this.userView.getUnitIdByBusi("5")))// &&(this.plan_vo.getInt("status")!=4&&this.plan_vo.getInt("status")!=6&&this.perObject_vo.getString("sp_flag")!=null&&!this.perObject_vo.getString("sp_flag").equals("")&&!this.perObject_vo.getString("sp_flag").equals("01"))
					{
						String temp = this.userView.getUnitIdByBusi("5"); // 操作单位
																			// 5:
																			// 绩效管理
																			// 6：培训管理
																			// 7：招聘管理
						String[] arr = temp.split("`");
						StringBuffer t_buf = new StringBuffer();
						for (int i = 0; i < arr.length; i++) {
							if (arr[i] == null || "".equals(arr[i]))
								continue;
							t_buf.append(" or score_org like '"
									+ arr[i].substring(2) + "%'");
						}
						t_buf.append(" or score_org is null or score_org =''");
						sqlWhere.append(" and (" + t_buf.toString().substring(3)
								+ ")");
					} else {
						sqlWhere.append(" and (UPPER(score_org)='"
								+ this.userView.getUserOrgId()
								+ "' or UPPER(score_org)='"
								+ this.userView.getUserDeptId() + "'");
						sqlWhere.append(" or score_org is null or score_org ='')");
					}
				}
			}
			sql.append(sqlWhere);

			sql.append(" order by item_id asc,seq asc");
			if ("True"
					.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew"))) {
				if (Sql_switcher.searchDbServer() == Constant.ORACEL)
					sql.append(",f_p0400 desc ");
				else
					sql.append(",f_p0400");
				sql.append(",chg_type desc");
			}
			
			RowSet rowSet =null;
			//************若启动了目标卡 指定多评价人************* zhanghua
			//初始化评价人信息
			HashMap raterMap=new HashMap<String, String[]>();//key:p0400 value: [评价人，批语,]
			if(this.isOpenGrade_Members()){
				StringBuffer raterSql =new StringBuffer();
				raterSql.append("select pmo.p0400, pmo.a0101,pmo.Opinion,"+Sql_switcher.dateToChar("pmo.Create_date", "yyyy-mm-dd,hh24:mi:ss")+" as Create_date from p04 inner join per_grade_members_Opinion pmo on pmo.p0400=p04.p0400  ");
				raterSql.append(sqlWhere);
				raterSql.append(" order by pmo. Create_date");
				HashMap opinionMap=new HashMap<String, StringBuffer>();
				rowSet=dao.search(raterSql.toString());
				while (rowSet.next()){//拼装评价 
					String p0400=rowSet.getString("p0400");
					if(opinionMap.containsKey(p0400)){
						StringBuffer tempstr=(StringBuffer) opinionMap.get(p0400);
						tempstr.append(rowSet.getString("a0101")+"  "+rowSet.getString("Create_date")+"\r\n");
						tempstr.append(rowSet.getString("Opinion")+"\r\n");
						
					}else{
						StringBuffer tempstr=new StringBuffer();
						tempstr.append(rowSet.getString("a0101")+"  "+rowSet.getString("Create_date")+"\r\n");
						tempstr.append(rowSet.getString("Opinion")+"\r\n");
						opinionMap.put(p0400, tempstr);
					}
				}

				raterSql=new StringBuffer("select p04.*,m.A0100 as mA0100,m.A0101 as mA0101,'' as opinion"
						+ " from p04 inner join per_grade_members m on p04.p0400=m.P0400 ");
				raterSql.append(sqlWhere);
				rowSet= dao.search(raterSql.toString()+" order by m.Create_date");
				while(rowSet.next()){//拼装姓名
					String p0400=rowSet.getString("p0400");
					if(raterMap.containsKey(p0400)){
						String [] strItem=(String[])raterMap.get(p0400);
						strItem[0]+=","+rowSet.getString("mA0101");
//						if(StringUtils.isNotBlank(rowSet.getString("opinion")))
//							strItem[1]+=rowSet.getString("opinion")+"<br>";
						strItem[2]+=rowSet.getString("mA0100")+",";
						raterMap.put(p0400, strItem);
					}else{
						String [] strItem={rowSet.getString("mA0101"),"",rowSet.getString("mA0100")};
						raterMap.put(p0400, strItem);
					}
				}
				if(raterMap.size()>0&&opinionMap.size()>0){

					Iterator iter = raterMap.entrySet().iterator();
					while (iter.hasNext()) {
						Map.Entry entry = (Map.Entry) iter.next();
						String key = (String)entry.getKey();
						String [] strItem = (String [])entry.getValue();
						if(opinionMap.containsKey(key)){
							strItem[1]=((StringBuffer)opinionMap.get(key)).toString();
						}
						
						
					}
				}
				
			}
			//拼接详情数值
			//***********************************************
			
			
			this.tempSQL = sql.toString();
			rowSet = dao.search(sql.toString());
			
			
			LazyDynaBean abean = null;
			ArrayList fieldList = DataDictionary.getFieldList("P04",
					Constant.USED_FIELD_SET);
			SimpleDateFormat fm = new SimpleDateFormat("yyyy-MM-dd");
			if (this.planParam.get("EvalCanNewPoint") != null
					&& "true"
							.equalsIgnoreCase((String) this.planParam.get("EvalCanNewPoint")))
				this.itemtypeMap = new HashMap();
			DecimalFormat myFormat = null;
			int KeepDecimal = Integer.parseInt((String) this.planParam
					.get("KeepDecimal")); // 保留小数位
			while (rowSet.next()) {
				abean = new LazyDynaBean();
				abean.set("p0400", rowSet.getString("p0400"));
				abean.set(
						"b0110",
						rowSet.getString("b0110") != null ? rowSet
								.getString("b0110") : "");
				abean.set(
						"e0122",
						rowSet.getString("e0122") != null ? rowSet
								.getString("e0122") : "");
				abean.set(
						"e01a1",
						rowSet.getString("e01a1") != null ? rowSet
								.getString("e01a1") : "");
				abean.set(
						"nbase",
						rowSet.getString("nbase") != null ? rowSet
								.getString("nbase") : "");
				abean.set(
						"a0100",
						rowSet.getString("a0100") != null ? rowSet
								.getString("a0100") : "");
				abean.set(
						"a0101",
						rowSet.getString("a0101") != null ? rowSet
								.getString("a0101") : "");
				abean.set("p0401", rowSet.getString("p0401"));
				abean.set("p0407", Sql_switcher.readMemo(rowSet, "p0407"));

				abean.set("p0413", StringUtils.isEmpty(moveZero(rowSet.getString("p0413")))?"0":moveZero(rowSet.getString("p0413")));
				abean.set("p0415", moveZero(rowSet.getString("p0415")));
				
				if(this.isOpenGrade_Members()){//若启动了多评价人 则把这些指标塞入 zhanghua 
					if(raterMap.containsKey(rowSet.getString("p0400"))){
						String [] strItem=(String [])raterMap.get(rowSet.getString("p0400"));
						String[] names = strItem[0].split(",");
						if(names.length>3) {
							abean.set("rater", names[0]+","+names[1]+","+names[2]+"...");//评价人a0101
							abean.set("rater_", strItem[0]);//评价人a0101
						}else {
							abean.set("rater", strItem[0]);//评价人a0101
							abean.set("rater_", strItem[0]);//评价人a0101
						}
						
						abean.set("opinion", strItem[1]);//评价内容
						abean.set("raterid", strItem[2]);//评价人 a0100
					}else
					{
						abean.set("rater", "");
						abean.set("opinion", "");
						abean.set("raterid", "");
					}
				}
				
				
				String summarizes = Sql_switcher.readMemo(rowSet, "summarizes");
				if (ParseXmlBo.hasRecord(summarizes))
					abean.set("hasReview", "1");
				else
					abean.set("hasReview", "0");
				if (this.selfScoreOrgMap != null) {
					if (this.selfScoreOrgMap.get(rowSet.getString("p0400")) != null) {
						abean.set("readonly", "false");
					} else {
						abean.set("readonly", "true");
					}
				} else {
					abean.set("readonly", "false");
				}
				abean.set(
						"p0421",
						rowSet.getString("p0421") != null ? rowSet
								.getString("p0421") : "");
				abean.set(
						"p0423",
						rowSet.getString("p0423") != null ? rowSet
								.getString("p0423") : "");
				abean.set(
						"p0424",
						rowSet.getString("p0424") != null ? rowSet
								.getString("p0424") : "");
				abean.set("p0425", Sql_switcher.readMemo(rowSet, "p0425"));
				abean.set(
						"chg_type",
						rowSet.getString("chg_type") != null ? rowSet
								.getString("chg_type") : "0");

				abean.set("plan_id", rowSet.getString("plan_id"));
				abean.set("item_id", rowSet.getString("item_id")==null?"":rowSet.getString("item_id"));
				abean.set("fromflag", rowSet.getString("fromflag"));
				abean.set(
						"state",
						rowSet.getString("state") != null ? rowSet
								.getString("state") : "0");
				abean.set(
						"itemtype",
						rowSet.getString("itemtype") != null ? rowSet
								.getString("itemtype") : "0");
				if (this.itemtypeMap != null) {
					this.itemtypeMap.put(
							rowSet.getString("p0400"),
							rowSet.getString("itemtype") == null ? "0" : rowSet
									.getString("itemtype"));
				}
				abean.set("processing_state",
						rowSet.getString("processing_state") == null ? "0"
								: rowSet.getString("processing_state"));
				if ("1".equals((String) abean.get("processing_state")))
					processing_state_all = "1";
				// if(this.plan_vo.getInt("object_type")==2&&((String)abean.get("state")).equals("-1"))
				// isAdjustPoint=true;
				String targetscore = rowSet.getString("targetscore") == null ? "0"
						: rowSet.getString("targetscore");
				abean.set("targetscore",
						PubFunc.round(targetscore, KeepDecimal));
				abean.set(
						"seq",
						rowSet.getString("seq") != null ? rowSet
								.getString("seq") : "0");
				for (int i = 0; i < fieldList.size(); i++) {
					FieldItem item = (FieldItem) fieldList.get(i);
					String itemid = item.getItemid();
					String str = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0400/ITEM_ID/FROMFLAG/P0401/P0407/P0413/P0415/PLAN_ID/STATE/RATER/OPINION";

					if (str.indexOf("/" + itemid.toUpperCase() + "/") != -1)
						continue;
					if ("score_org".equalsIgnoreCase(itemid)) {
						String value = rowSet.getString(itemid);
						if (value == null || "".equals(value)) {
							abean.set(itemid, "");
							abean.set(itemid + "_id", "");
						} else {
							if (AdminCode.getCodeName("UN", value) != null
									&& AdminCode.getCodeName("UN", value)
											.length() > 0) {
								abean.set(itemid,
										AdminCode.getCodeName("UN", value));
								abean.set(itemid + "_id", value);
							} else {
								abean.set(itemid,
										AdminCode.getCodeName("UM", value));
								abean.set(itemid + "_id", value);
							}

						}
					} else if ("D".equalsIgnoreCase(item.getItemtype())) {
						if (rowSet.getDate(itemid) != null)
							abean.set(itemid, fm.format(rowSet.getDate(itemid)));
						else
							abean.set(itemid, "");
					} else if ("M".equalsIgnoreCase(item.getItemtype()))
						abean.set(itemid, Sql_switcher.readMemo(rowSet, itemid)
								.replaceAll("\r\n", "<br>"));
					else {
						if (item.getCodesetid() == null
								|| "0".equals(item.getCodesetid())
								|| item.getCodesetid().trim().length() == 0) {
							if ("N".equalsIgnoreCase(item.getItemtype())
									&& item.getDecimalwidth() > 0) {
								int scale = item.getDecimalwidth();
								StringBuffer buf = new StringBuffer("#.");
								int j = 0;
								while (j < scale) {
									buf.append("#");
									j++;
								}
								myFormat = new DecimalFormat(buf.toString());
								abean.set(
										itemid,
										rowSet.getString(itemid) != null ? myFormat
												.format(rowSet
														.getDouble(itemid))
												: "");
							} else {
								abean.set(
										itemid,
										rowSet.getString(itemid) != null ? rowSet
												.getString(itemid) : "");
							}
						} else {
							if (rowSet.getString(itemid) == null)
								abean.set(itemid, "");
							else {
								abean.set(
										itemid,
										AdminCode.getCodeName(
												item.getCodesetid(),
												rowSet.getString(itemid)));

							}
						}
					}
				}
				tempMap.put(rowSet.getString("p0400"), abean);
				list.add(abean);
			}

			if (this.p04Map.size() == 0)
				this.p04Map = tempMap;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	public ArrayList getNullP04List() {
		ArrayList list = new ArrayList();
		HashMap tempMap = new HashMap();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			String sql = " select * from per_template_item where template_id='"
					+ this.plan_vo.getString("template_id")
					+ "' and  item_id not in (select "
					+ Sql_switcher.isnull("parent_id", "0")
					+ " from  per_template_item where template_id='"
					+ this.plan_vo.getString("template_id") + "' ) ";
			RowSet rowSet = dao.search(sql);
			LazyDynaBean abean = null;
			int n = 0;

			while (rowSet.next()) {
				String item_id = rowSet.getString("item_id");
				n++;

				abean = new LazyDynaBean();
				abean.set("p0400", "" + n);
				abean.set("b0110", "");
				abean.set("e0122", "");
				abean.set("e01a1", "");

				if (this.perObject_vo != null) {
					if (this.plan_vo.getInt("object_type") == 2) {
						abean.set("nbase", "Usr");
						abean.set("a0100",
								this.perObject_vo.getString("object_id"));
						abean.set("a0101", this.perObject_vo.getString("a0101"));
						abean.set("b0110", this.perObject_vo.getString("b0110"));
						abean.set("e0122", this.perObject_vo.getString("e0122"));
						abean.set("e01a1", this.perObject_vo.getString("e01a1"));
					} else {
						abean.set("nbase", "");
						abean.set("a0100", "");
						abean.set("a0101", this.perObject_vo.getString("a0101"));
						abean.set("b0110", this.perObject_vo.getString("b0110"));

					}
				} else {
					abean.set("nbase", "");
					abean.set("a0100", "");
					abean.set("a0101", "");
				}
				abean.set("p0401", "" + n);
				abean.set("p0407", "");
				abean.set("p0413", "");
				abean.set("p0415", "");
				abean.set("p0421", "");
				abean.set("p0423", "");
				abean.set("p0424", "");
				abean.set("p0425", "");
				abean.set("chg_type", "0");
				abean.set("plan_id",
						String.valueOf(this.plan_vo.getInt("plan_id")));
				abean.set("item_id", item_id);
				abean.set("fromflag", "1");
				abean.set("state", "0");
				abean.set("itemtype", "0");
				abean.set("score_org", "");
				abean.set("targetscore", "0");
				tempMap.put((String) abean.get("p0400"), abean);
				list.add(abean);
			}
			if (this.p04Map.size() == 0)
				this.p04Map = tempMap;

		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 叶子项目列表
	 * 
	 */
	public void get_LeafItemList() {
		try {

			LazyDynaBean abean = null;
			for (int i = 0; i < this.templateItemList.size(); i++) {
				abean = (LazyDynaBean) this.templateItemList.get(i);
				String parent_id = (String) abean.get("parent_id");
				if (parent_id.length() == 0) {
					// ArrayList tempList=new ArrayList();
					// tempList.add(abean);
					setLeafItemFunc(abean);
				}
			}
            String objid="";
            if (this.plan_vo.getInt("object_type") == 1
                    || this.plan_vo.getInt("object_type") == 3
                    || this.plan_vo.getInt("object_type") == 4) {
                objid=this.un_functionary ;
            }else
                objid=this.object_id;
			String isShowAllobjectCardByRater=SystemConfig.getPropertyValue("isShowAllobjectCardByRater");//是否仅展示评价人涉及的目标卡 false 或者空 仅展示涉及到的，true仅展示全部 zhanghua
				if(!"true".equalsIgnoreCase(isShowAllobjectCardByRater)&&this.isOpenGrade_Members()&&(this.opt==2||this.opt==3||this.opt==0)){
					if((this.mainbodyBean!=null&&(this.mainbodyBean.get("level")==null||Integer.parseInt((String)this.mainbodyBean.get("level"))>0))&&!objid.equalsIgnoreCase(this.userView.getA0100())){
						ArrayList list=new ArrayList();
						for(int i=0;i<leafItemList.size();i++){
							abean=(LazyDynaBean)leafItemList.get(i);
							String itemid=(String)abean.get("item_id");
							boolean ishave=false;
							if(itemToPointMap.containsKey(itemid))
								list.add(abean);
						}
						leafItemList=list;
					}
			}
			

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 递归查找叶子项目
	public void setLeafItemFunc(LazyDynaBean abean) {
		String item_id = (String) abean.get("item_id");
		String child_id = (String) abean.get("child_id");
		// 判断项目下是否有指标

		if (child_id.length() == 0) {
			this.leafItemList.add(abean);
			return;
		} else {
			LazyDynaBean bean = null;
			for (int i = 0; i < this.p04List.size(); i++) {
				bean = (LazyDynaBean) this.p04List.get(i);
				String _item_id = (String) bean.get("item_id");
				if (_item_id.equalsIgnoreCase(item_id)) {
					this.leafItemList.add(abean);
					break;
				}
			}
		}
		LazyDynaBean a_bean = null;
		for (int j = 0; j < this.templateItemList.size(); j++) {
			a_bean = (LazyDynaBean) this.templateItemList.get(j);
			String parent_id = (String) a_bean.get("parent_id");
			if (parent_id.equals(item_id))
				setLeafItemFunc(a_bean);
		}
	}

	/*************************************/

	/**
	 * 叶子项目列表
	 * 
	 */
	public void get_LeafItemList2() {
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			HashMap leafItemMap = new HashMap();
			RowSet rowSet = dao
					.search("select distinct ptp.item_id from per_template_item pti ,per_template_point ptp where pti.item_id=ptp.item_id and pti.template_id='"
							+ this.plan_vo.getString("template_id") + "'");
			while (rowSet.next())
				leafItemMap.put(rowSet.getString("item_id"), "1");

			LazyDynaBean abean = null;
			for (int i = 0; i < this.templateItemList.size(); i++) {
				abean = (LazyDynaBean) this.templateItemList.get(i);
				String parent_id = (String) abean.get("parent_id");
				if (parent_id.length() == 0) {
					// ArrayList tempList=new ArrayList();
					// tempList.add(abean);
					setLeafItemFunc(abean, leafItemMap);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 递归查找叶子项目
	public void setLeafItemFunc(LazyDynaBean abean, HashMap leafItemMap) {
		String item_id = (String) abean.get("item_id");
		String child_id = (String) abean.get("child_id");
		// 判断项目下是否有指标

		if (child_id.length() == 0) {
			this.leafItemList.add(abean);
			return;
		}
		if (child_id.length() != 0 && leafItemMap.get(item_id) != null)
			this.leafItemList.add(abean);

		LazyDynaBean a_bean = null;
		for (int j = 0; j < this.templateItemList.size(); j++) {
			a_bean = (LazyDynaBean) this.templateItemList.get(j);
			String parent_id = (String) a_bean.get("parent_id");
			if (parent_id.equals(item_id))
				setLeafItemFunc(a_bean, leafItemMap);
		}
	}

	/************************************/

	public RecordVo getPlan_vo() {
		return plan_vo;
	}

	public void setPlan_vo(RecordVo plan_vo) {
		this.plan_vo = plan_vo;
	}

	/**
	 * //递归查找叶子项目 public void setLeafItemFunc(ArrayList itemList) { LazyDynaBean
	 * abean=null; LazyDynaBean a_bean=null; for(int i=0;i<itemList.size();i++)
	 * { abean=(LazyDynaBean)itemList.get(i); String
	 * item_id=(String)abean.get("item_id"); String
	 * child_id=(String)abean.get("child_id"); if(child_id.length()==0) {
	 * this.leafItemList.add(abean); continue; }
	 * 
	 * ArrayList tempList=new ArrayList(); for(int
	 * j=0;j<this.templateItemList.size();j++) {
	 * a_bean=(LazyDynaBean)this.templateItemList.get(j); String
	 * parent_id=(String)a_bean.get("parent_id"); if(parent_id.equals(item_id))
	 * tempList.add(a_bean); } if(tempList.size()>0) setLeafItemFunc(tempList);
	 * } }
	 */

	/******************************* end ***************************/

	/**
	 * 取得人员信息
	 */
	public LazyDynaBean getPersonnelInfo(String dbname, String a0100) {
		LazyDynaBean abean = new LazyDynaBean();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rowSet = dao
					.search("select b0110,e0122,e01a1,object_id,a0101 from per_object where object_id='"
							+ a0100
							+ "' and plan_id="
							+ this.plan_vo.getInt("plan_id"));
			if (rowSet.next()) {
				abean.set(
						"b0110",
						rowSet.getString("b0110") != null ? rowSet
								.getString("b0110") : "");
				abean.set(
						"e0122",
						rowSet.getString("e0122") != null ? rowSet
								.getString("e0122") : "");
				abean.set(
						"e01a1",
						rowSet.getString("e01a1") != null ? rowSet
								.getString("e01a1") : "");
				abean.set("a0100", rowSet.getString("object_id"));
				abean.set(
						"a0101",
						rowSet.getString("a0101") != null ? rowSet
								.getString("a0101") : "");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return abean;
	}

	/**
	 * 引入绩效指标
	 * 
	 * @param pointValue
	 * @param Fromflag
	 *            1,自建（不进KPI库） 2,来源KPI指标 3,岗位职责 4,来源于素质型库
	 */
	public void importPerPoint(String pointValue, String Fromflag,
			String itemid, String a_p0400) {

		try {
			ContentDAO dao = new ContentDAO(this.conn);
			String[] temps = pointValue.split(",");

			LazyDynaBean personnelInfo = null;
			if (this.plan_vo.getInt("object_type") == 2)
				personnelInfo = getPersonnelInfo("Usr", this.object_id);
			ArrayList list = new ArrayList();
			String TargetMustFillItem = "";
			if (this.planParam.get("TargetMustFillItem") != null
					&& ((String) this.planParam.get("TargetMustFillItem"))
							.trim().length() > 0)
				TargetMustFillItem = ((String) this.planParam
						.get("TargetMustFillItem")).trim().toLowerCase();
			for (int i = 0; i < temps.length; i++) {
				if (temps[i].length() == 0)
					continue;
				String[] temp = temps[i].split("``");

				RecordVo vo = new RecordVo("P04");
				IDGenerator idg = new IDGenerator(2, conn);
				String id = idg.getId("P04.P0400");
				vo.setInt("p0400", Integer.parseInt(id));
				if (this.plan_vo.getInt("object_type") == 2) {
					vo.setString("b0110", (String) personnelInfo.get("b0110"));
					vo.setString("e0122", (String) personnelInfo.get("e0122"));
					vo.setString("e01a1", (String) personnelInfo.get("e01a1"));
					vo.setString("nbase", "Usr");
					vo.setString("a0100", (String) personnelInfo.get("a0100"));
					vo.setString("a0101", (String) personnelInfo.get("a0101"));
				} else {
					vo.setString("b0110", this.object_id);
					String tp = AdminCode.getCodeName("UN", this.object_id);
					if (tp != null && tp.length() > 0)
						vo.setString("a0101", tp);
					else
						vo.setString("a0101",
								AdminCode.getCodeName("UM", this.object_id));
				}
				vo.setString("p0401", temp[0]);
				vo.setString("p0407", temp[1]);
				vo.setInt("plan_id", this.plan_vo.getInt("plan_id"));
				if ("0".equals(this.template_vo.getString("status"))) // 如果分值为0，进行必填指标校验时，这条记录就校验不出来了，所以当有必填指标时，分值就不能为0
				{
					if (TargetMustFillItem.trim().length() > 1) {

					} else {
						vo.setDouble("p0413", 0);
					}
					vo.setDouble("p0415", 1);
				} else if ("1".equals(this.template_vo.getString("status"))) // 权重
				{
					vo.setDouble("p0413",
							this.template_vo.getDouble("topscore"));
					if (TargetMustFillItem.trim().length() > 1) {

					} else {
						vo.setDouble("p0415", 0);
					}
				}
				vo.setInt("item_id", Integer.parseInt(itemid));
				vo.setInt("fromflag", Integer.parseInt(Fromflag));
				vo.setInt("state", 0);
				if (a_p0400 == null || a_p0400.length() == 0)
					vo.setInt("seq", getP0400Seq("", 1) + i);
				else
					vo.setInt("seq", getP0400Seq(a_p0400, 1));
				if ("1".equals(model)
						&& "02".equalsIgnoreCase(this.objectSpFlag)
						&& "true"
								.equalsIgnoreCase((String) this.planParam.get("allowLeadAdjustCard"))
						&& !this.userView.getA0100().equalsIgnoreCase(
								this.un_functionary)) {
					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);

					if ("False"
							.equals((String) this.planParam.get("taskAdjustNeedNew"))) {

						double p0413 = vo.getDouble("p0413");
						double p0415 = vo.getDouble("p0415");

						/*
						 * if(this.template_vo.getString("status").equals("1"))
						 * //权重 vo.setDouble("p0413", p0413); else
						 * vo.setDouble("p0413", 0); vo.setDouble("p0415", 0);
						 */
						vo.setDouble("p0421", p0413);
						vo.setDouble("p0423", p0415);

					}

				}
				// if(model.equals("2")&&((String)this.planParam.get("taskAdjustNeedNew")).equals("True")&&(this.objectSpFlag.equalsIgnoreCase("07")||(this.objectSpFlag.equalsIgnoreCase("01")&&this.isAdjustPoint)))
				if ("2".equals(model)
						&& ("07".equalsIgnoreCase(this.objectSpFlag)
								|| ("01".equalsIgnoreCase(this.objectSpFlag) && (this.isAdjustPoint || "1"
										.equals(this.processing_state_all))) || "03"
								.equalsIgnoreCase(this.objectSpFlag))) {
					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);
				}
				if ("1".equals(model)
						&& (this.un_functionary.equalsIgnoreCase(this.userView
								.getA0100()) || "1".equals((String) this.planParam
								.get("targetMakeSeries")))
						&& "True"
								.equals((String) this.planParam.get("taskAdjustNeedNew"))
						&& ("07".equalsIgnoreCase(this.objectSpFlag) || ("01"
								.equalsIgnoreCase(this.objectSpFlag) && this.isAdjustPoint))) {
					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);
				}

				if ("3".equals(model)
						&& (isAdjustPoint || !"01".equals(this.objectSpFlag))) {

					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);
				}

				if ("False"
						.equals((String) this.planParam.get("taskAdjustNeedNew"))) {
					if ("1".equals(model) || "2".equals(model)) {
						if ((this.userView.getA0100().equals(
								this.un_functionary) && "1".equals(model))
								|| (this.userView.getA0100().equals(
										this.object_id) && "2".equals(model))) // 是负责人
																				// ||本人
						{
							// 有调整记录的 || 已批计划新建的
							if (isAdjustPoint
									|| "03".equalsIgnoreCase(this.objectSpFlag)) {
								vo.setInt("state", -1);
								vo.setInt("chg_type", 2);
							} else {
								vo.setInt("state", 0);
								vo.setInt("chg_type", 0);
							}
						} else {
							if (!"01".equalsIgnoreCase(this.objectSpFlag)) {
								vo.setInt("state", -1);
								vo.setInt("chg_type", 2);
							} else {
								vo.setInt("state", 0);
								vo.setInt("chg_type", 0);
							}
						}
					} else if ("3".equals(model)) {
						if (!"01".equalsIgnoreCase(this.objectSpFlag)) {
							vo.setInt("state", -1);
							vo.setInt("chg_type", 2);
						} else {
							vo.setInt("state", 0);
							vo.setInt("chg_type", 0);
						}
					}
				} else if ("1".equals(model)
						&& this.userView.getA0100().equals(this.un_functionary)
						&& "03".equalsIgnoreCase(this.objectSpFlag)) {
					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);
				}
				if ("7".equals(this.model)
						&& ("07".equalsIgnoreCase(this.objectSpFlag) || (isAdjustPoint && "01"
								.equalsIgnoreCase(this.objectSpFlag)))) {
					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);
				}

				vo.setInt("processing_state", 0);
				vo.setString("p0424",
						this.userView.getDbname() + this.userView.getA0100()
								+ "/" + this.userView.getUserFullName());
				list.add(vo);
			}
			dao.addValueObject(list);

			StringBuffer sql = new StringBuffer("");
			// 指标解释指标
			if (this.point_explain_item.trim().length() > 0) {
				sql.setLength(0);
				if (Sql_switcher.searchDbServer() == Constant.ORACEL) {
					sql.append("update p04 set "
							+ this.point_explain_item
							+ "=(select description from per_point where p04.p0401=per_point.point_id)");
					sql.append(" where ");
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql.append(" b0110='" + this.object_id + "'");
					else if (this.plan_vo.getInt("object_type") == 2)// 人员
						sql.append(" a0100='" + this.object_id + "'");
					sql.append(" and plan_id=" + this.plan_vo.getInt("plan_id"));
					//------------------------------------
					sql.append(" and exists(");
					sql.append(" select null from  per_point where p04.p0401=per_point.point_id ");
					sql.append(")");
					//-----------------------------------
				} else {
					sql.append("update p04 set p04."
							+ this.point_explain_item
							+ "=per_point.description from p04,per_point where p04.p0401=per_point.point_id ");
					sql.append(" and ");
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql.append(" b0110='" + this.object_id + "'");
					else if (this.plan_vo.getInt("object_type") == 2)// 人员
						sql.append(" a0100='" + this.object_id + "'");
					sql.append(" and plan_id=" + this.plan_vo.getInt("plan_id"));
				}
				dao.update(sql.toString());
			}

			// 指标说明指标
			if (this.point_evaluate_item.trim().length() > 0) {
				sql.setLength(0);
				if (Sql_switcher.searchDbServer() == Constant.ORACEL) {
					sql.append("update p04 set "
							+ this.point_evaluate_item
							+ "=(select gd_principle from per_point where p04.p0401=per_point.point_id)");
					sql.append(" where ");
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql.append(" b0110='" + this.object_id + "'");
					else if (this.plan_vo.getInt("object_type") == 2)// 人员
						sql.append(" a0100='" + this.object_id + "'");
					sql.append(" and plan_id=" + this.plan_vo.getInt("plan_id"));
					//------------------------------------
					sql.append(" and exists(");
					sql.append(" select null from  per_point where p04.p0401=per_point.point_id ");
					sql.append(")");
					//-----------------------------------
				} else {

					sql.append("update p04 set p04."
							+ this.point_evaluate_item
							+ "=per_point.gd_principle from p04,per_point where p04.p0401=per_point.point_id ");
					sql.append(" and ");
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql.append(" b0110='" + this.object_id + "'");
					else if (this.plan_vo.getInt("object_type") == 2)// 人员
						sql.append(" a0100='" + this.object_id + "'");
					sql.append(" and plan_id=" + this.plan_vo.getInt("plan_id"));
				}
				dao.update(sql.toString());
			}

			// if(model.equals("2")&&((this.objectSpFlag.equalsIgnoreCase("03")&&((String)this.planParam.get("taskAdjustNeedNew")).equals("False"))||(this.objectSpFlag.equalsIgnoreCase("01")&&isAdjustPoint)))
			// //我的目标
			if ("2".equals(model) && "03".equalsIgnoreCase(this.objectSpFlag)) {
				String a0100 = "";
				if (this.plan_vo.getInt("object_type") == 2)
					a0100 = (String) personnelInfo.get("a0100");
				else
					a0100 = this.object_id;
				dao.update("update per_object set trace_sp_flag='01' where object_id='"
						+ a0100
						+ "' and plan_id="
						+ this.plan_vo.getInt("plan_id"));
				dao.update("update per_object set sp_flag='01' where object_id='"
						+ a0100
						+ "' and plan_id="
						+ this.plan_vo.getInt("plan_id"));

			}
			if ("1".equals(model) && "03".equalsIgnoreCase(this.objectSpFlag))// ((this.objectSpFlag.equalsIgnoreCase("03")&&((String)this.planParam.get("taskAdjustNeedNew")).equals("False"))||(this.objectSpFlag.equalsIgnoreCase("01")&&isAdjustPoint)))
																				// //我的目标
			{
				if (this.un_functionary.equalsIgnoreCase(this.userView
						.getA0100())
						|| "1"
								.equals((String) this.planParam.get("targetMakeSeries"))) {
					dao.update("update per_object set trace_sp_flag='01' where object_id='"
							+ this.object_id
							+ "' and plan_id="
							+ this.plan_vo.getInt("plan_id"));
					dao.update("update per_object set sp_flag='01' where object_id='"
							+ this.object_id
							+ "' and plan_id="
							+ this.plan_vo.getInt("plan_id"));

				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public int getP0400Seq(String p0400, int size) {
		int seq = 0;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			if (p0400 != null && p0400.length() > 0) {
				RowSet rowSet = dao
						.search("select seq,F_P0400 from p04 where p0400="
								+ p0400);
				if (rowSet.next()) {
					int F_P0400 = 0;
					if (rowSet.getString(2) != null)
						F_P0400 = rowSet.getInt(2);
					if (rowSet.getString(1) != null && F_P0400 == 0)
						seq = rowSet.getInt(1);
					else if (F_P0400 != 0) {
						while (true) {
							rowSet = dao
									.search("select seq,F_P0400 from p04 where p0400="
											+ F_P0400);
							if (rowSet.next()) {
								if (rowSet.getString(2) != null)
									F_P0400 = rowSet.getInt(2);
								else {
									seq = rowSet.getInt(1);
									break;
								}
							} else {
								String sql = "select "
										+ Sql_switcher.isnull("max(seq)", "0")
										+ "+1 from p04 where a0100='"
										+ this.object_id + "' and plan_id="
										+ this.plan_vo.getInt("plan_id");
								if (plan_vo.getInt("object_type") == 1
										|| plan_vo.getInt("object_type") == 3
										|| plan_vo.getInt("object_type") == 4)
									sql = "select "
											+ Sql_switcher.isnull("max(seq)",
													"0")
											+ "+1 from p04 where b0110='"
											+ this.object_id + "' and plan_id="
											+ this.plan_vo.getInt("plan_id");
								rowSet = dao.search(sql);
								if (rowSet.next()) {
									seq = rowSet.getInt(1);
								}
							}
						}

					}

				}
				if (plan_vo.getInt("object_type") == 1
						|| plan_vo.getInt("object_type") == 3
						|| plan_vo.getInt("object_type") == 4) {
					dao.update("update p04 set seq="
							+ Sql_switcher.isnull("seq", "0") + "+" + size
							+ " where   b0110='" + this.object_id
							+ "'  and plan_id="
							+ this.plan_vo.getInt("plan_id") + " and "
							+ Sql_switcher.isnull("seq", "0") + ">=" + seq);
				} else
					dao.update("update p04 set seq="
							+ Sql_switcher.isnull("seq", "0") + "+" + size
							+ " where   a0100='" + this.object_id
							+ "'  and plan_id="
							+ this.plan_vo.getInt("plan_id") + " and "
							+ Sql_switcher.isnull("seq", "0") + ">=" + seq);
			} else {
				String sql = "select " + Sql_switcher.isnull("max(seq)", "0")
						+ "+1 from p04 where a0100='" + this.object_id
						+ "' and plan_id=" + this.plan_vo.getInt("plan_id");
				if (plan_vo.getInt("object_type") == 1
						|| plan_vo.getInt("object_type") == 3
						|| plan_vo.getInt("object_type") == 4)
					sql = "select " + Sql_switcher.isnull("max(seq)", "0")
							+ "+1 from p04 where b0110='" + this.object_id
							+ "' and plan_id=" + this.plan_vo.getInt("plan_id");
				RowSet rowSet = dao.search(sql);
				if (rowSet.next()) {
					seq = rowSet.getInt(1);
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return seq;
	}

	/**
	 * 保存目标任务
	 * 
	 * @param taskDescribeList
	 * @param itemType
	 *            =0,=1为加扣分指标，在打分时可维护
	 */
	public void saveTask(ArrayList taskDescribeList, String a_p0400,
			String operator, int itemType) throws GeneralException {
		try {

			int seq = getP0400Seq(a_p0400, 1);
			ContentDAO dao = new ContentDAO(this.conn);
			LazyDynaBean abean = null;
			String p0400 = "";
			
			// 调整目标卡时先把原目标卡的数据查出来，然后再原数据的基础上进行调整，否则会丢数据（如：标准分值）  chent 20180123 start
			RecordVo vo = new RecordVo("P04");
			if ("edit".equals(operator)) {
					for (int i = 0; i < taskDescribeList.size(); i++) {
						abean = (LazyDynaBean) taskDescribeList.get(i);
						String itemid = (String) abean.get("itemid");
						String value = (String) abean.get("value");
						if ("p0400".equalsIgnoreCase(itemid))
							p0400 = value;
					}
					
					vo.setInt("p0400", Integer.parseInt(p0400));
					vo = dao.findByPrimaryKey(vo);
			}
			// 调整目标卡时先把原目标卡的数据查出来，然后再原数据的基础上进行调整，否则会丢数据（如：标准分值）  chent 20180123 end
			
			for (int i = 0; i < taskDescribeList.size(); i++) {
				abean = (LazyDynaBean) taskDescribeList.get(i);
				String itemid = (String) abean.get("itemid");
				if("rater".equalsIgnoreCase(itemid))
					continue;
				String itemtype = (String) abean.get("itemtype");
				String codesetid = (String) abean.get("codesetid");
				String itemdesc = (String) abean.get("itemdesc");
				String value = (String) abean.get("value");
				String decimalwidth = (String) abean.get("decimalwidth");
				String state = (String) abean.get("state");
				String viewvalue = (String) abean.get("viewvalue");
				String itemlength = (String) abean.get("itemlength");
				if ("p0400".equalsIgnoreCase(itemid))
					p0400 = value;
				if (value != null && value.length() > 0) {
					if ("score_org".equalsIgnoreCase(itemid)) {
						if ("root".equalsIgnoreCase(value))
							value = "";
						if (viewvalue == null || "".equals(viewvalue.trim()))
							value = "";
						if (value.toUpperCase().indexOf("UM") != -1
								|| value.toUpperCase().indexOf("UN") != -1
								|| value.toUpperCase().indexOf("@K") != -1)
							vo.setString(itemid, value.substring(2));
						else
							vo.setString(itemid, value);

					} else if ("N".equalsIgnoreCase(itemtype)) {
						if ("p0415".equalsIgnoreCase(itemid)) {
							vo.setDouble(itemid.toLowerCase(),
									Double.parseDouble(value) / 100);
						} else {
							if ("0".equals(decimalwidth)) {
								if (value.length() > Integer
										.parseInt(itemlength)
										&& !"state".equalsIgnoreCase(itemid))
									throw GeneralExceptionHandler
											.Handle(new Exception(itemdesc
													+ "填入的数据超出了系统指定的长度"));
								vo.setInt(itemid.toLowerCase(),
										Integer.parseInt(value));
							} else {
								String[] temps = value.split("\\.");
								if (temps[0].trim().length() > Integer
										.parseInt(itemlength))
									throw GeneralExceptionHandler
											.Handle(new Exception(itemdesc
													+ "填入的数据超出了系统指定的长度"));
								if (temps.length == 2) {
									if (temps[1].trim().length() > Integer
											.parseInt(decimalwidth))
										throw GeneralExceptionHandler
												.Handle(new Exception(itemdesc
														+ "填入的数据超出了系统指定的长度"));
								}

								vo.setDouble(itemid.toLowerCase(),
										Double.parseDouble(value));
							}
						}
					} else if ("A".equalsIgnoreCase(itemtype)
							|| "M".equalsIgnoreCase(itemtype)) {
						if ("1".equals(state) && "A".equalsIgnoreCase(itemtype)
								&& codesetid != null && codesetid.length() != 0
								&& !"0".equals(codesetid)
								&& viewvalue.trim().length() == 0)
							value = "";
						vo.setString(itemid.toLowerCase(), value);
					} else if ("D".equalsIgnoreCase(itemtype)) {
						Calendar d = Calendar.getInstance();
						String[] temp = value.split("-");
						d.set(Calendar.YEAR, Integer.parseInt(temp[0]));
						d.set(Calendar.MONTH, Integer.parseInt(temp[1]) - 1);
						d.set(Calendar.DATE, Integer.parseInt(temp[2]));
						vo.setDate(itemid.toLowerCase(), d.getTime());
					}
				} else {
					if ("itemtype".equalsIgnoreCase(itemid)) {
						vo.setInt("itemtype", itemType);
					}
				}
			}
			// private String model=""; // 1:团对 2:我的目标 3:目标制订 4.目标评估 5.目标结果
			if ("new".equals(operator)) {
				vo.setInt("seq", seq);
				dao.deleteValueObject(vo);

				if (("4".equals(model) || "2".equals(model) || "1"
						.equals(model))
						&& ("07".equalsIgnoreCase(this.objectSpFlag)
								|| "03".equalsIgnoreCase(this.objectSpFlag) || ("01"
								.equalsIgnoreCase(this.objectSpFlag) && (this.isAdjustPoint || "1"
								.equals(this.processing_state_all))))) // &&((String)this.planParam.get("taskAdjustNeedNew")).equals("True"))
				{
					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);
				}

				if ("3".equals(model)
						&& "True"
								.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew"))
						&& (!"01".equals(this.objectSpFlag) || isAdjustPoint)) {
					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);
				}

				if (("4".equals(model) || "2".equals(model) || "1"
						.equals(model))
						&& (("03".equalsIgnoreCase(this.objectSpFlag) && "False".equals((String) this.planParam
								.get("taskAdjustNeedNew"))) || ("01"
								.equalsIgnoreCase(this.objectSpFlag) && isAdjustPoint && "False".equals((String) this.planParam
								.get("taskAdjustNeedNew"))))) // 如果考核对象状态为批准
																				// 并且
																				// 任务调整需新建任务项＝false
																				// :调整目标卡
				{
					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);

					double p0413 = vo.getDouble("p0413");
					double p0415 = vo.getDouble("p0415");

					if ("1".equals(this.template_vo.getString("status"))) // 权重
						vo.setDouble("p0413", p0413);
					else
						vo.setDouble("p0413", 0);
					// vo.setDouble("p0415", 0);
					vo.setDouble("p0421", p0413);
					vo.setDouble("p0423", p0415);
				} else if ("3".equals(model)
						&& "False"
								.equals((String) this.planParam.get("taskAdjustNeedNew"))
						&& (!"01".equals(this.objectSpFlag) || isAdjustPoint)) {
					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);
					double p0413 = vo.getDouble("p0413");
					double p0415 = vo.getDouble("p0415");

					if ("1".equals(this.template_vo.getString("status"))) // 权重
						vo.setDouble("p0413", p0413);
					else
						vo.setDouble("p0413", 0);
					// vo.setDouble("p0415", 0);
					vo.setDouble("p0421", p0413);
					vo.setDouble("p0423", p0415);

				} else if ("1".equals(model)
						&& "02".equalsIgnoreCase(this.objectSpFlag)
						&& "true"
								.equalsIgnoreCase((String) this.planParam.get("allowLeadAdjustCard"))
						&& !this.userView.getA0100().equalsIgnoreCase(
								this.un_functionary)) {
					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);
					if ("False"
							.equals((String) this.planParam.get("taskAdjustNeedNew"))) {

						double p0413 = vo.getDouble("p0413");
						double p0415 = vo.getDouble("p0415");

						if ("1".equals(this.template_vo.getString("status"))) // 权重
							vo.setDouble("p0413", p0413);
						else
							vo.setDouble("p0413", 0);
						// vo.setDouble("p0415", 0);
						vo.setDouble("p0421", p0413);
						vo.setDouble("p0423", p0415);

					}
				} else if (("3".equals(model) && !this.userView.getA0100()
						.equals(this.object_id))
						|| ("1".equals(model) && !this.userView.getA0100()
								.equals(this.un_functionary))) {
					if ("1"
							.equals((String) this.planParam.get("targetMakeSeries")) && isAdjustPoint) {
						vo.setInt("state", -1);
						vo.setInt("chg_type", 2);
						if ("False"
								.equals((String) this.planParam.get("taskAdjustNeedNew"))) {
							double p0413 = vo.getDouble("p0413");
							double p0415 = vo.getDouble("p0415");

							if ("1"
									.equals(this.template_vo.getString("status"))) // 权重
								vo.setDouble("p0413", p0413);
							else
								vo.setDouble("p0413", 0);
							// vo.setDouble("p0415", 0);
							vo.setDouble("p0421", p0413);
							vo.setDouble("p0423", p0415);
						}
					}
				}

				if ("False"
						.equals((String) this.planParam.get("taskAdjustNeedNew"))) {
					if ("4".equals(model) || "1".equals(model)
							|| "2".equals(model)) {
						if ((this.userView.getA0100().equals(
								this.un_functionary) && "1".equals(model))
								|| (this.userView.getA0100().equals(
										this.object_id) && "2".equals(model))) // 是负责人
																				// ||本人
						{
							// 有调整记录的 || 已批计划新建的 || 驳回&&调整不新建
							if (isAdjustPoint
									|| "03".equalsIgnoreCase(this.objectSpFlag)) {
								vo.setInt("state", -1);
								vo.setInt("chg_type", 2);
							} else {
								vo.setInt("state", 0);
								vo.setInt("chg_type", 0);
							}
						} else {
							if (!"01".equalsIgnoreCase(this.objectSpFlag)) {
								vo.setInt("state", -1);
								vo.setInt("chg_type", 2);
							} else {
								vo.setInt("state", 0);
								vo.setInt("chg_type", 0);
							}
						}
					} else if ("3".equals(model)) {
						if (!"01".equalsIgnoreCase(this.objectSpFlag)) {
							vo.setInt("state", -1);
							vo.setInt("chg_type", 2);
						} else {
							vo.setInt("state", 0);
							vo.setInt("chg_type", 0);
						}
					}
				}

				if ("7".equals(this.model)
						&& ("07".equalsIgnoreCase(this.objectSpFlag) || (isAdjustPoint && "01"
								.equalsIgnoreCase(this.objectSpFlag)))) {
					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);
				}
				if ("7".equals(this.model)
						&& "True"
								.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew")) && this.opt == 1
						&& ("03".equals(this.objectSpFlag) || isAdjustPoint)) {
					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);
				}

				if ("0".equals(this.template_vo.getString("status"))) {
					vo.setDouble("p0415", 1);
				}
				vo.setInt("processing_state", 0);

				if ("True"
						.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew"))) {
					// 考核对象为驳回 或 驳回后调整过变为起草状态，新建任务时，自动加上调整时间
					if ("07".equals(this.objectSpFlag)
							|| ("01".equals(this.objectSpFlag) && this.isAdjustPoint))
						vo.setDate("p0427", new Date());
				} else {
					// 考核对象为批准 或 有调整记录，新建任务时，自动加上调整时间
					if (this.isAdjustPoint || "03".equals(this.objectSpFlag))
						vo.setDate("p0427", new Date());
				}
				if (vo.hasAttribute("itemtype"))
					vo.setInt("itemtype", itemType);
				if (itemType == 1)// 加扣分指标不要权重和分值
				{
					vo.setInt("p0415", 0);
					vo.setInt("p0413", 0);
				}
				SimpleDateFormat df = new SimpleDateFormat(
						"yyyy-MM-dd HH:mm:ss");//
				vo.setDate("opttime", df.format(new Date()));
				vo.setString("optname", this.userView.getUserFullName());
				dao.addValueObject(vo);
			} else if ("edit".equals(operator)) {
				RecordVo vo2 = new RecordVo("P04");
				vo2.setInt("p0400", vo.getInt("p0400"));
				vo2 = dao.findByPrimaryKey(vo2);

				double p0413 = 0;
				double p0415 = 0;
				p0413 = vo2.getDouble("p0421");
				p0415 = vo2.getDouble("p0423");

				vo.setInt("seq", vo2.getInt("seq"));
				dao.deleteValueObject(vo);

				// 调整非新建 编辑 processing_state！=1 的任务权重或分值时 写入 调整后的值中
				if ("07".equals(this.objectSpFlag)
						|| "01".equals(this.objectSpFlag)
						|| (("3".equals(model)
								&& !this.userView.getA0100().equals(
										this.object_id) && opt == 1
								&& "02".equals(objectSpFlag) && "1".equals((String) this.planParam
								.get("targetMakeSeries"))))) {
					if (this.opt == 1
							&& this.isAdjustPoint
							&& "False"
									.equalsIgnoreCase((String) this.planParam
                                            .get("taskAdjustNeedNew"))
							&& vo2.getInt("state") == -1) {
						if ("0".equals(this.template_vo.getString("status"))) // 分值
						{
							vo.setDouble("p0421", vo.getDouble("p0413"));
							vo.setDouble("p0413", vo2.getDouble("p0413"));
						} else {

							vo.setDouble("p0423", vo.getDouble("p0415"));
							vo.setDouble("p0415", vo2.getDouble("p0415"));
							vo.setDouble("p0413", Double.parseDouble(String
									.valueOf(this.template_vo
											.getDouble("topscore"))));
						}
					}
				}

				if ("0".equals(this.template_vo.getString("status"))) {
					vo.setDouble("p0415", 1);
				}

				vo.setInt("state", vo2.getInt("state"));
				if (vo2.getString("chg_type") != null
						&& (vo2.getInt("chg_type") == 1
								|| vo2.getInt("chg_type") == 2 || vo2
								.getInt("chg_type") == 3))
					vo.setInt("chg_type", vo2.getInt("chg_type"));

				if (vo2.getString("processing_state") == null)
					vo.setInt("processing_state", 0);
				else
					vo.setInt("processing_state",
							vo2.getInt("processing_state"));

				if (vo2.getString("summarizes") != null)
					vo.setString("summarizes", vo2.getString("summarizes"));

				if (vo2.getString("opinions") != null)
					vo.setString("opinions", vo2.getString("opinions"));

				if (vo.hasAttribute("itemtype"))
					vo.setInt("itemtype", itemType);
				if (itemType == 1)// 加扣分指标不要权重和分值
				{
					vo.setInt("p0415", 0);
					vo.setInt("p0413", 0);
				}

				SimpleDateFormat df = new SimpleDateFormat(
						"yyyy-MM-dd HH:mm:ss");//
				vo.setDate("opttime", df.format(new Date()));
				vo.setString("optname", this.userView.getUserFullName());
				dao.addValueObject(vo);
			}

			// if(opt==1&&model.equals("2")&&((this.objectSpFlag.equalsIgnoreCase("03")&&((String)this.planParam.get("taskAdjustNeedNew")).equals("False"))||(this.objectSpFlag.equalsIgnoreCase("01")&&((String)this.planParam.get("taskAdjustNeedNew")).equals("False")&&isAdjustPoint)))
			// //我的目标
			if (itemType == 0)// 在修改加扣分指标时，不进行下面操作
			{
				String plan_id = vo.getString("plan_id");
				if (this.plan_vo.getInt("status") != 4
						&& this.plan_vo.getInt("status") != 5
						&& this.plan_vo.getInt("status") != 6
						&& "True"
								.equalsIgnoreCase((String) this.planParam
                                        .get("TargetAllowAdjustAfterApprove"))
						&& ("2".equals(model) || "1".equals(model))
						&& (opt == 1 || opt == 2)) // 我的目标
				{
					if (plan_vo.getInt("object_type") == 1
							|| plan_vo.getInt("object_type") == 3
							|| plan_vo.getInt("object_type") == 4) {
						object_id = vo.getString("b0110");

						LazyDynaBean un_functionaryBean = getMainbodyBean(
								plan_id, object_id);
						if (un_functionaryBean != null) {
							String un_functionary = (String) un_functionaryBean
									.get("mainbody_id");
							if (this.userView.getA0100().equalsIgnoreCase(
									un_functionary)) {
								dao.update("update per_object set trace_sp_flag='01',sp_flag='01' where sp_flag='03' and object_id='"
										+ object_id
										+ "' and plan_id="
										+ plan_id);

								/** 将考核主体的审批状态，全部清掉 */
								StringBuffer sql = new StringBuffer("");
								sql.append("update per_mainbody set sp_flag=null,sp_date=null where plan_id=");
								sql.append(plan_id + " and object_id='"
										+ object_id + "'");
								dao.update(sql.toString());
							}
						}
					} else {
						String a0100 = vo.getString("a0100");
						dao.update("update per_object set trace_sp_flag='01',sp_flag='01' where sp_flag='03' and  object_id='"
								+ a0100 + "' and plan_id=" + plan_id);

						/** 将考核主体的审批状态，全部清掉 */
						StringBuffer sql = new StringBuffer("");
						sql.append("update per_mainbody set sp_flag=null,sp_date=null where plan_id=");
						sql.append(plan_id + " and object_id='" + a0100 + "'");
						dao.update(sql.toString());
					}
				}
			}
			if (p0400 != null && !"".equals(p0400))
				this.calcFormulaField(p0400);
		} catch (Exception e) {
			e.printStackTrace();
			throw GeneralExceptionHandler.Handle(e);
		}
	}

	/**
	 * 取得目标所属项目属性
	 * 
	 * @param p0400
	 * @return
	 */
	public String getItemKind(String p0400) {
		String kind = "1";
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rowSet = dao
					.search("select kind from per_template_item where item_id=(select item_id from p04 where p0400="
							+ p0400 + ")");
			if (rowSet.next())
				kind = rowSet.getString(1) != null ? rowSet.getString(1) : "1";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return kind;
	}

	/**
	 * 取得非跟踪指标
	 *
	 * @param fieldList
	 * @param planid
	 * @param p0400
	 * @return
	 */
	public ArrayList getAdjustBeforePointList(ArrayList fieldList, String p0400) {
		ArrayList list = new ArrayList();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			HashMap valueMap = getTaskValue(p0400, fieldList);
			LazyDynaBean abean = null;

			String TargetMustFillItem = "";
			if (this.planParam.get("TargetMustFillItem") != null
					&& ((String) this.planParam.get("TargetMustFillItem"))
							.trim().length() > 0)
				TargetMustFillItem = ((String) this.planParam
						.get("TargetMustFillItem")).trim().toLowerCase();
			String TargetCalcItem = ""; // 目标卡计算指标属性，P04中指标，以逗号分隔，顺序从前到后
			if (planParam.get("TargetCalcItem") != null
					&& ((String) planParam.get("TargetCalcItem")).trim()
							.length() > 0)
				TargetCalcItem = ","
						+ ((String) planParam.get("TargetCalcItem")).trim();
			AnalysePlanParameterBo bo = new AnalysePlanParameterBo(this.conn);
			Hashtable ht_table = bo.analyseParameterXml();
			if ("".equals(TargetCalcItem) && ht_table != null
					&& ht_table.get("TargetCollectItem") != null)
				TargetCalcItem = (String) ht_table.get("TargetCollectItem");
			for (int i = 0; i < fieldList.size(); i++) {
				abean = new LazyDynaBean();
				FieldItem item = (FieldItem) fieldList.get(i);
				String itemid = item.getItemid();
				if("rater".equalsIgnoreCase(itemid))//目标卡调整的时候 不显示评价人 zhanghua
					continue;
				String itemtype = item.getItemtype();
				String codesetid = item.getCodesetid();
				abean.set("itemid", itemid);
				abean.set("itemtype", itemtype);
				abean.set("codesetid", codesetid != null ? codesetid : "0");
				abean.set("itemid", itemid);
				abean.set("itemdesc", item.getItemdesc());
				abean.set("itemlength", String.valueOf(item.getItemlength()));
				abean.set("decimalwidth",
						String.valueOf(item.getDecimalwidth()));
				abean.set("value", (String) valueMap.get(itemid));
				if (TargetCalcItem.indexOf(("," + itemid.toUpperCase() + ",")) != -1)// 是计算指标，在编辑时，只能看
				{
					abean.set("mustFill", "0");
					abean.set("isCalc", "1");
				} else {
					abean.set("isCalc", "0");
					if (TargetMustFillItem.length() > 0) {
						if (("," + TargetMustFillItem + ",").indexOf(","
								+ itemid.toLowerCase() + ",") != -1) {
							abean.set("mustFill", "1");
						} else
							abean.set("mustFill", "0");
					} else
						abean.set("mustFill", (item.isFillable() ? "1" : "0"));
				}

				if ("0".equals(item.getState()))
					continue;
				if ("P0424".equalsIgnoreCase(itemid)
						|| "P0421".equalsIgnoreCase(itemid)
						|| "P0423".equalsIgnoreCase(itemid)
						|| "P0415".equalsIgnoreCase(itemid)
						|| "P0413".equalsIgnoreCase(itemid)
						|| "P0401".equalsIgnoreCase(itemid))
					continue;
				if ("p0407".equalsIgnoreCase(itemid)
						|| "p0427".equalsIgnoreCase(itemid)
						|| "p0425".equalsIgnoreCase(itemid)
						|| "B0110".equalsIgnoreCase(itemid)
						|| "E0122".equalsIgnoreCase(itemid)
						|| "E01A1".equalsIgnoreCase(itemid)
						|| "A0101".equalsIgnoreCase(itemid))
					continue;
				if (("," + this.TargetTraceItem.toUpperCase() + ",")
						.indexOf("," + itemid.toUpperCase() + ",") != -1)
					continue;

				if (this.TargetDefineItem.length() > 0
						&& this.TargetDefineItem.indexOf(","
								+ itemid.toUpperCase() + ",") == -1)
					continue;

				if (this.TargetCollectItem != null
						&& this.TargetCollectItem.length() > 0) {
					if (("," + this.TargetCollectItem.toUpperCase() + ",")
							.indexOf("," + itemid.toUpperCase() + ",") != -1) {
						continue;
					}
				}

				if ("A".equals(itemtype) && codesetid.length() > 0
						&& !"0".equals(codesetid)
						&& ((String) valueMap.get(itemid)).length() > 0) {
					if ("score_org".equalsIgnoreCase(itemid)) {
						if (AdminCode.getCodeName("UN",
								(String) valueMap.get(itemid)) != null
								&& !"".equals(
                                AdminCode.getCodeName("UN",
                                        (String) valueMap.get(itemid)))) {
							abean.set("viewvalue", AdminCode.getCodeName("UN",
									(String) valueMap.get(itemid)));
						} else {
							abean.set("viewvalue", AdminCode.getCodeName("UM",
									(String) valueMap.get(itemid)));
						}
					} else
						abean.set("viewvalue", AdminCode.getCodeName(codesetid,
								(String) valueMap.get(itemid)));
				} else
					abean.set("viewvalue", "");

				list.add(abean);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return list;
	}

	/**
	 * 取得 任务描述详细信息列表
	 */
	public ArrayList getTaskDescribeList(ArrayList fieldList, String planid,
			String objectid, String dbname, String p0400, String object_type,
			String aitemid) {
		ArrayList list = new ArrayList();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			HashMap valueMap = getTaskValue(p0400, fieldList);
			LazyDynaBean abean = null;
			LazyDynaBean personnelInfo = null;
			if ("2".equals(object_type))
				personnelInfo = getPersonnelInfo(dbname, objectid);
			String id = "";
			if (valueMap.size() == 0) {
				IDGenerator idg = new IDGenerator(2, conn);
				id = idg.getId("P04.P0400");
			}
			String TargetMustFillItem = "";
			if (this.planParam.get("TargetMustFillItem") != null
					&& ((String) this.planParam.get("TargetMustFillItem"))
							.trim().length() > 0)
				TargetMustFillItem = ((String) this.planParam
						.get("TargetMustFillItem")).trim().toLowerCase();

			String TargetCalcItem = ""; // 目标卡计算指标属性，P04中指标，以逗号分隔，顺序从前到后
			if (planParam.get("TargetCalcItem") != null
					&& ((String) planParam.get("TargetCalcItem")).trim()
							.length() > 0)
				TargetCalcItem = ","
						+ ((String) planParam.get("TargetCalcItem")).trim();
			AnalysePlanParameterBo bo = new AnalysePlanParameterBo(this.conn);
			Hashtable ht_table = bo.analyseParameterXml();
			if ("".equals(TargetCalcItem) && ht_table != null
					&& ht_table.get("TargetCollectItem") != null)
				TargetCalcItem = ","
						+ (String) ht_table.get("TargetCollectItem");
			for (int i = 0; i < fieldList.size(); i++) {
				abean = new LazyDynaBean();
				FieldItem item = (FieldItem) fieldList.get(i);
				String itemid = item.getItemid();
				
				String itemtype = item.getItemtype();
				String codesetid = item.getCodesetid();
				if("rater".equalsIgnoreCase(itemid)&&!this.isOpenGrade_Members()) //新建 编辑时，若没有启动多评价人 则不显示评价人行 zhanghua
					continue;
				abean.set("itemid", itemid);
				abean.set("itemtype", itemtype);
				abean.set("codesetid", codesetid != null ? codesetid : "0");
				abean.set("itemid", itemid);
				abean.set("itemdesc", item.getItemdesc());
				abean.set("itemlength", String.valueOf(item.getItemlength()));
				abean.set("decimalwidth",
						String.valueOf(item.getDecimalwidth()));
				abean.set("state", item.getState());
				
				if("rater".equalsIgnoreCase(itemid))// zhanghua
					abean.set("state", "0");
				
				abean.set("itemmust", "0"); //必填的采集指标
				if (TargetCalcItem.indexOf(("," + itemid.toUpperCase() + ",")) != -1)// 是计算指标，在编辑时，只能看
				{
					abean.set("fillable", "0");
					abean.set("isCalc", "1");
				} else {
					abean.set("isCalc", "0");
					if (TargetMustFillItem.length() > 0) {
						if (("," + TargetMustFillItem + ",").indexOf(","
								+ itemid.toLowerCase() + ",") != -1) {
							abean.set("fillable", "1");
						} else
							abean.set("fillable", "0");
					} else
						abean.set("fillable", item.isFillable() ? "1" : "0"); // 是否是必填项
				}
				if (valueMap.size() == 0) {
					if ("score_org".equalsIgnoreCase(itemid)) {
						abean.set("value", "");
						abean.set("viewvalue", "");
					} else if ("P0400".equalsIgnoreCase(itemid)) {

						abean.set("value", id);
						abean.set("viewvalue", "");
					} else if ("B0110".equalsIgnoreCase(itemid)) {
						if ("1".equals(object_type) || "3".equals(object_type)
								|| "4".equals(object_type)) {
							abean.set("value", objectid);
						} else {
							abean.set("value",
									(String) personnelInfo.get("b0110"));
							abean.set("viewvalue", AdminCode.getCodeName(
									codesetid,
									(String) personnelInfo.get("b0110")));
						}
					} else if ("E0122".equalsIgnoreCase(itemid)) {
						if ("2".equals(object_type)) {
							abean.set("viewvalue", AdminCode.getCodeName(
									codesetid,
									(String) personnelInfo.get("e0122")));
							abean.set("value",
									(String) personnelInfo.get("e0122"));
						} else
							abean.set("value", "");
					} else if ("E01A1".equalsIgnoreCase(itemid)) {
						if ("2".equals(object_type)) {
							abean.set("value",
									(String) personnelInfo.get("e01a1"));
							abean.set("viewvalue", AdminCode.getCodeName(
									codesetid,
									(String) personnelInfo.get("e01a1")));
						} else
							abean.set("value", "");
					} else if ("NBASE".equalsIgnoreCase(itemid)) {
						if ("2".equals(object_type))
							abean.set("value", dbname);
						else
							abean.set("value", "");
					} else if ("A0100".equalsIgnoreCase(itemid)) {
						if ("2".equals(object_type))
							abean.set("value",
									(String) personnelInfo.get("a0100"));
						else
							abean.set("value", "");
					} else if ("A0101".equalsIgnoreCase(itemid)) {
						if ("2".equals(object_type))
							abean.set("value",
									(String) personnelInfo.get("a0101"));
						else {
							String temp = AdminCode.getCodeName("UN", objectid);
							if (temp != null && temp.length() > 0)
								abean.set("value", temp);
							else
								abean.set("value",
										AdminCode.getCodeName("UM", objectid));
						}
					} else if ("P0401".equalsIgnoreCase(itemid)) {
						abean.set("value", id);
						abean.set("state", "0");
					} else if ("P0424".equalsIgnoreCase(itemid)) {

						abean.set("value", this.userView.getDbname()
								+ this.userView.getA0100() + "/"
								+ this.userView.getUserFullName());
						abean.set("state", "0");
					} else if ("Plan_id".equalsIgnoreCase(itemid)) {
						abean.set("value", planid);
					} else if ("state".equalsIgnoreCase(itemid)) {
						if ("2".equals(this.model)
								&& "07".equals(this.objectSpFlag)
								&& "True"
										.equalsIgnoreCase((String) this.planParam
                                                .get("taskAdjustNeedNew")))
							abean.set("value", "-1");
						else
							abean.set("value", "0");
					} else if ("Chg_type".equalsIgnoreCase(itemid)) {
						if ("2".equals(this.model)
								&& "07".equals(this.objectSpFlag)
								&& "True"
										.equalsIgnoreCase((String) this.planParam
                                                .get("taskAdjustNeedNew")))
							abean.set("value", "2");
					} else if ("Fromflag".equalsIgnoreCase(itemid)) {
						abean.set("value", "1");
					}
					/** 评分时新建的任务特殊处理一下 */
					else if (this.plan_vo.getInt("status") == 4
							&& ("p0415".equalsIgnoreCase(itemid) || "p0413"
									.equalsIgnoreCase(itemid))) {
						if ("0".equals(this.template_vo.getString("status"))) // 分值
						{
							if ("p0415".equalsIgnoreCase(itemid)) {
								abean.set("value", "100");
							} else {
								if (TargetMustFillItem.trim().length() > 1
										|| item.isFillable())
									abean.set("value", "");
								else
									abean.set("value", "0");
							}
						} else if ("1".equals(
                                this.template_vo.getString("status"))) // 权重
						{
							if ("p0413".equalsIgnoreCase(itemid)) {
								abean.set("value",
										this.template_vo.getDouble("topscore")
												+ "");
							} else {
								if (TargetMustFillItem.trim().length() > 1
										|| item.isFillable())
									abean.set("value", "");
								else
									abean.set("value", "0");
							}
						}
						abean.set("viewvalue", "");
					} else {
						abean.set("value", "");
						abean.set("viewvalue", "");
					}
					if ("item_id".equals(itemid) && aitemid != null
							&& aitemid.length() > 0)
						abean.set("value", aitemid);

				} else {
					if ("P0415".equalsIgnoreCase(itemid)) {
						DecimalFormat myformat1 = new DecimalFormat(
								"########.####");//
						String rank = (String) valueMap.get(itemid);
						if (rank == null || rank.trim().length() == 0) {
							if (TargetMustFillItem.trim().length() > 1
									|| item.isFillable())
								rank = "";
							else
								rank = "0";
						} else
							rank = rank.trim();
						String temp = "".equals(rank) ? "" : (myformat1
								.format(Double.parseDouble(rank) * 100));
						abean.set("value", temp);
					} else
						abean.set("value", (String) valueMap.get(itemid));
					if ("A".equals(itemtype) && codesetid.length() > 0
							&& !"0".equals(codesetid)
							&& ((String) valueMap.get(itemid)).length() > 0) {
						if ("score_org".equalsIgnoreCase(itemid)) {
							String value = (String) valueMap.get(itemid);
							if (value != null && !"".equals(value)) {
								if (AdminCode.getCodeName("UN", value) != null
										&& AdminCode.getCodeName("UN", value)
												.length() > 0) {
									abean.set("viewvalue",
											AdminCode.getCodeName("UN", value));
								} else {
									abean.set("viewvalue",
											AdminCode.getCodeName("UM", value));
								}
							} else {
								abean.set("viewvalue", "");
							}
						} else
							abean.set("viewvalue", AdminCode.getCodeName(
									codesetid, (String) valueMap.get(itemid)));
					} else
						abean.set("viewvalue", "");
					if ("P0401".equalsIgnoreCase(itemid)) {
						abean.set("state", "0");
					}
					if ("P0424".equalsIgnoreCase(itemid)) {
						abean.set("value", this.userView.getDbname()
								+ this.userView.getA0100() + "/"
								+ this.userView.getUserFullName());
						abean.set("state", "0");
					}
				}
				if ("P0407".equalsIgnoreCase(itemid)) {
					if (this.planParam.get("TaskNameDesc") != null
							&& !""
									.equals((String) this.planParam.get("TaskNameDesc"))) {
						abean.set("itemdesc",
								(String) this.planParam.get("TaskNameDesc"));
					} else {
						if (item == null
								|| "任务内容"
										.equalsIgnoreCase(item.getItemdesc().trim())) {
							if (SystemConfig.getPropertyValue("clientName") != null
									&& "zglt".equalsIgnoreCase(
                                    SystemConfig.getPropertyValue(
                                            "clientName"))) // 中国联通
								abean.set("itemdesc", "工作目标");
							else
								abean.set("itemdesc", ResourceFactory
										.getProperty("jx.khplan.point"));
						} else
							abean.set("itemdesc", item.getItemdesc());
						// abean.set("itemdesc",
						// ResourceFactory.getProperty("jx.khplan.point"));
					}
				}
				if ("P0413".equalsIgnoreCase(itemid)
						|| "P0415".equalsIgnoreCase(itemid)) {
					if ("0".equals(this.template_vo.getString("status"))) // 分值
					{
						if ("P0413".equalsIgnoreCase(itemid)) {
							boolean _flag = true;
							// 加扣发 ＋ 评估时可新建指标 首钢要求这样2009-12-18
							if (this.planParam.get("EvalCanNewPoint") != null
									&& "true"
											.equalsIgnoreCase((String) this.planParam
                                                    .get("EvalCanNewPoint"))
									&& "4".equals(scoreflag)) {
								FieldItem _item = DataDictionary
										.getFieldItem("p0413");
								if (!item.isVisible())
									_flag = false;
							}
							if (_flag)
								abean.set("state", "1");
						}
						if ("P0415".equalsIgnoreCase(itemid)) {
							abean.set("state", "0");
							if (this.plan_vo.getInt("status") != 4) {
								if (TargetMustFillItem.trim().length() > 1
										|| item.isFillable())
									abean.set("value", "");
								else
									abean.set("value", "0");
							}
						}
					}
					if ("1".equals(this.template_vo.getString("status"))) // 权重
					{
						if ("P0413".equalsIgnoreCase(itemid)) {
							abean.set("state", "0");
							abean.set("value", String.valueOf(this.template_vo
									.getDouble("topscore")));
						}
						if ("P0415".equalsIgnoreCase(itemid)) {
							abean.set("state", "1");
							if (valueMap.size() == 0
									&& this.plan_vo.getInt("status") != 4) {
								if (TargetMustFillItem.trim().length() > 1
										|| item.isFillable())
									abean.set("value", "");
								else
									abean.set("value", "0");
							}
						}
					}
					if (this.opt == 1
							&& valueMap.size() > 0
							&& "False"
									.equalsIgnoreCase((String) this.planParam
                                            .get("taskAdjustNeedNew"))
							&& this.isAdjustPoint) // 4:调整目标卡 (调整非新建)
					{

						if ("-1"
								.equalsIgnoreCase((String) valueMap.get("state"))) {
							if ("P0413".equalsIgnoreCase(itemid)) {
								abean.set("value",
										(String) valueMap.get("p0421"));
							}
							if ("P0415".equalsIgnoreCase(itemid)) {
								DecimalFormat myformat1 = new DecimalFormat(
										"########.####");//
								String rank = (String) valueMap.get("p0423");
								if (rank == null || rank.trim().length() == 0) {
									if (TargetMustFillItem.trim().length() > 1
											|| item.isFillable())
										rank = "";
									else
										rank = "0";
								} else
									rank = rank.trim();
								String temp = "".equals(rank) ? ""
										: (myformat1.format(Double
												.parseDouble(rank) * 100));
								abean.set("value", temp);

							}
						}
					}
				}
				if ("p0425".equalsIgnoreCase(itemid)
						|| "B0110".equalsIgnoreCase(itemid)
						|| "E0122".equalsIgnoreCase(itemid)
						|| "E01A1".equalsIgnoreCase(itemid)
						|| "A0101".equalsIgnoreCase(itemid))
					abean.set("state", "0");

				if ("P0421".equalsIgnoreCase(itemid)
						|| "P0423".equalsIgnoreCase(itemid))
					abean.set("state", "0");

				if ("01".equals(this.objectSpFlag)) {//起草
					if (("," + this.TargetTraceItem.toUpperCase() + ",")
							.indexOf("," + itemid.toUpperCase() + ",") != -1)
						abean.set("state", "0");

					if ("p0427".equalsIgnoreCase(itemid)) {
						abean.set("state", "0");
					}

				} else if ("02".equals(this.objectSpFlag)) {//报批
					// if(((model.equals("3")&&!this.userView.getA0100().equals(this.object_id))||(model.equals("1")&&!this.un_functionary.equals(this.userView.getA0100())))&&opt==1&&((String)this.planParam.get("allowLeadAdjustCard")).equalsIgnoreCase("True"))
					if ((("3".equals(model)) || ("1".equals(model) && !this.un_functionary
							.equals(this.userView.getA0100())))
							&& opt == 1
							&& "True"
									.equalsIgnoreCase((String) this.planParam
                                            .get("allowLeadAdjustCard"))) {
						if (("," + this.TargetTraceItem.toUpperCase() + ",")
								.indexOf("," + itemid.toUpperCase() + ",") != -1)
							abean.set("state", "0");
						if ("p0427".equalsIgnoreCase(itemid)) {
							abean.set("state", "0");
						}
					} else if (("," + this.TargetTraceItem.toUpperCase() + ",")
							.indexOf("," + itemid.toUpperCase() + ",") == -1)
						abean.set("state", "0");
				} else if ("03".equals(this.objectSpFlag)) {
					if (this.opt == 0
							&& ("," + this.TargetTraceItem.toUpperCase() + ",")
									.indexOf("," + itemid.toUpperCase() + ",") == -1)
						abean.set("state", "0");
					if (this.opt == 1
							&& ("," + this.TargetTraceItem.toUpperCase() + ",")
									.indexOf("," + itemid.toUpperCase() + ",") != -1)
						abean.set("state", "0");

					// 已报批或已批并且是目标卡代制订 JinChunhai 2013.03.19
					if ("7".equals(this.model)
							&& ("03".equalsIgnoreCase(this.objectSpFlag))
							&& this.opt == 1) {
						if (this.editCardSp != null
								&& this.editCardSp.trim().length() > 0
								&& "edit".equalsIgnoreCase(this.editCardSp)) {
							if (("," + this.TargetTraceItem.toUpperCase() + ",")
									.indexOf("," + itemid.toUpperCase() + ",") != -1)
								abean.set("state", "1");
						}
					}
				} else if ("07".equals(this.objectSpFlag)) {
					if (("," + this.TargetTraceItem.toUpperCase() + ",")
							.indexOf("," + itemid.toUpperCase() + ",") != -1)
						abean.set("state", "0");
					if ("p0427".equalsIgnoreCase(itemid)) {
						abean.set("state", "0");
					}
				}

				if ("03".equals(this.objectSpFlag)
						&& this.opt == 2
						&& (this.plan_vo.getInt("status") == 4 || this.plan_vo
								.getInt("status") == 6)) {
					if (("," + this.TargetTraceItem.toUpperCase() + ",")
							.indexOf("," + itemid.toUpperCase() + ",") == -1)
						abean.set("state", "0");
				}
				
				if ("01".equals(this.objectSpFlag)) {//起草
                    if (("," + this.TargetCollectItem.toUpperCase() + ",")
                            .indexOf("," + itemid.toUpperCase() + ",") != -1)
                        abean.set("state", "0");

                    if ("p0427".equalsIgnoreCase(itemid)) {
                        abean.set("state", "0");
                    }

                } else if ("02".equals(this.objectSpFlag)) {//报批
                    // if(((model.equals("3")&&!this.userView.getA0100().equals(this.object_id))||(model.equals("1")&&!this.un_functionary.equals(this.userView.getA0100())))&&opt==1&&((String)this.planParam.get("allowLeadAdjustCard")).equalsIgnoreCase("True"))
                    if ((("3".equals(model)) || ("1".equals(model) && !this.un_functionary
                            .equals(this.userView.getA0100())))
                            && opt == 1
                            && "True"
                                    .equalsIgnoreCase((String) this.planParam
                                            .get("allowLeadAdjustCard"))) {
                        if (("," + this.TargetCollectItem.toUpperCase() + ",")
                                .indexOf("," + itemid.toUpperCase() + ",") != -1)
                            abean.set("state", "0");
                        if ("p0427".equalsIgnoreCase(itemid)) {
                            abean.set("state", "0");
                        }
                    } else if (("," + this.TargetCollectItem.toUpperCase() + ",")
                            .indexOf("," + itemid.toUpperCase() + ",") == -1)
                        abean.set("state", "0");
                } else if ("03".equals(this.objectSpFlag)) {
                    // 已报批或已批并且是目标卡代制订 JinChunhai 2013.03.19
                    if ("7".equals(this.model)
                            && ("03".equalsIgnoreCase(this.objectSpFlag))
                            && this.opt == 1) {
                        if (this.editCardSp != null
                                && this.editCardSp.trim().length() > 0
                                && "edit".equalsIgnoreCase(this.editCardSp)) {
                            if (("," + this.TargetCollectItem.toUpperCase() + ",")
                                    .indexOf("," + itemid.toUpperCase() + ",") != -1)
                                abean.set("state", "1");
                        }
                    }
                } else if ("07".equals(this.objectSpFlag)) {
                    if (("," + this.TargetCollectItem.toUpperCase() + ",")
                            .indexOf("," + itemid.toUpperCase() + ",") != -1)
                        abean.set("state", "0");
                    if ("p0427".equalsIgnoreCase(itemid)) {
                        abean.set("state", "0");
                    }
                }
				/*
				 * if((this.objectSpFlag.equals("03")&&valueMap.size()>0)||(this.
				 * opt==2&&this.isAdjustPoint)) {
				 * if((this.opt==2||this.opt==3)&&
				 * (","+this.TargetTraceItem.toUpperCase
				 * ()+",").indexOf(","+itemid.toUpperCase()+",")==-1)
				 * abean.set("state", "0"); } else {
				 * if((","+this.TargetTraceItem
				 * .toUpperCase()+",").indexOf(","+itemid
				 * .toUpperCase()+",")!=-1) abean.set("state", "0"); }
				 */

				/*// 如果计划状态不为评估
				if (!(this.plan_vo.getInt("status") >= 4)) {//启动之前
					
					 * if(this.planParam.get("TargetTraceEnabled")!=null&&((String
					 * )
					 * this.planParam.get("TargetTraceEnabled")).equalsIgnoreCase
					 * ("true")) {
					 * //if(this.TargetCollectItem.trim().length()>0)
					 * if(this.planParam
					 * .get("TargetCollectItem")!=null&&((String
					 * )this.planParam.get
					 * ("TargetCollectItem")).trim().length()>0) {
					 * if((","+(((String
					 * )this.planParam.get("TargetCollectItem"))
					 * ).toUpperCase()+","
					 * ).indexOf(","+itemid.toUpperCase()+",")!=-1) {
					 * abean.set("state", "0"); }
					 * 
					 * } }
					 
					if (this.TargetCollectItem != null
							&& this.TargetCollectItem.length() > 0) {
						if (("," + this.TargetCollectItem.toUpperCase() + ",")
								.indexOf("," + itemid.toUpperCase() + ",") != -1) {
							abean.set("state", "0");
						}
					}
				} else if(this.plan_vo.getInt("status")==8){
				    if (this.TargetCollectItem != null
                            && this.TargetCollectItem.length() > 0) {
                        if (("," + this.TargetCollectItem.toUpperCase() + ",")
                                .indexOf("," + itemid.toUpperCase() + ",") != -1) {
                            if (this.TargetCollectItem != null
                                    && this.TargetCollectItem.length() > 0) {
                                if (("," + this.TargetCollectItem.toUpperCase() + ",")
                                        .indexOf("," + itemid.toUpperCase() + ",") != -1) {
                                    abean.set("state", "1");
                                }
                            }
                        }
                    }
				}*/
    			 LoadXml loadxml = new LoadXml(this.conn, this.plan_id);
                 Hashtable params = loadxml.getDegreeWhole();
                 String targetCollectItemMust = (String) params.get("TargetCollectItemMust");
                 
                 boolean flag=false;
                 if(SystemConfig.getPropertyValue("noMustFillPoint")!=null&&SystemConfig.getPropertyValue("noMustFillPoint").length()>0)
                 {
                	 String _temp=","+SystemConfig.getPropertyValue("noMustFillPoint").toLowerCase()+",";
                	 if(valueMap.size() > 0&&valueMap.get("p0401")!=null&&_temp.indexOf(","+((String)valueMap.get("p0401")).toLowerCase()+",")!=-1)
                	 {
                		flag=true;
                	 }
                 }
                 if(flag) //如果在system.properties里设置了参数noMustFillPoint=WZHR,TDHZ ，则此指标任务的跟踪指标即使设置了必填，也可不判断
                	 abean.set("noFillCollect","1");
                 else
                	 abean.set("noFillCollect","0");
                	 
                 if (targetCollectItemMust != null
                         && targetCollectItemMust.length() > 0) {
                     if (("," + targetCollectItemMust.toUpperCase() + ",")
                             .indexOf("," + itemid.toUpperCase() + ",") != -1) {
                         abean.set("itemmust", "1"); //必填的采集指标
                     }
                 }
                 
                 
				if (this.TargetDefineItem.length() > 0
						&& this.TargetDefineItem.indexOf(","
								+ itemid.toUpperCase() + ",") == -1)
					abean.set("state", "0");
				list.add(abean);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return list;
	}

	// 取得个性化项目
	public String getLeaveScope(String itemid, String status, String p0400,
			String object_id, String plan_objectType, String plan_id) {
		String info = "";
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			this.plan_vo = getPlanVo(plan_id);
			this.template_vo = get_TemplateVo();
			LoadXml loadxml = new LoadXml(this.conn,
					String.valueOf(this.plan_vo.getInt("plan_id")));
			this.planParam = loadxml.getDegreeWhole();
			/** 当设置严格按照项目权重标准制订或者按项目权重逐级计算时不显示分数范围 */
			if ("1".equals(this.template_vo.getString("status"))
					&& this.planParam.get("ScoreFromItem") != null
					&& "true"
							.equalsIgnoreCase((String) this.planParam.get("ScoreFromItem")))
				this.ScoreFromItem = true;
			if ((this.getIsLimitPointValue() != null && "true".equalsIgnoreCase(this
					.getIsLimitPointValue()))
					|| this.ScoreFromItem) {
				info = " ";
				return info;
			}
			String sql = "";
			RowSet rowSet = null;
			/*
			 * String
			 * sql="select isnull(sum(p0413),0) from p04 where item_id="+itemid
			 * +"  and (Chg_type is null or Chg_type<>3  )   and p0400!="
			 * +p0400+" and plan_id="+plan_id; if(status.equals("1"))
			 * sql="select isnull(sum(p0415),0) from p04 where item_id="
			 * +itemid+"  and (Chg_type is null or Chg_type<>3  )  and p0400!="
			 * +p0400+" and plan_id="+plan_id; if(plan_objectType.equals("1"))
			 * //部门 { sql+=" and b0110='"+object_id+"'"; } else
			 * if(plan_objectType.equals("2")) //人员 {
			 * 
			 * sql+=" and a0100='"+object_id+"'"; } RowSet
			 * rowSet=dao.search(sql); float sum_value=0; if(rowSet.next())
			 * sum_value=rowSet.getFloat(1);
			 */
			float sum_value = 0;

			if ("1".equals(this.template_vo.getString("status"))) // 权重
			{
				String value1 = "0";
				String value2 = "0";
				sql = "select sum(" + Sql_switcher.isnull("p0415", "0")
						+ ")  a from p04 where  item_id=" + itemid
						+ "   and p0400!=" + p0400 + " and plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and ( state!=-1 or state is null ) ";
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql += " and b0110='" + object_id + "'";
				else if (this.plan_vo.getInt("object_type") == 2) // 人员
					sql += " and a0100='" + object_id + "'";
				rowSet = dao.search(sql);
				if (rowSet.next())
					value1 = rowSet.getString(1) != null ? rowSet.getString(1)
							: "0";

				sql = " select sum("
						+ Sql_switcher.isnull("p0423", "0")
						+ ")  a from p04 where  item_id="
						+ itemid
						+ "   and p0400!="
						+ p0400
						+ " and plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and state=-1 and ( Chg_type is null or Chg_type!=3 ) ";
				if ("True"
						.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew")))
					sql = " select sum("
							+ Sql_switcher.isnull("p0415", "0")
							+ ")  a from p04 where  item_id="
							+ itemid
							+ "   and p0400!="
							+ p0400
							+ " and plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and state=-1 and ( Chg_type is null or Chg_type!=3 ) ";

				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql += " and b0110='" + object_id + "'";
				else if (this.plan_vo.getInt("object_type") == 2) // 人员
					sql += " and a0100='" + object_id + "'";
				rowSet = dao.search(sql);
				if (rowSet.next())
					value2 = rowSet.getString(1) != null ? rowSet.getString(1)
							: "0";
				sum_value = Float.parseFloat(PubFunc.add(value1, value2, 4));
			} else {
				String value1 = "0";
				String value2 = "0";
				sql = "select sum(" + Sql_switcher.isnull("p0413", "0")
						+ ")  a from p04 where  item_id=" + itemid
						+ "   and p0400!=" + p0400 + " and plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and ( state!=-1 or state is null ) ";
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql += " and b0110='" + object_id + "'";
				else if (this.plan_vo.getInt("object_type") == 2) // 人员
					sql += " and a0100='" + object_id + "'";
				rowSet = dao.search(sql);
				if (rowSet.next())
					value1 = rowSet.getString(1) != null ? rowSet.getString(1)
							: "0";

				sql = " select sum("
						+ Sql_switcher.isnull("p0421", "0")
						+ ")  a from p04 where  item_id="
						+ itemid
						+ "   and p0400!="
						+ p0400
						+ " and plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and state=-1 and ( Chg_type is null or Chg_type!=3 ) ";
				if ("True"
						.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew")))
					sql = " select sum("
							+ Sql_switcher.isnull("p0413", "0")
							+ ")  a from p04 where  item_id="
							+ itemid
							+ "   and p0400!="
							+ p0400
							+ " and plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and state=-1 and ( Chg_type is null or Chg_type!=3 ) ";

				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql += " and b0110='" + object_id + "'";
				else if (this.plan_vo.getInt("object_type") == 2) // 人员
					sql += " and a0100='" + object_id + "'";
				rowSet = dao.search(sql);
				if (rowSet.next())
					value2 = rowSet.getString(1) != null ? rowSet.getString(1)
							: "0";
				sum_value = Float.parseFloat(PubFunc.add(value1, value2, 4));
			}

			float template_value = 0f;
			String temp = "";
			sql = "select * from per_template_item where template_id='"
					+ this.plan_vo.getString("template_id") + "' ";
			sql+=" and item_id="+ itemid;  //20160812 dengcan
			if ("1".equals(status))
				sql += " and "+Sql_switcher.isnull("rank", "0")+"=0 ";
			else
			    //项目分值如果不设置的话会存在为null的情况，所以得判断score is null 的时候
				sql += " and "+Sql_switcher.isnull("score","0")+"=0 ";
			rowSet = dao.search(sql);

			if (rowSet.next()) {
				temp = getIndividualValue(status, object_id, plan_objectType,
						plan_id, p0400);
			} else {
				rowSet = dao
						.search("select rank,score,itemdesc from per_template_item where item_id="
								+ itemid);
				String itemdesc = "";
				if (rowSet.next()) {
					if ("0".equals(status))
						template_value = rowSet.getFloat("score");
					else
						template_value = rowSet.getFloat("rank");
					itemdesc = rowSet.getString("itemdesc");
				}
				DecimalFormat myformat1 = new DecimalFormat("########.####");//
				String score = PubFunc.subtract(String.valueOf(template_value),
						String.valueOf(sum_value), 4);

				if ("1".equals(status)) {
					temp = (myformat1.format(Double.parseDouble(score) * 100));
				} else {
					temp = myformat1.format(Double.parseDouble(score));
				}
			}
			// info="(0~"+temp+(status.equals("0")?"":"%")+")";
			if ("0".equals(status)){
				if(temp.indexOf("-")!=-1){//分值是负的，改为超过 并改为红色醒目字体  zhaoxg add 2014-12-31
					info =  temp.replaceFirst("-", "<font color=red>(超过&nbsp;") + "&nbsp;分)</font>";	
				}else{
					info = "(还剩&nbsp;" + temp + "&nbsp;分)";				
				}
			}else{
				if(temp.indexOf("-")!=-1){
					info =  temp.replaceFirst("-", "<font color=red>(超过&nbsp;") + "%)</font>";	
				}else{
					info = "(还剩&nbsp;" + temp + "%)";
				}				
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return info;
	}

	/**
	 * 返回 无定义权重或分值项目的 最大值
	 * 
	 * @param itemid
	 * @param status
	 * @param object_id
	 * @param plan_objectType
	 * @param plan_id
	 * @return
	 */
	public String getIndividualValue(String status, String object_id,
			String plan_objectType, String plan_id, String p0400) {
		String value = "";
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			/*
			 * String
			 * sql="select isnull(sum(p0413),0) from p04 where  p0400!="+p0400
			 * +" and  plan_id="+plan_id; if(status.equals("1"))
			 * sql="select isnull(sum(p0415),0) from p04 where  p0400!="
			 * +p0400+" and  plan_id="+plan_id; if(plan_objectType.equals("1"))
			 * //部门 { sql+=" and b0110='"+object_id+"'"; } else
			 * if(plan_objectType.equals("2")) //人员 {
			 * 
			 * sql+=" and a0100='"+object_id+"'"; } RowSet
			 * rowSet=dao.search(sql); float sum_value=0; if(rowSet.next())
			 * sum_value=rowSet.getFloat(1);
			 */
			float sum_value = 0;
			String sql = "";
			RowSet rowSet = null;
			if ("1".equals(this.template_vo.getString("status"))) // 权重
			{
				String value1 = "0";
				String value2 = "0";
				sql = "select sum(" + Sql_switcher.isnull("p0415", "0")
						+ ")  a from p04 where  p0400!=" + p0400
						+ " and plan_id=" + this.plan_vo.getInt("plan_id")
						+ " and ( state!=-1 or state is null ) ";
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql += " and b0110='" + object_id + "'";
				else if (this.plan_vo.getInt("object_type") == 2) // 人员
					sql += " and a0100='" + object_id + "'";
				rowSet = dao.search(sql);
				if (rowSet.next())
					value1 = rowSet.getString(1) != null ? rowSet.getString(1)
							: "0";
				sql = " select sum("
						+ Sql_switcher.isnull("p0423", "0")
						+ ")  a from p04 where  p0400!="
						+ p0400
						+ " and plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and state=-1 and ( Chg_type is null or Chg_type!=3 ) ";
				if ("True"
						.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew")))
					sql = " select sum("
							+ Sql_switcher.isnull("p0415", "0")
							+ ")  a from p04 where  p0400!="
							+ p0400
							+ " and plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and state=-1 and ( Chg_type is null or Chg_type!=3 ) ";

				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql += " and b0110='" + object_id + "'";
				else if (this.plan_vo.getInt("object_type") == 2) // 人员
					sql += " and a0100='" + object_id + "'";
				rowSet = dao.search(sql);
				if (rowSet.next())
					value2 = rowSet.getString(1) != null ? rowSet.getString(1)
							: "0";
				sum_value = Float.parseFloat(PubFunc.add(value1, value2, 4));
			} else {
				String value1 = "0";
				String value2 = "0";
				sql = "select sum(" + Sql_switcher.isnull("p0413", "0")
						+ ")  a from p04 where   p0400!=" + p0400
						+ " and plan_id=" + this.plan_vo.getInt("plan_id")
						+ " and ( state!=-1 or state is null ) ";
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql += " and b0110='" + object_id + "'";
				else if (this.plan_vo.getInt("object_type") == 2) // 人员
					sql += " and a0100='" + object_id + "'";
				rowSet = dao.search(sql);
				if (rowSet.next())
					value1 = rowSet.getString(1) != null ? rowSet.getString(1)
							: "0";
				sql = " select sum("
						+ Sql_switcher.isnull("p0421", "0")
						+ ")  a from p04 where   p0400!="
						+ p0400
						+ " and plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and state=-1 and ( Chg_type is null or Chg_type!=3 ) ";
				if ("True"
						.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew")))
					sql = " select sum("
							+ Sql_switcher.isnull("p0413", "0")
							+ ")  a from p04 where   p0400!="
							+ p0400
							+ " and plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and state=-1 and ( Chg_type is null or Chg_type!=3 ) ";

				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql += " and b0110='" + object_id + "'";
				else if (this.plan_vo.getInt("object_type") == 2) // 人员
					sql += " and a0100='" + object_id + "'";
				rowSet = dao.search(sql);
				if (rowSet.next())
					value2 = rowSet.getString(1) != null ? rowSet.getString(1)
							: "0";
				sum_value = Float.parseFloat(PubFunc.add(value1, value2, 4));
			}

			DecimalFormat myformat1 = new DecimalFormat("########.####");//
			if ("1".equals(status)) // 权重
			{

				value = PubFunc.subtract(String.valueOf(1),
						String.valueOf(sum_value), 4);
				value = myformat1.format(Double.parseDouble(value) * 100);

			} else {
				this.template_vo = get_TemplateVo();
				value = PubFunc.subtract(
						String.valueOf(this.template_vo.getDouble("topscore")),
						String.valueOf(sum_value), 4);
				value = myformat1.format(Double.parseDouble(value));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return value;
	}

	/**
	 * 校验是否符合个性项目的权重或分值
	 * 
	 * @param itemid
	 * @param rank
	 * @param score
	 * @param status
	 * @return
	 */
	public String validateRankOrScore(String itemid, String rank, String score,
			String status, String p0400, String object_id,
			String plan_objectType, String plan_id) {
		String info = "";
		try {
			this.plan_vo = getPlanVo(plan_id);
			this.template_vo = get_TemplateVo();
			ContentDAO dao = new ContentDAO(this.conn);
			String sql = "";
			RowSet rowSet = null;
			float sum_value = 0;

			/*
			 * String
			 * sql="select isnull(sum(p0413),0) from p04 where item_id="+itemid
			 * +"  and (Chg_type is null or Chg_type<>3  )  and p0400!="
			 * +p0400+" and plan_id="+plan_id; if(status.equals("1"))
			 * sql="select isnull(sum(p0415),0) from p04 where item_id="
			 * +itemid+"  and (Chg_type is null or Chg_type<>3  ) and p0400!="
			 * +p0400+" and plan_id="+plan_id; if(plan_objectType.equals("1"))
			 * //部门 { sql+=" and b0110='"+object_id+"'"; } else
			 * if(plan_objectType.equals("2")) //人员 {
			 * 
			 * sql+=" and a0100='"+object_id+"'"; }
			 * 
			 * RowSet rowSet=dao.search(sql); float sum_value=0;
			 * if(rowSet.next()) sum_value=rowSet.getFloat(1);
			 */
			if ("1".equals(this.template_vo.getString("status"))) // 权重
			{
				String value1 = "0";
				String value2 = "0";
				sql = "select sum(" + Sql_switcher.isnull("p0415", "0")
						+ ")  a from p04 where  item_id=" + itemid
						+ "  and p0400!=" + p0400 + " and plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and ( state!=-1 or state is null ) ";
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql += " and b0110='" + object_id + "'";
				else if (this.plan_vo.getInt("object_type") == 2) // 人员
					sql += " and a0100='" + object_id + "'";
				rowSet = dao.search(sql);
				if (rowSet.next())
					value1 = rowSet.getString(1) != null ? rowSet.getString(1)
							: "0";
				sql = " select sum("
						+ Sql_switcher.isnull("p0423", "0")
						+ ")  a from p04 where  item_id="
						+ itemid
						+ "  and p0400!="
						+ p0400
						+ " and plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and state=-1 and ( Chg_type is null or Chg_type!=3 ) ";
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql += " and b0110='" + object_id + "'";
				else if (this.plan_vo.getInt("object_type") == 2) // 人员
					sql += " and a0100='" + object_id + "'";
				rowSet = dao.search(sql);
				if (rowSet.next())
					value2 = rowSet.getString(1) != null ? rowSet.getString(1)
							: "0";
				sum_value = Float.parseFloat(PubFunc.add(value1, value2, 4));
			} else {
				String value1 = "0";
				String value2 = "0";
				sql = "select sum(" + Sql_switcher.isnull("p0413", "0")
						+ ")  a from p04 where  item_id=" + itemid
						+ "  and p0400!=" + p0400 + " and plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and ( state!=-1 or state is null ) ";
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql += " and b0110='" + object_id + "'";
				else if (this.plan_vo.getInt("object_type") == 2) // 人员
					sql += " and a0100='" + object_id + "'";
				rowSet = dao.search(sql);
				if (rowSet.next())
					value1 = rowSet.getString(1) != null ? rowSet.getString(1)
							: "0";
				sql = " select sum("
						+ Sql_switcher.isnull("p0421", "0")
						+ ")  a from p04 where  item_id="
						+ itemid
						+ "  and p0400!="
						+ p0400
						+ " and plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and state=-1 and ( Chg_type is null or Chg_type!=3 ) ";
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql += " and b0110='" + object_id + "'";
				else if (this.plan_vo.getInt("object_type") == 2) // 人员
					sql += " and a0100='" + object_id + "'";
				rowSet = dao.search(sql);
				if (rowSet.next())
					value2 = rowSet.getString(1) != null ? rowSet.getString(1)
							: "0";
				sum_value = Float.parseFloat(PubFunc.add(value1, value2, 4));
			}

			float template_value = 0f;
			rowSet = dao
					.search("select rank,score,itemdesc from per_template_item where item_id="
							+ itemid);
			String itemdesc = "";
			String b_sumValue = "0";
			if (rowSet.next()) {
				if ("0".equals(status))
					template_value = rowSet.getFloat("score");
				else
					template_value = rowSet.getFloat("rank");
				itemdesc = rowSet.getString("itemdesc");
			}
			if (template_value == 0) {

				/*
				 * String
				 * sql0="select isnull(sum(p0413),0) from p04 where  p0400!="
				 * +p0400
				 * +"   and (Chg_type is null or Chg_type<>3  ) and  plan_id="
				 * +plan_id; if(status.equals("1"))
				 * sql0="select isnull(sum(p0415),0) from p04 where  p0400!="
				 * +p0400
				 * +"   and (Chg_type is null or Chg_type<>3  ) and  plan_id="
				 * +plan_id; if(plan_objectType.equals("1")) //部门 {
				 * sql0+=" and b0110='"+object_id+"'"; } else
				 * if(plan_objectType.equals("2")) //人员 {
				 * 
				 * sql0+=" and a0100='"+object_id+"'"; } RowSet
				 * rowSet2=dao.search(sql0); float sum_value2=0;
				 * if(rowSet2.next()) sum_value2=rowSet2.getFloat(1);
				 */
				float sum_value2 = 0;
				if ("1".equals(this.template_vo.getString("status"))) // 权重
				{
					String value1 = "0";
					String value2 = "0";
					sql = "select sum(" + Sql_switcher.isnull("p0415", "0")
							+ ")  a from p04 where  p0400!=" + p0400
							+ " and plan_id=" + this.plan_vo.getInt("plan_id")
							+ " and ( state!=-1 or state is null ) ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					rowSet = dao.search(sql);
					if (rowSet.next())
						value1 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
					sql = " select sum("
							+ Sql_switcher.isnull("p0423", "0")
							+ ")  a from p04 where   p0400!="
							+ p0400
							+ "   and plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and state=-1 and ( Chg_type is null or Chg_type!=3 ) ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					rowSet = dao.search(sql);
					if (rowSet.next())
						value2 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
					sum_value2 = Float.parseFloat(PubFunc
							.add(value1, value2, 4));
				} else {
					String value1 = "0";
					String value2 = "0";
					sql = "select sum(" + Sql_switcher.isnull("p0413", "0")
							+ ")  a from p04 where   p0400!=" + p0400
							+ "   and plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and ( state!=-1 or state is null ) ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					rowSet = dao.search(sql);
					if (rowSet.next())
						value1 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
					sql = " select sum("
							+ Sql_switcher.isnull("p0421", "0")
							+ ")  a from p04 where   p0400!="
							+ p0400
							+ "   and plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and state=-1 and ( Chg_type is null or Chg_type!=3 ) ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					rowSet = dao.search(sql);
					if (rowSet.next())
						value2 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
					sum_value2 = Float.parseFloat(PubFunc
							.add(value1, value2, 4));
				}
				if ("1".equals(status)) {
					String value = PubFunc.subtract(String.valueOf(1),
							String.valueOf(sum_value2), 4);
					if (Float.parseFloat(rank) / 100 > Float.parseFloat(value)) {
						info = itemdesc
								+ " "
								+ ResourceFactory
										.getProperty("org.performance.objectSetError2");
					}
				} else {
					this.plan_vo = getPlanVo(plan_id);
					this.template_vo = get_TemplateVo();
					String value = PubFunc.subtract(String
							.valueOf(this.template_vo.getDouble("topscore")),
							String.valueOf(sum_value), 4);
					if (Float.parseFloat(score) > Float.parseFloat(value)) {
						info = itemdesc
								+ " "
								+ ResourceFactory
										.getProperty("org.performance.objectSetError2");
					}
				}
			} else {
				if ("0".equals(status)) {
					b_sumValue = PubFunc.add(String.valueOf(sum_value), score,
							5);
					if (Float.parseFloat(b_sumValue) > template_value) {
						info = itemdesc
								+ " "
								+ ResourceFactory
										.getProperty("org.performance.objectSetError2");
					}
				} else {
					b_sumValue = PubFunc.add(String.valueOf(sum_value),
							String.valueOf(Double.parseDouble(rank) / 100), 5);

					if (Float.parseFloat(b_sumValue) > template_value) {
						info = itemdesc
								+ " "
								+ ResourceFactory
										.getProperty("org.performance.objectSetError2");
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return info;
	}

	/**
	 * 取得记录值
	 * 
	 * @param object_id
	 * @return
	 */
	public HashMap getTaskValue(String p0400, ArrayList fieldList) {
		HashMap map = new HashMap();
		if (p0400.length() == 0)
			return map;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rowSet = dao
					.search("select * from p04 where p0400=" + p0400);
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			if (rowSet.next()) {
				for (int i = 0; i < fieldList.size(); i++) {
					FieldItem item = (FieldItem) fieldList.get(i);
					String itemid = item.getItemid();
					String itemtype = item.getItemtype();
					if("rater".equalsIgnoreCase(itemid)&&this.isOpenGrade_Members()){//取评价人姓名
						String strSql="select a0101 from per_grade_members where p0400="+p0400+" order by Create_date";
						RowSet rs=dao.search(strSql);
						StringBuffer str=new StringBuffer();
						while(rs.next()){
							str.append(rs.getString("a0101")+",");
						}
						if(str.length()>0)
							str.deleteCharAt(str.length()-1);
						map.put(itemid,str.toString());
						continue;
						
					}
					
					if ("N".equals(itemtype) || "A".equals(itemtype)) {
						if ("N".equals(itemtype)) {
							map.put(itemid,
									rowSet.getString(itemid) != null ? moveZero(rowSet
											.getString(itemid)) : "");
						} else
							map.put(itemid,
									rowSet.getString(itemid) != null ? rowSet
											.getString(itemid) : "");
					} else if ("D".equals(itemtype))
						map.put(itemid,
								rowSet.getDate(itemid) != null ? dateFormat
										.format(rowSet.getDate(itemid)) : "");
					else if ("M".equals(itemtype))
						map.put(itemid, Sql_switcher.readMemo(rowSet, itemid));
				}

				map.put("processing_state",
						rowSet.getString("processing_state") != null ? rowSet
								.getString("processing_state") : "0");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	/**
	 * 取得考核摸板 个性化项目信息及对应的计划任务
	 * 
	 * @return
	 */
	public ArrayList getItemPointInfo() {
		ArrayList list = new ArrayList();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			this.p04List = getP04List();
			RowSet rowSet = dao
					.search("select item_id,score,rank,itemdesc  from per_template_item where template_id='"
							+ this.template_vo.getString("template_id")
							+ "' and kind=2");
			LazyDynaBean abean = null;
			LazyDynaBean a_bean = null;
			while (rowSet.next()) {
				abean = new LazyDynaBean();
				String item_id = rowSet.getString("item_id");
				abean.set("item_id", item_id);
				abean.set("score", rowSet.getString("score") == null ? "0"
						: rowSet.getString("score"));
				abean.set("rank", rowSet.getString("rank") == null ? "0"
						: rowSet.getString("rank"));
				abean.set("itemdesc", rowSet.getString("itemdesc"));
				HashMap pointMap = new HashMap();
				for (int i = 0; i < this.p04List.size(); i++) {
					a_bean = (LazyDynaBean) this.p04List.get(i);
					String p0400 = (String) a_bean.get("p0400");
					if (item_id.equals((String) a_bean.get("item_id")))
						pointMap.put(p0400, "1");
				}
				abean.set("pointMap", pointMap);
				list.add(abean);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	public LazyDynaBean getUserNamePassword(String value) {
		if (value == null || value.length() <= 0) {
			return null;
		}
		String nbase = value.substring(0, 3);
		String a0100 = value.substring(3);
		AttestationUtils utils = new AttestationUtils();
		LazyDynaBean fieldbean = utils.getUserNamePassField();
		String username_field = (String) fieldbean.get("name");
		String password_field = (String) fieldbean.get("pass");
		StringBuffer sql = new StringBuffer();
		sql.append("select a0101," + username_field + " username,"
				+ password_field + " password,a0101 from " + nbase + "A01");
		sql.append(" where a0100='" + a0100 + "'");
		List rs = ExecuteSQL.executeMyQuery(sql.toString());
		LazyDynaBean rec = null;
		if (rs != null && rs.size() > 0) {
			rec = (LazyDynaBean) rs.get(0);
		}
		return rec;
	}

	/**
	 * 驳回目标卡
	 * 
	 * @param object_id
	 * @param appealObject_id
	 * @param mainbody_id
	 * @param plan_id
	 * @param rejectObj
	 *            驳回对象
	 * @param nbase
	 */
	public void rejectSpObject(String object_id, String mainbody_id,
			String plan_id, String nbase, String rejectContext, String rejectObj) {

		try {
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rowSet = null;
			ParseXmlBo bo = new ParseXmlBo(this.conn);
			if (rejectContext == null)
				rejectContext = "";
			rowSet = dao.search("select id from per_object where object_id='"
					+ object_id + "' and plan_id=" + plan_id);
			int id = 0;
			if (rowSet.next())
				id = rowSet.getInt(1);
			RecordVo vo = new RecordVo("per_object");
			vo.setInt("id", id);
			vo = dao.findByPrimaryKey(vo);
			if (rejectObj.equalsIgnoreCase(object_id)) {
				vo.setString("sp_flag", "07");
				vo.setString("currappuser", "");
				vo.setDate("report_date", new Date());
			} else {
				vo.setString("currappuser", rejectObj);
			}
			bo.setPlan_vo(this.plan_vo);

			String _a0100 = rejectObj;
			if (this.plan_vo.getInt("object_type") == 1
					|| this.plan_vo.getInt("object_type") == 3
					|| this.plan_vo.getInt("object_type") == 4) {
				if (rejectObj.equalsIgnoreCase(object_id)) {
					if (this.un_functionaryBean != null) {
						_a0100 = (String) this.un_functionaryBean
								.get("mainbody_id");
					}
				}
			}
			String appealName = "";
			String appealB0110 = "";
			String appealE0122 = "";
			String appealE01a1 = "";
			rowSet = dao.search("select b0110,e0122,e01a1,a0101 from " + nbase
					+ "A01 where a0100='" + _a0100 + "'");
			if (rowSet.next()) {
				appealName = rowSet.getString("a0101");
				appealB0110 = AdminCode.getCodeName("UN",
						rowSet.getString("b0110"));
				appealE0122 = AdminCode.getCodeName("UM",
						rowSet.getString("e0122"));
				appealE01a1 = AdminCode.getCodeName("@K",
						rowSet.getString("e01a1"));
			}
			String a_flag = "0";
			if (this.agent_name != null && this.agent_name.trim().length() > 0)
				a_flag = "1";
			String reasons = bo.produceRecord(object_id, plan_id, mainbody_id,
					nbase, rejectContext, "07", a_flag, this.agent_id,
					this.agent_name, appealB0110 + "/" + appealE0122 + "/"
							+ appealE01a1 + "/" + appealName);
			vo.setString("reasons", reasons);
			String objectName = vo.getString("a0101");
			dao.updateValueObject(vo);
			dao.update("update per_mainbody set reasons=null where  object_id='"
					+ object_id + "' and plan_id=" + plan_id);

			String body_id = "5";
			if (rejectObj.equalsIgnoreCase(object_id)) {
				dao.update("update per_mainbody set sp_flag=null,sp_date=null where plan_id="
						+ plan_id + " and object_id='" + object_id + "' ");
			} else {
				int _id = 0;
				rowSet = dao
						.search("select id from per_mainbody where plan_id="
								+ plan_id + " and object_id='" + object_id
								+ "'   and mainbody_id='" + rejectObj + "'");
				if (rowSet.next())
					_id = rowSet.getInt("id");
				vo = new RecordVo("per_mainbody");
				vo.setInt("id", _id);
				vo = dao.findByPrimaryKey(vo);
				vo.setString("sp_flag", "07");
				vo.setDate("sp_date", new Date());
				dao.updateValueObject(vo);
				LoadXml parameter_content = null;
				if (BatchGradeBo.getPlanLoadXmlMap().get(plan_id + "") == null) {

					parameter_content = new LoadXml(conn, plan_id + "");
					BatchGradeBo.getPlanLoadXmlMap().put(plan_id + "",
							parameter_content);
				} else {
					parameter_content = (LoadXml) BatchGradeBo
							.getPlanLoadXmlMap().get(plan_id + "");
				}
				Hashtable params = parameter_content.getDegreeWhole();
				String SpByBodySeq = "False";
				if (params.get("SpByBodySeq") != null)
					SpByBodySeq = (String) params.get("SpByBodySeq");
				if ("true".equalsIgnoreCase(SpByBodySeq)) {
					String sql = "update per_mainbody set sp_flag=null,sp_date=null where plan_id="
							+ plan_id
							+ " and object_id='"
							+ object_id
							+ "' and sp_seq<(select sp_seq ";
					sql += " from per_mainbody where  plan_id=" + plan_id
							+ " and object_id='" + object_id
							+ "' and mainbody_id='" + this.userView.getA0100()
							+ "'";
					sql += " ) and sp_seq>(select sp_seq from per_mainbody where plan_id="
							+ plan_id
							+ " and object_id='"
							+ object_id
							+ "' and mainbody_id='" + rejectObj + "')";
					dao.update(sql);
				} else {
					int level = 0;
					String _str = "level";
					if (Sql_switcher.searchDbServer() == Constant.ORACEL)
						_str = "level_o";
					String sql = "select pms."
							+ _str
							+ " from per_mainbody pm,per_mainbodyset pms where pm.body_id=pms.body_id and pm.plan_id="
							+ plan_id + " and pm.object_id='" + object_id
							+ "' and  pm.mainbody_id='" + rejectObj + "'";
					rowSet = dao.search(sql);
					if (rowSet.next())
						level = rowSet.getInt(_str);
					body_id = String.valueOf(level);
					String level_str = ""; // 5:本人 -2：第四级领导
											// ,-1：第三级领导,0：主管领导,1：直接上级
					if (level == -1)
						level_str = "-2";
					else if (level == 0)
						level_str = "-2,-1";
					else if (level == 1)
						level_str = "-2,-1,0";
					sql = "update per_mainbody set sp_flag=null,sp_date=null where plan_id="
							+ plan_id
							+ " and object_id='"
							+ object_id
							+ "' and mainbody_id in ( ";
					sql += "select  pm.mainbody_id  from per_mainbody pm,per_mainbodyset pms where pm.body_id=pms.body_id and pm.plan_id="
							+ plan_id
							+ " and pm.object_id='"
							+ object_id
							+ "' and pms." + _str + " in (" + level_str + ") ";
					sql += " )";
					dao.update(sql);
				}
			}

			if (this.mainbodyBean != null) {
				id = 0;
				id = Integer.parseInt((String) this.mainbodyBean.get("id"));
				vo = new RecordVo("per_mainbody");
				vo.setInt("id", id);
				vo = dao.findByPrimaryKey(vo);
				vo.setString("reasons", rejectContext);
				dao.updateValueObject(vo);
			} else {
				RecordVo mainbody_vo = getSelfVo(this.userView.getA0100(),
						this.userView.getDbname());

				vo = new RecordVo("per_mainbody");
				IDGenerator idg = new IDGenerator(2, this.conn);
				String aid = idg.getId("per_mainbody.id");
				vo.setInt("id", Integer.parseInt(aid));
				vo.setString("b0110", mainbody_vo.getString("b0110"));
				vo.setString("e0122", mainbody_vo.getString("e0122"));
				vo.setString("e01a1", mainbody_vo.getString("e01a1"));
				vo.setInt("body_id", Integer.parseInt(this.optCardObject));
				vo.setString("object_id", this.object_id);
				vo.setString("mainbody_id", this.userView.getA0100());
				vo.setString("a0101", this.userView.getUserFullName());

				String sql = "select pms.* from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and  ppb.plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and pms.level="
						+ optCardObject;
				if (Sql_switcher.searchDbServer() == Constant.ORACEL)
					sql = "select pms.* from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and  ppb.plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and pms.level_o=" + optCardObject;

				rowSet = dao.search(sql);
				if (rowSet.next())
					vo.setInt("body_id", rowSet.getInt("body_id"));
				vo.setInt("plan_id", this.plan_vo.getInt("plan_id"));
				vo.setInt("status", 0);
				vo.setString("reasons", rejectContext);
				dao.addValueObject(vo);
			}
			/**驳回推送待办  zhaoxg add 2014-9-1 */
			PendingTask pt = new PendingTask();
			LazyDynaBean bean = new LazyDynaBean();
			String _title=this.plan_vo.getString("name")+"_(退回)";
			String href = "";
			if("2".equals(this.object_type)){
				if(rejectObj.equalsIgnoreCase(object_id)){
					href="/performance/objectiveManage/myObjective/my_objective_list.do?b_init=init&returnflag=8&opt=1";				
				}else{
					href="/performance/objectiveManage/setUnderlingObjective/underling_objective_tree.do?b_query=link&returnflag=8&entranceType=0&plan_id="+plan_id;
				}
			}else{
				href = "/performance/objectiveManage/orgPerformance/org_performance_list.do?b_init=init&returnflag=8&opt=1&plan_id=" + plan_id;
			}
						
			bean.set("oper", "distribute");
			bean.set("title", _title);
			bean.set("url", href);
			bean.set("sql", "select * from per_object  where plan_id='"+plan_id+"' and  CurrAppUser='"+this.userView.getA0100()+"'");
			String object=rejectObj;
			if (rejectObj.equalsIgnoreCase(object_id)) {
				if (this.un_functionaryBean != null) {
					object = (String) this.un_functionaryBean
							.get("mainbody_id");
				} else {
					object = rejectObj;
				}
			}
			// 分发产生的待办，待办表中ext_flag字段改为“PERZD_planId_object_id(加密)”。同时要兼容老的“PERZD_planId”的情况。chent 20170725 start
			HashMap map = PerformanceImplementBo.isHavePendingtask(nbase+object, this.conn, "PERZD_"+this.plan_vo.getString("plan_id"));//先判断旧的没有object_id的情况。没有则走新的带有object_id的逻辑;有则按照就逻辑走。
			if(map.size() == 0){
				bean.set("object_id", object_id);
			}
			LazyDynaBean _bean=PerformanceImplementBo.updatePendingTask(this.conn, this.userView,nbase+object,plan_id,bean,"1");
			if("add".equals(_bean.get("flag"))){
				pt.insertPending("PER"+_bean.get("pending_id"),"P",_title,this.userView.getDbname()+this.userView.getA0100(),nbase+object,href,0,1,"目标制订",this.userView);	
			}	
			if("update".equals(_bean.get("selfflag"))){
				pt.updatePending("P", "PER"+_bean.get("selfpending_id"), 1, "目标制订", this.userView);
			}
			// 分发产生的待办，待办表中ext_flag字段改为“PERZD_planId_object_id(加密)”。同时要兼容老的“PERZD_planId”的情况。chent 20170725 end	
			
			/** 发送邮件给审批人 */
			if ("true".equalsIgnoreCase(getCreatCard_mail())) {
				// String title="目标卡已驳回";
				AsyncEmailBo _bo=new AsyncEmailBo(this.conn,this.userView);
				String model = "2";
				String _object_id = rejectObj;

				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) {
					model = "1";

					if (rejectObj.equalsIgnoreCase(object_id)) {
						if (this.un_functionaryBean != null) {
							_object_id = (String) this.un_functionaryBean
									.get("mainbody_id");
						} else {
							_object_id = "";
						}
					}

				}

				LazyDynaBean abean = getUserNamePassword("Usr" + _object_id);
				String username = (String) abean.get("username");
				String password = (String) abean.get("password");
				String a0101 = (String) abean.get("a0101");
				String title = this.plan_vo.getString("name")
						+ " 考核指标已驳回，请调整考核指标。";
				title = this.getDBStr("2", this.plan_vo.getString("name"),
						objectName, this.userView.getUserFullName());
				if (title == null || "".equals(title))
					title = this.plan_vo.getString("name")
							+ " 考核指标已驳回，请调整考核指标。";
				String content = rejectContext;

				if (_object_id.length() > 0) {
					String url = "/performance/objectiveManage/objectiveCard.do?b_query=query&body_id="
							+ body_id
							+ "&model="
							+ model
							+ "&opt=1&planid="
							+ PubFunc.encryption(plan_id)
							+ "&object_id="
							+ PubFunc.encryption(object_id);
					if (SystemConfig.getPropertyValue("clientName") != null
							&& "bjpt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {
						sendMessageToPT(title, content.toString(), _object_id,
								"Usr", url, "5");
					}
					this.insertPending(title, content.toString(), _object_id,
							"USR", url, "5");
					if ("1".equals(this.isEmail)) {
						String _url="";
						if (email_link)
							_url += this.userView.getServerurl()
									+ "/performance/objectiveManage/objectiveCard.do?b_query=query&body_id="
									+ body_id
									+ "&model="
									+ model
									+ "&opt=1&planid="
									+ PubFunc.encryption(plan_id)
									+ "&object_id="
									+ PubFunc.encryption(object_id)
									+ "&appfwd=1&etoken="
									+ PubFunc
											.convertUrlSpecialCharacter(PubFunc
													.convertTo64Base(username
															+ "," + password));

//						sendMessage(title, content.toString(), _object_id,
//								nbase);
						LazyDynaBean tempbean=new LazyDynaBean();
						tempbean.set("objectId", "Usr"+_object_id);
						tempbean.set("subject", title);
						tempbean.set("bodyText", content);
						tempbean.set("href", _url);
						tempbean.set("hrefDesc", this.plan_vo.getString("name"));
						_bo.send(tempbean);
						String corpid = (String) ConstantParamter.getAttribute("wx","corpid");  
						if(corpid!=null&&corpid.length()>0){//推送微信公众号  zhaoxg add 2015-5-5
							WeiXinBo.sendMsgToPerson("Usr", _object_id, title, content, "http://www.hjsoft.com.cn:8089/UserFiles/Image/tongzhi.png", "");
						}
						String ddcorpid = (String) ConstantParamter.getAttribute("DINGTALK","corpid");  
						if(ddcorpid!=null&&ddcorpid.length()>0){//推送钉钉公众号  xus add 2017-6-2
							DTalkBo.sendMessage( _object_id,"Usr", title, content, "http://www.hjsoft.com.cn:8089/UserFiles/Image/tongzhi.png", "");
						}
					}
				}
			}

			if (this.plan_vo.getInt("object_type") == 1
					|| this.plan_vo.getInt("object_type") == 3
					|| this.plan_vo.getInt("object_type") == 4) {
				dao.update("update p04 set processing_state=1 where plan_id="
						+ plan_id + " and  b0110='" + this.object_id + "'");

			} else
				dao.update("update p04 set processing_state=1 where plan_id="
						+ plan_id + " and a0100='" + object_id
						+ "' and lower(nbase)='" + nbase.toLowerCase() + "'");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	// 批准目标卡
	public void approveSpObject(String object_id, String mainbody_id,
			String plan_id, String nbase) {
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rowSet = null;
			ParseXmlBo bo = new ParseXmlBo(this.conn);

			rowSet = dao
					.search("select id,a0101 from per_object where object_id='"
							+ object_id + "' and plan_id=" + plan_id);
			int id = 0;
			String object_name = "";

			if (rowSet.next()) {
				id = rowSet.getInt(1);
				object_name = rowSet.getString(2);
			}
			RecordVo vo = new RecordVo("per_object");
			vo.setInt("id", id);
			vo = dao.findByPrimaryKey(vo);
			vo.setString("sp_flag", "03");
			vo.setString("currappuser", "");
			String a_flag = "0";
			if (this.agent_name != null && this.agent_name.trim().length() > 0)
				a_flag = "1";
			String reasons = bo
					.produceRecord(object_id, plan_id, mainbody_id, nbase, "",
							"03", a_flag, this.agent_id, this.agent_name, "");
			vo.setString("reasons", reasons);
			dao.updateValueObject(vo);

			if (this.mainbodyBean != null && this.mainbodyBean.get("id") != null) {
				id = 0;
				id = Integer.parseInt((String) this.mainbodyBean.get("id"));
				vo = new RecordVo("per_mainbody");
				vo.setInt("id", id);
				vo = dao.findByPrimaryKey(vo);
				vo.setString("sp_flag", "03");
				vo.setDate("sp_date", new Date());

				String level = (String) this.mainbodyBean.get("level");
				if (!level.equalsIgnoreCase(this.optCardObject)) {
					String sql = "select pms.* from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and  ppb.plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and pms.level=" + optCardObject;
					if (Sql_switcher.searchDbServer() == Constant.ORACEL)
						sql = "select pms.* from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and  ppb.plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and pms.level_o=" + optCardObject;
					rowSet = dao.search(sql);
					if (rowSet.next())
						vo.setInt("body_id", rowSet.getInt("body_id"));
				}

				dao.updateValueObject(vo);
			} else {
				RecordVo mainbody_vo = getSelfVo(this.userView.getA0100(),
						this.userView.getDbname());

				vo = new RecordVo("per_mainbody");
				IDGenerator idg = new IDGenerator(2, this.conn);
				String aid = idg.getId("per_mainbody.id");
				vo.setInt("id", Integer.parseInt(aid));
				vo.setString("b0110", mainbody_vo.getString("b0110"));
				vo.setString("e0122", mainbody_vo.getString("e0122"));
				vo.setString("e01a1", mainbody_vo.getString("e01a1"));
				vo.setString("object_id", this.object_id);
				vo.setString("mainbody_id", this.userView.getA0100());
				vo.setString("a0101", this.userView.getUserFullName());
				String sql = "select pms.* from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and  ppb.plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and pms.level="
						+ optCardObject;
				if (Sql_switcher.searchDbServer() == Constant.ORACEL)
					sql = "select pms.* from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and  ppb.plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and pms.level_o=" + optCardObject;

				rowSet = dao.search(sql);
				if (rowSet.next())
					vo.setInt("body_id", rowSet.getInt("body_id"));
				vo.setInt("plan_id", this.plan_vo.getInt("plan_id"));
				vo.setInt("status", 0);
				vo.setString("sp_flag", "03");
				vo.setDate("sp_date", new Date());
				dao.addValueObject(vo);

			}

			if ("False"
					.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew")) && this.isAdjustPoint) {

				if ("1".equals(this.template_vo.getString("status"))) // 权重
				{

					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4)
						dao.update("update p04 set p0415=p0423  where b0110='"
								+ this.object_id + "' and plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ "  and state=-1  and p0423 is not null ");
					else
						dao.update("update p04 set p0415=p0423  where a0100='"
								+ this.object_id + "' and plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ "  and state=-1  and p0423 is not null ");
				} else {
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4)
						dao.update("update p04 set p0413=p0421  where b0110='"
								+ this.object_id + "' and plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ "  and state=-1  and p0421 is not null ");
					else
						dao.update("update p04 set p0413=p0421  where a0100='"
								+ this.object_id + "' and plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ "  and state=-1  and p0421 is not null ");
				}
			}

            String pendingTaskReceiverId =nbase+("2".equals(this.object_type)? object_id : un_functionary);//如果是个人计划 待办收件人为考核对象 团队计划 对象为团队负责人

			/**批准推送待办  zhaoxg add 2014-9-1 */
			PendingTask pt = new PendingTask();
			LazyDynaBean bean = new LazyDynaBean();
			String _title=this.plan_vo.getString("name")+"_(审核)";
			String href="/performance/objectiveManage/myObjective/my_objective_list.do?b_init=init&returnflag=8&opt=1";
			bean.set("title", _title);
			bean.set("sql", "select * from per_object  where plan_id='"+plan_id+"' and  CurrAppUser='"+this.userView.getA0100()+"'");
			if(object_id.equalsIgnoreCase(mainbody_id)){ 
				bean.set("appeal", "true");//报批标记，批准时如果走标准关系并且没有上级这时是由考核对象自己批准目标卡，所以要把自己制定的待办置为已办 zhanghua  
				bean.set("object_id", object_id);
			}
			
			// 分发产生的待办，待办表中ext_flag字段改为“PERZD_planId_object_id(加密)”。同时要兼容老的“PERZD_planId”的情况。chent 20170725 start
            //清除分发待办
			HashMap map = PerformanceImplementBo.isHavePendingtask(pendingTaskReceiverId, this.conn, "PERZD_"+this.plan_vo.getString("plan_id"));//先判断旧的没有object_id的情况。没有则走新的带有object_id的逻辑;有则按照就逻辑走。
			if(map.size() == 0){
				bean.set("object_id", object_id);
			}
            bean.set("oper", "distribute1");
            LazyDynaBean _bean=PerformanceImplementBo.updatePendingTask(this.conn, this.userView,pendingTaskReceiverId,plan_id,bean,"100");
            if("update".equals(_bean.get("flag"))){
                pt.updatePending("P", "PER"+_bean.get("pending_id"), 100, "删除待办任务", this.userView);
            }

            //清除报批待办
            bean.set("oper", "distribute");
			_bean=PerformanceImplementBo.updatePendingTask(this.conn, this.userView,pendingTaskReceiverId,plan_id,bean,"2");
			
			if(this.isOpenGrade_Members()){
				String str=StringUtils.isNotBlank(this.un_functionary)?this.un_functionary:object_id;
				this.cleanGradePendingTask(plan_id, "1","Usr"+str);//批准时清除评价人代办
			}

			if("add".equals(_bean.get("flag"))) {
                pt.insertPending("PER" + _bean.get("pending_id"), "P", _title, this.userView.getDbname() + this.userView.getA0100(), nbase + object_id, href, 0, 1, "目标制订", this.userView);
            }
			if("update".equals(_bean.get("selfflag"))){
				pt.updatePending("P", "PER"+_bean.get("selfpending_id"), 100, "删除审批待办任务", this.userView);
			}

			// 分发产生的待办，待办表中ext_flag字段改为“PERZD_planId_object_id(加密)”。同时要兼容老的“PERZD_planId”的情况。chent 20170725 end	
			
			/** 普天集团 批准需结束待批任务 */
			if ("true".equalsIgnoreCase(getCreatCard_mail())
					|| ((SystemConfig.getPropertyValue("clientName") != null && "bjpt".equalsIgnoreCase(
                    SystemConfig
                            .getPropertyValue("clientName"))))) {
				AsyncEmailBo _bo=new AsyncEmailBo(this.conn,this.userView);
				String _object_id = object_id;
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) {
					if (this.un_functionaryBean != null) {
						_object_id = (String) this.un_functionaryBean
								.get("mainbody_id");
						object_name = (String) this.un_functionaryBean
								.get("a0101");
					} else {
						_object_id = "";
						object_name = "";
					}
				}
				if (_object_id.length() > 0) {
					String title = this.plan_vo.getString("name")
							+ " 考核指标已审批，请确认考核指标。";
					String objectName = "";
					RowSet rs = dao
							.search("select a0101 from per_object where plan_id="
									+ this.plan_vo.getInt("plan_id")
									+ " and object_id='" + this.object_id + "'");
					while (rs.next())
						objectName = rs.getString("a0101");
					title = this.getDBStr("3", this.plan_vo.getString("name"),
							objectName, this.userView.getUserFullName());
					if (title == null || "".equals(title))
						title = this.plan_vo.getString("name")
								+ " 考核指标已审批，请确认考核指标。";

					StringBuffer acontent = new StringBuffer(object_name
							+ ":<br>&nbsp;&nbsp;&nbsp;&nbsp;您好!<br>");
					SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
					acontent.append("&nbsp;&nbsp;&nbsp;&nbsp;"
							+ this.userView.getUserFullName() + "已批准您（"
							+ this.plan_vo.getString("name") + ")计划中的目标！");
					acontent.append("<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
							+ this.userView.getUserFullName());
					acontent.append("<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
							+ df.format(new Date()));

					String _model = "2";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4)
						_model = "1";
					String url = "/performance/objectiveManage/objectiveCard.do?b_query=query&body_id=5&model="
							+ _model
							+ "&opt=0&confirm=1&planid="
							+ PubFunc.encryption(plan_id)
							+ "&object_id="
							+ PubFunc.encryption(object_id);

					if (SystemConfig.getPropertyValue("clientName") != null
							&& "bjpt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {
						// String title="目标批准";
						sendMessageToPT(title, acontent.toString(), _object_id,
								"Usr", url, "3");
					}
//					this.insertPending(title, acontent.toString(), _object_id,
//							"USR", url, "3");
					if ("true".equalsIgnoreCase(getCreatCard_mail())) {
						if ("1".equals(this.isEmail)) {
							title = object_name + ","
									+ this.plan_vo.getString("name")
									+ " 考核指标已审批。 来自："
									+ this.userView.getUserFullName();
							StringBuffer content = new StringBuffer(object_name
									+ ":<br>&nbsp;&nbsp;&nbsp;&nbsp;您好!<br>");
							content.append("&nbsp;&nbsp;&nbsp;&nbsp;"
									+ this.userView.getUserFullName() + "已批准您（"
									+ this.plan_vo.getString("name")
									+ ")计划中的目标！");
							content.append("<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
									+ this.userView.getUserFullName());
							content.append("<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
									+ df.format(new Date()));

//							sendMessage(title, content.toString(), _object_id,
//									nbase);
							LazyDynaBean tempbean=new LazyDynaBean();
							tempbean.set("objectId", "Usr"+_object_id);
							tempbean.set("subject", title);
							tempbean.set("bodyText", content);
							_bo.send(tempbean);
							String corpid = (String) ConstantParamter.getAttribute("wx","corpid");  
							if(corpid!=null&&corpid.length()>0){//推送微信公众号  zhaoxg add 2015-5-5
								WeiXinBo.sendMsgToPerson("Usr", _object_id, title, content.toString(), "http://www.hjsoft.com.cn:8089/UserFiles/Image/tongzhi.png", "");
							}
							String ddcorpid = (String) ConstantParamter.getAttribute("DINGTALK","corpid");  
							if(ddcorpid!=null&&ddcorpid.length()>0){//推送钉钉公众号  xus add 2017-6-2
								DTalkBo.sendMessage( _object_id,"Usr", title, content.toString(), "http://www.hjsoft.com.cn:8089/UserFiles/Image/tongzhi.png", "");
							}
						}

					}
				}

			}

			// dao.update("update per_mainbody set seq=null where plan_id="+plan_id+" and object_id='"+object_id+"'");
			if (this.plan_vo.getInt("object_type") == 1
					|| this.plan_vo.getInt("object_type") == 3
					|| this.plan_vo.getInt("object_type") == 4) {
				dao.update("update p04 set processing_state=1 where plan_id="
						+ plan_id + " and  b0110='" + this.object_id + "'");

			} else
				dao.update("update p04 set processing_state=1 where plan_id="
						+ plan_id + " and a0100='" + object_id
						+ "' and lower(nbase)='" + nbase.toLowerCase() + "'");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void appealSpObject(String object_id, String appealObject_id,
			String plan_id, String a0101, LazyDynaBean templateBo, String opt,
			String sp, String level) {
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			StringBuffer content = new StringBuffer("");
			String appealName = "";
			String title = "";
			String username = "";
			String password = "";
			if (!"0".equals(sp)) {
				LazyDynaBean abean = getUserNamePassword("Usr" + sp);
				username = (String) abean.get("username");
				password = (String) abean.get("password");
			}
			ArrayList list = new ArrayList();
			list.add(username);
			list.add(password);
			list.add(plan_id);
			list.add(object_id);
			list.add(a0101);
			list.add(level);
			RowSet rowSet = dao
					.search("select b0110,e0122,e01a1,a0101 from UsrA01 where a0100='"
							+ object_id + "'");
			if (rowSet.next()) {
				appealName = rowSet.getString("a0101");
			}
			if ("02".equals(opt)) {
				title = appealName + "的" + this.plan_vo.getString("name")
						+ " 跟踪指标已报批，请审核。";
				content.append(getContent(username,
						this.userView.getUserFullName(), a0101, templateBo,
						opt, list));
				sendMessage(title, content.toString(), sp, "Usr");
			} else if ("03".equals(opt)) {
				title = "你的" + this.plan_vo.getString("name") + " 跟踪指标已批准，请查阅。";
				content.append(getContent(appealName,
						this.userView.getUserFullName(), a0101, templateBo,
						opt, list));
				sendMessage(title, content.toString(), object_id, "Usr");
			} else if ("07".equals(opt)) {
				title = "你的" + this.plan_vo.getString("name")
						+ " 跟踪指标已被退回，请查阅。";
				content.append(getContent(appealName,
						this.userView.getUserFullName(), a0101, templateBo,
						opt, list));
				sendMessage(title, content.toString(), object_id, "Usr");
			}
			// System.out.println(content);
			// sendMessage(title,content.toString(),sp,"Usr");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String getContent(String appealName, String mainbodyName,
			String objectName, LazyDynaBean TemplateBo, String opt,
			ArrayList list) {
		StringBuffer content = new StringBuffer("");
		String username = (String) list.get(0);
		String password = (String) list.get(1);
		String body_id = (String) list.get(5);
		String plan_id = (String) list.get(2);
		String object_id = (String) list.get(3);
		if (TemplateBo == null || TemplateBo.get("content") == null) {
			if ("02".equals(opt)) {

				content.append(appealName
						+ ":<br>&nbsp;&nbsp;&nbsp;&nbsp;您好!<br>");
				SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
				content.append("&nbsp;&nbsp;&nbsp;&nbsp;" + objectName + "已报批（"
						+ this.plan_vo.getString("name") + ")计划中的跟踪目标，请您批阅！");
				content.append("<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
						+ mainbodyName);
				content.append("<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
						+ df.format(new Date()));
				content.append("<br><br><a href='"
						+ this.userView.getServerurl()
						+ "/performance/objectiveManage/objectiveCard.do?b_query=query&zglt=0&returnflag=menu&entranceType=4&body_id="
						+ body_id
						+ "&model=3&opt=0&planid="
						+ PubFunc.encryption(plan_id)
						+ "&object_id="
						+ PubFunc.encryption(object_id)
						+ "&appfwd=1&etoken="
						+ PubFunc.convertUrlSpecialCharacter(PubFunc
								.convertTo64Base(username + "," + password))
						+ "'>" + this.plan_vo.getString("name") + "</a>");
				// content+="<br><br><a href='/performance/objectiveManage/objectiveCard.do?b_query=query&body_id="+list.get(0)+"&model="+model+"&opt=2&planid="+PubFunc.encryption(this.plan_vo.getInt("plan_id")+"")+"&object_id="+PubFunc.encryption(object_id)+"&appfwd=1&etoken="+PubFunc.convertUrlSpecialCharacter(PubFunc.convertTo64Base(list.get(0)+","+list.get(1)))+"'>"+this.plan_vo.getString("name")+"</a>";
				// content.append("<a href='/performance/objectiveManage/myObjective/my_objective_list.do?b_init=init&amp;opt=1&amp;returnflag=menu'>查看</a>");
			} else if ("03".equals(opt)) {
				content.append(appealName
						+ "：<br>&nbsp;&nbsp;&nbsp;&nbsp;您好！<br>");
				content.append("&nbsp;&nbsp;&nbsp;&nbsp;您的（"
						+ this.plan_vo.getString("name")
						+ "）计划中的跟踪目标已经由" + mainbodyName + "批准，请您批阅！");
			} else if ("07".equals(opt)) {
				content.append(appealName
						+ "：<br>&nbsp;&nbsp;&nbsp;&nbsp;您好！<br>");
				content.append("&nbsp;&nbsp;&nbsp;&nbsp;您的（"
						+ this.plan_vo.getString("name")
						+ "）计划中的跟踪目标已经被" + mainbodyName + "退回，请您查阅！");
			}
		} else {
			if ("02".equals(opt)) {
				String str = (String) TemplateBo.get("content");
				str = str.replaceAll(" ", "&nbsp;&nbsp;");
				str = str.replaceAll("\r\n", "<br>");
				str = str.replaceAll("#", "＃");
				str = str.replaceAll("＃发件人名称＃", mainbodyName);
				str = str.replaceAll("＃审批人名称＃", appealName);
				str = str.replaceAll("＃目标对象名称＃", objectName);
				str = str.replaceAll("＃收件人名称＃", appealName);
				str = str
						.replaceAll("＃考核计划名称＃", this.plan_vo.getString("name"));
				str = str.replaceAll("＃系统日期＃",
						PubFunc.getStringDate("yyyy-MM-dd HH:mm:ss"));
				content.append(str);
				content.append("<br><br><a href='"
						+ this.userView.getServerurl()
						+ "/performance/objectiveManage/objectiveCard.do?b_query=query&zglt=0&returnflag=menu&entranceType=4&body_id="
						+ body_id
						+ "&model=3&opt=0&planid="
						+ PubFunc.encryption(plan_id)
						+ "&object_id="
						+ PubFunc.encryption(object_id)
						+ "&appfwd=1&etoken="
						+ PubFunc.convertUrlSpecialCharacter(PubFunc
								.convertTo64Base(username + "," + password))
						+ "'>" + this.plan_vo.getString("name") + "</a>");
			} else if ("03".equals(opt)) {
				content.append(appealName
						+ ":<br>&nbsp;&nbsp;&nbsp;&nbsp;您好!<br>");
				content.append("&nbsp;&nbsp;&nbsp;&nbsp;您的（"
						+ this.plan_vo.getString("name")
						+ "）计划中的跟踪目标已经由" + mainbodyName + "批准，请您批阅！");
			} else if ("07".equals(opt)) {
				content.append(appealName
						+ "：<br>&nbsp;&nbsp;&nbsp;&nbsp;您好！<br>");
				content.append("&nbsp;&nbsp;&nbsp;&nbsp;您的（"
						+ this.plan_vo.getString("name")
						+ "）计划中的跟踪目标已经被" + mainbodyName + "退回，请您查阅！");
			}
			// }else{
			// String str=(String)TemplateBo.get("content");
			// str=str.replaceAll(" ", "&nbsp;&nbsp;");
			// str=str.replaceAll("\r\n", "<br>");
			// str=str.replaceAll("#","＃");
			// str=str.replaceAll("＃发件人名称＃", username);
			// str=str.replaceAll("＃审批人名称＃", username);
			// str=str.replaceAll("＃目标对象名称＃", objectName);
			// str=str.replaceAll("＃收件人名称＃",objectName);
			// str=str.replaceAll("＃考核计划名称＃",this.plan_vo.getString("name"));
			// str=str.replaceAll("＃系统日期＃",PubFunc.getStringDate("yyyy-MM-dd HH:mm:ss"));
			// content.append(str);
			// }
		}

		return content.toString().replaceAll("\r\n", "<br>");
	}

	// 报批目标卡
	public void appealSpObject(String object_id, String appealObject_id,
			String mainbody_id, String plan_id, String nbase, String url_p) {
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rowSet = null;
			String[] temps = appealObject_id.split("/");
			appealObject_id = temps[0];
			LazyDynaBean templateBo = null;
			
			 /** 得模板项目列表 */
		    ArrayList list = null;		
			
			if ("true".equalsIgnoreCase(this.creatCard_mail)
					&& !"-1".equals(this.creatCard_mail_template)
					&& this.creatCard_mail_template.length() > 0) {
				EmailTemplateBo bo = new EmailTemplateBo(this.conn);
				list = bo.getTemplateFieldInfo(Integer.parseInt(this.creatCard_mail_template), 2);
				templateBo = getTemplateMailInfo(this.creatCard_mail_template);
			}
			String appealName = "";
			String mainbodyName="";
			String a0101Name="";
			String appealB0110 = "";
			String appealE0122 = "";
			String appealE01a1 = "";
			rowSet = dao.search("select b0110,e0122,e01a1,a0101 from " + nbase
					+ "A01 where a0100='" + appealObject_id + "'");
			if (rowSet.next()) {
				appealName = rowSet.getString("a0101");
				appealB0110 = AdminCode.getCodeName("UN",
						rowSet.getString("b0110"));
				appealE0122 = AdminCode.getCodeName("UM",
						rowSet.getString("e0122"));
				appealE01a1 = AdminCode.getCodeName("@K",
						rowSet.getString("e01a1"));
			}
			boolean appeal_flag = false;
			ParseXmlBo bo = new ParseXmlBo(this.conn);


			if ((object_id.equalsIgnoreCase(mainbody_id) || this.un_functionary.equalsIgnoreCase(mainbody_id) 
					//允许上级制定目标卡时并且本人不参与评分的情况下，上级交办上上级处理
					||(!isSelfScore(plan_id) && "2".equals(this.model)&&("01".equals(this.objectSpFlag)&& "True".equalsIgnoreCase((String)this.planParam.get("allowLeadAdjustCard"))))))
					// ||((this.model.equals("3")||this.model.equals("1"))&&(this.objectSpFlag.equals("01")&&((String)this.planParam.get("allowLeadAdjustCard")).equalsIgnoreCase("True"))))
			{
				rowSet = dao
						.search("select id,a0101,sp_flag from per_object where object_id='"
								+ object_id + "' and plan_id=" + plan_id);
				int id = 0;
				String a0101 = "";
				if (rowSet.next()) {
					id = rowSet.getInt("id");
					a0101 = rowSet.getString("a0101");
					String sp_flag = rowSet.getString("sp_flag");
					if("01".equals(sp_flag)||sp_flag==null){
						appeal_flag = true;
					}
				}
				RecordVo vo = new RecordVo("per_object");
				vo.setInt("id", id);
				vo = dao.findByPrimaryKey(vo);
				vo.setString("sp_flag", "02");
				vo.setDate("report_date", new Date());
				vo.setString("currappuser", appealObject_id);
				String a_flag = "0";
				if (this.agent_name != null
						&& this.agent_name.trim().length() > 0)
					a_flag = "1";
				String reasons = bo.produceRecord(object_id, plan_id,
						mainbody_id, nbase, "", "02", a_flag, this.agent_id,
						this.agent_name, appealB0110 + "/" + appealE0122 + "/"
								+ appealE01a1 + "/" + appealName);
				vo.setString("reasons", reasons);
				dao.updateValueObject(vo);
                mainbodyName=a0101;
                a0101Name=a0101;
//				content.append(getEmailContent(appealName, a0101, a0101,
//						templateBo, 1));

				dao.update("update per_mainbody set sp_flag=null,sp_date=null,reasons=null where plan_id="
						+ plan_id + " and object_id='" + object_id + "' ");// 当自己为审批领导时，审批数据清除不掉and
																			// object_id<>mainbody_id
			} else {

				rowSet = dao
						.search("select id,a0101 from per_object where object_id='"
								+ object_id + "' and plan_id=" + plan_id);
				int id = 0;
				String a0101 = "";
				if (rowSet.next()) {
					id = rowSet.getInt("id");
					a0101 = rowSet.getString("a0101");
				}
				RecordVo vo = new RecordVo("per_object");
				vo.setInt("id", id);
				vo = dao.findByPrimaryKey(vo);
				vo.setString("sp_flag", "02");
				vo.setString("currappuser", appealObject_id);
				String a_flag = "0";
				if (this.agent_name != null
						&& this.agent_name.trim().length() > 0)
					a_flag = "1";
				String reasons = bo.produceRecord(object_id, plan_id,
						mainbody_id, nbase, "", "02", a_flag, this.agent_id,
						this.agent_name, appealB0110 + "/" + appealE0122 + "/"
								+ appealE01a1 + "/" + appealName);
				vo.setString("reasons", reasons);
				dao.updateValueObject(vo);

				if (this.mainbodyBean != null) {
					id = 0;
					id = Integer.parseInt((String) this.mainbodyBean.get("id"));
					vo = new RecordVo("per_mainbody");
					vo.setInt("id", id);
					vo = dao.findByPrimaryKey(vo);
					vo.setString("sp_flag", "02");
					vo.setDate("sp_date", new Date());
					String level = (String) this.mainbodyBean.get("level");
					if (!level.equalsIgnoreCase(this.optCardObject)) {
						String sql = "select pms.* from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and  ppb.plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and pms.level=" + optCardObject;
						if (Sql_switcher.searchDbServer() == Constant.ORACEL)
							sql = "select pms.* from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and  ppb.plan_id="
									+ this.plan_vo.getInt("plan_id")
									+ " and pms.level_o=" + optCardObject;
						rowSet = dao.search(sql);
						if (rowSet.next())
							vo.setInt("body_id", rowSet.getInt("body_id"));
					}
					dao.updateValueObject(vo);

                    mainbodyName=(String) this.mainbodyBean.get("a0101");
                    a0101Name=a0101;

//					content.append(getEmailContent(appealName,
//							(String) this.mainbodyBean.get("a0101"), a0101,
//							templateBo, 1));
				} else {
					RecordVo mainbody_vo = getSelfVo(this.userView.getA0100(),
							this.userView.getDbname());

					vo = new RecordVo("per_mainbody");
					IDGenerator idg = new IDGenerator(2, this.conn);
					String aid = idg.getId("per_mainbody.id");
					vo.setInt("id", Integer.parseInt(aid));
					vo.setString("b0110", mainbody_vo.getString("b0110"));
					vo.setString("e0122", mainbody_vo.getString("e0122"));
					vo.setString("e01a1", mainbody_vo.getString("e01a1"));
					vo.setString("object_id", this.object_id);
					vo.setString("mainbody_id", this.userView.getA0100());
					vo.setString("a0101", this.userView.getUserFullName());
					String sql = "select pms.* from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and  ppb.plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and pms.level=" + optCardObject;
					if (Sql_switcher.searchDbServer() == Constant.ORACEL)
						sql = "select pms.* from per_plan_body ppb,per_mainbodyset pms where ppb.body_id=pms.body_id and  ppb.plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and pms.level_o=" + optCardObject;
					rowSet = dao.search(sql);
					if (rowSet.next())
						vo.setInt("body_id", rowSet.getInt("body_id"));
					vo.setInt("plan_id", this.plan_vo.getInt("plan_id"));
					vo.setInt("status", 0);
					vo.setString("sp_flag", "02");
					vo.setDate("sp_date", new Date());
					dao.addValueObject(vo);
                    mainbodyName=this.userView.getUserFullName();
                    a0101Name=a0101;
//					content.append(getEmailContent(appealName,
//							this.userView.getUserFullName(), a0101, templateBo,
//							1));
				}

			}
			//推送待办表且调用外部待办接口   zhaoxg add 2014-8-30
			PendingTask pe = new PendingTask();
			LazyDynaBean bean = new LazyDynaBean();
			String _title=this.plan_vo.getString("name");
            String herf = "";
//            if (object_type.equals("2"))
//                herf = "/performance/objectiveManage/setUnderlingObjective/underling_objective_tree.do?b_query=link&returnflag=8&entranceType=0&plan_id=" + plan_id;
//            else
//                herf = "/performance/objectiveManage/orgPerformance/org_performance_list.do?b_init=init&returnflag=8&opt=1&plan_id=" + plan_id;
			//bean.set("title", _title);
			bean.set("url", herf);
			bean.set("oper", "distribute");
			if(appeal_flag){
				bean.set("appeal", "true");//报批标记，报批要把自己制定的待办置为已办 
			}
			if ((object_id.equalsIgnoreCase(mainbody_id) || this.un_functionary.equalsIgnoreCase(mainbody_id))){//如果交办自己的或者自己负责的团队的，那么要用oeject_id卡死  zhaoxg add 2015-12-7
				bean.set("sql", "select * from per_object  where plan_id='"+plan_id+"' and  object_id='"+this.userView.getA0100()+"' and  "+Sql_switcher.isnull("CurrAppUser", "''")+"='"+this.userView.getA0100()+"'");
			}else{
				bean.set("sql", "select * from per_object  where plan_id='"+plan_id+"' and  CurrAppUser='"+this.userView.getA0100()+"'");
			}
			// 分发产生的待办，待办表中ext_flag字段改为“PERZD_planId_object_id(加密)”。同时要兼容老的“PERZD_planId”的情况。chent 20170725 start
			HashMap map = PerformanceImplementBo.isHavePendingtask(nbase+object_id, this.conn, "PERZD_"+this.plan_vo.getString("plan_id"));//先判断旧的没有object_id的情况。没有则走新的带有object_id的逻辑;有则按照就逻辑走。
			if(map.size() == 0){
				bean.set("object_id", object_id);
			}
			
			ArrayList<String> appealList=new ArrayList<String>();
			appealList.add(appealObject_id);
			HashMap<String,String> raterNameMap=new HashMap<String, String>();
			if(this.isOpenGrade_Members()){//插入新代办
				String pobject="a0100";
				if (this.getPlan_vo().getInt("object_type") == 1
						|| this.getPlan_vo().getInt("object_type") == 3
						|| this.getPlan_vo().getInt("object_type") == 4)
					pobject="b0110";
				String strSql=" select p.A0100,p.a0101 from p04 inner join per_grade_members p on p04.P0400=p.P0400 where plan_id='"+this.plan_vo.getString("plan_id")+"'  and p04."+pobject+"='"+object_id+"' group by p.A0100,p.a0101 ";
				rowSet=dao.search(strSql);
				HashMap<String,String> mainbodyMap=this.getMainbodyidByTargetMakeSeries(object_id);
				while(rowSet.next()){

                    raterNameMap.put(rowSet.getString("A0100"),rowSet.getString("A0101"));
					if(!rowSet.getString("A0100").equalsIgnoreCase(appealObject_id)&&!mainbodyMap.containsKey(rowSet.getString("A0100")))
						appealList.add(rowSet.getString("A0100"));
					
					
				}
				
				//如果报批人存在评价代办，那么将评价代办置为已办 zhanghua
				map = PerformanceImplementBo.isHavePendingtask(nbase+appealObject_id, this.conn, "PERPJ_"+this.plan_vo.getString("plan_id")+"_"+PubFunc.encrypt(object_id));
				if(map.size() != 0&&!"1".equals(map.get("pending_status"))){
					LazyDynaBean _bean=PerformanceImplementBo.updatePendingTask(this.conn, this.userView,nbase+appealObject_id,(String)map.get("pending_id"),bean,"5");
					if("update".equals(_bean.get("selfflag"))){
						pe.updatePending("P", "PER"+_bean.get("selfpending_id"), 1, "目标制订", this.userView);
					}
				}
				
			}
			
			
			
			
			for(String strAppeal:appealList){
                StringBuffer content = new StringBuffer("");
				String title_type="审批";
				String optid="1";//0 查看 1操作 2打分 3评价
				String flag="1";//1 新增报批人代办 6评价人代办
				
				if(!strAppeal.equalsIgnoreCase(appealObject_id)){
					bean.set("object_id", object_id);
					if(templateBo==null) {
						content.append(getEmailContent(raterNameMap.get(strAppeal),mainbodyName, a0101Name, null,3));
					}else {
						String nbaseA0100 = "";
						if("2".equals(object_type)) {
							nbaseA0100 = nbase+object_id;
						}else {
							String str="select * from per_mainbody  where plan_id='"+plan_id+"' and Object_id='"+object_id+"' and Body_id='-1'";//查出团队考核计划的团队负责人
							RowSet rss=null;
							rss=dao.search(str);
							String Mainbody_id="";
							if(rss.next()){
								nbaseA0100=nbase+rss.getString("Mainbody_id");//团队负责人id
							}
						}
						
						content.append(getFactContent((String)templateBo.get("content"), nbaseA0100, list, this.userView, plan_vo, a0101Name,raterNameMap.get(strAppeal)));
					}
					flag="6";
					optid="3";
					title_type="评价";
					bean.set("oper", "grade");
					herf= "/performance/objectiveManage/objectiveCard.do?b_query=query&zglt=0&returnflag=8&entranceType=0&body_id="+temps[1]+"&model="+this.model+"&opt="+optid+"&planid=" + PubFunc.encryption(plan_id) + "&object_id=" + PubFunc.encryption(object_id);
				}else{
					bean.set("oper", "distribute");
                    if(templateBo==null) {
						content.append(getEmailContent(appealName,mainbodyName, a0101Name, null,1));
					}else {
						String nbaseA0100 = "";
						if("2".equals(object_type)) {
							nbaseA0100 = nbase+object_id;
						}else {
							String str="select * from per_mainbody  where plan_id='"+plan_id+"' and Object_id='"+object_id+"' and Body_id='-1'";//查出团队考核计划的团队负责人
							RowSet rss=null;
							rss=dao.search(str);
							String Mainbody_id="";
							if(rss.next()){
								nbaseA0100=nbase+rss.getString("Mainbody_id");//团队负责人id
							}
						}
						content.append(getFactContent((String)templateBo.get("content"), nbaseA0100, list, this.userView, plan_vo, a0101Name,appealName));
					}
		            if ("2".equals(object_type))
		                herf = "/performance/objectiveManage/setUnderlingObjective/underling_objective_tree.do?b_query=link&returnflag=8&entranceType=0&plan_id=" + plan_id;
		            else
		                herf = "/performance/objectiveManage/orgPerformance/org_performance_list.do?b_init=init&returnflag=8&opt=1&plan_id=" + plan_id;
				}
				bean.set("url", herf);
				bean.set("title", _title+"_("+title_type+")");
				
				LazyDynaBean _bean=PerformanceImplementBo.updatePendingTask(this.conn, this.userView, nbase+strAppeal,this.plan_vo.getString("plan_id"),bean,flag);
				if("add".equals(_bean.get("flag"))){
					pe.insertPending("PER"+_bean.get("pending_id"),"P",_title,this.userView.getDbname()+this.userView.getA0100(),nbase+strAppeal,herf,0,1,"目标制订",this.userView);	
				}
				if("update".equals(_bean.get("selfflag"))){
					pe.updatePending("P", "PER"+_bean.get("selfpending_id"), 1, "目标制订", this.userView);
				}
				// 分发产生的待办，待办表中ext_flag字段改为“PERZD_planId_object_id(加密)”。同时要兼容老的“PERZD_planId”的情况。chent 20170725 end
				
				/** 发送邮件给审批人 */
				if ("true".equalsIgnoreCase(getCreatCard_mail())) {
					// String title="目标报批";
					// if(templateBo!=null&&templateBo.get("subject")!=null)
					// title=(String)templateBo.get("subject");
					LazyDynaBean abean = getUserNamePassword("Usr"
							+ strAppeal);
					String username = (String) abean.get("username");
					String password = (String) abean.get("password");
					String a0101 = (String) abean.get("a0101");
	
					// String
					// title=this.perObject_vo.getString("a0101")+"的"+this.plan_vo.getString("name")+" 考核指标已制订，请审批考核指标。";
					String title = this.getDBStr("1",
							this.plan_vo.getString("name"),
							this.perObject_vo.getString("a0101"),
							this.userView.getUserFullName());
					if (title == null || "".equals(title))
						title = this.perObject_vo.getString("a0101") + "的"
								+ this.plan_vo.getString("name")
								+ " 考核指标已制订，请审批。";
	
					String _model = "3";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4)
						_model = "1";
					String url = "/performance/objectiveManage/objectiveCard.do?b_query=query&body_id="
							+ temps[1]
							+ "&model="
							+ _model
							+ "&opt="+optid+"&planid="
							+ PubFunc.encryption(plan_id)
							+ "&object_id="
							+ PubFunc.encryption(object_id);
					if (SystemConfig.getPropertyValue("clientName") != null
							&& "bjpt"
									.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {
						sendMessageToPT(title, content.toString(), strAppeal,
								"Usr", url, "1");
					}
	//				this.insertPending(title, content.toString(), appealObject_id,
	//						"USR", url, "1");//zhaoxgadd
					if ("1".equals(this.isEmail)) {
						if (email_link)
							content.append("<br><br><a href='"
									+ this.userView.getServerurl()
									+ "/performance/objectiveManage/objectiveCard.do?b_query=query&body_id="
									+ temps[1]
									+ "&model="
									+ _model
									+ "&opt="+optid+"&planid="
									+ PubFunc.encryption(plan_id)
									+ "&object_id="
									+ PubFunc.encryption(object_id)
									+ "&appfwd=1&etoken="
									+ PubFunc.convertUrlSpecialCharacter(PubFunc
											.convertTo64Base(username + ","
													+ password)) + "'>"
									+ this.plan_vo.getString("name") + "</a>");
						sendMessage(title, content.toString(), strAppeal,
								nbase);
					}
				}
			}

			if (this.plan_vo.getInt("object_type") == 1
					|| this.plan_vo.getInt("object_type") == 3
					|| this.plan_vo.getInt("object_type") == 4) {
				dao.update("update p04 set processing_state=1 where plan_id="
						+ plan_id + " and  b0110='" + this.object_id + "'");

			} else
				dao.update("update p04 set processing_state=1 where plan_id="
						+ plan_id + " and a0100='" + object_id
						+ "' and lower(nbase)='" + nbase.toLowerCase() + "'");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	/**
	 * 根据a0100获取username
	 * @return
	 */
    public String getUserName(String a0100){
    	String username="";
    	try{
            AttestationUtils utils=new AttestationUtils();
            LazyDynaBean fieldbean=utils.getUserNamePassField();
            String username_field=(String)fieldbean.get("name");
    		ContentDAO dao = new ContentDAO(this.conn);
    		String sql="select "+username_field+" as username from UsrA01 where A0100='"+a0100+"'";
    		RowSet rs=dao.search(sql);
    		if(rs.next()){
    			username=rs.getString("username");
    		}  		
    	}catch(Exception e)
		{
			e.printStackTrace();
		}
    	return username;
    }
	/**
	 * 取得邮件模板的信息
	 * 
	 * @param id
	 * @return
	 */
	public LazyDynaBean getTemplateMailInfo(String id) {
		LazyDynaBean abean = new LazyDynaBean();
		ContentDAO dao = new ContentDAO(this.conn);
		try {
			RowSet rowSet = dao.search("select * from email_name where id="
					+ id);
			if (rowSet.next()) {
				String subject = rowSet.getString("subject");
				String content = Sql_switcher.readMemo(rowSet, "content");
				abean.set("subject", subject);
				abean.set("content", content);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return abean;
	}

	/**
	 * 常量 ＃报批人名称＃ ＃审批人名称＃ ＃目标对象名称＃ #目标计划名称#
	 * 
	 * @param appealName
	 * @param mainbodyName
	 * @param objectName
	 * @param TemplateBo
	 * @param opt
	 *            1:目标卡制订 2：目标卡评估
	 * @return
	 */
	public String getEmailContent(String appealName, String mainbodyName,
			String objectName, LazyDynaBean TemplateBo, int opt) {
		StringBuffer content = new StringBuffer("");
		if (TemplateBo == null || TemplateBo.get("content") == null) {
			content.append(appealName + "：<br>&nbsp;&nbsp;&nbsp;&nbsp;您好！<br>");
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
			if (opt == 1) {
				if (mainbodyName.trim().equals(objectName.trim())) {
					content.append("&nbsp;&nbsp;&nbsp;&nbsp;" + objectName
							+ "已向您报批（" + this.plan_vo.getString("name")
							+ "）计划中的目标，请您批阅！");
				} else {
					content.append("&nbsp;&nbsp;&nbsp;&nbsp;" + mainbodyName
							+ "已向您报批（" + this.plan_vo.getString("name")
							+ "）计划中" + objectName + "的目标，请您批阅！");
				}
			} else if (opt == 2) {
				content.append("&nbsp;&nbsp;&nbsp;&nbsp;" + mainbodyName
						+ "针对（" + this.plan_vo.getString("name") + "）计划中"
						+ objectName + "的目标评完分，请您评分！");
			}else if(opt==3){
                if (mainbodyName.trim().equals(objectName.trim())) {
                    content.append("&nbsp;&nbsp;&nbsp;&nbsp;" + objectName
                            + "已向您报批（" + this.plan_vo.getString("name")
                            + "）计划中的目标，请您评价！");
                } else {
                    content.append("&nbsp;&nbsp;&nbsp;&nbsp;" + mainbodyName
                            + "已向您报批（" + this.plan_vo.getString("name")
                            + "）计划中" + objectName + "的目标，请您评价！");
                }
            }
		} else {
			String str = (String) TemplateBo.get("content");
			str = str.replaceAll(" ", "&nbsp;&nbsp;");
			str = str.replaceAll("\r\n", "<br>");
			str = str.replaceAll("#", "＃");
			str = str.replaceAll("＃发件人名称＃", mainbodyName);
			str = str.replaceAll("＃审批人名称＃", appealName);
			str = str.replaceAll("＃目标对象名称＃", objectName);
			str = str.replaceAll("＃收件人名称＃", appealName);
			str = str.replaceAll("＃考核计划名称＃", this.plan_vo.getString("name"));
			str = str.replaceAll("＃系统日期＃",
					PubFunc.getStringDate("yyyy-MM-dd HH:mm:ss"));
			content.append(str);
		}

		return content.toString().replaceAll("\r\n", "<br>");
	}

	/**
	 * 从系统邮件服务器设置中得到发送邮件的地址
	 * 
	 * @return
	 */
	public String getFromAddr() throws GeneralException {
		String str = "";
		RecordVo stmp_vo = ConstantParamter.getConstantVo("SS_STMP_SERVER");
		if (stmp_vo == null)
			return "";
		String param = stmp_vo.getString("str_value");
		if (param == null || "".equals(param))
			return "";
		try {
			Document doc = PubFunc.generateDom(param);
			Element root = doc.getRootElement();
			Element stmp = root.getChild("stmp");
			str = stmp.getAttributeValue("from_addr");
		} catch (Exception ex) {
			ex.printStackTrace();
			throw GeneralExceptionHandler.Handle(ex);
		}
		return str;
	}

	/**
	 * 发送邮件
	 * 
	 * @param content
	 * @param object_id
	 * @param appealObject_id
	 * @param mainbody_id
	 */
	public void sendMessage(String title, String content,
			String appealObject_id, String nbase) {
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			EMailBo bo = null;
			try {
				bo = new EMailBo(this.conn, true, "");
			} catch (Exception e) {

			}
			String fromaddr = this.getFromAddr();
			RecordVo avo = ConstantParamter.getRealConstantVo("SS_EMAIL");
			String email_field = avo.getString("str_value");
			String sql = "select " + email_field;
			sql += " from " + nbase + "A01 where a0100='" + appealObject_id
					+ "'";
			String email = "";
			if (email_field != null && email_field.length() > 0) {
				RowSet rset = dao.search(sql);
				if (rset.next()) {
					if (email_field != null && email_field.length() > 0)
						email = rset.getString(email_field);
				}
			}
			if (email != null && fromaddr != null && email.length() > 0
					&& fromaddr.length() > 0 && bo != null){
				
				String corpid = (String) ConstantParamter.getAttribute("wx","corpid");  
				if(corpid!=null&&corpid.length()>0){//推送微信公众号  zhaoxg add 2015-5-5
					WeiXinBo.sendMsgToPerson("Usr", appealObject_id, title,  content.toString(), "http://www.hjsoft.com.cn:8089/UserFiles/Image/tongzhi.png", "");
				}
				String ddcorpid = (String) ConstantParamter.getAttribute("DINGTALK","corpid");  
				if(ddcorpid!=null&&ddcorpid.length()>0){//推送钉钉公众号  xus add 2017-6-2
					DTalkBo.sendMessage( appealObject_id,"Usr", title, content.toString(), "http://www.hjsoft.com.cn:8089/UserFiles/Image/tongzhi.png", "");
				}
				bo.sendEmail(title, content, "", fromaddr, email);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 操作考核对象审批状态
	 */
	public void editObjectSpStatus(String codeitem) {
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			if (this.opt == 4 && "03".equals(codeitem)) {
				if ("1".equals(this.template_vo.getString("status"))) // 权重
				{
					dao.update("update p04 set p0415=p0423  where a0100='"
							+ this.object_id + "' and plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ "  and state=-1  and p0423 is not null ");
				} else {
					dao.update("update p04 set p0413=p0421  where a0100='"
							+ this.object_id + "' and plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ "  and state=-1  and p0421 is not null ");
				}
			}
			dao.update("update per_object set sp_flag='" + codeitem
					+ "' where object_id='" + this.object_id + "' and plan_id="
					+ this.plan_vo.getInt("plan_id"));
			if ("0".equals(this.template_vo.getString("status"))
					&& "03".equals(codeitem)) // 分值
			{
				dao.update("update p04 set p0415=1 where a0100='"
						+ this.object_id + "' and plan_id="
						+ this.plan_vo.getInt("plan_id"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	/**
	 * 保存目标制订的 权重和分值
	 * 
	 * @param pointList
	 */
	public void updateP04_value(ArrayList pointList) {
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			String TargetMustFillItem = "";// 必填指标
			if (this.planParam.get("TargetMustFillItem") != null
					&& ((String) this.planParam.get("TargetMustFillItem"))
							.trim().length() > 0)
				TargetMustFillItem = ((String) this.planParam
						.get("TargetMustFillItem")).trim().toLowerCase();
			StringBuffer sql = new StringBuffer("update p04 set ");
			if ("0".equals(this.template_vo.getString("status"))) // 分值
				sql.append(" p0413=? ");
			else if ("1".equals(this.template_vo.getString("status"))) // 权重
				sql.append(" p0415=? ");
			sql.append(" where p0400=?");
			ArrayList list = new ArrayList();
			ArrayList alist = new ArrayList();
			for (int j = 0; j < pointList.size(); j++) {
				String temp = (String) pointList.get(j);
				String[] temps = temp.split("/");
				ArrayList tempList = new ArrayList();
				if ("1".equals(this.template_vo.getString("status"))) // 权重
				{
					if (temps.length > 1) {
						tempList.add(new Double(
								Double.parseDouble(temps[1]) / 100));
					} else {
						if (TargetMustFillItem.trim().length() > 1) {
							alist.add("update p04 set p0415=null where p0400="
									+ temps[0]);
							continue;
						} else {
							tempList.add(new Double(0));
						}
					}
				} else {
					if (temps.length > 1)
						tempList.add(new Double(temps[1]));
					else {
						if (TargetMustFillItem.trim().length() > 1) {
							alist.add("update p04 set p0413=null where p0400="
									+ temps[0]);
							continue;
						} else {
							tempList.add(new Double(0));
						}
					}
				}
				tempList.add(new Integer(temps[0]));
				list.add(tempList);
			}
			dao.batchUpdate(sql.toString(), list);
			if (alist.size() > 0)
				dao.batchUpdate(alist);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	// 当计划为1级审批，直接领导批准时，需校验分值
	public String validateTaskScore() {
		StringBuffer info = new StringBuffer("");
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			String verifyRule = (String) this.planParam.get("VerifyRule"); // 报批
																			// 批准进行总分校验
																			// 校验规则
																			// (=,<=)模板总分
																			// 默认为=
			if ("False"
					.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew"))) {

				if ("1".equals(this.template_vo.getString("status"))) // 权重
				{
					if (!this.ScoreFromItem) {
						String value1 = "0";
						String value2 = "0";
						String sql = "select sum("
								+ Sql_switcher.isnull("p0415", "0")
								+ ")  a from p04 where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and (( state!=-1 or state is null ) or (state=-1 and chg_type=2 and "
								+ Sql_switcher.isnull("p0423", "0") + "=0 ) )"; // or
																				// (state=-1
																				// and
																				// chg_type=2)
																				// )
																				// ";
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4) // 部门
							sql += " and b0110='" + object_id + "'";
						else if (this.plan_vo.getInt("object_type") == 2) // 人员
							sql += " and a0100='" + object_id + "'";
						if (this.hasAddMinusItem
								&& addMinusPointStr.length() > 0) {
							sql += " and p0400 not in ("
									+ this.addMinusPointStr + ")";
						}

						RowSet rowSet = dao.search(sql);
						if (rowSet.next())
							value1 = rowSet.getString(1) != null ? rowSet
									.getString(1) : "0";
						sql = " select sum("
								+ Sql_switcher.isnull("p0423", "0")
								+ ")  a from p04 where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and state=-1 and ( Chg_type is null or Chg_type!=3  ) ";
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4) // 部门
							sql += " and b0110='" + object_id + "'";
						else if (this.plan_vo.getInt("object_type") == 2) // 人员
							sql += " and a0100='" + object_id + "'";
						if (this.hasAddMinusItem
								&& addMinusPointStr.length() > 0) {
							sql += " and p0400 not in ("
									+ this.addMinusPointStr + ")";
						}
						rowSet = dao.search(sql);
						if (rowSet.next())
							value2 = rowSet.getString(1) != null ? rowSet
									.getString(1) : "0";
						if (this.addMinusItemScore != 0)
							value2 = PubFunc.add(value2,
									String.valueOf(this.addMinusItemScore), 4);

						if ("<=".equalsIgnoreCase(verifyRule)) {
							if (Double.parseDouble(PubFunc.add(value1, value2,
									4)) > 1) {
								info.append("\r\n模板各任务指标的权重之和不能大于100％！");
							}
						} else {
							if (Double.parseDouble(PubFunc.add(value1, value2,
									4)) != 1) {
								info.append("\r\n模板各任务指标的权重之和不等于100％！");
							}
						}
					} else {
						String score = this.getStepByStepScore(
								((String) this.planParam
										.get("taskAdjustNeedNew")), null, 1, 1);
						BigDecimal sc = new BigDecimal(score);

						if ("<=".equalsIgnoreCase(verifyRule)) {
							if (sc.compareTo(new BigDecimal("1")) > 0) {
								info.append("\r\n模板各任务指标的权重之和不能大于100％！");
							}
						} else {
							if (sc.compareTo(new BigDecimal("1")) != 0) {
								info.append("\r\n模板各任务指标的权重之和不等于100％！");
							}
						}
					}
				} else {
					String value1 = "0";
					String value2 = "0";
					String sql = "select sum("
							+ Sql_switcher.isnull("p0413", "0")
							+ ")  a from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and (( state!=-1 or state is null ) or (state=-1 and chg_type=2 and "
							+ Sql_switcher.isnull("p0421", "0") + "=0) )"; // or
																			// (state=-1
																			// and
																			// chg_type=2)
																			// )
																			// ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					if (this.hasAddMinusItem && addMinusPointStr.length() > 0) {
						sql += " and p0400 not in (" + this.addMinusPointStr
								+ ")";
					}

					RowSet rowSet = dao.search(sql);
					if (rowSet.next())
						value1 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
					sql = " select sum("
							+ Sql_switcher.isnull("p0421", "0")
							+ ")  a from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and state=-1  and ( Chg_type is null or Chg_type!=3 )  ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					if (this.hasAddMinusItem && addMinusPointStr.length() > 0) {
						sql += " and p0400 not in (" + this.addMinusPointStr
								+ ")";
					}

					rowSet = dao.search(sql);
					if (rowSet.next())
						value2 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
					if (this.addMinusItemScore != 0)
						value2 = PubFunc.add(value2,
								String.valueOf(this.addMinusItemScore), 4);

					if ("<=".equalsIgnoreCase(verifyRule)) {
						if (Double.parseDouble(PubFunc.add(value1, value2, 4)) > this.template_vo
								.getDouble("topscore")) {
							info.append("\r\n模板各任务指标的分值之和不能大于"
									+ this.template_vo.getDouble("topscore")
									+ "！");
						}
					} else {
						if (Double.parseDouble(PubFunc.add(value1, value2, 4)) != this.template_vo
								.getDouble("topscore")) {
							info.append("\r\n模板各任务指标的分值之和不等于"
									+ this.template_vo.getDouble("topscore")
									+ "！");
						}
					}
				}
			} else {
				if ("1".equals(this.template_vo.getString("status"))) // 权重
				{
					if (!this.ScoreFromItem) {
						String value1 = "0";
						String value2 = "0";
						String sql = "select sum("
								+ Sql_switcher.isnull("p0415", "0")
								+ ")  a from p04 where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and ( state!=-1 or state is null )  ";
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4) // 部门
							sql += " and b0110='" + object_id + "'";
						else if (this.plan_vo.getInt("object_type") == 2) // 人员
							sql += " and a0100='" + object_id + "'";
						if (this.hasAddMinusItem
								&& addMinusPointStr.length() > 0) {
							sql += " and p0400 not in ("
									+ this.addMinusPointStr + ")";
						}

						RowSet rowSet = dao.search(sql);
						if (rowSet.next())
							value1 = rowSet.getString(1) != null ? rowSet
									.getString(1) : "0";
						sql = " select sum("
								+ Sql_switcher.isnull("p0415", "0")
								+ ")  a from p04 where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and state=-1 and ( Chg_type is null or Chg_type!=3 )  ";
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4) // 部门
							sql += " and b0110='" + object_id + "'";
						else if (this.plan_vo.getInt("object_type") == 2) // 人员
							sql += " and a0100='" + object_id + "'";
						if (this.hasAddMinusItem
								&& addMinusPointStr.length() > 0) {
							sql += " and p0400 not in ("
									+ this.addMinusPointStr + ")";
						}

						rowSet = dao.search(sql);
						if (rowSet.next())
							value2 = rowSet.getString(1) != null ? rowSet
									.getString(1) : "0";
						if (this.addMinusItemScore != 0)
							value2 = PubFunc.add(value2,
									String.valueOf(this.addMinusItemScore), 4);

						if ("<=".equalsIgnoreCase(verifyRule)) {
							if (Double.parseDouble(PubFunc.add(value1, value2,
									4)) > 1) {
								info.append("\r\n模板各任务指标的权重之和不能大于100％！");
							}
						} else {
							if (Double.parseDouble(PubFunc.add(value1, value2,
									4)) != 1) {
								info.append("\r\n模板各任务指标的权重之和不等于100％！");
							}
						}
					} else {
						String score = this.getStepByStepScore(
								((String) this.planParam
										.get("taskAdjustNeedNew")), null, 1, 1);
						BigDecimal sc = new BigDecimal(score);

						if ("<=".equalsIgnoreCase(verifyRule)) {
							if (sc.compareTo(new BigDecimal("1")) > 0) {
								info.append("\r\n模板各任务指标的权重之和不能大于100％！");
							}
						} else {
							if (sc.compareTo(new BigDecimal("1")) != 0) {
								info.append("\r\n模板各任务指标的权重之和不等于100％！");
							}
						}
					}

				} else {
					String value1 = "0";
					String value2 = "0";
					String sql = "select sum("
							+ Sql_switcher.isnull("p0413", "0")
							+ ")  a from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and  ( state!=-1 or state is null )  ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					if (this.hasAddMinusItem && addMinusPointStr.length() > 0) {
						sql += " and p0400 not in (" + this.addMinusPointStr
								+ ")";
					}

					RowSet rowSet = dao.search(sql);
					if (rowSet.next())
						value1 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
					sql = " select sum("
							+ Sql_switcher.isnull("p0413", "0")
							+ ")  a from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and state=-1  and ( Chg_type is null or Chg_type!=3 )  ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					if (this.hasAddMinusItem && addMinusPointStr.length() > 0) {
						sql += " and p0400 not in (" + this.addMinusPointStr
								+ ")";
					}

					rowSet = dao.search(sql);
					if (rowSet.next())
						value2 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";

					if (this.addMinusItemScore != 0)
						value2 = PubFunc.add(value2,
								String.valueOf(this.addMinusItemScore), 4);

					if ("<=".equalsIgnoreCase(verifyRule)) {
						if (Double.parseDouble(PubFunc.add(value1, value2, 4)) > this.template_vo
								.getDouble("topscore")) {
							info.append("\r\n模板各任务指标的分值之和不能大于"
									+ this.template_vo.getDouble("topscore")
									+ "！");
						}
					} else {
						if (Double.parseDouble(PubFunc.add(value1, value2, 4)) != this.template_vo
								.getDouble("topscore")) {
							info.append("\r\n模板各任务指标的分值之和不等于"
									+ this.template_vo.getDouble("topscore")
									+ "！");
						}
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return info.toString();
	}

	/**
	 * 校验模板中 各项目下指标的分值 或 权重知否和项目一致
	 * 
	 * @return
	 */
	public String validateItemScore() {
		StringBuffer info = new StringBuffer("");
		ContentDAO dao = new ContentDAO(this.conn);
		try {
			/*
			 * if(this.template_vo.getString("status").equals("1")) //权重 {
			 * String value1="0"; String value2="0"; String
			 * sql="select sum("+Sql_switcher
			 * .isnull("p0415","0")+")  from p04 where plan_id="
			 * +this.plan_vo.getInt
			 * ("plan_id")+" and ( state!=-1 or state is null ) ";
			 * if(this.plan_vo
			 * .getInt("object_type")==1||this.plan_vo.getInt("object_type"
			 * )==3||this.plan_vo.getInt("object_type")==4) //部门
			 * sql+=" and b0110='"+object_id+"'"; else
			 * if(this.plan_vo.getInt("object_type")==2) //人员
			 * sql+=" and a0100='"+object_id+"'";
			 * 
			 * RowSet rowSet=dao.search(sql); if(rowSet.next()) {
			 * value1=rowSet.getString(1)!=null?rowSet.getString(1):"0"; }
			 * String item_id="p0415";
			 * if(((String)this.planParam.get("taskAdjustNeedNew"
			 * )).equalsIgnoreCase("false")) item_id="p0423";
			 * sql="select sum("+Sql_switcher
			 * .isnull(item_id,"0")+")   from p04 where plan_id="
			 * +this.plan_vo.getInt
			 * ("plan_id")+" and state=-1  and ( Chg_type is null or Chg_type!=3 ) "
			 * ; if(this.plan_vo.getInt("object_type")==1||this.plan_vo.getInt(
			 * "object_type")==3||this.plan_vo.getInt("object_type")==4) //部门
			 * sql+=" and b0110='"+object_id+"'"; else
			 * if(this.plan_vo.getInt("object_type")==2) //人员
			 * sql+=" and a0100='"+object_id+"'"; rowSet=dao.search(sql);
			 * if(rowSet.next()) {
			 * value2=rowSet.getString(1)!=null?rowSet.getString(1):"0"; }
			 * 
			 * if(Double.parseDouble(PubFunc.add(value1,value2,4))!=1) {
			 * info.append("\r\n模板各任务指标的权重之和不等于100％！"); }
			 * 
			 * } else { String value1="0"; String value2="0"; String
			 * sql="select sum("
			 * +Sql_switcher.isnull("p0413","0")+")  from p04 where plan_id="
			 * +this
			 * .plan_vo.getInt("plan_id")+" and ( state!=-1 or state is null ) "
			 * ; if(this.plan_vo.getInt("object_type")==1||this.plan_vo.getInt(
			 * "object_type")==3||this.plan_vo.getInt("object_type")==4) //部门
			 * sql+=" and b0110='"+object_id+"'"; else
			 * if(this.plan_vo.getInt("object_type")==2) //人员
			 * sql+=" and a0100='"+object_id+"'";
			 * 
			 * RowSet rowSet=dao.search(sql); if(rowSet.next())
			 * value1=rowSet.getString(1)!=null?rowSet.getString(1):"0";
			 * 
			 * String item_id="p0413";
			 * if(((String)this.planParam.get("taskAdjustNeedNew"
			 * )).equalsIgnoreCase("false")) item_id="p0421";
			 * sql="select sum("+Sql_switcher
			 * .isnull(item_id,"0")+")   from p04 where plan_id="
			 * +this.plan_vo.getInt
			 * ("plan_id")+" and state=-1  and ( Chg_type is null or Chg_type!=3 ) "
			 * ; if(this.plan_vo.getInt("object_type")==1||this.plan_vo.getInt(
			 * "object_type")==3||this.plan_vo.getInt("object_type")==4) //部门
			 * sql+=" and b0110='"+object_id+"'"; else
			 * if(this.plan_vo.getInt("object_type")==2) //人员
			 * sql+=" and a0100='"+object_id+"'";
			 * 
			 * rowSet=dao.search(sql); if(rowSet.next())
			 * value2=rowSet.getString(1)!=null?rowSet.getString(1):"0";
			 * 
			 * if(Double.parseDouble(PubFunc.add(value1,value2,4))!=this.template_vo
			 * .getDouble("topscore")) {
			 * info.append("\r\n模板各任务指标的分值之和不等于"+this.template_vo
			 * .getDouble("topscore")+"！"); }
			 * 
			 * }
			 */
			ArrayList _templateItemList = getTemplateItemList();
			HashMap map1 = new HashMap();
			HashMap map2 = new HashMap();
			if ("1".equals(this.template_vo.getString("status"))) // 权重
			{
				String sql = "select sum(" + Sql_switcher.isnull("p0415", "0")
						+ ") a,item_id from p04 where plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and ( state!=-1 or state is null ) ";
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql += " and b0110='" + object_id + "'";
				else if (this.plan_vo.getInt("object_type") == 2) // 人员
					sql += " and a0100='" + object_id + "'";
				sql += " group by item_id";
				RowSet rowSet = dao.search(sql);
				while (rowSet.next()) {
					map1.put(rowSet.getString("item_id"), rowSet.getString("a"));
				}

				String item_id = "p0415";
				if ("false"
						.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew")))
					item_id = "p0423";
				sql = "select sum("
						+ Sql_switcher.isnull(item_id, "0")
						+ ")  a,item_id from p04 where plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and state=-1  and ( Chg_type is null or Chg_type!=3 ) ";
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql += " and b0110='" + object_id + "'";
				else if (this.plan_vo.getInt("object_type") == 2) // 人员
					sql += " and a0100='" + object_id + "'";
				sql += " group by item_id";
				rowSet = dao.search(sql);
				while (rowSet.next()) {
					map2.put(rowSet.getString("item_id"), rowSet.getString("a"));
				}

				LazyDynaBean abean = null;
				for (int i = 0; i < _templateItemList.size(); i++) {
					abean = (LazyDynaBean) _templateItemList.get(i);
					String itemid = (String) abean.get("item_id");
					String rank = (String) abean.get("rank");
					String score = (String) abean.get("score");
					String itemdesc = (String) abean.get("itemdesc");
					double _rank = -1;
					if (map1.get(itemid) != null)
						_rank = Double.parseDouble((String) map1.get(itemid));
					if (map2.get(itemid) != null) {
						if (_rank == -1)
							_rank = Double.parseDouble((String) map2
									.get(itemid));
						else
							_rank += Double.parseDouble((String) map2
									.get(itemid));
					}

					if (_rank != -1 && _rank != 1)
						info.append("\r\n模板" + itemdesc + "项目下任务指标权重之和不等于100％！");
				}

			} else {
				String sql = "select sum(" + Sql_switcher.isnull("p0413", "0")
						+ ") a,item_id from p04 where plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and ( state!=-1 or state is null ) ";
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql += " and b0110='" + object_id + "'";
				else if (this.plan_vo.getInt("object_type") == 2) // 人员
					sql += " and a0100='" + object_id + "'";
				sql += " group by item_id";
				RowSet rowSet = dao.search(sql);
				while (rowSet.next()) {
					map1.put(rowSet.getString("item_id"), rowSet.getString("a"));
				}

				String item_id = "p0413";
				if ("false"
						.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew")))
					item_id = "p0421";
				sql = "select sum("
						+ Sql_switcher.isnull(item_id, "0")
						+ ")  a,item_id from p04 where plan_id="
						+ this.plan_vo.getInt("plan_id")
						+ " and state=-1  and ( Chg_type is null or Chg_type!=3 ) ";
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4) // 部门
					sql += " and b0110='" + object_id + "'";
				else if (this.plan_vo.getInt("object_type") == 2) // 人员
					sql += " and a0100='" + object_id + "'";
				sql += " group by item_id";
				rowSet = dao.search(sql);
				while (rowSet.next()) {
					map2.put(rowSet.getString("item_id"), rowSet.getString("a"));
				}

				LazyDynaBean abean = null;
				for (int i = 0; i < _templateItemList.size(); i++) {
					abean = (LazyDynaBean) _templateItemList.get(i);
					String itemid = (String) abean.get("item_id");
					String rank = (String) abean.get("rank");
					String score = (String) abean.get("score");
					String itemdesc = (String) abean.get("itemdesc");
					double _score = -1;
					if (map1.get(itemid) != null)
						_score = Double.parseDouble((String) map1.get(itemid));
					if (map2.get(itemid) != null) {
						if (_score == -1)
							_score = Double.parseDouble((String) map2
									.get(itemid));
						else
							_score += Double.parseDouble((String) map2
									.get(itemid));
					}

					if (_score != -1 && _score != Double.parseDouble(score))
						info.append("\r\n模板" + itemdesc + "项目下任务指标分值和不等于"
								+ score + "！");
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return info.toString();
	}

	/**
	 * 校验 目标卡　里的权重和分值是否符合个性化项目的要求
	 * 
	 * @param pointList
	 * @param itemPointInfo
	 * @param flag
	 *            0是否大于 1是否等于
	 * @return
	 */
	public String validateTask(ArrayList pointList, ArrayList itemPointInfo,
			int flag) {
		StringBuffer info = new StringBuffer("");
		LazyDynaBean abean = null;
		ContentDAO dao = new ContentDAO(this.conn);
		double _addMinusItemScore = this.addMinusItemScore;
		if (!"0".equals(this.template_vo.getString("status")))
			_addMinusItemScore = _addMinusItemScore * 100;
		try {
			String verifyRule = (String) this.planParam.get("VerifyRule"); // 报批
																			// 批准进行总分校验
																			// 校验规则
																			// (=,<=)模板总分
																			// 默认为=
			if ("01".equalsIgnoreCase(this.objectSpFlag)
					&& "False"
							.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew")) && this.isAdjustPoint) // 如果是报批调整后目标卡，校验分值的规则不同
			{
				if ("1".equals(this.template_vo.getString("status"))) // 权重
				{
					if (!this.ScoreFromItem) {
						String value1 = "0";
						String value2 = "0";
						String sql = "select sum("
								+ Sql_switcher.isnull("p0415", "0")
								+ ")  a from p04 where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and (( state!=-1 or state is null )  or (state=-1 and chg_type=2 and "
								+ Sql_switcher.isnull("p0423", "0")
								+ "=0  ) ) ";
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4) // 部门
							sql += " and b0110='" + object_id + "'";
						else if (this.plan_vo.getInt("object_type") == 2) // 人员
							sql += " and a0100='" + object_id + "'";
						if (this.hasAddMinusItem
								&& addMinusPointStr.length() > 0) {
							sql += " and p0400 not in ("
									+ this.addMinusPointStr + ")";
						}
						RowSet rowSet = dao.search(sql);
						if (rowSet.next())
							value1 = rowSet.getString(1) != null ? rowSet
									.getString(1) : "0";
						sql = " select sum("
								+ Sql_switcher.isnull("p0423", "0")
								+ ")  a from p04 where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and state=-1 and ( Chg_type is null or Chg_type!=3 )   ";
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4) // 部门
							sql += " and b0110='" + object_id + "'";
						else if (this.plan_vo.getInt("object_type") == 2) // 人员
							sql += " and a0100='" + object_id + "'";
						if (this.hasAddMinusItem
								&& addMinusPointStr.length() > 0) {
							sql += " and p0400 not in ("
									+ this.addMinusPointStr + ")";
						}
						rowSet = dao.search(sql);
						if (rowSet.next())
							value2 = rowSet.getString(1) != null ? rowSet
									.getString(1) : "0";
						if (_addMinusItemScore != 0)
							value2 = PubFunc.add(value2,
									String.valueOf(_addMinusItemScore), 4);

						if ("<=".equalsIgnoreCase(verifyRule)) {
							if (Double.parseDouble(PubFunc.add(value1, value2,
									4)) > 1) {
								info.append("\r\n模板各任务指标的权重之和不能大于100％！");
							}
						} else {
							if (Double.parseDouble(PubFunc.add(value1, value2,
									4)) != 1) {
								info.append("\r\n模板各任务指标的权重之和不等于100％！");
							}
						}
					} else {
						String score = this.getStepByStepScore(
								((String) this.planParam
										.get("taskAdjustNeedNew")), null, 1, 1);
						BigDecimal sc = new BigDecimal(score);

						if ("<=".equalsIgnoreCase(verifyRule)) {
							if (sc.compareTo(new BigDecimal("1")) > 0) {
								info.append("\r\n模板各任务指标的权重之和不能大于100％！");
							}
						} else {
							if (sc.compareTo(new BigDecimal("1")) != 0) {
								info.append("\r\n模板各任务指标的权重之和不等于100％！");
							}
						}
					}

				} else {
					String value1 = "0";
					String value2 = "0";
					String sql = "select sum("
							+ Sql_switcher.isnull("p0413", "0")
							+ ")  a from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and (( state!=-1 or state is null ) or (state=-1 and chg_type=2 and "
							+ Sql_switcher.isnull("p0421", "0") + "=0 ) ) ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					if (this.hasAddMinusItem && addMinusPointStr.length() > 0) {
						sql += " and p0400 not in (" + this.addMinusPointStr
								+ ")";
					}
					RowSet rowSet = dao.search(sql);
					if (rowSet.next())
						value1 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";
					sql = " select sum("
							+ Sql_switcher.isnull("p0421", "0")
							+ ")  a from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and state=-1  and ( Chg_type is null or Chg_type!=3 )  ";
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4) // 部门
						sql += " and b0110='" + object_id + "'";
					else if (this.plan_vo.getInt("object_type") == 2) // 人员
						sql += " and a0100='" + object_id + "'";
					if (this.hasAddMinusItem && addMinusPointStr.length() > 0) {
						sql += " and p0400 not in (" + this.addMinusPointStr
								+ ")";
					}
					rowSet = dao.search(sql);
					if (rowSet.next())
						value2 = rowSet.getString(1) != null ? rowSet
								.getString(1) : "0";

					if (_addMinusItemScore != 0)
						value2 = PubFunc.add(value2,
								String.valueOf(_addMinusItemScore), 4);

					if ("<=".equalsIgnoreCase(verifyRule)) {
						if (Double.parseDouble(PubFunc.add(value1, value2, 4)) > this.template_vo
								.getDouble("topscore")) {
							info.append("\r\n模板各任务指标的分值之和不能大于"
									+ this.template_vo.getDouble("topscore")
									+ "！");
						}
					} else {
						if (Double.parseDouble(PubFunc.add(value1, value2, 4)) != this.template_vo
								.getDouble("topscore")) {
							info.append("\r\n模板各任务指标的分值之和不等于"
									+ this.template_vo.getDouble("topscore")
									+ "！");
						}
					}
				}
				return info.toString();
			}

			String sql = "select * from per_template_item where template_id='"
					+ this.plan_vo.getString("template_id") + "' ";
			if ("1".equals(this.template_vo.getString("status")))
				sql += " and rank=0 ";
			else
				sql += " and score=0 ";
			RowSet rowSet = dao.search(sql);
			if (rowSet.next()) {
				if (pointList == null && "01".equals(this.objectSpFlag)) {
					info.append("\r\n项目没有新建任务!");
				} else if (pointList != null) {
					String b_sumValue = "0";

					for (int j = 0; j < pointList.size(); j++) {
						String temp = (String) pointList.get(j);
						String[] temps = temp.split("/");
						if (temps.length > 1 && temps[1] != null
								&& temps[1].trim().length() > 0) {
							if (this.hasAddMinusItem) {
								if (this.addMinusPointStr.indexOf("'"
										+ temps[0] + "'") == -1)
									b_sumValue = PubFunc.add(b_sumValue,
											temps[1], 5);
							} else
								b_sumValue = PubFunc.add(b_sumValue, temps[1],
										5);
						}
					}

					if (this.hasAddMinusItem)
						b_sumValue = PubFunc.add(b_sumValue,
								String.valueOf(_addMinusItemScore), 5);

					String value = "0";
					if ("1".equals(this.template_vo.getString("status"))) // 权重
					{
						value = "1";
						// value=PubFunc.subtract(String.valueOf(1),String.valueOf(sum_value),4);
					} else {
						value = String.valueOf(this.template_vo
								.getDouble("topscore"));
						// value=PubFunc.subtract(String.valueOf(this.template_vo.getDouble("topscore")),String.valueOf(sum_value),4);
					}

					if ("0".equals(this.template_vo.getString("status"))) // 分值
					{

						if (flag == 1) {
							if ("<=".equalsIgnoreCase(verifyRule)) {
								if (Float.parseFloat(b_sumValue) > Float
										.parseFloat(value))
									info.append("\r\n模板各任务指标的分值之和不能大于"
											+ this.template_vo
													.getDouble("topscore")
											+ "！");
							} else {
								if (Float.parseFloat(b_sumValue) != Float
										.parseFloat(value))
									info.append("\r\n模板各任务指标的分值之和不等于"
											+ this.template_vo
													.getDouble("topscore")
											+ "！");
							}
						} else if (flag == 0) {
							if (Float.parseFloat(b_sumValue) > Float
									.parseFloat(value))
								info.append("\r\n模板各任务指标的分值之和不能大于"
										+ this.template_vo
												.getDouble("topscore") + "！");
						}

					} else if ("1".equals(this.template_vo.getString("status"))) // 权重
					{
						if (this.ScoreFromItem)
							b_sumValue = this.getStepByStepScore(
									((String) this.planParam
											.get("taskAdjustNeedNew")),
									pointList, 2, 1);

						if (flag == 1) {
							if ("<=".equalsIgnoreCase(verifyRule)) {
								if (Float.parseFloat(b_sumValue) / 100 > Float
										.parseFloat(value))
									info.append("\r\n模板各任务指标的权重之和不能大于100％！");
							} else {
								if (Float.parseFloat(b_sumValue) / 100 != Float
										.parseFloat(value))
									info.append("\r\n模板各任务指标的权重之和不等于100％！");
							}
						} else if (flag == 0) {
							if (Float.parseFloat(b_sumValue) / 100 > Float
									.parseFloat(value))
								info.append("\r\n模板各任务指标的权重之和不能大于100％！");
						}

					}
				}

				if (pointList == null && "02".equals(this.objectSpFlag)) {
					if ("1".equals(this.template_vo.getString("status"))) // 权重
					{
						if (!this.ScoreFromItem) {
							String value1 = "0";
							String value2 = "0";
							sql = "select sum("
									+ Sql_switcher.isnull("p0415", "0")
									+ ")  a from p04 where plan_id="
									+ this.plan_vo.getInt("plan_id")
									+ " and (( state!=-1 or state is null )  or (state=-1 and chg_type=2 and "
									+ Sql_switcher.isnull("p0423", "0")
									+ "=0 ) ) ";
							if (this.plan_vo.getInt("object_type") == 1
									|| this.plan_vo.getInt("object_type") == 3
									|| this.plan_vo.getInt("object_type") == 4) // 部门
								sql += " and b0110='" + object_id + "'";
							else if (this.plan_vo.getInt("object_type") == 2) // 人员
								sql += " and a0100='" + object_id + "'";
							if (this.hasAddMinusItem
									&& addMinusPointStr.length() > 0) {
								sql += " and p0400 not in ("
										+ this.addMinusPointStr + ")";
							}

							rowSet = dao.search(sql);
							if (rowSet.next())
								value1 = rowSet.getString(1) != null ? rowSet
										.getString(1) : "0";
							sql = " select sum("
									+ Sql_switcher.isnull("p0423", "0") + ")";
							if ("True"
									.equalsIgnoreCase((String) this.planParam
                                            .get("taskAdjustNeedNew")))
								sql = " select sum("
										+ Sql_switcher.isnull("p0415", "0")
										+ ")";
							sql += " a from p04 where plan_id="
									+ this.plan_vo.getInt("plan_id")
									+ " and state=-1 and ( Chg_type is null or Chg_type!=3 ) ";
							if (this.plan_vo.getInt("object_type") == 1
									|| this.plan_vo.getInt("object_type") == 3
									|| this.plan_vo.getInt("object_type") == 4) // 部门
								sql += " and b0110='" + object_id + "'";
							else if (this.plan_vo.getInt("object_type") == 2) // 人员
								sql += " and a0100='" + object_id + "'";
							if (this.hasAddMinusItem
									&& addMinusPointStr.length() > 0) {
								sql += " and p0400 not in ("
										+ this.addMinusPointStr + ")";
							}
							rowSet = dao.search(sql);
							if (rowSet.next())
								value2 = rowSet.getString(1) != null ? rowSet
										.getString(1) : "0";

							if (_addMinusItemScore != 0)
								value2 = PubFunc.add(value2,
										String.valueOf(_addMinusItemScore), 4);

							if ("<=".equalsIgnoreCase(verifyRule)) {
								if (Double.parseDouble(PubFunc.add(value1,
										value2, 4)) > 1) {
									info.append("\r\n模板各任务指标的权重之和不能大于100％！");
								}
							} else {
								if (Double.parseDouble(PubFunc.add(value1,
										value2, 4)) != 1) {
									info.append("\r\n模板各任务指标的权重之和不等于100％！");
								}
							}
						} else {
							String score = this.getStepByStepScore(
									((String) this.planParam
											.get("taskAdjustNeedNew")), null,
									1, 1);
							BigDecimal sc = new BigDecimal(score);

							if ("<=".equalsIgnoreCase(verifyRule)) {
								if (sc.compareTo(new BigDecimal("1")) > 0) {
									info.append("\r\n模板各任务指标的权重之和不能大于100％！");
								}
							} else {
								if (sc.compareTo(new BigDecimal("1")) != 0) {
									info.append("\r\n模板各任务指标的权重之和不等于100％！");
								}
							}
						}

					} else {
						String value1 = "0";
						String value2 = "0";
						sql = "select sum("
								+ Sql_switcher.isnull("p0413", "0")
								+ ")  a from p04 where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and (( state!=-1 or state is null )  or (state=-1 and chg_type=2 and "
								+ Sql_switcher.isnull("p0421", "0") + "=0 ) ) ";
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4) // 部门
							sql += " and b0110='" + object_id + "'";
						else if (this.plan_vo.getInt("object_type") == 2) // 人员
							sql += " and a0100='" + object_id + "'";
						if (this.hasAddMinusItem
								&& addMinusPointStr.length() > 0) {
							sql += " and p0400 not in ("
									+ this.addMinusPointStr + ")";
						}
						rowSet = dao.search(sql);
						if (rowSet.next())
							value1 = rowSet.getString(1) != null ? rowSet
									.getString(1) : "0";

						sql = " select sum("
								+ Sql_switcher.isnull("p0421", "0") + ") ";
						if ("True"
								.equalsIgnoreCase((String) this.planParam.get("taskAdjustNeedNew")))
							sql = " select sum("
									+ Sql_switcher.isnull("p0413", "0") + ") ";

						sql += " a from p04 where plan_id="
								+ this.plan_vo.getInt("plan_id")
								+ " and state=-1  and ( Chg_type is null or Chg_type!=3 )";
						if (this.plan_vo.getInt("object_type") == 1
								|| this.plan_vo.getInt("object_type") == 3
								|| this.plan_vo.getInt("object_type") == 4) // 部门
							sql += " and b0110='" + object_id + "'";
						else if (this.plan_vo.getInt("object_type") == 2) // 人员
							sql += " and a0100='" + object_id + "'";
						if (this.hasAddMinusItem
								&& addMinusPointStr.length() > 0) {
							sql += " and p0400 not in ("
									+ this.addMinusPointStr + ")";
						}
						rowSet = dao.search(sql);
						if (rowSet.next())
							value2 = rowSet.getString(1) != null ? rowSet
									.getString(1) : "0";

						if (_addMinusItemScore != 0)
							value2 = PubFunc.add(value2,
									String.valueOf(_addMinusItemScore), 4);

						if ("<=".equalsIgnoreCase(verifyRule)) {
							if (Double.parseDouble(PubFunc.add(value1, value2,
									4)) > this.template_vo
									.getDouble("topscore")) {
								info.append("\r\n模板各任务指标的分值之和不能大于"
										+ this.template_vo
												.getDouble("topscore") + "！");
							}
						} else {
							if (Double.parseDouble(PubFunc.add(value1, value2,
									4)) != this.template_vo
									.getDouble("topscore")) {
								info.append("\r\n模板各任务指标的分值之和不等于"
										+ this.template_vo
												.getDouble("topscore") + "！");
							}
						}
					}

				}

			} else {
				/*
				 * for(int i=0;i<itemPointInfo.size();i++) {
				 * abean=(LazyDynaBean)itemPointInfo.get(i); String
				 * item_id=(String)abean.get("item_id"); String
				 * rank=(String)abean.get("rank"); String
				 * score=(String)abean.get("score"); String
				 * itemdesc=(String)abean.get("itemdesc"); HashMap
				 * pointMap=(HashMap)abean.get("pointMap"); float sumValue=0f;
				 * String b_sumValue="0"; if(flag==1&&pointList==null)
				 * info.append("\r\n"+itemdesc+"  "+ResourceFactory.getProperty(
				 * "per.achivement.noNewTask")); else { if(pointList!=null) {
				 * for(int j=0;j<pointList.size();j++) { String
				 * temp=(String)pointList.get(j); String[]
				 * temps=temp.split("/"); if(pointMap.get(temps[0])!=null) { //
				 * sumValue+=Float.parseFloat(temps[1]);
				 * b_sumValue=PubFunc.add(b_sumValue,temps[1], 5); } } }
				 * 
				 * sumValue=Float.parseFloat(b_sumValue); //解决运算精度问题
				 * if(this.template_vo.getString("status").equals("0")) //分值 {
				 * if(flag==1) { if(sumValue!=Float.parseFloat(score))
				 * info.append("\r\n"+itemdesc+"　"+ResourceFactory.getProperty(
				 * "org.performance.objectSetError")+"!"); } else if(flag==0) {
				 * if(sumValue>Float.parseFloat(score))
				 * info.append("\r\n"+itemdesc+"　"+ResourceFactory.getProperty(
				 * "org.performance.objectSetError2")+"!"); } } else
				 * if(this.template_vo.getString("status").equals("1")) //权重 {
				 * if(flag==1) { if(sumValue/100!=Float.parseFloat(rank))
				 * info.append("\r\n"+itemdesc+"　"+ResourceFactory.getProperty(
				 * "org.performance.objectSetError")+"!"); } else if(flag==0) {
				 * if(sumValue/100>Float.parseFloat(rank))
				 * info.append("\r\n"+itemdesc+"　"+ResourceFactory.getProperty(
				 * "org.performance.objectSetError2")+"!"); } } } }
				 */

				if (info.length() == 0) {

					String b_sumValue = "0";

					for (int j = 0; j < pointList.size(); j++) {
						String temp = (String) pointList.get(j);
						String[] temps = temp.split("/");
						if (temps.length > 1 && temps[1] != null
								&& temps[1].trim().length() > 0) {
							if (this.hasAddMinusItem) {
								if (this.addMinusPointStr.indexOf("'"
										+ temps[0] + "'") == -1)
									b_sumValue = PubFunc.add(b_sumValue,
											temps[1], 5);
							} else
								b_sumValue = PubFunc.add(b_sumValue, temps[1],
										5);
						}
					}
					if (this.hasAddMinusItem)
						b_sumValue = PubFunc.add(b_sumValue,
								String.valueOf(_addMinusItemScore), 5);

					String value = "0";
					if ("1".equals(this.template_vo.getString("status"))) // 权重
					{
						value = "1";
						// value=PubFunc.subtract(String.valueOf(1),String.valueOf(sum_value),4);
					} else {
						value = String.valueOf(this.template_vo
								.getDouble("topscore"));
						// value=PubFunc.subtract(String.valueOf(this.template_vo.getDouble("topscore")),String.valueOf(sum_value),4);
					}

					if ("0".equals(this.template_vo.getString("status"))) // 分值
					{

						if (flag == 1) {
							if ("<=".equalsIgnoreCase(verifyRule)) {
								if (Float.parseFloat(b_sumValue) > Float
										.parseFloat(value))
									info.append("\r\n模板各任务指标的分值之和不能大于"
											+ this.template_vo
													.getDouble("topscore")
											+ "！");
							} else {
								if (Float.parseFloat(b_sumValue) != Float
										.parseFloat(value))
									info.append("\r\n模板各任务指标的分值之和不等于"
											+ this.template_vo
													.getDouble("topscore")
											+ "！");
							}
						} else if (flag == 0) {
							if (Float.parseFloat(b_sumValue) > Float
									.parseFloat(value))
								info.append("\r\n模板各任务指标的分值之和不能大于"
										+ this.template_vo
												.getDouble("topscore") + "！");
						}

					} else if ("1".equals(this.template_vo.getString("status"))) // 权重
					{
						if (this.ScoreFromItem) {
							b_sumValue = this.getStepByStepScore(
									((String) this.planParam
											.get("taskAdjustNeedNew")),
									pointList, 2, 1);
						}

						if (flag == 1) {
							if ("<=".equalsIgnoreCase(verifyRule)) {
								if (Float.parseFloat(b_sumValue) / 100 > Float
										.parseFloat(value))
									info.append("\r\n模板各任务指标的权重之和不能大于100％！");
							} else {
								if (Float.parseFloat(b_sumValue) / 100 != Float
										.parseFloat(value))
									info.append("\r\n模板各任务指标的权重之和不等于100％！");
							}
						} else if (flag == 0) {
							if (Float.parseFloat(b_sumValue) / 100 > Float
									.parseFloat(value))
								info.append("\r\n模板各任务指标的权重之和不能大于100％！");
						}

					}

				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return info.toString();
	}

	public ArrayList getLeafItemList() {
		return leafItemList;
	}

	public void setLeafItemList(ArrayList leafItemList) {
		this.leafItemList = leafItemList;
	}

	public RecordVo getTemplate_vo() {
		return template_vo;
	}

	public void setTemplate_vo(RecordVo template_vo) {
		this.template_vo = template_vo;
	}

	public int getOpt() {
		return opt;
	}

	public void setOpt(int opt) {
		this.opt = opt;
	}

	public String getPerPointNoGrade() {
		return perPointNoGrade;
	}

	public void setPerPointNoGrade(String perPointNoGrade) {
		this.perPointNoGrade = perPointNoGrade;
	}

	public Hashtable getPlanParam() {
		return planParam;
	}

	public void setPlanParam(Hashtable planParam) {
		this.planParam = planParam;
	}

	public void setMainbodyBean(LazyDynaBean mainbodyBean) {
		this.mainbodyBean = mainbodyBean;
	}

	public String getBody_id() {
		return body_id;
	}

	public void setBody_id(String body_id) {
		this.body_id = body_id;
	}

	public String getObjectSpFlag() {
		return objectSpFlag;
	}

	public void setObjectSpFlag(String objectSpFlag) {
		this.objectSpFlag = objectSpFlag;
	}

	public String getNoGradeItem() {
		return noGradeItem;
	}

	public void setNoGradeItem(String noGradeItem) {
		this.noGradeItem = noGradeItem;
	}

	public RecordVo getPerObject_vo() {
		return perObject_vo;
	}

	public void setPerObject_vo(RecordVo perObject_vo) {
		this.perObject_vo = perObject_vo;
	}

	public String getIsShowRelationCard() {
		return isShowRelationCard;
	}

	public void setIsShowRelationCard(String isShowRelationCard) {
		this.isShowRelationCard = isShowRelationCard;
	}

	public String getUn_functionary() {
		return un_functionary;
	}

	public void setUn_functionary(String un_functionary) {
		this.un_functionary = un_functionary;
	}

	public String getTabids(String plan_id) {
		String ret = "";
		try {

			String _str = "";
			StringBuffer sql = new StringBuffer();
			sql.append("select tabids from per_template where template_id=( select template_id from ");
			sql.append("per_plan where plan_id=" + plan_id + ")");
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rs = dao.search(sql.toString());
			while (rs.next()) {
				if (rs.getString("tabids") != null
						&& rs.getString("tabids").trim().length() > 0) {
					String tabids = rs.getString("tabids");
					String[] temps = tabids.split(",");
					for (int n = 0; n < temps.length; n++) {
						if (temps[n] != null && temps[n].trim().length() > 0) {
							if (this.userView != null
									&& !this.userView.isSuper_admin()
									&& !this.userView.isHaveResource(
											IResourceConstant.CARD,
											temps[n].trim()))
								continue;
							_str += "," + temps[n];
						}

					}
					// ret=rs.getString("tabids");
				}
			}
			if (_str.length() > 0)
				ret = _str.substring(1);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return ret;
	}

	public String getCreatCard_mail() {
		return creatCard_mail;
	}

	public void setCreatCard_mail(String creatCard_mail) {
		this.creatCard_mail = creatCard_mail;
	}

	public String getCreatCard_mail_template() {
		return creatCard_mail_template;
	}

	public void setCreatCard_mail_template(String creatCard_mail_template) {
		this.creatCard_mail_template = creatCard_mail_template;
	}

	public String getEvaluateCard_mail() {
		return evaluateCard_mail;
	}

	public void setEvaluateCard_mail(String evaluateCard_mail) {
		this.evaluateCard_mail = evaluateCard_mail;
	}

	public String getEvaluateCard_mail_template() {
		return evaluateCard_mail_template;
	}

	public void setEvaluateCard_mail_template(String evaluateCard_mail_template) {
		this.evaluateCard_mail_template = evaluateCard_mail_template;
	}

	/** ------------------- 中国普天接口 代办事宜 -------------------------- */

	// 待办信息在应用系统的唯一标识代号
	public String getPendingCode(String a0100, String nbase) {
		Date d = new Date();
		return "IMIS-003-" + d.getTime() + a0100
				+ Math.round(Math.ceil(Math.random() * 10));
	}

	/**
	 * 向待办库中加入新的待办
	 * 
	 * @param title
	 * @param content
	 * @param appealObject_id
	 * @param nbase
	 * @param opt
	 *            1:目标卡制订 2：目标卡评估 4:目标评估（只修改状态，不发送新信息） 3:目标卡批准. 5.驳回操作
	 */
	public void sendMessageToPT(String title, String content,
			String appealObject_id, String nbase, String url, String opt) {
		try {
			IMISPendProceed imip = new IMISPendProceed();
			String pendingType = "目标制订";
			if ("2".equals(opt) || "4".equals(opt))
				pendingType = "目标评估";
			// 将旧的代办信息置为已处理状态

			String a_pri_pendingCode = getPri_pendingCode(this.object_id,
					nbase, this.userView, opt);

			if (a_pri_pendingCode != null && a_pri_pendingCode.length() > 0) {
				imip.updatePendingsStateByUID(a_pri_pendingCode, 1, pendingType);
			}
			if (!"4".equals(opt)) {
				String pendingCode = getPendingCode(this.userView.getA0100(),
						this.userView.getDbname());
				url += "&pendingCode=" + pendingCode + "&appfwd=1";

				insertPendingCode(this.object_id, nbase, appealObject_id,
						pendingCode, opt);
				imip.insertPending(pendingCode, title,
						this.userView.getDbname() + this.userView.getA0100(),
						nbase + appealObject_id, url, 0, 1, pendingType);

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	 

	/**
	 * 发送代办
	 * 
	 * @param title
	 * @param content
	 * @param appealObject_id
	 * @param nbase
	 * @param url
	 * @param opt
	 */
	public void insertPending(String title, String content,
			String appealObject_id, String nbase, String url, String opt) {
		try {
			ContentDAO dao = new ContentDAO(conn);
			PendingTask pt = new PendingTask();
			String pendingType = "目标制订";
			if ("2".equals(opt) || "4".equals(opt))
				pendingType = "目标评估";
			// 将旧的代办信息置为已处理状态
			if(!"6".equals(opt))
			{
				String a_pri_pendingCode = getPri_pendingCode(this.object_id,
						nbase, this.userView, opt);
	
				if (a_pri_pendingCode != null && a_pri_pendingCode.length() > 0) {
					pt.updatePending("P", a_pri_pendingCode, 1, pendingType,
							this.userView);
				}
			}
			if (!"4".equals(opt) && !"3".equals(opt))// 批准先不发
			{
				String pendingCode = getPendingCode(this.userView.getA0100(),
						this.userView.getDbname());
				
				if("6".equals(opt))  //状态初始化
				{
					String ext_flag="PERZD_"+plan_id;
					
					int object_id_index = url.indexOf("object_id=");
					if(object_id_index > -1){
						String[] arr = url.split("&");
						for(String str : arr){
							if(str.indexOf("object_id=") > -1){
								String object_id_e = str.split("=")[1];
								ext_flag += ("_"+object_id_e);		
							}
						}
					}
					Calendar calendar = Calendar.getInstance();
					SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");// 设置日期格式
					String date = df.format(calendar.getTime());

					String sender = this.userView.getDbname()+ this.userView.getA0100();
					if(sender!=null&&sender.length()<1){
						sender= this.userView.getUserName();
					}
					 
					HashMap map=PerformanceImplementBo.isHavePendingtask("Usr"+appealObject_id,conn,ext_flag);
					String pending_type="33";
					if ((map==null||map.size()==0))
					{

									IDGenerator idg = new IDGenerator(2, conn); 
									String pending_id = idg.getId("pengdingTask.pengding_id");
									pendingCode="PER"+pending_id;
									RecordVo vo = new RecordVo("t_hr_pendingtask");
									vo.setString("pending_id", pending_id);
									vo.setDate("create_time", date);
									vo.setDate("lasttime", date);
									vo.setString("sender", sender);
									vo.setString("pending_type", pending_type);
									vo.setString("pending_title",title);
									vo.setString("pending_url", url);
									vo.setString("pending_status", "0");
									vo.setString("pending_level", "1");
									vo.setInt("bread", 0);
									vo.setString("receiver", "Usr"+appealObject_id);
									vo.setString("ext_flag", ext_flag);
									dao.addValueObject(vo);
									
									pt.insertPending(pendingCode, "P", title,
											this.userView.getDbname() + this.userView.getA0100(),
											nbase + appealObject_id, url, 0, 1, pendingType,
											this.userView);

					}
					// 在目标卡状态页面中初始化目标卡时，如果存在制定代办则要更新成初始化的待办 chent 20171121 add start
					else {
						RecordVo vo = new RecordVo("t_hr_pendingtask");
						vo.setString("pending_id", (String)map.get("pending_id"));
						vo = dao.findByPrimaryKey(vo);
						vo.setDate("create_time", date);
						vo.setDate("lasttime", date);
						vo.setString("sender", sender);
						vo.setString("pending_type", pending_type);
						vo.setString("pending_title",title);
						vo.setString("pending_url", url);
						vo.setString("pending_status", "0");
						vo.setString("pending_level", "1");
						vo.setInt("bread", 0);
						vo.setString("receiver", "Usr"+appealObject_id);
						vo.setString("ext_flag", ext_flag);
						dao.updateValueObject(vo);
						
						pendingCode="PER"+(String)map.get("pending_id");
						pt.updatePending("P", pendingCode, 1, pendingType,
								this.userView);
					}
					// 在目标卡状态页面中初始化目标卡时，如果存在制定代办则要更新成初始化的待办 chent 20171121 add end
				}
				else
				{
					insertPendingCode(this.object_id, nbase, appealObject_id,
							pendingCode, opt);
					pt.insertPending(pendingCode, "P", title,
							this.userView.getDbname() + this.userView.getA0100(),
							nbase + appealObject_id, url, 0, 1, pendingType,
							this.userView);
				}
				
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 保存代办id纪录
	 * 
	 * @param object_id
	 * @param nbase
	 * @param appealObject_id
	 */
	public void insertPendingCode(String object_id, String nbase,
			String appealObject_id, String pendingCode, String opt) {
		RowSet rs = null;
		try {
			ContentDAO dao = new ContentDAO(this.conn);

			StringBuffer buf = new StringBuffer();
			if ("6".equals(opt)) {
				/** 先删除当前用户，当前薪资类别正在处于起草状态的记录 */
				buf.append("delete from per_task_pt where plan_id=? and object_id=? and mainbody_id=? and flag=1");
				ArrayList paralist = new ArrayList();
				paralist.add(new Integer(this.plan_vo.getInt("plan_id")));
				paralist.add(object_id);
				paralist.add(appealObject_id);
				dao.update(buf.toString(), paralist);

				/** 增加一条起草状态的记录 */
				int maxid = 0;
				IDGenerator idg = new IDGenerator(2, this.conn);
				/*
				 * String temp=IDGenerator.getKeyId("per_task_pt", "id", 1);
				 * if(temp.indexOf(".")!=-1)
				 * temp=temp.substring(0,temp.indexOf("."));
				 * maxid=Integer.parseInt(temp);
				 */
				rs = dao.search("select max(id) from per_task_pt");
				while (rs.next()) {
					String temp = rs.getString(1) == null ? "1" : rs
							.getString(1);
					if (temp.indexOf(".") != -1)
						temp = temp.substring(0, temp.indexOf("."));
					maxid = Integer.parseInt(temp) + 1;
				}
				if (maxid == 0)
					maxid = 1;

				RecordVo vo = new RecordVo("per_task_pt");
				vo.setInt("id", maxid);
				if (dao.isExistRecordVo(vo))
					vo = dao.findByPrimaryKey(vo);
				vo.setString("object_id", object_id);
				vo.setString("mainbody_id", appealObject_id);
				vo.setString("nbase", nbase);
				vo.setString("task_id", pendingCode);
				vo.setInt("plan_id", this.plan_vo.getInt("plan_id"));
				vo.setInt("flag", 1);
				dao.addValueObject(vo);
			} else if ("5".equals(opt) || "3".equals(opt)) // 驳回 || 批准
			{

				dao.update("update per_task_pt set task_id='" + pendingCode
						+ "' where flag=1 and plan_id="
						+ this.plan_vo.getInt("plan_id") + " and object_id='"
						+ object_id + "' and mainbody_id='" + object_id + "' ");

			} else {
				/** 先删除当前用户，当前薪资类别正在处于起草状态的记录 */
				buf.append("delete from per_task_pt where plan_id=? and object_id=? and mainbody_id=? and flag=3");
				ArrayList paralist = new ArrayList();
				paralist.add(new Integer(this.plan_vo.getInt("plan_id")));
				paralist.add(object_id);
				paralist.add(appealObject_id);
				dao.update(buf.toString(), paralist);

				/** 增加一条起草状态的记录 */
				int maxid = 0;
				IDGenerator idg = new IDGenerator(2, this.conn);
				/*
				 * String temp=IDGenerator.getKeyId("per_task_pt", "id", 1);
				 * if(temp.indexOf(".")!=-1)
				 * temp=temp.substring(0,temp.indexOf("."));
				 * maxid=Integer.parseInt(temp);
				 */
				rs = dao.search("select max(id) from per_task_pt");
				while (rs.next()) {
					String temp = rs.getString(1);
					if (temp != null && temp.trim().length() > 0
							&& temp.indexOf(".") != -1) {
						temp = temp.substring(0, temp.indexOf("."));
					}
					if (temp != null && temp.trim().length() > 0)
						maxid = Integer.parseInt(temp) + 1;
				}
				if (maxid == 0)
					maxid = 1;

				RecordVo vo = new RecordVo("per_task_pt");
				vo.setInt("id", maxid);
				if (dao.isExistRecordVo(vo))
					vo = dao.findByPrimaryKey(vo);
				vo.setString("object_id", object_id);
				vo.setString("mainbody_id", appealObject_id);
				vo.setString("nbase", nbase);
				vo.setString("task_id", pendingCode);
				vo.setInt("plan_id", this.plan_vo.getInt("plan_id"));
				vo.setInt("flag", 3);
				dao.addValueObject(vo);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 取得需置为已办的id
	 * 
	 * @param object_id
	 * @param appealObject_id
	 * @param nbase
	 * @param userView
	 * @param opt
	 *            1:目标卡制订 2：目标卡评估 4:目标评估（只修改状态，不发送新信息） 3:目标卡批准. 5.驳回操作
	 * @return
	 */
	public String getPri_pendingCode(String object_id, String nbase,
			UserView userView, String opt) {
		String id = "";
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			String sql = "";

			boolean isSelf = false;
			if (this.plan_vo.getInt("object_type") == 1
					|| this.plan_vo.getInt("object_type") == 3
					|| this.plan_vo.getInt("object_type") == 4) {
				if (userView.getA0100().equalsIgnoreCase(this.un_functionary))
					isSelf = true;
			} else if (userView.getA0100().equalsIgnoreCase(object_id))
				isSelf = true;
			if ("6".equals(opt)) {
				sql = "select task_id from per_task_pt where plan_id="
						+ this.plan_vo.getInt("plan_id") + " and object_id='"
						+ object_id + "' and mainbody_id='"
						+ this.userView.getA0100() + "' and flag=1";
			} else if ("1".equals(opt) && isSelf) {

				sql = "select task_id from per_task_pt where plan_id="
						+ this.plan_vo.getInt("plan_id") + " and object_id='"
						+ object_id + "' and mainbody_id='" + object_id
						+ "' and flag=1";
			} else if ("2".equals(opt) && isSelf) {
				sql = "select task_id from per_task_pt where plan_id="
						+ this.plan_vo.getInt("plan_id") + " and object_id='"
						+ object_id + "' and mainbody_id='" + object_id
						+ "' and flag=2";
			} else
				sql = "select task_id from per_task_pt where plan_id="
						+ this.plan_vo.getInt("plan_id") + " and object_id='"
						+ object_id + "' and mainbody_id='"
						+ this.userView.getA0100() + "'";
			RowSet rowSet = dao.search(sql);
			if (rowSet.next())
				id = rowSet.getString("task_id");

		} catch (Exception e) {
			e.printStackTrace();
		}

		return id;
	}

	/**
	 * 获得员工日志 操作按钮的hmtl
	 * 
	 * @return
	 */
	public String getWordDiaryButton_html() {
		StringBuffer str = new StringBuffer("");
		try {
			String ShowEmployeeRecord = (String) this.planParam
					.get("ShowEmployeeRecord"); // 显示员工日志
			if ("True".equalsIgnoreCase(ShowEmployeeRecord)) {
				String buttonClass = "mybutton";
				if ("zglt".equals(SystemConfig.getPropertyValue("clientName")))
					buttonClass = "mybuttonBig";
				LazyDynaBean timeBean = getPlanKhTime();
				String desc = "查看日志";
				if (!"2".equals(this.plan_vo.getString("object_type"))
						&& this.un_functionary != null
						&& this.un_functionary.length() > 0) {
					String _str = SafeCode.encode(PubFunc.convertTo64Base("Usr"
							+ this.un_functionary));
					str.append("<input type='button' value='" + desc
							+ "' onclick='showWordDiary(\"" + _str + "\",\""
							+ (String) timeBean.get("start_date") + "\",\""
							+ (String) timeBean.get("end_date")
							+ "\")' class='" + buttonClass + "' />");
				} else if ("2".equals(this.plan_vo.getString("object_type"))) {
					String _str = SafeCode.encode(PubFunc.convertTo64Base("Usr"
							+ this.object_id));
					str.append("<input type='button' value='" + desc
							+ "' onclick='showWordDiary(\"" + _str + "\",\""
							+ (String) timeBean.get("start_date") + "\",\""
							+ (String) timeBean.get("end_date")
							+ "\")' class='" + buttonClass + "' />");

				}

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return str.toString();
	}

	// 获得当前计划的起始时间和结束时间
	public LazyDynaBean getPlanKhTime() {
		LazyDynaBean abean = new LazyDynaBean();
		Calendar calendar = Calendar.getInstance();
		try {

			int cycle = this.plan_vo.getInt("cycle");
			String theyear = this.plan_vo.getString("theyear");
			String themonth = this.plan_vo.getString("themonth");
			String thequarter = this.plan_vo.getString("thequarter");

			if (cycle == 0) // 年度
			{
				abean.set("start_date", theyear + "-01-01");
				calendar.set(Calendar.YEAR, Integer.parseInt(theyear));
				calendar.set(Calendar.MONTH, 11);
				calendar.set(Calendar.DATE, 1);
				int day = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
				abean.set("end_date", theyear + "-12-" + day);
			} else if (cycle == 1) // 半年
			{
				if ("01".equals(thequarter) || "1".equals(thequarter)) {
					abean.set("start_date", theyear + "-01-01");
					calendar.set(Calendar.YEAR, Integer.parseInt(theyear));
					calendar.set(Calendar.MONTH, 5);
					calendar.set(Calendar.DATE, 1);
					int day = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
					abean.set("end_date", theyear + "-06-" + day);
				} else {
					abean.set("start_date", theyear + "-07-01");
					calendar.set(Calendar.YEAR, Integer.parseInt(theyear));
					calendar.set(Calendar.MONTH, 11);
					calendar.set(Calendar.DATE, 1);
					int day = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
					abean.set("end_date", theyear + "-12-" + day);
				}
			} else if (cycle == 2) // 季度
			{
				if ("01".equals(thequarter) || "1".equals(thequarter)) {
					abean.set("start_date", theyear + "-01-01");
					calendar.set(Calendar.YEAR, Integer.parseInt(theyear));
					calendar.set(Calendar.MONTH, 2);
					calendar.set(Calendar.DATE, 1);
					int day = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
					abean.set("end_date", theyear + "-03-" + day);
				} else if ("02".equals(thequarter) || "2".equals(thequarter)) {
					abean.set("start_date", theyear + "-04-01");
					calendar.set(Calendar.YEAR, Integer.parseInt(theyear));
					calendar.set(Calendar.MONTH, 5);
					calendar.set(Calendar.DATE, 1);
					int day = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
					abean.set("end_date", theyear + "-06-" + day);
				} else if ("03".equals(thequarter) || "3".equals(thequarter)) {
					abean.set("start_date", theyear + "-07-01");
					calendar.set(Calendar.YEAR, Integer.parseInt(theyear));
					calendar.set(Calendar.MONTH, 8);
					calendar.set(Calendar.DATE, 1);
					int day = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
					abean.set("end_date", theyear + "-09-" + day);
				} else if ("04".equals(thequarter) || "4".equals(thequarter)) {
					abean.set("start_date", theyear + "-10-01");
					calendar.set(Calendar.YEAR, Integer.parseInt(theyear));
					calendar.set(Calendar.MONTH, 11);
					calendar.set(Calendar.DATE, 1);
					int day = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
					abean.set("end_date", theyear + "-12-" + day);
				}
			} else if (cycle == 3) // 月
			{
				if (themonth.length() == 1)
					themonth = "0" + themonth;
				abean.set("start_date", theyear + "-" + themonth + "-01");
				calendar.set(Calendar.YEAR, Integer.parseInt(theyear));
				calendar.set(Calendar.MONTH, (Integer.parseInt(themonth) - 1));
				calendar.set(Calendar.DATE, 1);
				int day = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
				abean.set("end_date", theyear + "-" + themonth + "-" + day);
			} else if (cycle == 7) {
				Date startDate = this.plan_vo.getDate("start_date");
				Date endDate = this.plan_vo.getDate("end_date");
				abean.set("start_date",
						PubFunc.FormatDate(startDate, "yyyy-MM-dd"));
				abean.set("end_date",
						PubFunc.FormatDate(startDate, "yyyy-MM-dd"));

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return abean;
	}

	public String getPri_pendingCode() {
		return pri_pendingCode;
	}

	public void setPri_pendingCode(String pri_pendingCode) {
		this.pri_pendingCode = pri_pendingCode;
	}

	public String getIsEmail() {
		return isEmail;
	}

	public void setIsEmail(String isEmail) {
		this.isEmail = isEmail;
	}

	public HashMap getPointDescMap() {
		return pointDescMap;
	}

	public void setPointDescMap(HashMap pointDescMap) {
		this.pointDescMap = pointDescMap;
	}

	public String getProcessing_state_all() {
		return processing_state_all;
	}

	public void setProcessing_state_all(String processing_state_all) {
		this.processing_state_all = processing_state_all;
	}

	/** -------------------------------end------------------------------------- */

	/**
	 * 驳回上一个考核主体提交的打分
	 */
	public ArrayList getUntreadScoreList2(String plan_id, String object_id,
			String mainbody_id) {
		ArrayList list = new ArrayList();
		try {

			ContentDAO dao = new ContentDAO(this.conn);
			String sql = "select mainbody_id,a0101 from per_mainbody b where b.plan_id="
					+ plan_id
					+ " and exists ( "
					+ " select null from per_mainbody a where  a.object_id=b.object_id and b.seq<a.seq  and  a.plan_id="
					+ plan_id
					+ " "
					+ " and   a.status<>2 and a.object_id='"
					+ object_id
					+ "' and  a.mainbody_id='"
					+ mainbody_id
					+ "' ) and status=2 order by seq";

			RowSet rs = dao.search(sql.toString());
			while (rs.next()) {

				list.add(new CommonData(rs.getString("mainbody_id"), rs
						.getString("a0101")));
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 驳回上一个考核主体提交的打分
	 */
	public ArrayList getUntreadScoreList(String plan_id, String object_id,
			String body_id, String mainbody_id) {
		ArrayList list = new ArrayList();
		try {
			// per_mainbody中status置为1

			ContentDAO dao = new ContentDAO(this.conn);

			String cloumn = "level";
			if (Sql_switcher.searchDbServer() == Constant.ORACEL)
				cloumn = "level_o";
			int level = Integer.parseInt(body_id);
			int allLay = 0;
			if (level == -2)
				allLay = 4;
			else if (level == -1)
				allLay = 3;
			else if (level == 0)
				allLay = 2;
			else if (level == 1)
				allLay = 1;
			boolean isNext = false;
			StringBuffer sql = new StringBuffer("");
			for (int i = 0; i < allLay; i++) {
				int nlevel = this.getNextLevel(level);
				sql.setLength(0);
				sql.append("select object_id,mainbody_id,a0101,body_id,plan_id ");
				sql.append(" from per_mainbody where body_id in (");
				if (nlevel == 5)// 找所有同级或下级的
				{
					sql.append("select body_id from per_mainbodyset where ("
							+ cloumn + "=2 or " + cloumn + "=5)");
				} else {
					sql.append("select body_id from per_mainbodyset where "
							+ cloumn + "=" + nlevel);
				}
				sql.append(") and plan_id=" + plan_id + " and object_id='"
						+ object_id + "'");
				sql.append(" and status=2 ");
				RowSet rs = dao.search(sql.toString());
				while (rs.next()) {
					isNext = true;
					list.add(new CommonData(rs.getString("mainbody_id"), rs
							.getString("a0101")));
				}
				/*
				 * if(isNext) { break; } else {
				 */
				level = nlevel;
				/* } */
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	public int getNextLevel(int level) {
		int nlevel = 0;
		switch (level) {
		case -2:
			nlevel = -1;
			break;
		case -1:
			nlevel = 0;
			break;
		case 0:
			nlevel = 1;
			break;
		case 1:
			nlevel = 5;
			break;
		}
		return nlevel;
	}

	/**
	 * 退回考核主体的打分
	 * 
	 * @param object_id
	 * @param plan_id
	 * @param mainbody_id
	 * @param isSendMail
	 * @param url_p
	 */
	public void untread(String object_id, String plan_id, String mainbody_id,
			String isSendMail, String url_p, String reason) {
		RowSet rowSet = null;

		try {
			String[] arr = mainbody_id.split("/");
			ArrayList list = new ArrayList();
			ArrayList valueList = new ArrayList();
			StringBuffer buf = new StringBuffer("");
			AnalysePlanParameterBo appb = new AnalysePlanParameterBo(this.conn);
			Hashtable ht_table = appb.analyseParameterXml();
			String creatCard_mail = (String) ht_table.get("creatCard_mail");
			String creatCard_mail_template = (String) ht_table
					.get("creatCard_mail_template");
			LazyDynaBean templateBo = null;
			if ("true".equalsIgnoreCase(creatCard_mail)
					&& creatCard_mail_template.length() > 0)
				templateBo = this.getTemplateMailInfo(creatCard_mail_template);
			IMISPendProceed imip = new IMISPendProceed();
			LazyDynaBean amainboyBean = this.getUserNamePassword("USR"
					+ this.userView.getA0100());
			String mainbodyName = (String) amainboyBean.get("a0101");
			String objectName = "";
			int flag = 3;
			ContentDAO dao = new ContentDAO(this.conn);
			String mainbodyid = "";
			if (!"2".equals(this.plan_vo.getString("object_type"))) {
				objectName = AdminCode.getCodeName("UN", object_id);
				if (objectName == null || "".equals(objectName))
					objectName = AdminCode.getCodeName("UM", object_id);
				rowSet = dao
						.search("select mainbody_id from per_mainbody where body_id=-1 and plan_id="
								+ plan_id
								+ " and object_id='"
								+ object_id
								+ "'");
				while (rowSet.next()) {
					mainbodyid = rowSet.getString("mainbody_id");
				}
			} else {
				LazyDynaBean objectBean = this.getUserNamePassword("Usr"
						+ object_id);
				objectName = (String) objectBean.get("a0101");
			}
			PendingTask pt = new PendingTask();
			String GradeByBodySeq = "false";
			if (this.planParam.get("GradeByBodySeq") != null)
				GradeByBodySeq = (String) this.planParam.get("GradeByBodySeq");
			String report_to="";
			AsyncEmailBo bo=new AsyncEmailBo(this.conn,this.userView);
			for (int i = 0; i < arr.length; i++) {
				if (arr[i] == null || "".equals(arr[i]))
					continue;
				buf.setLength(0);
				buf.append("update per_mainbody set status=1,reasons=? where plan_id="
						+ plan_id);
				buf.append(" and object_id='" + object_id
						+ "' and mainbody_id='" + arr[i] + "'");
				list.add(buf.toString());
				ArrayList reasonList = new ArrayList();
				reasonList.add(reason);
				valueList.add(reasonList);
				LazyDynaBean _abean = this.getUserNamePassword("Usr" + arr[i]);
				String username = (String) _abean.get("username");
				String password = (String) _abean.get("password");
				String name = (String) _abean.get("a0101");
				String title = this.plan_vo.getString("name") + "评分("
						+ objectName + ")";
				StringBuffer sql_b = new StringBuffer(" select ");
				if (Sql_switcher.searchDbServer() == Constant.ORACEL)
					sql_b.append(" level_o as body ");
				else
					sql_b.append(" level as body ");
				sql_b.append(" from per_mainbodyset where body_id=(select body_id from per_mainbody where plan_id="
						+ plan_id + " and object_id='" + object_id + "'");
				sql_b.append(" and mainbody_id='" + arr[i] + "')");
				rowSet = dao.search(sql_b.toString());
				String body = "";
				while (rowSet.next()) {
					body = rowSet.getString("body");
				}
				if ("1".equals(isSendMail)) {

					String body_id = this.getBodyID(plan_id, object_id, arr[i],
							dao);
					StringBuffer content = new StringBuffer("");
					StringBuffer _url = new StringBuffer();
					content.append(name
							+ ":<br>&nbsp;&nbsp;&nbsp;&nbsp;您好!<br>");
					SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
					content.append("&nbsp;&nbsp;&nbsp;&nbsp;您在（"
							+ this.plan_vo.getString("name") + ")计划中对 "
							+ objectName + "的评分已被" + mainbodyName + "驳回，请您查阅！");
					_url.append("<a href='"
							+ url_p
							+ "/performance/objectiveManage/objectiveCard.do?b_query=query&body_id="
							+ body
							+ "&model=4&opt=2&planid="
							+ PubFunc.encryption(plan_id)
							+ "&object_id="
							+ PubFunc.encryption(object_id)
							+ "&appfwd=1&etoken="
							+ PubFunc.convertUrlSpecialCharacter(PubFunc
									.convertTo64Base(username + "," + password))
							+ "'>" + plan_vo.getString("name") + "</a>");
					LazyDynaBean tempbean=new LazyDynaBean();
					tempbean.set("objectId", "Usr"+arr[i]);
					tempbean.set("subject", title);
					tempbean.set("bodyText", content);
					tempbean.set("href", _url.toString());
					bo.send(tempbean);
					String corpid = (String) ConstantParamter.getAttribute("wx","corpid");  
					if(corpid!=null&&corpid.length()>0){//推送微信公众号  zhaoxg add 2015-5-5
						WeiXinBo.sendMsgToPerson("Usr", arr[i], title, content.toString(), "http://www.hjsoft.com.cn:8089/UserFiles/Image/tongzhi.png", "");
					}
					String ddcorpid = (String) ConstantParamter.getAttribute("DINGTALK","corpid");  
					if(ddcorpid!=null&&ddcorpid.length()>0){//推送钉钉公众号  xus add 2017-6-2
						DTalkBo.sendMessage( arr[i],"Usr", title, content.toString(), "http://www.hjsoft.com.cn:8089/UserFiles/Image/tongzhi.png", "");
					}
//					this.sendMessage(title, content.toString(), arr[i], "usr");
				}
				/**打分退回推送待办  zhaoxg add 2014-9-1 */
//				PendingTask pt = new PendingTask();
				LazyDynaBean bean = new LazyDynaBean();
				String _title=this.plan_vo.getString("name")+"_(退回)";
				String _sql="";
				if("False".equalsIgnoreCase(NoApproveTargetCanScore)){
					_sql="select pm.* from per_mainbody pm,per_object po where pm.object_id=po.object_id and po.plan_id='"+plan_id+"' and pm.plan_id='"+plan_id+"' and pm.mainbody_id='"+arr[i]+"' and po.sp_flag='03'  and "+Sql_switcher.isnull("status", "0")+"<>2";
				}else{
					_sql="select * from per_mainbody  where plan_id='"+plan_id+"' and "+Sql_switcher.isnull("status", "0")+"<>2 and mainbody_id='"+arr[i]+"'";
				}	
				String href="";
                if ("2".equals(object_type))
                	href = "/performance/objectiveManage/objectiveEvaluate/objective_evaluate_list.do?b_init=init&plan_id=" + plan_id + "&returnflag=8&opt=1&entranceType=0&isSort=0";
                else
                	href = "/performance/objectiveManage/orgPerformance/org_performance_list.do?b_init=init&plan_id=" + plan_id + "&returnflag=8&opt=1";
				bean.set("oper", "start");
				bean.set("title", _title);
				bean.set("url", href);
				bean.set("sql", _sql);
				LazyDynaBean _bean=PerformanceImplementBo.updatePendingTask(this.conn, this.userView,"Usr"+arr[i],plan_id,bean,"1");
				if("add".equals(_bean.get("flag"))){
					pt.insertPending("PER"+_bean.get("pending_id"),"P",_title,this.userView.getDbname()+this.userView.getA0100(),"Usr"+arr[i],href,0,1,"打分退回",this.userView);	
				}	
				if("update".equals(_bean.get("selfflag"))){
					pt.updatePending("P", "PER"+_bean.get("selfpending_id"), 1, "打分退回", this.userView);
				}
				
				
				String a_pri_pendingCode = "";
				String sql = "select task_id from per_task_pt where plan_id="
						+ this.plan_vo.getInt("plan_id") + " and object_id='"
						+ object_id + "' and mainbody_id='" + arr[i] + "'";
				rowSet = dao.search(sql);
				if (rowSet.next())
					a_pri_pendingCode = rowSet.getString("task_id");
				String pendingType = "目标评估";
				if (a_pri_pendingCode != null && a_pri_pendingCode.length() > 0) {
					imip.updatePendingsStateByUID(a_pri_pendingCode, 1,
							pendingType);
				}
				String pendingCode = this.getPendingCode(arr[i], "usr");
				int maxid = 0;
				IDGenerator idg = new IDGenerator(2, this.conn);
				maxid = Integer.parseInt(IDGenerator.getKeyId("per_task_pt",
						"id", 1));

				RecordVo vo = new RecordVo("per_task_pt");
				vo.setInt("id", maxid);
				vo = dao.findByPrimaryKey(vo);
				vo.setString("object_id", object_id);
				vo.setString("mainbody_id", arr[i]);
				vo.setString("nbase", "usr");
				vo.setString("task_id", pendingCode);
				vo.setInt("plan_id", this.plan_vo.getInt("plan_id"));
				if (mainbodyid.equalsIgnoreCase(arr[i])
						|| object_id.equalsIgnoreCase(arr[i]))
					flag = 2;
				vo.setInt("flag", flag);
				dao.updateValueObject(vo);
				String url = "/performance/objectiveManage/objectiveCard.do?b_query=query&body_id="
						+ body
						+ "&model=4&opt=2&planid="
						+ PubFunc.encryption(plan_id)
						+ "&object_id="
						+ PubFunc.encryption(object_id);
				if (SystemConfig.getPropertyValue("clientName") != null
						&& "bjpt"
								.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {
					String aurl = url + "&pendingCode=" + pendingCode
							+ "&appfwd=1";
					imip.insertPending(
							pendingCode,
							title,
							this.userView.getDbname()
									+ this.userView.getA0100(), "usr" + arr[i],
							aurl, 0, 1, pendingType);
				}
				pt.insertPending(pendingCode, "P", title,
						this.userView.getDbname() + this.userView.getA0100(),
						"usr" + arr[i], url, 0, 1, pendingType, this.userView);
				if ("true".equalsIgnoreCase(GradeByBodySeq)) {
					StringBuffer sb = new StringBuffer("");
					sb.append(" update per_mainbody set status=1 where ");
					sb.append(" plan_id=" + plan_id);
					sb.append(" and object_id='" + object_id
							+ "' and seq>(select ");
					sb.append(Sql_switcher.isnull("seq", "0")
							+ " from per_mainbody where  ");
					sb.append(" plan_id=" + plan_id);
					sb.append(" and object_id='" + object_id
							+ "' and mainbody_id='" + arr[i] + "')");
					sb.append(" and seq<(select ");
					sb.append(Sql_switcher.isnull("seq", "0")
							+ " from per_mainbody where  ");
					sb.append(" plan_id=" + plan_id);
					sb.append(" and object_id='" + object_id
							+ "' and mainbody_id='" + this.userView.getA0100()
							+ "')");
					dao.update(sb.toString());
				}
				RowSet rs=dao.search("select A0101 from UsrA01 where A0100="+arr[i]+"");
				if(rs.next()){
					report_to+=rs.getString("A0101")+",";
				}
			}
			String sql = "select task_id from per_task_pt where plan_id="
					+ this.plan_vo.getInt("plan_id") + " and object_id='"
					+ object_id + "' and mainbody_id='"
					+ this.userView.getA0100() + "'";
			rowSet = dao.search(sql);
			String a_pri_pendingCode = "";
			if (rowSet.next())
				a_pri_pendingCode = rowSet.getString("task_id");
			String pendingType = "目标评估";
			if (a_pri_pendingCode != null && a_pri_pendingCode.length() > 0) {
				if ("bjpt"
						.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {
					imip.updatePendingsStateByUID(a_pri_pendingCode, 1,
							pendingType);
				}
				pt.updatePending("P", a_pri_pendingCode, 1, pendingType,
						this.userView);
			}
			dao.batchUpdate(list, valueList);

			Calendar cl = Calendar.getInstance();
			int year = cl.get(Calendar.YEAR);
			int month = cl.get(Calendar.MONTH) + 1;
			int day = cl.get(Calendar.DAY_OF_MONTH);
			int hh = cl.get(Calendar.HOUR_OF_DAY);
			int mm = cl.get(Calendar.MINUTE);
			int ss = cl.get(Calendar.SECOND);
			String dddd = year + "-" + month + "-" + day + " " + hh + ":" + mm
					+ ":" + ss;
			
			// 为对象的评分过程添加主体的：退回XXX的打分或确认意见 modify by 刘蒙
			Map mainbodyOptMap = new HashMap();
			StringBuffer mainbodyOptSQL = new StringBuffer("SELECT mb.A0101,mb.mainbody_id,pb.opt FROM per_mainbody mb ");
			mainbodyOptSQL.append(" LEFT JOIN per_plan_body pb ON pb.plan_id = mb.plan_id AND mb.body_id = pb.body_id ");
			mainbodyOptSQL.append(" WHERE mb.plan_id = ").append(plan_id).append(" AND mb.object_id = ").append(object_id);
			mainbodyOptSQL.append(" AND mb.mainbody_id IN (");
			for (int j = 0; j < arr.length; j++) {
				if (arr[j] == null || "".equals(arr[j])) {
					continue;
				}
				mainbodyOptSQL.append("'").append(arr[j]).append("',");
			}
			mainbodyOptSQL.delete(mainbodyOptSQL.length() - 1, mainbodyOptSQL.length()).append(")");
			
			rowSet = dao.search(mainbodyOptSQL.toString());
			while (rowSet.next()) {
				String _mainbody_id = rowSet.getString("mainbody_id");
				String maibody_name = rowSet.getString("A0101");
				int mainbody_opt = rowSet.getInt("opt");
				mainbodyOptMap.put(_mainbody_id, maibody_name + "," + mainbody_opt + "");
			}
			
			//-------------------------审批过程   zhaoxg add 2014-3-19-------------------------------------------------
			String sql1="update per_object set score_process=? where plan_id="+plan_id+" and object_id="+object_id+"";
			initXML(plan_id,object_id);
			for (int i = 0; i < arr.length; i++) {
				String strMbOpt = (String) mainbodyOptMap.get(arr[i]);
				String[] arrMbOpt = strMbOpt.split(",");
				String mb_name = arrMbOpt[0];
				String mb_opt = arrMbOpt[1];
				
				Element element = new Element("record");
				element.setAttribute("opt_object",this.userView.getA0100());
				element.setAttribute("name",getName());
				element.setAttribute("date",dddd);
				element.setAttribute("status","1");
				element.setAttribute("status_desc","退回" + mb_name + ("0".equals(mb_opt) ? " 的评分" : " 的确认意见"));
				element.setAttribute("reason",reason);
				element.setAttribute("report_to", mb_name);
				setAttributeValue(element);
			}
			String value = saveStrValue();
			list = new ArrayList();
			list.add(value);
			dao.update(sql1,list);
			
			buf.setLength(0);
			buf.append("update per_mainbody set ");
			if (Sql_switcher.searchDbServer() == Constant.ORACEL)
				buf.append(" sub_date=to_date('" + dddd
						+ "','yyyy-mm-dd hh24:mi:ss')");
			else
				buf.append(" sub_date='" + dddd + "'");
			buf.append(" where ");
			buf.append(" plan_id=" + this.plan_vo.getInt("plan_id"));
			buf.append(" and ");
			buf.append(" object_id='" + object_id + "'");
			buf.append(" and ");
			buf.append(" mainbody_id='" + this.userView.getA0100() + "'");
			dao.update(buf.toString());
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (rowSet != null) {
				try {
					rowSet.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}
	public String getName(){
		String name="";
		try{
			String sql="select b0110,e0122,A0100,A0101,E01A1,parentid from UsrA01 left join organization on UsrA01.e0122=organization.codeitemid where UsrA01.A0100="+this.userView.getA0100()+"";
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rs=dao.search(sql);
			if(rs.next()){
				String e0122 = rs.getString("e0122");
				String a0101 = rs.getString("a0101");
				String b0110 = rs.getString("b0110");
				String E01A1 = rs.getString("E01A1");
				String parentid = rs
						.getString("parentid");
				String um = "";
				if (AdminCode.getCodeName("UM", parentid) != null
						&& AdminCode.getCodeName("UM", parentid)
								.trim().length() > 0)
					um = AdminCode.getCodeName("UM", parentid)
							+ "/";
				String un = "";
				if (AdminCode.getCodeName("UN", b0110) != null
						&& AdminCode.getCodeName("UN", b0110)
								.trim().length() > 0)
					un = AdminCode.getCodeName("UN", b0110)
							+ "/";
				String kk = "";
				if (AdminCode.getCodeName("@K", E01A1) != null
						&& AdminCode.getCodeName("@K", E01A1)
								.trim().length() > 0)
					kk = AdminCode.getCodeName("@K", E01A1)
							+ "/";
				name = un+um
						+ AdminCode.getCodeName("UM", e0122) + "/"+kk
						+ a0101;
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return name;
	}
	/**
	 * 取考核主体类别
	 * 
	 * @param plan_id
	 * @param object_id
	 * @param mainbody_id
	 * @param dao
	 * @return
	 */
	public String getBodyID(String plan_id, String object_id,
			String mainbody_id, ContentDAO dao) {
		String body_id = "";
		try {
			String sql = "select body_id from per_mainbody where plan_id="
					+ plan_id + " and object_id='" + object_id
					+ "' and mainbody_id='" + mainbody_id + "'";
			RowSet rs = dao.search(sql);
			while (rs.next()) {
				body_id = rs.getString("body_id");
			}
			rs.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return body_id;
	}

	/**
	 * 取得考核对象职位，团队考核取团队负责人的职位
	 * 
	 * @param object_id
	 * @return
	 */
	public String getObjectPositionID(String object_id, String nbase) {
		String position = "";
		try {
			String oid = object_id;
			ContentDAO dao = new ContentDAO(this.conn);
			if (this.plan_vo.getInt("object_type") != 2) {
				StringBuffer buf = new StringBuffer();
				buf.append("select mainbody_id from per_mainbody where plan_id="
						+ this.plan_vo.getInt("plan_id"));
				buf.append(" and object_id='" + object_id + "' and body_id=-1");
				RowSet rs = dao.search(buf.toString());
				while (rs.next()) {
					oid = rs.getString("mainbody_id");
				}
				rs.close();
			}
			String sql = "select e01a1 from " + nbase + "a01 where a0100='"
					+ oid + "'";
			RowSet rowSet = dao.search(sql);
			while (rowSet.next()) {
				position = rowSet.getString("e01a1") == null ? "" : rowSet
						.getString("e01a1");
				;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return position;
	}

	/**
	 * 取得满足条件的职责子集中的记录
	 * 
	 * @param itemid
	 * @param positionID
	 * @param i9999
	 * @return
	 */
	public ArrayList getPositionFieldList(String itemid, String positionID,
			String i9999, int type) {
		ArrayList list = new ArrayList();
		int tableWidth = 0;
		String isHaveRecord = "0";
		String alertMessage = "";
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			AnalysePlanParameterBo bo = new AnalysePlanParameterBo(this.conn);
			Hashtable ht_table = bo.analyseParameterXml();
			if (ht_table != null) {
				if (ht_table.get("SubSet") != null)
					this.subSet = (String) ht_table.get("SubSet");
				if (ht_table.get("TargetPostDuty") != null)
					this.targetPostDuty = (HashMap) ht_table
							.get("TargetPostDuty");
				if (ht_table.get("TargetItem") != null)
					this.TargetItem = (String) ht_table.get("TargetItem");
			}
			StringBuffer i9_buf = new StringBuffer("");
			if (i9999 != null && !"".equals(i9999.trim())) {
				String[] temp_arr = i9999.split("`");
				for (int index = 0; index < temp_arr.length; index++) {
					if (temp_arr[index] == null || "".equals(temp_arr[index]))
						continue;
					if (type == 1)
						i9_buf.append(" or i9999=" + temp_arr[index]);
					else
						i9_buf.append(" and i9999<>" + temp_arr[index]);
				}
			}
			RecordVo vo = new RecordVo("per_template_item");
			vo.setInt("item_id", Integer.parseInt(itemid));
			vo = dao.findByPrimaryKey(vo);
			String itemdesc = vo.getString("itemdesc");
			ArrayList fieldList = DataDictionary.getFieldList("P04",
					Constant.USED_FIELD_SET);
			ArrayList alist = new ArrayList();
			StringBuffer column = new StringBuffer();
			for (int i = 0; i < fieldList.size(); i++) {
				FieldItem item = (FieldItem) fieldList.get(i);
				if (this.targetPostDuty.get(item.getItemid().toUpperCase()) != null) {
					String xx = (String) this.targetPostDuty.get(item
							.getItemid().toUpperCase());
					FieldItem a_item = DataDictionary.getFieldItem(xx
							.toLowerCase());
					if (a_item == null || "0".equals(a_item.getUseflag())
							|| "0".equals(item.getUseflag()))
						continue;
					if (!a_item.getFieldsetid().equalsIgnoreCase(subSet)) {
						list.add(0, new ArrayList());
						list.add(1, new ArrayList());
						list.add(2, tableWidth + "");
						isHaveRecord = "1";
						alertMessage = "目标卡岗位职责参数设置错误，请到参数设置中重新设置参数并保存！";
						list.add(3, isHaveRecord);
						list.add(4, alertMessage);
						return list;
					}
					LazyDynaBean bean = new LazyDynaBean();
					int tdwidth = a_item.getItemlength()
							+ a_item.getDecimalwidth();
					if (item.getItemdesc().length() * 2 > tdwidth)
						tdwidth = item.getItemdesc().length();
					tableWidth += tdwidth;
					bean.set("tdwidth", tdwidth + "px");
					bean.set("itemid", a_item.getItemid().toLowerCase());
					bean.set("itemid_1", item.getItemid().toLowerCase());
					if ("p0407".equalsIgnoreCase(item.getItemid())) {
						if (this.planParam.get("TaskNameDesc") != null
								&& !"".equals((String) this.planParam
										.get("TaskNameDesc"))) {
							bean.set("itemdesc",
									(String) this.planParam.get("TaskNameDesc"));
						} else {
							if ("任务内容"
									.equalsIgnoreCase(item.getItemdesc().trim())) {
								if (SystemConfig.getPropertyValue("clientName") != null
										&& "zglt".equalsIgnoreCase(
                                        SystemConfig.getPropertyValue(
                                                "clientName"))) // 中国联通
									bean.set("itemdesc", "工作目标");
								else
									bean.set("itemdesc", ResourceFactory
											.getProperty("jx.khplan.point"));
							} else
								bean.set("itemdesc", item.getItemdesc());
						}
					} else {
						bean.set("itemdesc", item.getItemdesc());// 列头显示为目标卡指标名称
					}
					bean.set("itemtype_1", item.getItemtype().toUpperCase());
					bean.set("itemtype", a_item.getItemtype().toUpperCase());
					bean.set("codesetid", a_item.getCodesetid());
					bean.set("codesetid_1", item.getCodesetid());
					bean.set("decilength", a_item.getDecimalwidth() + "");
					bean.set("decilength_1", item.getDecimalwidth() + "");
					if ("D".equalsIgnoreCase(a_item.getItemtype())) {
						column.append(","
								+ Sql_switcher.dateToChar(a_item.getItemid(),
										"yyyy-mm-dd") + " as "
								+ a_item.getItemid());// hh24:mi:ss
					} else
						column.append("," + a_item.getItemid());
					alist.add(bean);
				}
			}
			DBMetaModel dbmodel = new DBMetaModel(this.conn);
			dbmodel.reloadTableModel(this.subSet);
			DbWizard dbWizard = new DbWizard(this.conn);
			Table table = new Table(this.subSet);
			if (!dbWizard.isExistTable(table.getName(), false)) {
				list.add(0, new ArrayList());
				list.add(1, new ArrayList());
				list.add(2, tableWidth + "");
				isHaveRecord = "1";
				alertMessage = "目标卡岗位职责参数中设置的岗位职责子集未构库！";
				list.add(3, isHaveRecord);
				list.add(4, alertMessage);
				return list;
			}
			if (alist.size() <= 0) {
				list.add(0, new ArrayList());
				list.add(1, new ArrayList());
				list.add(2, tableWidth + "");
				isHaveRecord = "1";
				alertMessage = "目标卡岗位职责参数中设置的岗位职责子集指标未构库！";
				list.add(3, isHaveRecord);
				list.add(4, alertMessage);
				return list;
			}
			LoadXml loadxml = new LoadXml(this.conn, this.plan_vo.getInt("plan_id")+"");
			Hashtable params = loadxml.getDegreeWhole();
			String dutyRule = (String) params.get("DutyRule");
			String[] temp1 = dutyRule.split("\\|");
			String _sql = "";
			if(temp1.length>1){
				boolean like = false;
//		    	if("1".equals(temp1[2]))
//		    		like=true;
		    	boolean history=false;
//		        if("1".equals(temp1[3]))
//		        	history=true;
				FactorList factorslist=new FactorList(temp1[0],PubFunc.getStr(temp1[1]),"Usr",history,like,false,0,userView.getUserId());
				factorslist.setSuper_admin(userView.isSuper_admin());
		        String sqlexp = factorslist.getSingleTableSqlExpression(this.subSet);
		        if(sqlexp!=null&&sqlexp.length()>0){
		        	_sql = " and "+sqlexp;
		        }
			}
			StringBuffer sql = new StringBuffer();
			sql.append("select e01a1,i9999" + column.toString());
			sql.append(" from " + this.subSet);
			sql.append(" where UPPER(e01a1)='" + positionID.toUpperCase()
					+ "' and ");
			sql.append("(");
			sql.append("UPPER(" + this.TargetItem + ")='"
					+ PubFunc.keyWord_reback(itemdesc.toUpperCase()) + "'");
			sql.append(" or ");
			sql.append("UPPER(" + this.TargetItem + ")='"
					+ PubFunc.keyWord_filter(itemdesc.toUpperCase()) + "'");
			sql.append(")");
			if (i9_buf.toString().length() > 0) {
				if (type == 1)
					sql.append(" and (" + PubFunc.keyWord_reback(i9_buf.toString().substring(3)) + ")");
				else
					sql.append(" and (" + PubFunc.keyWord_reback(i9_buf.toString().substring(4)) + ")");
			}
			if(_sql.length()>0){
				sql.append(_sql);
			}
			RowSet rs = dao.search(sql.toString());
			ArrayList dataList = new ArrayList();
			while (rs.next()) {
				LazyDynaBean bean = new LazyDynaBean();
				bean.set("e01a1", rs.getString("e01a1"));
				bean.set("i9999", rs.getInt("i9999") + "");
				for (int i = 0; i < alist.size(); i++) {
					LazyDynaBean abean = (LazyDynaBean) alist.get(i);
					String id = (String) abean.get("itemid");
					String itemtype = (String) abean.get("itemtype");
					String codesetid = (String) abean.get("codesetid");
					String decilength = (String) abean.get("decilength");
					if ("A".equalsIgnoreCase(itemtype)) {
						if ("0".equals(codesetid)) {
							bean.set(
									id,
									rs.getString(id) == null ? "" : rs
											.getString(id));
						} else {
							bean.set(
									id,
									rs.getString(id) == null ? "" : AdminCode
											.getCodeName(codesetid,
													rs.getString(id)));
							bean.set(id + "_1", rs.getString(id) == null ? ""
									: rs.getString(id));
						}
					} else if ("D".equalsIgnoreCase(itemtype)) {
						bean.set(
								id,
								rs.getString(id) == null ? "" : rs
										.getString(id));
					} else if ("N".equalsIgnoreCase(itemtype)) {
						if ("0".equals(decilength)) {
							bean.set(id, rs.getInt(id) + "");
						} else {
							bean.set(id, rs.getDouble(id) + "");
						}
					} else if ("M".equalsIgnoreCase(itemtype)) {
						String str = Sql_switcher.readMemo(rs, id);
						if (str.length() > 30) {
							bean.set(id, str.substring(0, 30) + "...");
							bean.set(id + "_info", str);
						} else {
							bean.set(id, str);
							bean.set(id + "_info", str);
						}

					}
					bean.set("itemtype", itemtype);
				}
				dataList.add(bean);
			}
			if (dataList.size() <= 0) {
				list.add(0, new ArrayList());
				list.add(1, new ArrayList());
				list.add(2, tableWidth + "");
				isHaveRecord = "1";
				alertMessage = "目标卡岗位职责子集中没有与该项目对应的指标！";
				list.add(3, isHaveRecord);
				list.add(4, alertMessage);
				return list;
			} else {
				list.add(0, dataList);
				list.add(1, alist);
				list.add(2, tableWidth + "");
				list.add(3, isHaveRecord);
				list.add(4, alertMessage);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	/**
	 * 将指标导入目标卡
	 * 
	 * @param dbname
	 * @param itemid
	 * @param positionID
	 * @param i9999
	 * @param plan_id
	 * @param object_id
	 * @param mainbody_id
	 */
	public void importPositionField(String dbname, String itemid,
			String positionID, String i9999, String plan_id, String object_id,
			String mainbody_id, String p0400, String importType, String sids) {
		try {
			ArrayList list = null;
			if ("position".equalsIgnoreCase(importType)) {
				list = this.getPositionFieldList(itemid, positionID, i9999, 1);
			} else {
				ImportDeptFieldBo bo = new ImportDeptFieldBo(this.conn,
						getUserView(), plan_id);
				HashMap i9 = bo.getSelectedDeptField(itemid, object_id, 2,
						i9999, sids);
				list = bo.getDeptFieldList(itemid, i9, positionID, 1);
			}
			ArrayList dataList = (ArrayList) list.get(0);
			ArrayList fieldList = (ArrayList) list.get(1);
			IDGenerator idg = new IDGenerator(2, conn);
			ContentDAO dao = new ContentDAO(this.conn);
			LazyDynaBean personnelInfo = null;
			this.object_id = object_id;
			if (this.plan_vo.getInt("object_type") == 2)
				personnelInfo = getPersonnelInfo(dbname, object_id);
			else {
				personnelInfo = this.getLeaderInfo(dbname, object_id);
			}
			ArrayList listvo = new ArrayList();
			int seq = getP0400Seq(p0400, dataList.size());
			boolean p0413flag = false;// 是否有对应的分值指标
			boolean p0415flag = false;// 是否有对应的权重指标
			String p0413ItmeId = "";
			String p0415ItmeId = "";
			for (int i = 0; i < dataList.size(); i++) {
				LazyDynaBean d_bean = (LazyDynaBean) dataList.get(i);
				RecordVo vo = new RecordVo("P04");
				String id = idg.getId("P04.P0400");
				vo.setInt("p0400", Integer.parseInt(id));
				dao.deleteValueObject(vo);
				String i9 = (String) d_bean.get("i9999");
				for (int j = 0; j < fieldList.size(); j++) {
					LazyDynaBean f_bean = (LazyDynaBean) fieldList.get(j);
					String k_itemid = (String) f_bean.get("itemid");
					String p_itemid = (String) f_bean.get("itemid_1");
					if ("p0413".equalsIgnoreCase(p_itemid)) {
						p0413flag = true;
						p0413ItmeId = k_itemid;
					}
					if ("p0415".equalsIgnoreCase(p_itemid)) {
						p0415flag = true;
						p0415ItmeId = k_itemid;
					}
					String p_itemtype = (String) f_bean.get("itemtype_1");
					String p_codesetid = (String) f_bean.get("codesetid_1");
					String p_decilength = (String) f_bean.get("decilength_1");
					String value = "";
					
					 
					if ("A".equalsIgnoreCase(p_itemtype)&&!"0".equals(p_codesetid)) {
							value = (String) d_bean.get(k_itemid + "_1");
					}
					else if ("M".equalsIgnoreCase(p_itemtype))
							value = (String) d_bean.get(k_itemid + "_info");
					else
							value = (String) d_bean.get(k_itemid); 
					
					if (value != null && !"".equals(value)) {
						if ("N".equalsIgnoreCase(p_itemtype)) {
							if ("0".equals(p_decilength)) {
								if (value.indexOf(".") != -1)
									value = value.substring(0,
											value.indexOf("."));
								vo.setInt(p_itemid.toLowerCase(),
										Integer.parseInt(value));
							} else
								vo.setDouble(p_itemid.toLowerCase(),
										Double.parseDouble(value));

						} else if ("A".equalsIgnoreCase(p_itemtype)
								|| "M".equalsIgnoreCase(p_itemtype)) {
							vo.setString(p_itemid.toLowerCase(), value);
						} else if ("D".equalsIgnoreCase(p_itemtype)) {
							Calendar d = Calendar.getInstance();
							String[] temp = value.split("-");
							d.set(Calendar.YEAR, Integer.parseInt(temp[0]));
							d.set(Calendar.MONTH, Integer.parseInt(temp[1]) - 1);
							d.set(Calendar.DATE, Integer.parseInt(temp[2]));
							vo.setDate(p_itemid.toLowerCase(), d.getTime());
						}
					}
				}
				String e01a1 = "";
				// 加入固定值
				if (this.plan_vo.getInt("object_type") == 2) {
					vo.setString("b0110", (String) personnelInfo.get("b0110"));
					vo.setString("e0122", (String) personnelInfo.get("e0122"));
					vo.setString("e01a1", (String) personnelInfo.get("e01a1"));
					vo.setString("nbase", dbname);
					vo.setString("a0100", (String) personnelInfo.get("a0100"));
					vo.setString("a0101", (String) personnelInfo.get("a0101"));
					if ("position".equalsIgnoreCase(importType))
						e01a1 = (String) personnelInfo.get("e01a1");
					else
						e01a1 = (String) d_bean.get("e01a1");
				} else {
					vo.setString("b0110", object_id);
					String temp = AdminCode.getCodeName("UN", object_id);
					if (temp != null && temp.length() > 0)
						vo.setString("a0101", temp);
					else
						vo.setString("a0101",
								AdminCode.getCodeName("UM", object_id));
					if ("position".equalsIgnoreCase(importType))
						e01a1 = (String) personnelInfo.get("e01a1");
					else
						e01a1 = (String) d_bean.get("e01a1");
				}
				vo.setString("p0401", e01a1 + "_" + i9);
				if ("position".equalsIgnoreCase(importType))
					vo.setInt("fromflag", 3);
				else
					vo.setInt("fromflag", 5);
				if ("2".equals(model)
						&& ("07".equalsIgnoreCase(this.objectSpFlag)
								|| ("01".equalsIgnoreCase(this.objectSpFlag) && (this.isAdjustPoint || "1"
										.equals(this.processing_state_all))) || "03"
								.equalsIgnoreCase(this.objectSpFlag))) {
					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);
				}
				if ("1".equals(model)
						&& (this.un_functionary.equalsIgnoreCase(this.userView
								.getA0100()) || "1".equals((String) this.planParam
								.get("targetMakeSeries")))
						&& "True"
								.equals((String) this.planParam.get("taskAdjustNeedNew"))
						&& ("07".equalsIgnoreCase(this.objectSpFlag) || ("01"
								.equalsIgnoreCase(this.objectSpFlag) && this.isAdjustPoint))) {
					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);
				}

				if ("3".equals(model)
						&& (isAdjustPoint || !"01".equals(this.objectSpFlag))) {

					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);
				}
				if ("1".equals(model)
						&& "02".equalsIgnoreCase(this.objectSpFlag)
						&& "true"
								.equalsIgnoreCase((String) this.planParam.get("allowLeadAdjustCard"))
						&& !this.userView.getA0100().equalsIgnoreCase(
								this.un_functionary)) {
					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);
				}

				if ("7".equals(model)
						&& ("07".equalsIgnoreCase(this.objectSpFlag) || ("01"
								.equalsIgnoreCase(this.objectSpFlag) && (this.isAdjustPoint)))) {
					vo.setInt("state", -1);
					vo.setInt("chg_type", 2);
				}

				if ("False"
						.equals((String) this.planParam.get("taskAdjustNeedNew"))) {
					if ("1".equals(model) || "2".equals(model)) {
						if ((this.userView.getA0100().equals(
								this.un_functionary) && "1".equals(model))
								|| (this.userView.getA0100().equals(
										this.object_id) && "2".equals(model))) // 是负责人
																				// ||本人
						{
							// 有调整记录的 || 已批计划新建的
							if (isAdjustPoint
									|| "03".equalsIgnoreCase(this.objectSpFlag)) {
								vo.setInt("state", -1);
								vo.setInt("chg_type", 2);
							} else {
								vo.setInt("state", 0);
								vo.setInt("chg_type", 0);
							}
						} else {
							if (!"01".equalsIgnoreCase(this.objectSpFlag)) {
								vo.setInt("state", -1);
								vo.setInt("chg_type", 2);
							} else {
								vo.setInt("state", 0);
								vo.setInt("chg_type", 0);
							}
						}
					} else if ("3".equals(model)) {
						if (!"01".equalsIgnoreCase(this.objectSpFlag)) {
							vo.setInt("state", -1);
							vo.setInt("chg_type", 2);
						} else {
							vo.setInt("state", 0);
							vo.setInt("chg_type", 0);
						}
					}
				}

				if ("2".equals(model)
						&& "03".equalsIgnoreCase(this.objectSpFlag)) {

					String a0100 = (String) personnelInfo.get("a0100");
					dao.update("update per_object set trace_sp_flag='01' where object_id='"
							+ a0100
							+ "' and plan_id="
							+ this.plan_vo.getInt("plan_id"));
					dao.update("update per_object set sp_flag='01' where object_id='"
							+ a0100
							+ "' and plan_id="
							+ this.plan_vo.getInt("plan_id"));

				}
				if ("1".equals(model)
						&& "03".equalsIgnoreCase(this.objectSpFlag)) // &&((this.objectSpFlag.equalsIgnoreCase("03")&&((String)this.planParam.get("taskAdjustNeedNew")).equals("False"))||(this.objectSpFlag.equalsIgnoreCase("01")&&isAdjustPoint)))
																		// //我的目标
				{
					if (this.un_functionary.equalsIgnoreCase(this.userView
							.getA0100())
							|| "1"
									.equals((String) this.planParam.get("targetMakeSeries"))) {
						dao.update("update per_object set trace_sp_flag='01' where object_id='"
								+ this.object_id
								+ "' and plan_id="
								+ this.plan_vo.getInt("plan_id"));
						dao.update("update per_object set sp_flag='01' where object_id='"
								+ this.object_id
								+ "' and plan_id="
								+ this.plan_vo.getInt("plan_id"));

					}
				}
				if ("0".equals(this.template_vo.getString("status"))) // 分值
				{
					if (!p0413flag)
						vo.setDouble("p0413", 0);
					else 
						//vo.setDouble("p0413", Double.parseDouble((String)d_bean.get("k2003")));
					    vo.setDouble("p0413", Double.parseDouble((String)d_bean.get(p0413ItmeId)));
					vo.setDouble("p0415", 1);// 分值模版，权重就是1
				} else if ("1".equals(this.template_vo.getString("status"))) // 权重
				{
					vo.setDouble("p0413",
							this.template_vo.getDouble("topscore"));// 权重模版，分值就是模版总分
					if (!p0415flag)
						vo.setDouble("p0415", 0);
					else 
                        vo.setDouble("p0415", Double.parseDouble((String)d_bean.get(p0415ItmeId)));
				}
				vo.setInt("plan_id", this.plan_vo.getInt("plan_id"));
				vo.setInt("item_id", Integer.parseInt(itemid));
				vo.setInt("seq", seq);
				if (vo.hasAttribute("itemtype"))
					vo.setInt("itemtype", 0);
				listvo.add(vo);
				seq++;
			}
			dao.addValueObject(listvo);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 取得某考核计划下 主体 给各考核对象 打分的分值/排名（考核对象的总分） 以及 按总分排名的考核对象顺序列表
	 * 
	 * @param plan_id
	 *            计划id
	 * @param mainbody_id
	 *            考核主体id
	 * @param KeepDecimal
	 *            小数位
	 * @return
	 */
	public HashMap getObjectTotalScore(String plan_id, String mainbody_id) {
		HashMap map = new HashMap();
		RowSet rowSet = null;
		try {
			String KeepDecimal = (String) this.planParam.get("KeepDecimal"); // 保留小数位
			ContentDAO dao = new ContentDAO(this.conn);
			StringBuffer sql = new StringBuffer(
					"select object_id,score from per_mainbody ");
			sql.append(" where plan_id = " + plan_id + " and mainbody_id='"
					+ mainbody_id + "' ");
			sql.append(" ");
			sql.append(" order by score desc ");

			rowSet = dao.search(sql.toString());
			double a_score = -1;
			int num = 0;
			while (rowSet.next()) {
				String object_id = rowSet.getString("object_id");
				double value = rowSet.getDouble("score");
				if (a_score == -1 || value != a_score) {
					num++;
					a_score = value;
				}
				map.put(object_id,
						PubFunc.round(rowSet.getString("score"),
								Integer.parseInt(KeepDecimal))
								+ "/" + num);
			}

			if (rowSet != null)
				rowSet.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	/**
	 * 如果为团队考核，取部门负责人的信息
	 * 
	 * @param dbname
	 * @param object_id
	 * @return
	 */
	public LazyDynaBean getLeaderInfo(String dbname, String object_id) {
		LazyDynaBean abean = new LazyDynaBean();
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			String a0100 = "";
			RowSet rs = dao
					.search("select mainbody_id from per_mainbody pm where pm.object_id='"
							+ object_id
							+ "' and plan_id="
							+ this.plan_vo.getInt("plan_id")
							+ " and body_id=-1");
			while (rs.next()) {
				a0100 = rs.getString(1);
			}
			RowSet rowSet = dao
					.search("select b0110,e0122,e01a1,a0100,a0101 from "
							+ dbname + "A01 where a0100='" + a0100 + "'");
			if (rowSet.next()) {
				abean.set(
						"b0110",
						rowSet.getString("b0110") != null ? rowSet
								.getString("b0110") : "");
				abean.set(
						"e0122",
						rowSet.getString("e0122") != null ? rowSet
								.getString("e0122") : "");
				abean.set(
						"e01a1",
						rowSet.getString("e01a1") != null ? rowSet
								.getString("e01a1") : "");
				abean.set("a0100", rowSet.getString("a0100"));
				abean.set("a0101", rowSet.getString("a0101"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return abean;
	}

	/**
	 * 取得考核对象目标卡中已经选择的职务子集的指标
	 * 
	 * @param itemid
	 * @param object_id
	 * @return
	 */
	public String getSelectedPositionField(String itemid, String object_id) {
		String str = "";
		try {
			String sql = "select p0401,chg_type,state  from p04 where item_id="
					+ itemid + " and fromflag=3 and plan_id="
					+ this.plan_vo.getInt("plan_id");
			if (this.plan_vo.getInt("object_type") != 2)
				sql += " and b0110='" + object_id + "'";
			else
				sql += " and a0100='" + object_id + "'";
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rs = dao.search(sql);
			while (rs.next()) {
				String temp = rs.getString(1);
				if (temp == null || "".equals(temp) || temp.indexOf("_") == -1)
					continue;
				String chg_type = rs.getString(2);
				String state = rs.getString(3);
				/** 删除的任务还可以导入 */
				if (chg_type != null && "3".equals(chg_type) && state != null
						&& "-1".equals(state))
					continue;

				String strs = temp.split("_")[1]; // 判断是否是数字 JinChunhai
													// 2011.05.24
				if (!isNumber(strs))
					continue;

				str += "`" + temp.split("_")[1];
			}
			if (str.length() > 0)
				str = str.substring(1);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return str;
	}

	// 判断整型
	public boolean isNumber(String str) {
		return str.matches("[\\d]+");
	}

	public String getSubSet() {
		return subSet;
	}

	public void setSubSet(String subSet) {
		this.subSet = subSet;
	}

	public HashMap getTargetPostDuty() {
		return targetPostDuty;
	}

	public void setTargetPostDuty(HashMap targetPostDuty) {
		this.targetPostDuty = targetPostDuty;
	}

	public String getTargetItem() {
		return TargetItem;
	}

	public void setTargetItem(String targetItem) {
		TargetItem = targetItem;
	}

	public String getIsCopyScore() {
		return isCopyScore;
	}

	public void setIsCopyScore(String isCopyScore) {
		this.isCopyScore = isCopyScore;
	}

	public String getTargetCollectItem() {
		return TargetCollectItem;
	}

	public void setTargetCollectItem(String targetCollectItem) {
		TargetCollectItem = targetCollectItem;
	}

	public String getTargetTraceEnabled() {
		return TargetTraceEnabled;
	}

	public void setTargetTraceEnabled(String targetTraceEnabled) {
		TargetTraceEnabled = targetTraceEnabled;
	}

	private int rowNum = 0; // 行坐标
	private short colIndex = 0; // 纵坐标
	private int rowSize = 0;

	public String getObjectCardExcel() {
		// this.opt=4;

		String html;
		this.objectEvaluateValueMap = getObjectEvaluateValueMap(this.object_id,
				this.userView.getA0100()); // 取得考核对象评估结果
		if (isShowSelfScore())
			this.objectSelfEvaluateValueMap = getObjectEvaluateValueMap(
					this.object_id, this.object_id); // 取得考核对象自我评估结果
		if (this.opt != 1) {
			this.pointDescMap = getTemplatePointDetail(); // 取得模板引入的绩效指标标度
		}
		if ((this.model != null && "5".equals(this.model))
				|| ((opt == 2 || (opt == 0 && (this.mainbodyBean != null && "2".equals((String) this.mainbodyBean
						.get("status"))))))) {
			if ("1".equals(this.model) || "2".equals(this.model)
					|| "3".equals(this.model) || "4".equals(this.model))
				this.mainbodyList = getPerMainBodyList2(
						this.plan_vo.getInt("plan_id"), this.object_id);
			else
				this.mainbodyList = getPerMainBodyList(
						this.plan_vo.getInt("plan_id"), this.object_id);
			this.objectAllEvaluateMap = objectAllEvaluateMap(this.object_id);
		}
		if (("4".equals(model) || "2".equals(model) || "1".equals(model))
				&& this.objectAllEvaluateMap.size() == 0) {
			if (opt == 2
					|| (this.mainbodyBean != null && "2".equals(this.mainbodyBean.get(
							"status")))
					|| this.plan_vo.getInt("status") == 7) {
				if (isShowSelfScore()
						&& this.objectSelfEvaluateValueMap.size() > 0
						&& !this.object_id.equalsIgnoreCase(this.userView
								.getA0100())
						&& !this.un_functionary.equalsIgnoreCase(this.userView
								.getA0100())) {

					if ("1".equals(this.model) || "2".equals(this.model)
							|| "3".equals(this.model) || "4".equals(this.model))
						this.mainbodyList = getPerMainBodyList2(
								this.plan_vo.getInt("plan_id"), this.object_id);
					else
						this.mainbodyList = getPerMainBodyList(
								this.plan_vo.getInt("plan_id"), this.object_id);
					this.objectAllEvaluateMap = objectAllEvaluateMap(this.object_id);
				}
			}
		}
		if (this.planParam.get("showDeductionCause") != null
				&& "True"
						.equalsIgnoreCase((String) this.planParam.get("showDeductionCause"))) // /显示扣分原因
		{
			if (this.objectAllEvaluateMap.size() == 0)
				this.objectAllEvaluateMap = objectAllEvaluateMap(this.object_id);
		}
		executeP04_commonnessData(); // 判断p04表中是否已为对象产生模板内的共性指标，没有则自动产生
		this.p04List = getP04List();
		this.templateItemList = getTemplateItemList();
		this.addMinusPointStr = this.getAddMinusPointStr();
		this.itemToPointMap = getItemToPointMap();
		get_LeafItemList();
		
		this.leafItemLinkMap = getLeafItemLinkMap();
		this.itemPointNum = getItemPointNum();
		/** 将上个考核主体打分带入，指标id对应分值和指标ID+“_1”对应标度代码 */
		priporHashMap = new HashMap();
		this.kh_objectlist = getObjectList();
		html = this.getExcelFileName();
		return html;
	}

	private boolean isEditCloumn = false;// 是否有编辑列，输出excel不用输出编辑列
	private boolean isAttachCloumn = false;// 是否有附件列，输出excel不用输出附件列
	private HSSFCellStyle csCell = null;
	HSSFCellStyle del_aStyle = null;
	HSSFCellStyle del_csCell = null;
	private HSSFCellStyle decimal_csCell = null;
	private HSSFCellStyle del_deci_csCell = null;

	public String getExcelFileName() {
		this.headList = getHeadList();
		StringBuffer htmlContext = new StringBuffer("");
		HashMap existWriteItem = new HashMap();
		LazyDynaBean abean = null;
		LazyDynaBean a_bean = null;
		HSSFWorkbook hwb = null;
		MyObjectiveBo bo = new MyObjectiveBo(this.conn);
		if(!"objectFlag".equals(objectFlag)){
		    hwb = new HSSFWorkbook();
		} else {
		    hwb = workbook;
		}
		String nameDesc = "";
		LazyDynaBean ab_ean = null;
        for (int i = 0; i < this.kh_objectlist.size(); i++) {
            ab_ean = (LazyDynaBean) this.kh_objectlist.get(i);
            nameDesc = (String) ab_ean.get("codeitemdesc");
            if(sheetNames == null || sheetNames.size()==0 ){
                sheetNames.add(nameDesc);
            }
            else if(sheetNames != null && sheetNames.size()>0) {
                for(int m=0;m<sheetNames.size();m++){
                    String temp = (String)sheetNames.get(m);
                    if(temp.equals(nameDesc)){
                        int count=1;
                        for(int n=0;n<sheetNames.size();n++){
                            String innerTemp = (String)sheetNames.get(n);
                            String tempstr = innerTemp.substring(innerTemp.length()-1);//截取最后一位
                            if(innerTemp.indexOf(nameDesc)!=-1 && isDigit(tempstr) ){
                                count++;
                            }
                        }
                        nameDesc+=count;
                    }
                }
                sheetNames.add(nameDesc);
            }
        }
	    HSSFSheet sheet = hwb.createSheet(nameDesc);
        bo.setHwb(hwb);
        bo.setSheet(sheet);
		HSSFCellStyle aStyle = null;
		HSSFCellStyle headStyle = null;
		HSSFCellStyle leftStyle = null;
		HSSFCellStyle topStyle = null;
		HSSFRow row = null;
		FileOutputStream fileOut = null;
		String fileName = userView.getUserName() + "_ObjectiveCard.xls";
		int total_width = 0;
		try {
			aStyle = bo.style(hwb, 99);// bo.style(hwb, 1);
			del_aStyle = bo.style(hwb, 98);// 红色字体
			headStyle = bo.style(hwb, 10);
			leftStyle = bo.style(hwb, 100);
			csCell = bo.style(hwb, 88);
			del_csCell = bo.style(hwb, 89);
			del_deci_csCell = bo.style(hwb, 89);
			decimal_csCell = bo.style(hwb, 88);
			if (this.lay == 0)
				this.lay = 1;
			int KeepDecimal = Integer.parseInt((String) this.planParam
					.get("KeepDecimal"));
			HSSFDataFormat df = hwb.createDataFormat();
			StringBuffer deci_buf = new StringBuffer("0.");
			for (int in = 0; in < KeepDecimal; in++) {
				deci_buf.append("0");
			}
			deci_buf.append("_ ");
			decimal_csCell.setDataFormat(df.getFormat(deci_buf.toString()));
			del_deci_csCell.setDataFormat(df.getFormat(deci_buf.toString()));
			for (int i = 0; i < this.headList.size(); i++) {
				abean = (LazyDynaBean) this.headList.get(i);
				String itemid = (String) abean.get("itemid");
				String itemType = (String) abean.get("itemType");
				if ("edit".equalsIgnoreCase(itemid)) {
					isEditCloumn = true;
					continue;
				}
				if ("attach".equalsIgnoreCase(itemid)) {
					this.isAttachCloumn = true;
					continue;
				}
				if (i == 0) {
					bo.executeCellByType(this.rowNum, this.colIndex,
							this.rowNum, (short) (this.lay - 1),
							(String) abean.get("itemdesc"), headStyle, "A");
					this.colIndex += this.lay;
				} else {
					bo.executeCellByType(this.rowNum, this.colIndex,
							this.rowNum, this.colIndex,
							(String) abean.get("itemdesc"), headStyle, "A");
					this.colIndex++;
				}
			}
			int rowNum = 0;
			for (int i = 0; i < this.leafItemList.size(); i++) {
				abean = (LazyDynaBean) this.leafItemList.get(i);
				String item_id = (String) abean.get("item_id");

				int num = ((Integer) this.itemPointNum.get(item_id)).intValue();
				ArrayList pointList = (ArrayList) this.itemToPointMap
						.get(item_id);
				String item_kind = (String) abean.get("kind");
				ArrayList linkParentList = (ArrayList) this.leafItemLinkMap
						.get(item_id); // **
				a_bean = (LazyDynaBean) linkParentList.get(linkParentList
						.size() - 1);
				String aitemid = (String) a_bean.get("item_id");
				int anum = ((Integer) this.itemPointNum.get(aitemid))
						.intValue();
				if (anum > num && this.itemToPointMap.get(aitemid) != null
						&& existWriteItem.get(aitemid) == null) {
					for (int e = linkParentList.size() - 1; e >= 0; e--) {
						a_bean = (LazyDynaBean) linkParentList.get(e);
						String a_itemid = (String) a_bean.get("item_id");
						String itemdesc = (String) a_bean.get("itemdesc");

						if (a_itemid.equals(item_id))
							break;
						if (this.itemToPointMap.get(a_itemid) != null) {
							ArrayList apointList = (ArrayList) this.itemToPointMap
									.get(a_itemid);
							for (int j = 0; j < apointList.size(); j++) {
								this.rowNum++;
								this.colIndex = 0;
								if (existWriteItem.get(a_itemid) == null) {
									bo.executeCellByType(this.rowNum,
											this.colIndex,
											((Integer) itemPointNum
													.get(a_itemid)).intValue(),
											this.colIndex, itemdesc, aStyle,
											"A");
									this.colIndex++;
								} else {
									this.colIndex++;
								}
								existWriteItem.put(a_itemid, "1");
								LazyDynaBean pointBean = (LazyDynaBean) apointList
										.get(j);
								for (int n = linkParentList.size() - e; n < this.lay; n++) {
									bo.executeCellByType(this.rowNum,
											this.colIndex, this.rowNum,
											this.colIndex, " ", aStyle, "A");
									this.colIndex++;
								}
								if (pointList == null) {
									bo.executeCellByType(this.rowNum,
											this.colIndex, this.rowNum,
											this.colIndex, " ", aStyle, "A");
									this.colIndex++;
								} else {
									if (this.model != null
											&& "5".equals(this.model)) {

									} else {
										LazyDynaBean point_bean = (LazyDynaBean) pointList
												.get(j);
										String context = (String) point_bean
												.get("p0407");
										String chg_type = (String) point_bean
												.get("chg_type");
										String state = (String) point_bean
												.get("state");
										boolean isDelPoint = false;
										if ("3".equals(chg_type)
												&& "-1".equals(state))
											isDelPoint = true;
										/*
										 * if(this.opt==2) {
										 * context=serial_number+"."+context;
										 * serial_number++; } else
										 */
										{
											if ((point_bean.get("f_p0400") == null || ((String) point_bean
													.get("f_p0400")).trim()
													.length() == 0)
													&& (SystemConfig
															.getPropertyValue("noNumber_objective") == null
															|| SystemConfig
																	.getPropertyValue(
																			"noNumber_objective")
																	.length() == 0 || "false"
															.equalsIgnoreCase(
                                                                    SystemConfig
.getPropertyValue(
                                                                    "noNumber_objective")))) {
												context = serial_number + "."
														+ context;
												serial_number++;
											}
											/*
											 * else
											 * if(this.mainbodyBean!=null&&this
											 * .mainbodyBean
											 * .get("status")!=null&&
											 * ((String)this
											 * .mainbodyBean.get("status"
											 * )).equals("2")) {
											 * context=serial_number
											 * +"."+context; serial_number++; }
											 */
											else if ((this.plan_vo
													.getInt("status") == 8
													|| this.plan_vo
															.getInt("status") == 5 || ((this.plan_vo
													.getInt("status") == 4 || this.plan_vo
													.getInt("status") == 6) && (planParam
													.get("NoShowTargetAdjustHistory") == null || "False"
													.equalsIgnoreCase((String) planParam
													.get("NoShowTargetAdjustHistory")))))
													&& (isShowHistoryTask != null
															&& isShowHistoryTask
																	.trim()
																	.length() > 0 && "0"
															.equals(isShowHistoryTask))
													&& (this.planParam
															.get("taskAdjustNeedNew") != null && "True"
															.equalsIgnoreCase((String) this.planParam
															.get("taskAdjustNeedNew")))) {
												context = serial_number + "."
														+ context;
												serial_number++;
											} else if (this.plan_vo
													.getInt("status") >= 4
													&& this.plan_vo
															.getInt("status") != 8) {
												if ((this.planParam
														.get("NoShowTargetAdjustHistory") != null && "True"
														.equalsIgnoreCase((String) this.planParam
														.get("NoShowTargetAdjustHistory")))
														&& (SystemConfig
																.getPropertyValue("noNumber_objective") == null
																|| SystemConfig
																		.getPropertyValue(
																				"noNumber_objective")
																		.length() == 0 || "false"
																.equalsIgnoreCase(
                                                                        SystemConfig
.getPropertyValue(
                                                                        "noNumber_objective")))) {
													context = serial_number
															+ "." + context;
													serial_number++;
												} else {
													context = "   " + context;
												}
											} else {
												context = "   " + context;
											}
										}
										bo.executeCellByType(this.rowNum,
												this.colIndex, this.rowNum,
												this.colIndex, context,
												isDelPoint ? del_aStyle
														: leftStyle, "A");
										this.colIndex++;
									}
								}

								if (apointList == null) {
									for (int n = 2; n < this.headList.size(); n++) {
										LazyDynaBean _bean = (LazyDynaBean) this.headList
												.get(n);
										String itemType = (String) _bean
												.get("itemType");
										String itemid = (String) _bean
												.get("itemid");
										if ("edit".equals(itemid))
											continue;
										bo.executeCellByType(this.rowNum,
												this.colIndex, this.rowNum,
												this.colIndex, " ", aStyle, "A");
										this.colIndex++;
									}
								} else {
									this.ExportExtendTd(
											(LazyDynaBean) apointList.get(j),
											item_kind, bo, aStyle);
								}
							}
						} else {

						}
					}
				}
				// ****

				for (int j = 0; j < num; j++) {
					if (pointList != null && j >= pointList.size())
						break;
					this.rowNum++;
					this.colIndex = 0;
					rowNum++;
					int current = linkParentList.size();
					for (int e = linkParentList.size() - 1; e >= 0; e--) {
						a_bean = (LazyDynaBean) linkParentList.get(e);
						String itemid = (String) a_bean.get("item_id");
						if (existWriteItem.get(itemid) != null) {
							this.colIndex++;
							continue;
						}
						existWriteItem.put(itemid, "1");
						String itemdesc = (String) a_bean.get("itemdesc");
						String kind = (String) a_bean.get("kind");
						if ("2".equals(kind)) {
							kind = "2/" + itemid;
							if ("0"
									.equals(this.template_vo.getString("status"))) // 分值
							{
								if (!(SystemConfig
										.getPropertyValue("clientName") != null && "zglt"
										.equalsIgnoreCase(SystemConfig
										.getPropertyValue("clientName")))) // 中国联通
								{
									if ("1"
											.equals((String) a_bean.get("isAddMinusItem"))) {
										if (((String) a_bean
												.get("addMinusScore")).trim()
												.length() > 0
												&& ((String) a_bean
														.get("addMinusToScore"))
														.trim().length() > 0) {
											itemdesc += " (加扣分:"
													+ (String) a_bean
															.get("addMinusScore")
													+ "~"
													+ (String) a_bean
															.get("addMinusToScore")
													+ ")";
										} else if (((String) a_bean
												.get("addMinusScore")).trim()
												.length() > 0) {
											itemdesc += " (加扣分:"
													+ (String) a_bean
															.get("addMinusScore")
													+ "~+∞)";
										} else if (((String) a_bean
												.get("addMinusToScore")).trim()
												.length() > 0) {
											itemdesc += " (加扣分:-∞~"
													+ (String) a_bean
															.get("addMinusToScore")
													+ ")";
										} else
											itemdesc += " (加扣分)";
									} else if (!"0"
											.equals((String) a_bean.get("score")))
										itemdesc += " ("
												+ ResourceFactory
														.getProperty("jx.param.mark")
												+ ": "
												+ (String) a_bean.get("score")
												+ ")";
								}
							} else if ("1"
									.equals(this.template_vo.getString("status"))) // 权重
							{
								if ("1"
										.equals((String) a_bean.get("isAddMinusItem"))) {
									if (((String) a_bean.get("addMinusScore"))
											.trim().length() > 0
											&& ((String) a_bean
													.get("addMinusToScore"))
													.trim().length() > 0) {
										itemdesc += " (加扣分:"
												+ (String) a_bean
														.get("addMinusScore")
												+ "~"
												+ (String) a_bean
														.get("addMinusToScore")
												+ ")";
									} else if (((String) a_bean
											.get("addMinusScore")).trim()
											.length() > 0) {
										itemdesc += " (加扣分:"
												+ (String) a_bean
														.get("addMinusScore")
												+ "~+∞)";
									} else if (((String) a_bean
											.get("addMinusToScore")).trim()
											.length() > 0) {
										itemdesc += " (加扣分:-∞~"
												+ (String) a_bean
														.get("addMinusToScore")
												+ ")";
									} else
										itemdesc += " (加扣分)";
								} else {
									String rank = (String) a_bean.get("rank");
									if (rank == null
											|| rank.trim().length() == 0)
										rank = "0";
									else
										rank = rank.trim();
									DecimalFormat myformat1 = new DecimalFormat(
											"########.####");//
									String temp = myformat1.format(Double
											.parseDouble(rank) * 100);
									if (!"0".equals(temp)) {
										if (!(SystemConfig
												.getPropertyValue("clientName") != null && "zglt"
												.equalsIgnoreCase(SystemConfig
												.getPropertyValue("clientName")))) // 中国联通
										{
											itemdesc += " ("
													+ ResourceFactory
															.getProperty("label.kh.template.qz")
													+ ": " + temp + "％)";
										}
									}
								}
							}
						}
						short rowpan = (short) this.rowNum;
						if (((Integer) itemPointNum.get(itemid)).intValue() == 1) {

						} else {
							rowpan = (short) (((Integer) itemPointNum
									.get(itemid)).intValue() + this.rowNum - 1);
						}
						bo.executeCellByType(this.rowNum, this.colIndex,
								rowpan, this.colIndex, itemdesc, aStyle, "A");
						this.colIndex++;
					}
					for (int n = current; n < this.lay; n++) {
						bo.executeCellByType(this.rowNum, this.colIndex,
								this.rowNum, this.colIndex, " ", aStyle, "A");
						this.colIndex++;
					}
					if (pointList == null) {
						bo.executeCellByType(this.rowNum, this.colIndex,
								this.rowNum, this.colIndex, " ", aStyle, "A");
						this.colIndex++;
					} else {
						if (this.model != null && "5".equals(this.model)) {

						} else {
							LazyDynaBean point_bean = (LazyDynaBean) pointList
									.get(j);
							String context = (String) point_bean.get("p0407");
							String f_p0400 = (String) point_bean.get("f_p0400");
							String chg_type = (String) point_bean
									.get("chg_type");
							String state = (String) point_bean.get("state");
							boolean isDelPoint = false;
							if ("3".equals(chg_type) && "-1".equals(state))
								isDelPoint = true;
							/*
							 * if(this.opt==2) {
							 * context=serial_number+"."+context;
							 * serial_number++; } else
							 */
							{
								if ((point_bean.get("f_p0400") == null || ((String) point_bean
										.get("f_p0400")).trim().length() == 0)
										&& (SystemConfig
												.getPropertyValue("noNumber_objective") == null
												|| SystemConfig
														.getPropertyValue(
																"noNumber_objective")
														.length() == 0 || "false"
												.equalsIgnoreCase(SystemConfig
                                        .getPropertyValue(
                                                "noNumber_objective")))) {
									context = serial_number + "." + context;
									serial_number++;
								}
								/*
								 * else
								 * if(this.mainbodyBean!=null&&this.mainbodyBean
								 * .
								 * get("status")!=null&&((String)this.mainbodyBean
								 * .get("status")).equals("2")) {
								 * context=serial_number+"."+context;
								 * serial_number++; }
								 */
								else if ((this.plan_vo.getInt("status") == 8
										|| this.plan_vo.getInt("status") == 5 || ((this.plan_vo
										.getInt("status") == 4 || this.plan_vo
										.getInt("status") == 6) && (planParam
										.get("NoShowTargetAdjustHistory") == null || "False"
										.equalsIgnoreCase((String) planParam
										.get("NoShowTargetAdjustHistory")))))
										&& (isShowHistoryTask != null
												&& isShowHistoryTask.trim()
														.length() > 0 && "0"
												.equals(isShowHistoryTask))
										&& (this.planParam
												.get("taskAdjustNeedNew") != null && "True"
												.equalsIgnoreCase((String) this.planParam
												.get("taskAdjustNeedNew")))) {
									context = serial_number + "." + context;
									serial_number++;
								} else if (this.plan_vo.getInt("status") >= 4
										&& this.plan_vo.getInt("status") != 8) {
									if ((this.planParam
											.get("NoShowTargetAdjustHistory") != null && "True"
											.equalsIgnoreCase((String) this.planParam
											.get("NoShowTargetAdjustHistory")))
											&& (SystemConfig
													.getPropertyValue("noNumber_objective") == null
													|| SystemConfig
															.getPropertyValue(
																	"noNumber_objective")
															.length() == 0 || "false"
													.equalsIgnoreCase(SystemConfig
                                            .getPropertyValue(
                                                    "noNumber_objective")))) {
										context = serial_number + "." + context;
										serial_number++;
									} else {
										context = "   " + context;
									}
								} else {
									context = "   " + context;
								}
							}
							bo.executeCellByType(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex, context,
									isDelPoint ? del_aStyle : leftStyle, "A");
							this.colIndex++;
						}
					}
					if (pointList == null) {
						int xx = this.headList.size();
						if (this.isEditCloumn)
							xx--;
						if (this.isAttachCloumn)
							xx--;
						for (int n = 2; n < xx; n++) {
							bo.executeCellByType(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex, " ", aStyle,
									"A");
							this.colIndex++;
						}
					} else {
						this.ExportExtendTd((LazyDynaBean) pointList.get(j),
								item_kind, bo, aStyle);
					}
				}
			}
			StringBuffer html = new StringBuffer();
			if (this.model != null && "5".equals(this.model)) {// 1:团对 2:我的目标 3:目标制订 4.目标评估 5.目标结果 6:目标执行情况// 7:目标卡代制订 8:评分调整
				this.ExportOtherInputHtml2(bo, leftStyle);
			} else

			{
				if ("1".equals(this.isAddExtendRow)
						&& (("4".equals(this.model)) || (("1"
								.equals(this.model) || "2".equals(this.model))
								&& this.plan_vo.getInt("status") >= 4 && this.plan_vo
								.getInt("status") != 8))) {
                    this.rowNum++;
                    this.colIndex=0;
                    String content = ExportOtherInputHtml();
                    bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
                            (short) (this.lay), content, leftStyle);
                    this.colIndex = (short) (this.lay + 1);
					if ((opt == 2 || (opt == 0 && this.mainbodyBean != null && "2".equals((String) this.mainbodyBean
							.get("status"))))
							&& ("True"
									.equalsIgnoreCase((String) this.planParam
                                            .get("allowSeeLowerGrade")) || (this.planParam
									.get("AllowSeeAllGrade") != null && "True"
									.equalsIgnoreCase((String) this.planParam
									.get("AllowSeeAllGrade"))))) {
						ArrayList alist = getAllLowerGradeList(
								Integer.parseInt(this.optCardObject),
								this.object_id, this.plan_vo.getInt("plan_id"));

						/**********************导出 增加总体评价行 zzk 2013/11/14************************/
						if(alist!=null && alist.size()>0){
							short a = 0;
                            this.colIndex = 0;
							bo.executeCell(this.rowNum, a, this.rowNum,
									(short) (this.lay), "总体评价", leftStyle);
                            this.colIndex = (short) (this.lay + 1);
							int spaceSize = alist.size() + 1;
							if (this.planParam.get("showDeductionCause") != null
									&& "True"
											.equalsIgnoreCase((String) this.planParam
                                                    .get("showDeductionCause")))
								spaceSize = spaceSize * 2;

							int size = (headList.size()) - spaceSize - 2;
							if (isEditCloumn)
								size = size - 1;
							if (this.isAttachCloumn)
								size = size - 1;
							for (int y = 0; y < size; y++) {
								bo.executeCell(this.rowNum, this.colIndex,
										this.rowNum, this.colIndex, "", aStyle);
								this.colIndex++;
							}
							for (int x = 0; x < alist.size(); x++) {
								LazyDynaBean x_bean = (LazyDynaBean) alist.get(x);
								String a0100 = (String) x_bean.get("a0100");
								HashMap map = (HashMap) objectAllEvaluateMap
										.get(a0100);
								if (map != null) {
									String astr = (String) map.get("whole_str")==null?"":(String) map.get("whole_str");
									int index = astr.indexOf("&nbsp;");//做一下特殊处理，把总体评价描述去掉
									if(index != -1)
										astr = astr.substring(0, index);
									bo.executeCellByType(this.rowNum,
											this.colIndex, this.rowNum,
											this.colIndex, astr,
											this.decimal_csCell, "A");
									this.colIndex++;
								} else {
									bo.executeCell(this.rowNum, this.colIndex,
											this.rowNum, this.colIndex, "", aStyle);
									this.colIndex++;
								}
								if (this.planParam.get("showDeductionCause") != null
										&& "True"
												.equalsIgnoreCase((String) this.planParam
                                                        .get("showDeductionCause"))) {
									bo.executeCell(this.rowNum, this.colIndex,
											this.rowNum, this.colIndex, "", aStyle);
									this.colIndex++;
								}
							}
							HashMap map = (HashMap) objectAllEvaluateMap
							.get(this.userView.getA0100());
							if (map != null) {
								String astr = (String) map.get("whole_str")==null?"":(String) map.get("whole_str");
								int index = astr.indexOf("&nbsp;");//做一下特殊处理，把总体评价描述去掉
								if(index != -1)
									astr = astr.substring(0, index);
								boolean isCalTask_score = false;
								if (this.planParam.get("TargetTraceEnabled") != null
										&& "True"
												.equalsIgnoreCase((String) this.planParam
                                                        .get("TargetTraceEnabled"))) {
									String TargetCalcItem = ""; // 目标卡计算指标属性，P04中指标，以逗号分隔，顺序从前到后
									if (planParam.get("TargetCalcItem") != null
											&& ((String) planParam
													.get("TargetCalcItem")).trim()
													.length() > 0)
										TargetCalcItem = ((String) planParam
												.get("TargetCalcItem")).trim();

									if (TargetCalcItem.length() > 0) {
										RowSet rowSet = null;
										try {
											ContentDAO dao = new ContentDAO(this.conn);
											String[] temps = TargetCalcItem.split(",");
											for (int i = 0; i < temps.length; i++) {
												if (temps[i].length() > 0) {
													rowSet = dao
															.search("select expression,itemtype from t_hr_busiField  where upper(fieldsetid)='P04'  and upper(itemid)='"
																	+ temps[i]
																			.toUpperCase()
																	+ "' ");
													if (rowSet.next()) {
														String expression = Sql_switcher
																.readMemo(rowSet,
																		"expression");
														if (expression.trim().length() > 0) {
															if ("task_score"
																	.equalsIgnoreCase(
                                                                            temps[i]
                                                                                    .trim())) {
																isCalTask_score = true;
																break;
															}
														}
													}
												}
											}
										} catch (Exception e) {
											e.printStackTrace();
										} finally {
											try {
												if (rowSet != null)
													rowSet.close();
											} catch (Exception e) {
												e.printStackTrace();
											}
										}
									}
								}
								if (isCalTask_score) {
									astr = this.getScore(this.userView.getA0100(),
											this.object_id);
									astr = this.getaScore();
								}
								bo.executeCellByType(this.rowNum, this.colIndex,
										this.rowNum, this.colIndex, astr,
										this.decimal_csCell, "N");
								this.colIndex++;
							} else {
								bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
										this.colIndex, "", aStyle);
								this.colIndex++;
							}
							if (this.planParam.get("showDeductionCause") != null
									&& "True"
											.equalsIgnoreCase((String) this.planParam
                                                    .get("showDeductionCause"))) {
								bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
										this.colIndex, "", aStyle);
								this.colIndex++;
							}

						}
                        /**************总体评分行***************************/
                        this.rowNum++;
                        this.colIndex = 0;
                        bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
                                (short) (this.lay), content, leftStyle);
                        this.colIndex = (short) (this.lay + 1);
						int spaceSize = alist.size() + 1;
						if (this.planParam.get("showDeductionCause") != null
								&& "True"
										.equalsIgnoreCase((String) this.planParam
                                                .get("showDeductionCause")))
							spaceSize = spaceSize * 2;

						int size = (headList.size()) - spaceSize - 2;
						if (isEditCloumn)
							size = size - 1;
						if (this.isAttachCloumn)
							size = size - 1;
						for (int y = 0; y < size; y++) {
							bo.executeCell(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex, "", aStyle);
							this.colIndex++;
						}
						for (int x = 0; x < alist.size(); x++) {
							LazyDynaBean x_bean = (LazyDynaBean) alist.get(x);
							String a0100 = (String) x_bean.get("a0100");
							HashMap map = (HashMap) objectAllEvaluateMap
									.get(a0100);
							if (map != null) {
								String astr = (String) map.get("score");
								bo.executeCellByType(this.rowNum,
										this.colIndex, this.rowNum,
										this.colIndex, astr,
										this.decimal_csCell, "N");
								this.colIndex++;
							} else {
								bo.executeCell(this.rowNum, this.colIndex,
										this.rowNum, this.colIndex, "", aStyle);
								this.colIndex++;
							}
							if (this.planParam.get("showDeductionCause") != null
									&& "True"
											.equalsIgnoreCase((String) this.planParam
                                                    .get("showDeductionCause"))) {
								bo.executeCell(this.rowNum, this.colIndex,
										this.rowNum, this.colIndex, "", aStyle);
								this.colIndex++;
							}
						}
					} else {
						boolean isSelfColumn = false;
						// 是否显示自我评价列
						if ("4".equals(model) || "2".equals(model)
								|| "1".equals(model)) {
							if (opt == 2
									|| (this.mainbodyBean != null && "2".equals(this.mainbodyBean
											.get("status")))
									|| this.plan_vo.getInt("status") == 7) {
								if (isShowSelfScore()
										&& this.objectSelfEvaluateValueMap
												.size() > 0
										&& !this.object_id
												.equalsIgnoreCase(this.userView
														.getA0100())
										&& !this.un_functionary
												.equalsIgnoreCase(this.userView
														.getA0100())) {
									isSelfColumn = true;
								}
							}
						}
						int xx = this.headList.size() - 3;
						if (this.planParam.get("showDeductionCause") != null
								&& "True"
										.equalsIgnoreCase((String) this.planParam
                                                .get("showDeductionCause"))) {
							xx = this.headList.size() - 5;
						}
						if (isSelfColumn)
							xx--;
						if (this.isEditCloumn)
							xx = xx - 1;
						if (this.isAttachCloumn)
							xx = xx - 1;
						/*
						 * if(this.planParam.get("showDeductionCause")!=null&&((
						 * String)this.planParam.get("showDeductionCause")).
						 * equalsIgnoreCase("True")) { xx--; }
						 */
						for (int i = 0; i < xx; i++) {
							bo.executeCell(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex, "", aStyle);
							this.colIndex++;
						}
						if (isSelfColumn) {
							String id = this.object_id;
							if (this.plan_vo.getInt("object_type") == 1
									|| this.plan_vo.getInt("object_type") == 3
									|| this.plan_vo.getInt("object_type") == 4)
								id = this.un_functionary;
							HashMap map = (HashMap) objectAllEvaluateMap
									.get(id);
							if (map != null) {
								String astr = (String) map.get("score");
								bo.executeCellByType(this.rowNum,
										this.colIndex, this.rowNum,
										this.colIndex, astr,
										this.decimal_csCell, "N");
								this.colIndex++;
							} else {
								bo.executeCell(this.rowNum, this.colIndex,
										this.rowNum, this.colIndex, "", aStyle);
								this.colIndex++;
							}
							if (this.planParam.get("showDeductionCause") != null
									&& "True"
											.equalsIgnoreCase((String) this.planParam
                                                    .get("showDeductionCause"))) {
								bo.executeCell(this.rowNum, this.colIndex,
										this.rowNum, this.colIndex, "", aStyle);
								this.colIndex++;
							}
						}

					}
					HashMap map = (HashMap) objectAllEvaluateMap
							.get(this.userView.getA0100());
					if (map != null) {
						String astr = (String) map.get("score");
						boolean isCalTask_score = false;
						if (this.planParam.get("TargetTraceEnabled") != null
								&& "True"
										.equalsIgnoreCase((String) this.planParam
                                                .get("TargetTraceEnabled"))) {
							String TargetCalcItem = ""; // 目标卡计算指标属性，P04中指标，以逗号分隔，顺序从前到后
							if (planParam.get("TargetCalcItem") != null
									&& ((String) planParam
											.get("TargetCalcItem")).trim()
											.length() > 0)
								TargetCalcItem = ((String) planParam
										.get("TargetCalcItem")).trim();

							if (TargetCalcItem.length() > 0) {
								RowSet rowSet = null;
								try {
									ContentDAO dao = new ContentDAO(this.conn);
									String[] temps = TargetCalcItem.split(",");
									for (int i = 0; i < temps.length; i++) {
										if (temps[i].length() > 0) {
											rowSet = dao
													.search("select expression,itemtype from t_hr_busiField  where upper(fieldsetid)='P04'  and upper(itemid)='"
															+ temps[i]
																	.toUpperCase()
															+ "' ");
											if (rowSet.next()) {
												String expression = Sql_switcher
														.readMemo(rowSet,
																"expression");
												if (expression.trim().length() > 0) {
													if ("task_score"
															.equalsIgnoreCase(
                                                                    temps[i]
                                                                            .trim())) {
														isCalTask_score = true;
														break;
													}
												}
											}
										}
									}
								} catch (Exception e) {
									e.printStackTrace();
								} finally {
									try {
										if (rowSet != null)
											rowSet.close();
									} catch (Exception e) {
										e.printStackTrace();
									}
								}
							}
						}
						if (isCalTask_score) {
							astr = this.getScore(this.userView.getA0100(),
									this.object_id);
							astr = this.getaScore();
						}
						bo.executeCellByType(this.rowNum, this.colIndex,
								this.rowNum, this.colIndex, astr,
								this.decimal_csCell, "N");
						this.colIndex++;
					} else {
						bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
								this.colIndex, "", aStyle);
						this.colIndex++;
					}
					if (this.planParam.get("showDeductionCause") != null
							&& "True"
									.equalsIgnoreCase((String) this.planParam
                                            .get("showDeductionCause"))) {
						bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
								this.colIndex, "", aStyle);
						this.colIndex++;
					}
				}
			}

			for (int i = 0; i <= headList.size(); i++) {
				sheet.setColumnWidth(Short.parseShort(String.valueOf(i)),
						(short) 6000);
			}
			for (int i = 0; i <= this.rowNum + this.rowSize; i++) {
				row = sheet.getRow(i);
				if (row == null)
					row = sheet.createRow(i);
				row.setHeight((short) 500);
			}
			String shuom = bo.getDescript(this.plan_vo.getString("plan_id"));///填表说明
			if (shuom != null && !"".equals(shuom)) {
				this.rowNum++;

				int to = this.headList.size() - 1 + (this.lay - 1);// ((this.lay-1)+this.headList.size())
				if (this.isAttachCloumn)
					to--;
				if (this.isEditCloumn)
					to--;
				/*
				 * if(this.planParam.get("showDeductionCause")!=null&&((String)this
				 * .
				 * planParam.get("showDeductionCause")).equalsIgnoreCase("True")
				 * ) { to++; }
				 */
				bo.executeCell(this.rowNum, (short) 0, this.rowNum,
						(short) (to), shuom, leftStyle);
				row = sheet.getRow(this.rowNum);
				if (row == null)
					row = sheet.createRow(this.rowNum);
				row.setHeight((short) 2000);///填表说明 加高  zzk 2013/11/15
			}
			fileOut = new FileOutputStream(
					System.getProperty("java.io.tmpdir")
							+ System.getProperty("file.separator") + fileName);
			hwb.write(fileOut);
	//		fileName = fileName.replaceAll(".xls", "#");
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			PubFunc.closeResource(fileOut);
			PubFunc.closeResource(hwb);
		}
		return fileName;
	}

	public void ExportExtendTd(LazyDynaBean point_bean, String item_kind,
			MyObjectiveBo bo, HSSFCellStyle aStyle) {
		StringBuffer ext_html = new StringBuffer("");
		DecimalFormat myformat1 = new DecimalFormat("########.####");//
		LazyDynaBean abean = null;
		if (point_bean != null) {
			String point_item_id = (String) point_bean.get("item_id");
			String itemtype = (String) point_bean.get("itemtype");
			String chg_type = (String) point_bean.get("chg_type");
			String state = (String) point_bean.get("state");
			boolean isDelPoint = false;
			if ("3".equals(chg_type) && "-1".equals(state))
				isDelPoint = true;
			for (int i = 2; i < this.headList.size(); i++) {
				abean = (LazyDynaBean) this.headList.get(i);
				String itemType = (String) abean.get("itemType");
				int o_width = this.td_width;

				String itemid = (String) abean.get("itemid");
				if ("N".equalsIgnoreCase(itemType)
						&& !"p0419".equalsIgnoreCase(itemid))
					this.td_width = this.td_width - 50;

				StringBuffer context = new StringBuffer("");
				if (itemid.charAt(0) == '_') {
					this.ExportGoalResultStr(point_bean, item_kind, itemid
							.substring(1), bo,
							isDelPoint ? this.del_deci_csCell
									: this.decimal_csCell);
				} else if (itemid.indexOf("reason_") != -1) // 扣分原因
				{
					String p0401 = (String) point_bean.get("p0401");
					String p0400 = (String) point_bean.get("p0400");
					String object_id = itemid.substring(7);
					HashMap map = null;
					if (objectAllEvaluateMap != null)
						map = (HashMap) objectAllEvaluateMap.get(object_id);
					if (map != null
							&& ((this.plan_vo.getInt("method") == 2 && map
									.get(p0400) != null) || (this.plan_vo
									.getInt("method") == 1 && map.get(p0401) != null))) {
						LazyDynaBean a_bean = null;
						if (this.plan_vo.getInt("method") == 2)
							a_bean = (LazyDynaBean) map.get(p0400);
						if (this.plan_vo.getInt("method") == 1)
							a_bean = (LazyDynaBean) map.get(p0401);
						String reasons = (String) a_bean.get("allreasons");
						reasons = reasons.replaceAll("<br>", "\r\n");
						if (reasons == null)
							reasons = "";
						bo.executeCellByType(this.rowNum, this.colIndex,
								this.rowNum, this.colIndex, reasons,
								isDelPoint ? del_aStyle : aStyle, itemType);
						this.colIndex++;
					} else {
						bo.executeCellByType(this.rowNum, this.colIndex,
								this.rowNum, this.colIndex, "",
								isDelPoint ? del_aStyle : aStyle, itemType);
						this.colIndex++;
					}

				} else if ("edit".equalsIgnoreCase(itemid)
						|| "attach".equalsIgnoreCase(itemid)) {

				} else if ("p0424".equalsIgnoreCase(itemid)) {
					String value = (String) point_bean.get(itemid);
					String str = " ";
					if (value != null && value.trim().length() > 0) {
						str = value.split("/")[1];
					}
					bo.executeCellByType(this.rowNum, this.colIndex,
							this.rowNum, this.colIndex, str,
							isDelPoint ? del_aStyle : aStyle, itemType);
					this.colIndex++;
				} else if (itemid.indexOf("opinion_") != -1) {
					String object_id = itemid.split("_")[1];
					LazyDynaBean aabean = (LazyDynaBean) sign_point_objectMap
							.get((String) point_bean.get("p0400") + "/"
									+ object_id);
					if (aabean != null) {
						context.append((String) aabean.get("context"));
					}
					bo.executeCellByType(this.rowNum, this.colIndex,
							this.rowNum, this.colIndex, context.toString(),
							isDelPoint ? del_aStyle : aStyle, itemType);
					this.colIndex++;
				} else if ("selfScore".equalsIgnoreCase(itemid)) // 显示自我评分
				{
					this.ExportEvaluationBox(point_bean, 0, bo, csCell);

				} else if ("score".equalsIgnoreCase(itemid)) // 评分
				{
					this.ExportEvaluationBox(point_bean, 1, bo,
							this.decimal_csCell);
				} else if ("reasons".equalsIgnoreCase(itemid)) {
					boolean _flag = true;
					if ("1".equals(this.template_vo.getString("status"))) // 权重
					{
						String p0415 = (String) point_bean.get("p0415");
						if (p0415 == null || p0415.trim().length() == 0
								|| Double.parseDouble(p0415) == 0) {
							_flag = false;
						}
					}
					if ("-1".equals((String) point_bean.get("state"))
							&& "3"
									.equals((String) point_bean.get("chg_type")))
						_flag = false;
					String excelR = "";
					if ((this.itemPrivMap.size() == 0
							|| itemPrivMap.get(point_item_id) == null || "1".equals((String) itemPrivMap
							.get(point_item_id))) && _flag) {
						HashMap map = (HashMap) objectAllEvaluateMap
								.get((String) this.mainbodyBean
										.get("mainbody_id"));
						String p0400 = (String) point_bean.get("p0400");
						if (map != null) {

							if (map.get(p0400) != null) {
								LazyDynaBean a_bean = (LazyDynaBean) map
										.get(p0400);
								String reasons = (String) a_bean
										.get("allreasons");
								reasons = reasons.replaceAll("<br>", "\r\n");
								if (reasons == null)
									reasons = "";
								excelR = reasons;
							}
						}
					}
					bo.executeCellByType(this.rowNum, this.colIndex,
							this.rowNum, this.colIndex, excelR,
							isDelPoint ? del_aStyle : aStyle, itemType);
					this.colIndex++;
				} else if (itemid.charAt(0) == '#'
						&& ((opt == 2 || (opt == 0 && "2".equals((String) this.mainbodyBean
								.get("status")))) && ("True"
								.equalsIgnoreCase((String) this.planParam
								.get("allowSeeLowerGrade")) || (this.planParam
								.get("AllowSeeAllGrade") != null && "True"
								.equalsIgnoreCase((String) this.planParam
								.get("AllowSeeAllGrade")))))) {
					String p0401 = (String) point_bean.get("p0401");
					String p0400 = (String) point_bean.get("p0400");
					LazyDynaBean pointBean = (LazyDynaBean) this.perPointMap
							.get(p0401.toLowerCase());
					String fromflag = (String) point_bean.get("fromflag");
					String point_kind = "";
					String status = "";
					if ("2".equals(fromflag)) {
						point_kind = (String) pointBean.get("pointkind");
						status = (String) pointBean.get("status");
					}

					if ("2".equals(fromflag) && "1".equals(point_kind)
							&& "1".equals(status)) {
						if (this.perPointScoreMap.get(p0401.toLowerCase()) != null) {
							if (((String) this.perPointScoreMap.get(p0401
									.toLowerCase())).trim().length() == 0
									|| Double
											.parseDouble((String) this.perPointScoreMap
													.get(p0401.toLowerCase())) == 0) {
								bo.executeCell(this.rowNum, this.colIndex,
										this.rowNum, this.colIndex, "0",
										isDelPoint ? del_csCell : csCell);
								this.colIndex++;
							} else {
								bo.executeCellByType(
										this.rowNum,
										this.colIndex,
										this.rowNum,
										this.colIndex,
										PubFunc.round(
												(String) this.perPointScoreMap
														.get(p0401
																.toLowerCase()),
												2), isDelPoint ? del_csCell
												: csCell, itemType);
								this.colIndex++;
							}
						} else {
							bo.executeCellByType(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex, "",
									isDelPoint ? del_aStyle : aStyle, itemType);
							this.colIndex++;
						}
					} else {

						String a0100 = itemid.substring(1);
						HashMap map = (HashMap) objectAllEvaluateMap.get(a0100);
						if (map != null) {
							LazyDynaBean _abean = (LazyDynaBean) map.get(p0400);
							String tt = "";
							if (_abean != null) {
								tt = (String) _abean.get("score");

								if ("1".equals(this.scoreflag)
										&& !"1".equals(point_kind)) // =2混合，=1标度,=4加扣分)point_kind=1是定量指标
								{
									String degree_id = (String) _abean
											.get("degree_id");
									if (degree_id != null
											&& degree_id.trim().length() > 0)
										tt = (String) _abean.get("gradedesc");
								}// 定量取amount,status=1为统一打分指标
								if ("1".equalsIgnoreCase(point_kind)
										&& !"1".equals(status)) {
									tt = (String) _abean.get("amount");
								}
							}
							bo.executeCellByType(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex, tt,
									isDelPoint ? this.del_deci_csCell
											: this.decimal_csCell, itemType);
							this.colIndex++;
						} else {
							bo.executeCellByType(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex, "",
									isDelPoint ? del_aStyle : aStyle, itemType);
							this.colIndex++;
						}
					}

				} else {
					if ("p0419".equalsIgnoreCase(itemid)) {
						int value = point_bean.get(itemid) != null
								&& ((String) point_bean.get(itemid)).length() > 0 ? Integer
								.parseInt((String) point_bean.get(itemid)) : 0;
						if (value != 0) {
							bo.executeCellByType(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex, value + "%",
									isDelPoint ? del_csCell : csCell, itemType);
							this.colIndex++;
						} else {
							bo.executeCellByType(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex, " ", aStyle,
									itemType);
							this.colIndex++;
						}
					} else if ("p0413".equalsIgnoreCase(itemid)
							&& "0".equals(this.template_vo.getString("status"))) {
						String str = (String) point_bean.get("p0413");
						if ("1".equals(itemtype)) // 评分时临时加上的加扣分
							str = "";
						bo.executeCellByType(this.rowNum, this.colIndex,
								this.rowNum, this.colIndex, str,
								isDelPoint ? del_csCell : csCell, itemType);
						this.colIndex++;
					} else if ("p0415".equalsIgnoreCase(itemid)
							&& "1".equals(this.template_vo.getString("status"))) {
						String rank = (String) point_bean.get("p0415");
						if (rank == null || rank.trim().length() == 0)
							rank = "";
						else
							rank = rank.trim();
						String str = "";
						if (rank.length() > 0) {
							String temp = myformat1.format(Double
									.parseDouble(rank) * 100);
							str = temp + "%";
						}
						String p0400 = (String) point_bean.get("p0400");
						if (this.hasAddMinusItem
								&& addMinusPointStr.length() > 0) {
							if (this.addMinusPointStr
									.indexOf("'" + p0400 + "'") != -1)
								str = "";
						}
						bo.executeCellByType(this.rowNum, this.colIndex,
								this.rowNum, this.colIndex, str,
								isDelPoint ? del_csCell : csCell, itemType);
						this.colIndex++;
					} else if ("p0423".equalsIgnoreCase(itemid)
							&& "1".equals(this.template_vo.getString("status"))) {
						String rank = (String) point_bean.get("p0423");
						if (rank == null || rank.trim().length() == 0)
							rank = "";
						else
							rank = rank.trim();
						String str = "";
						if (rank.length() > 0) {
							String temp = myformat1.format(Double
									.parseDouble(rank) * 100);
							str = temp + "%";
						}
						bo.executeCellByType(this.rowNum, this.colIndex,
								this.rowNum, this.colIndex, str,
								isDelPoint ? del_csCell : csCell, itemType);
						this.colIndex++;
					} else {

						if ("N"
								.equalsIgnoreCase((String) abean.get("itemType")))
							bo.executeCellByType(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex,
									(String) point_bean.get(itemid),
									isDelPoint ? del_csCell : csCell, itemType);
						else
							bo.executeCellByType(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex,
									(String) point_bean.get(itemid),
									isDelPoint ? del_aStyle : aStyle, itemType);
						this.colIndex++;
					}
				}
			}
		}
	}

	public void ExportGoalResultStr(LazyDynaBean point_bean, String item_kind,
			String a0100, MyObjectiveBo bo, HSSFCellStyle aStyle) {
		String p0401 = (String) point_bean.get("p0401");
		String p0400 = (String) point_bean.get("p0400");
		String fromflag = (String) point_bean.get("fromflag");
		String point_kind = "";
		String status = "";
		if ("2".equals(fromflag)) {
			point_kind = (String) point_bean.get("pointkind");
			status = (String) point_bean.get("status");
		}
		if (this.plan_vo.getInt("method") == 1) // 360度计划
		{
			LazyDynaBean pointBean = (LazyDynaBean) this.pointMap.get(p0401);
			point_kind = (String) point_bean.get("pointkind");
			status = (String) point_bean.get("status");
			if (point_kind != null && "1".equals(point_kind) && status != null
					&& "1".equals(status)) {
				if (this.perPointScoreMap.get(p0401.toLowerCase()) != null) {
					bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
							this.colIndex, PubFunc.round(
									(String) this.perPointScoreMap.get(p0401
											.toLowerCase()), 2), aStyle);
					this.colIndex++;
				} else {
					bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
							this.colIndex, " ", aStyle);
					this.colIndex++;
				}
			} else {
				HashMap map = (HashMap) objectAllEvaluateMap.get(a0100);
				if (map != null && map.get(p0401) != null) {

					LazyDynaBean a_bean = (LazyDynaBean) map.get(p0401);
					if ("1".equals(scoreflag) && "0".equals(point_kind)) {
						String gradedesc = (String) a_bean.get("gradedesc");
						bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
								this.colIndex, gradedesc == null ? ""
										: gradedesc, aStyle);
						this.colIndex++;
					} else {
						bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
								this.colIndex, a_bean == null ? ""
										: (String) a_bean.get("score"), aStyle);
						this.colIndex++;
					}

				} else {
					bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
							this.colIndex, " ", aStyle);
					this.colIndex++;
				}
			}

		} else if (this.plan_vo.getInt("method") == 2) // 目标
		{
			if ((fromflag != null && "2".equals(fromflag))
					&& (point_kind != null && "1".equals(point_kind))
					&& (status != null && "1".equals(status))) {
				if (this.perPointScoreMap.get(p0401.toLowerCase()) != null) {
					bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
							this.colIndex, PubFunc.round(
									(String) this.perPointScoreMap.get(p0401
											.toLowerCase()), 2), aStyle);
					this.colIndex++;
				} else {
					bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
							this.colIndex, "", aStyle);
					this.colIndex++;
				}
			} else {

				HashMap map = (HashMap) objectAllEvaluateMap.get(a0100);
				if (map != null) {
					LazyDynaBean a_bean = (LazyDynaBean) map.get(p0400);
					bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
							this.colIndex, a_bean == null ? ""
									: (String) a_bean.get("score"), aStyle);
					this.colIndex++;
				} else {
					bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
							this.colIndex, "", aStyle);
					this.colIndex++;
				}
			}
		}
	}

	public void ExportEvaluationBox(LazyDynaBean point_bean, int flag,
			MyObjectiveBo bo, HSSFCellStyle aStyle) {
		StringBuffer sql = new StringBuffer("");
		String fromflag = (String) point_bean.get("fromflag");
		String p0400 = (String) point_bean.get("p0400");
		String p0401 = (String) point_bean.get("p0401");
		String point_item_id = (String) point_bean.get("item_id");
		LazyDynaBean valueBean = null; // 标度值
		if (flag == 1 && this.objectEvaluateValueMap.get(p0400) != null)
			valueBean = (LazyDynaBean) this.objectEvaluateValueMap.get(p0400);
		if (flag == 0 && this.objectSelfEvaluateValueMap.get(p0400) != null)
			valueBean = (LazyDynaBean) this.objectSelfEvaluateValueMap
					.get(p0400);

		String scoreflag = (String) this.planParam.get("scoreflag"); // =2混合，=1标度(默认值=混合)=4加扣分

		//wangrd 20141129 增加fromflagflag=5
		if ("1".equals(fromflag) || "3".equals(fromflag)|| "5".equals(fromflag)) // 自建（不进KPI库）
		{
			if (flag == 0) {
				boolean bol = true;
				if (valueBean != null
						&& ((String) valueBean.get("score")).length() > 0) {
					bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
							this.colIndex, (String) valueBean.get("score"),
							aStyle);
					this.colIndex++;
					bol = false;
				} else {
					if (bol) {
						bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
								this.colIndex, "", aStyle);
						this.colIndex++;
					}
				}
			} else {
				if ("1".equals(scoreflag))// &&!fromflag.equals("3")
				{
					ArrayList pointGradeList = (ArrayList) this.pointDescMap
							.get("per_grade_desc");
					if (pointGradeList == null)
						pointGradeList = new ArrayList();
					String a_value = "";
					if (valueBean != null)
						a_value = (String) valueBean.get("degree_id");
					boolean bool = true;
					for (int i = 0; i < pointGradeList.size(); i++) {
						LazyDynaBean a_bean = (LazyDynaBean) pointGradeList
								.get(i);
						String grade_template_id = (String) a_bean
								.get("grade_template_id");
						String gradedesc = (String) a_bean.get("gradedesc");
						if (a_value.equals(grade_template_id)) {
							bool = false;
							bo.executeCell(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex, gradedesc,
									aStyle);
							this.colIndex++;
							break;
						}
					}
					if (bool) {
						bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
								this.colIndex, "", aStyle);
						this.colIndex++;
					}
				} else {
					if (valueBean != null
							&& ((String) valueBean.get("score")).length() > 0) {
						bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
								this.colIndex, (String) valueBean.get("score"),
								aStyle);
						this.colIndex++;
					} else {
						bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
								this.colIndex, "", aStyle);
						this.colIndex++;
					}
				}
			}
		}

		if ("2".equals(fromflag)) // 来源KPI指标
		{
			LazyDynaBean pointBean = (LazyDynaBean) this.perPointMap.get(p0401
					.toLowerCase());
			String point_kind = "0";
			String status = "0";
			if (pointBean != null) {
				point_kind = (String) pointBean.get("pointkind");
				status = (String) pointBean.get("status");
			}

			ArrayList pointGradeList = (ArrayList) this.pointDescMap.get(p0401.toUpperCase());
			if (pointGradeList == null)
				pointGradeList = new ArrayList();
			String pointkind = "0";
			if (pointGradeList != null && pointGradeList.size() > 0) {
				LazyDynaBean abean = (LazyDynaBean) pointGradeList.get(0);
				pointkind = (String) abean.get("pointkind"); // 0:定性 1:定量
			}

			if ("2".equals(scoreflag) || "1".equals(pointkind)
					|| "4".equals(scoreflag)) {
				if (flag == 0) {
					if ("1".equals(point_kind) && "1".equals(status)) {
						bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
								this.colIndex, "", aStyle);
						this.colIndex++;
					} else if (valueBean != null) {
						if ("3".equals(fromflag)) {
							bo.executeCell(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex,
									(String) valueBean.get("score"), aStyle);
							this.colIndex++;
						} else if ("1".equals(pointkind)) {
							bo.executeCell(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex,
									(String) valueBean.get("amount"), aStyle);
							this.colIndex++;
						} else if ("0".equals(pointkind)) {
							bo.executeCell(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex,
									(String) valueBean.get("score"), aStyle);
							this.colIndex++;
						}
					} else {
						bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
								this.colIndex, "", aStyle);
						this.colIndex++;
					}
				} else {
					if ("1".equals(point_kind) && "1".equals(status)) {
						if (this.perPointScoreMap.get(p0401.toLowerCase()) != null) {
							if (((String) this.perPointScoreMap.get(p0401
									.toLowerCase())).trim().length() == 0
									|| Double
											.parseDouble(((String) this.perPointScoreMap
													.get(p0401.toLowerCase()))) == 0) {
								bo.executeCell(this.rowNum, this.colIndex,
										this.rowNum, this.colIndex, "0", aStyle);
								this.colIndex++;
							} else {
								bo.executeCell(
										this.rowNum,
										this.colIndex,
										this.rowNum,
										this.colIndex,
										PubFunc.round(
												(String) this.perPointScoreMap
														.get(p0401
																.toLowerCase()),
												2), aStyle);
								this.colIndex++;
							}
						} else {
							bo.executeCell(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex, " ", aStyle);
							this.colIndex++;
						}
					} else if (valueBean != null) {
						if ("1".equals(pointkind)) {
							bo.executeCell(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex,
									(String) valueBean.get("amount"), aStyle);
							this.colIndex++;
						} else if ("0".equals(pointkind)) {
							bo.executeCell(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex,
									(String) valueBean.get("score"), aStyle);
							this.colIndex++;
						}
					} else {
						bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
								this.colIndex, "", aStyle);
						this.colIndex++;
					}
				}
			} else if ("1".equals(scoreflag) && "0".equals(pointkind)) {
				if (flag == 0) {
					String a_value = "";
					if (valueBean != null)
						a_value = (String) valueBean.get("degree_id");
					else {
						a_value = "";
					}
					boolean bool = true;
					for (int i = 0; i < pointGradeList.size(); i++) {
						LazyDynaBean a_bean = (LazyDynaBean) pointGradeList
								.get(i);
						String gradecode = (String) a_bean.get("gradecode");
						String gradedesc = (String) a_bean.get("desc2");
						if ("2"
								.equals((String) this.planParam.get("DegreeShowType")))
							gradedesc = (String) a_bean.get("gradedesc");

						if (a_value.equals(gradecode)) {
							sql.append(gradedesc);
							bo.executeCell(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex, gradedesc,
									aStyle);
							this.colIndex++;
							bool = false;
						}
					}
					if (bool) {
						bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
								this.colIndex, "", aStyle);
						this.colIndex++;
					}

				} else {
					String a_value = "";
					if (valueBean != null)
						a_value = (String) valueBean.get("degree_id");
					boolean bool = true;
					for (int i = 0; i < pointGradeList.size(); i++) {
						LazyDynaBean a_bean = (LazyDynaBean) pointGradeList
								.get(i);
						String gradecode = (String) a_bean.get("gradecode");
						String gradedesc = (String) a_bean.get("desc2");
						if ("2"
								.equals((String) this.planParam.get("DegreeShowType")))
							gradedesc = (String) a_bean.get("gradedesc");
						if (a_value.equals(gradecode)) {
							sql.append("selected");
							bool = false;
							bo.executeCell(this.rowNum, this.colIndex,
									this.rowNum, this.colIndex, gradedesc,
									aStyle);
							this.colIndex++;
						}
					}
					if (bool) {
						bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
								this.colIndex, "", aStyle);
						this.colIndex++;
					}
				}
			}

		}
	}

	public void ExportOtherInputHtml2(MyObjectiveBo bo, HSSFCellStyle aStyle) {
		StringBuffer str = new StringBuffer("");
		try {
			ExportHtmlByCondition("1", bo, aStyle);
			ExportHtmlByCondition("2", bo, aStyle);
			ExportHtmlByCondition("3", bo, aStyle);

			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rowSet = dao
					.search("select resultdesc,exX_object,score from per_result_"
							+ this.plan_vo.getInt("plan_id")
							+ " where object_id='" + this.object_id + "'");
			if (rowSet.next()) {
				this.rowSize++;
				// str.append("<tr><td height='40' class='RecordRow_self_locked' colspan='"+(this.lay+extendNum+1)+"' >");
				String astr = "";
				if (rowSet.getString(1) != null) {
					// str.append("考核等级:&nbsp;"+rowSet.getString(1));
					astr += "考核等级:   " + rowSet.getString(1);
				}
				if (rowSet.getString(2) != null) {
					// str.append("&nbsp;&nbsp;&nbsp;&nbsp;等级系数:&nbsp;"+PubFunc.round(rowSet.getString(2),2));
					astr += "         等级系数:  "
							+ PubFunc.round(rowSet.getString(2), 2);
				}
				if (rowSet.getString(3) != null) {
					int KeepDecimal = Integer.parseInt((String) this.planParam
							.get("KeepDecimal")); // 保留小数位
					str.append("&nbsp;&nbsp;&nbsp;&nbsp;总分:&nbsp;"
							+ PubFunc.round(rowSet.getString(3), 2));
					astr += "        总分:  "
							+ PubFunc.round(rowSet.getString(3), KeepDecimal);
				}
				bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
						(short) (headList.size() - 1), astr, aStyle);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void ExportHtmlByCondition(String opt, MyObjectiveBo bo,
			HSSFCellStyle aStyle) {

		StringBuffer str = new StringBuffer("");
		ArrayList fieldList = DataDictionary.getFieldList("P04",
				Constant.USED_FIELD_SET);

		if ("5".equals(this.model) && this.plan_vo.getInt("method") == 1)
			fieldList = new ArrayList();
		String item_str = "";
		String item_str2 = "";
		String map_key = "";
		if ("1".equals(opt)) {
			item_str = "NodeKnowDegree"; // 了解程度
			map_key = "know_str";
		}
		if ("2".equals(opt)) {
			item_str = "WholeEval"; // 总体评价
			item_str2 = "DescriptiveWholeEval";
			map_key = "whole_str";
		}
		if ("3".equals(opt))
			map_key = "score";

		if ("3".equals(opt)
				|| ("2".equals(opt) && ("true"
						.equalsIgnoreCase((String) this.planParam.get(item_str)) || "true".equalsIgnoreCase((String) this.planParam
						.get(item_str2))))
				|| "true"
						.equalsIgnoreCase((String) this.planParam.get(item_str))) //
		{
			this.rowNum++;
			this.colIndex = 0;
			this.rowSize++;
			if ("1".equals(opt)) {
				// str.append(writeTd2(ResourceFactory.getProperty("lable.statistic.knowdegree"),this.lay+1,"left",this.td_width,"RecordRow_self_locked"));
				bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
						(short) this.lay, ResourceFactory
								.getProperty("lable.statistic.knowdegree"),
						aStyle);
				this.colIndex += this.lay + 1;
			} else if ("2".equals(opt)) {
				bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
						(short) this.lay, ResourceFactory
								.getProperty("lable.statistic.wholeeven"),
						aStyle);
				this.colIndex += this.lay + 1;
				// str.append(writeTd2(ResourceFactory.getProperty("lable.statistic.wholeeven"),this.lay+1,"left",this.td_width,"RecordRow_self_locked"));
			} else if ("3".equals(opt)) {
				// str.append(writeTd2("总分",this.lay+1,"left",this.td_width,"RecordRow_self_locked"));
				bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
						(short) this.lay, "总分", aStyle);
				this.colIndex += this.lay + 1;
			}
			for (int i = 0; i < fieldList.size(); i++) {
				FieldItem item = (FieldItem) fieldList.get(i);
				String itemid = item.getItemid();
				String astr = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0425/P0427/P0407/P0413/P0415/P0421/P0423/PLAN_ID/STATE/";
				if (this.model != null && "5".equals(this.model)) {
					astr = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0425/P0427/P0407/P0415/P0421/P0423/PLAN_ID/STATE/";
					if ("1".equals(this.template_vo.getString("status")))
						astr = "/NBASE/A0100/A0101/B0110/E0122/E01A1/P0401/P0425/P0427/P0407/P0413/P0421/P0423/PLAN_ID/STATE/";
				}

				if (astr.indexOf("/" + itemid.toUpperCase() + "/") != -1)
					continue;
				if ("1".equals(item.getState())) {
					n++;
					this.extendNum++;
					// str.append("<td class='RecordRow_self' ");
					// str.append(" valign='middle' align='center' >&nbsp;</td>\r\n");
					bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
							this.colIndex, " ", aStyle);
					this.colIndex++;
				}
			}
			for (int i = 0; i < this.mainbodyList.size(); i++) {
				this.extendNum++;
				LazyDynaBean abean = (LazyDynaBean) this.mainbodyList.get(i);
				String a0101 = (String) abean.get("a0101");
				String a0100 = (String) abean.get("a0100");
				HashMap map = (HashMap) objectAllEvaluateMap.get(a0100);
				if (map != null) {
					String astr = (String) map.get(map_key);
					// str.append(writeTd(astr,0,"center",this.td_width,"1","RecordRow_self"));
					bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
							this.colIndex, astr, aStyle);
					this.colIndex++;
				} else {
					// str.append(writeTd("&nbsp;",0,"center",this.td_width,"1","RecordRow_self"));
					bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
							this.colIndex, " ", aStyle);
					this.colIndex++;
				}

				if (this.planParam.get("showDeductionCause") != null
						&& "True"
								.equalsIgnoreCase((String) this.planParam.get("showDeductionCause"))) // /显示扣分原因
				{
					// str.append(writeTd("&nbsp;",0,"center",this.td_width,"1","RecordRow_self"));
					bo.executeCell(this.rowNum, this.colIndex, this.rowNum,
							this.colIndex, " ", aStyle);
					this.colIndex++;

				}
			}
		}
	}

	public String ExportOtherInputHtml() {

		StringBuffer str = new StringBuffer("");
		try {
			if ("true"
					.equalsIgnoreCase((String) this.planParam.get("isShowSubmittedScores"))) {
				str.append(ResourceFactory
						.getProperty("label.kh.template.total") + ":");
				str.append(getScore(this.userView.getA0100(), this.object_id));
			}
			if ("true"
					.equalsIgnoreCase((String) this.planParam.get("WholeEval")))
//					|| ((String) this.planParam.get("DescriptiveWholeEval"))
//							.equalsIgnoreCase("true")) // 总体评价 or 总体评价描述
			{
				if (this.plan_vo != null && this.plan_vo.getInt("status") >= 4) {
					str.append(" "
							+ ResourceFactory
									.getProperty("lable.statistic.wholeeven")
							+ ":");
					String whole_id = "";
					if (this.mainbodyBean != null)
						whole_id = (String) this.mainbodyBean
								.get("whole_grade_id");
					String EvalClass = (String) this.planParam.get("EvalClass"); // 在计划参数中的等级分类ID
					String GradeClass = "";
					if (EvalClass == null || EvalClass.trim().length() < 0
							|| "0".equals(EvalClass.trim()))
						GradeClass = (String) this.planParam.get("GradeClass"); // 等级分类ID
					else
						GradeClass = (String) this.planParam.get("EvalClass");
					ArrayList wholeArrayList = getExtendInfoValue("2",
							GradeClass);
					if ("true"
							.equalsIgnoreCase((String) this.planParam.get("WholeEval"))) {
						if("0".equals((String) this.planParam.get("WholeEvalMode"))) { //WholeEvalMode =0 等级  =1 分值  zhaoxg update 2014-10-30
							for (int i = 0; i < wholeArrayList.size(); i++) {
								String[] temp = (String[]) wholeArrayList.get(i);
								if (temp[0].equals(whole_id))
									str.append(temp[1]);
							}
						}else{
							int KeepDecimal = Integer.parseInt((String) this.planParam.get("KeepDecimal")); 
							String tempScore = PubFunc.round((String)this.mainbodyBean.get("wholeEvalScore"), KeepDecimal);
							str.append(tempScore);
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return str.toString();
	}

	public String getAllowLeaderTrace() {
		return AllowLeaderTrace;
	}

	public void setAllowLeaderTrace(String allowLeaderTrace) {
		AllowLeaderTrace = allowLeaderTrace;
	}

	public String getIsAllowAppealTrancePoint() {
		return isAllowAppealTrancePoint;
	}

	public void setIsAllowAppealTrancePoint(String isAllowAppealTrancePoint) {
		this.isAllowAppealTrancePoint = isAllowAppealTrancePoint;
	}

	public String getIsAllowApproveTrancePoint() {
		return isAllowApproveTrancePoint;
	}

	public void setIsAllowApproveTrancePoint(String isAllowApproveTrancePoint) {
		this.isAllowApproveTrancePoint = isAllowApproveTrancePoint;
	}

	public ArrayList getEditableTaskList() {
		return editableTaskList;
	}

	public void setEditableTaskList(ArrayList editableTaskList) {
		this.editableTaskList = editableTaskList;
	}

	public ArrayList getEditTableTask2(ArrayList list) {
		ArrayList alist = new ArrayList();
		try {
			HashMap amap = new HashMap();
			StringBuffer p0400b = new StringBuffer("");
			for (int i = 0; i < list.size(); i++) {
				CommonData cd = (CommonData) list.get(i);
				if (i != 0)
					p0400b.append(",");
				p0400b.append(cd.getDataValue());
				amap.put(cd.getDataValue(), i + "");
			}
			if (p0400b == null || p0400b.toString().trim().length() <= 0)
				return alist;

			Object[] a = new Object[list.size()];
			StringBuffer sql = new StringBuffer("");
			sql.append("select p0400,p0407 from p04 where p0400 in("
					+ p0400b.toString() + ")");
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rs = dao.search(sql.toString());
			while (rs.next()) {
				int p0400 = rs.getInt("p0400");
				int index = Integer.parseInt(((String) amap.get(p0400 + "")));
				String sNumber = (String) this.numberMap.get(p0400 + "");
				a[index] = new CommonData(p0400 + "", (sNumber == null ? ""
						: sNumber + ".")
						+ ((rs.getString("p0407") == null || "".equals(rs.getString(
								"p0407"))) ? ""
								: (rs.getString("p0407"))));
				// alist.add(index,new
				// CommonData(p0400+"",rs.getString("p0407")));
			}
			for (int i = 0; i < a.length; i++) {
				alist.add((CommonData) a[i]);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return alist;

	}

	/**
	 * 实现普天待办自定义
	 * 
	 * @param opt
	 *            =1报批=2驳回=3批准=4打分 =5制订目标
	 * @param plan_name
	 * @param objectName
	 * @param userName
	 * @return
	 */
	public String getDBStr(String opt, String plan_name, String objectName,
			String optName) {
		String str = "";
		try {
			String dStr = SystemConfig.getPropertyValue("PendingMessage" + opt);
			if (dStr == null || "".equals(dStr))
				return str;
			String astr = new String(dStr.getBytes("ISO-8859-1"), "gb2312");
			astr = astr.replaceAll("\\[考核对象\\]", objectName);
			astr = astr.replaceAll("\\[计划名称\\]", plan_name);
			astr = astr.replaceAll("\\[操作用户名称\\]", optName);
			str = astr;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return str;
	}

	public String getTt5CssClassName() {
		return tt5CssClassName;
	}

	public void setTt5CssClassName(String tt5CssClassName) {
		this.tt5CssClassName = tt5CssClassName;
	}

	public String getTt4CssClassName() {
		return tt4CssClassName;
	}

	public void setTt4CssClassName(String tt4CssClassName) {
		this.tt4CssClassName = tt4CssClassName;
	}

	public String getTt3CssClassName() {
		return tt3CssClassName;
	}

	public void setTt3CssClassName(String tt3CssClassName) {
		this.tt3CssClassName = tt3CssClassName;
	}

	public String getChangeCssClassName() {
		return changeCssClassName;
	}

	public void setChangeCssClassName(String changeCssClassName) {
		this.changeCssClassName = changeCssClassName;
	}

	public void setItemPrivMap(HashMap itemPrivMap) {
		this.itemPrivMap = itemPrivMap;
	}

	public String getIsPerformanceShow() {
		return isPerformanceShow;
	}

	public void setIsPerformanceShow(String isPerformanceShow) {
		this.isPerformanceShow = isPerformanceShow;
	}

	public String getFrom_flag() {
		return from_flag;
	}

	public void setFrom_flag(String from_flag) {
		this.from_flag = from_flag;
	}

	public String getIsLimitPointValue() {
		try {
			LoadXml loadxml = null;
			if (BatchGradeBo.getPlanLoadXmlMap().get(
					String.valueOf(this.plan_vo.getInt("plan_id"))) == null) {
				loadxml = new LoadXml(this.conn, String.valueOf(this.plan_vo
						.getInt("plan_id")));
				BatchGradeBo.getPlanLoadXmlMap()
						.put(String.valueOf(this.plan_vo.getInt("plan_id")),
								loadxml);
			} else
				loadxml = (LoadXml) BatchGradeBo.getPlanLoadXmlMap().get(
						String.valueOf(this.plan_vo.getInt("plan_id")));
			this.IsLimitPointValue = (String) loadxml.getDegreeWhole().get(
					"IsLimitPointValue");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return this.IsLimitPointValue;
	}

	public void isPrivByOrg() {

		try {
		    LoadXml loadxml = new LoadXml(this.conn, this.plan_id);
            Hashtable params = loadxml.getDegreeWhole();
            String evalOutLimitScoreOrg = (String)params.get("EvalOutLimitScoreOrg");
            if("True".equalsIgnoreCase(evalOutLimitScoreOrg))//如果设置了评分不受考核机构限制
                this.privByOrg = false;
            else{
    			boolean priv = false;
    			FieldItem item = DataDictionary.getFieldItem("score_org");
    			if (item != null
    					&& "1".equals(item.getState())
    					&& (TargetDefineItem != null
    							&& !"".equals(TargetDefineItem.trim()) && TargetDefineItem
    							.indexOf("SCORE_ORG") != -1)) {
    				priv = true;
    			}
    			// ((String)this.planParam.get("allowLeadAdjustCard")).equalsIgnoreCase("True")//准许领导调整目标卡，所有审批的领导都可以调整
    			// private int opt=0; //0:查看 1：操作 2.打分
    			// private String model=""; // 1:团对 2:我的目标 3:目标制订 4.目标评估 5.目标结果
    			// optCardObject="5"; // 5:本人 -2：第四级领导 ,-1：第三级领导,0：主管领导,1：直接上级
    			// objectSpFlag="01"; //考核对象审批标识 //01:起草 02：报批 07：驳回 03：批准
    
    			if (priv) {
    				this.privByOrg = true;
    				// 本人或团队负责人,启动以前的计划，不控制，启动以后的计划，控制
    				if (this.userView.getA0100().equals(this.object_id)
    						|| this.userView.getA0100().equals(this.un_functionary)) {
    					/** 本人或团队负责人，展现所有 */
    					this.privByOrg = false;
    				}
    
    			}
    
    			if ("8".equals(this.model) || "7".equals(this.model))
    				this.privByOrg = false;
    			if ("1".equals(this.isPerformanceShow))
    				this.privByOrg = false;
            }
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String getItemId() {
		StringBuffer str = new StringBuffer("");
		try {
			if (this.tempSQL != null && this.tempSQL.length() > 0) {
				// this.tempSQL+=" and kind=2 order by item_id asc,seq asc";
				ContentDAO dao = new ContentDAO(this.conn);
				RowSet rs = dao.search(this.tempSQL);
				while (rs.next()) {
					String itemid = rs.getString("item_id");
					this.getParentLinkItem(str, itemid, dao);

				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return str.toString();
	}

	public String getGXItem(String item_ids) {
		StringBuffer ids = new StringBuffer("");
		RowSet rs = null;
		try {
			/** 取得没建任务的个性项目 */
			StringBuffer buf = new StringBuffer("");
			buf.append("select item_id from per_template_item where ");
			buf.append("UPPER(template_id)='"
					+ this.template_vo.getString("template_id").toUpperCase()
					+ "'");
			buf.append(" and item_id not in (" + item_ids + ")");
			/*
			 * buf.append(" and item_id not in (select item_id from p04 ");
			 * buf.append(" where plan_id="+this.plan_vo.getInt("plan_id"));
			 * if(this
			 * .plan_vo.getInt("object_type")==1||this.plan_vo.getInt("object_type"
			 * )==3||this.plan_vo.getInt("object_type")==4)
			 * buf.append(" and b0110='"+this.object_id+"'"); else
			 * if(this.plan_vo.getInt("object_type")==2)
			 * buf.append(" and a0100='"+this.object_id+"'"); buf.append(")");
			 */
			buf.append(" and kind=2");
			ContentDAO dao = new ContentDAO(this.conn);
			rs = dao.search(buf.toString());

			while (rs.next()) {
				String itemid = rs.getString("item_id");
				this.getParentLinkItem(ids, itemid, dao);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return ids.toString();
	}

	public void getParentLinkItem(StringBuffer str, String item_id,
			ContentDAO dao) {
		RowSet rs = null;
		try {
			rs = dao.search("select parent_id,item_id from per_template_item where item_id="
					+ item_id);
			while (rs.next()) {
				String parent = rs.getString("parent_id");
				String item = rs.getString("item_id");
				if (parent == null || "".equals(parent)) {
					if ((str.toString() + ",").indexOf("," + item + ",") == -1)
						str.append("," + item);
					return;
				} else {
					if ((str.toString() + ",").indexOf("," + item + ",") == -1)
						str.append("," + item);
					getParentLinkItem(str, parent, dao);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * 校验指标是否符合定义规则
	 * 
	 * @param itemid
	 * @return
	 */
	public String validateRule(String itemid) {
		StringBuffer buf = new StringBuffer("");
		RowSet rs = null;
		RowSet rowSet = null;
		try {
			StringBuffer sql = new StringBuffer("");
			sql.append("select item_id,itemdesc from per_template_item where UPPER(template_id)='"
					+ this.plan_vo.getString("template_id").toUpperCase() + "'");
			sql.append(" and (child_id is null or "
					+ Sql_switcher.length("child_id") + "=0 )");// 是否只控制椰子节点还是全部控制
			if (itemid != null && !"".equals(itemid))
				sql.append(" and item_id=" + itemid);
			ContentDAO dao = new ContentDAO(this.conn);
			HashMap dynaMap = null;
			if (this.perObject_vo != null
					&& this.perObject_vo.getString("body_id") != null
					&& !"".equals(this.perObject_vo.getString("body_id"))) {
				LoadXml loadXml = new LoadXml();
				dynaMap = loadXml
						.getDynaItem(this.plan_vo.getInt("plan_id") + "",
								this.conn,
								this.perObject_vo.getString("body_id"));
			}
			BigDecimal zero = new BigDecimal("0");
			rs = dao.search(sql.toString());
			while (rs.next()) {
				String MaxCount = "";
				String MinCount = "";
				String MaxValue = "";
				String MinValue = "";
				String isAddMinusItem = "";
				String dyna_value = "0";
				String item_id = rs.getString("item_id");
				String itemdesc = rs.getString("itemdesc");
				// 定义的动态权重（分值）
				if (dynaMap != null
						&& dynaMap.get(this.perObject_vo.getString("body_id")
								+ item_id) != null) {
					HashMap map = (HashMap) dynaMap.get(this.perObject_vo
							.getString("body_id") + item_id);
					dyna_value = moveZero((String) map.get("dyna_value"));
					if (map.get("isAddMinusItem") != null
							&& !"".equals((String) map.get("isAddMinusItem")))
						isAddMinusItem = (String) map.get("isAddMinusItem");
					if (map.get("MaxCount") != null
							&& !"".equals((String) map.get("MaxCount")))
						MaxCount = (String) map.get("MaxCount");
					if (map.get("MinCount") != null
							&& !"".equals((String) map.get("MinCount")))
						MinCount = (String) map.get("MinCount");
					if (map.get("MaxValue") != null
							&& !"".equals((String) map.get("MaxValue")))
						MaxValue = (String) map.get("MaxValue");
					if (map.get("MinValue") != null
							&& !"".equals((String) map.get("MinValue")))
						MinValue = (String) map.get("MinValue");

					if ("1".equals(isAddMinusItem)
							&& "1".equals(this.template_vo.getString("status"))) {
						MaxValue = "";
						MinValue = "";
					}
				}
				if (!"".equals(MaxCount) || !"".equals(MinCount)) {
					StringBuffer sub_sql = new StringBuffer("");
					sub_sql.append("select count(*) as total from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id"));
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4)
						sub_sql.append("  and b0110='" + this.object_id + "'");
					else if (this.plan_vo.getInt("object_type") == 2)
						sub_sql.append("  and a0100='" + this.object_id + "'");
					// if(this.plan_vo.getInt("status")>=4&&this.plan_vo.getInt("status")!=8)
					// {
					// if(this.planParam.get("NoShowTargetAdjustHistory")!=null&&((String)this.planParam.get("NoShowTargetAdjustHistory")).equalsIgnoreCase("True"))
					sub_sql.append(" and ( ( state=-1   and (chg_type!=3 or chg_type is null) ) or state is null or state<>-1 )");
					// }
					sub_sql.append(" and item_id=" + item_id);
					rowSet = dao.search(sub_sql.toString());
					int count = 0;
					while (rowSet.next()) {
						count = rowSet.getInt(1);
					}
					if (!"".equals(MaxCount)) {
						if (count > Integer.parseInt(MaxCount)) {
							buf.append("【" + itemdesc + "】项目下任务个数(" + count
									+ ")超出规定的最大个数(" + MaxCount
									+ ")\r\n请重新调整目标卡！");
							return buf.toString();
						}
					}
					if (!"".equals(MinCount)) {
						if (count < Integer.parseInt(MinCount)) {
							buf.append("【" + itemdesc + "】项目下任务个数(" + count
									+ ")小于规定的最小个数(" + MinCount
									+ ")\r\n请重新调整目标卡！");
							return buf.toString();
						}
					}
				}
				if (!"".equals(MaxValue) || !"".equals(MinValue)) {
					StringBuffer sub_sql = new StringBuffer("");
					sub_sql.append("select p0407,");
					if ("0".equals(this.template_vo.getString("status")))// 分值模板
					{
						sub_sql.append(" p0413,p0421 ");
					} else {
						sub_sql.append(" p0415,p0423 ");
					}
					sub_sql.append(" from p04 where plan_id="
							+ this.plan_vo.getInt("plan_id"));
					if (this.plan_vo.getInt("object_type") == 1
							|| this.plan_vo.getInt("object_type") == 3
							|| this.plan_vo.getInt("object_type") == 4)
						sub_sql.append(" and  b0110='" + this.object_id + "'");
					else if (this.plan_vo.getInt("object_type") == 2)
						sub_sql.append(" and  a0100='" + this.object_id + "'");
					// if(this.plan_vo.getInt("status")>=4&&this.plan_vo.getInt("status")!=8)
					// {
					// if(this.planParam.get("NoShowTargetAdjustHistory")!=null&&((String)this.planParam.get("NoShowTargetAdjustHistory")).equalsIgnoreCase("True"))
					sub_sql.append(" and ( ( state=-1  and (chg_type!=3 or chg_type is null)  ) or state is null or state<>-1 )");
					// }
					sub_sql.append(" and item_id=" + item_id);
					rowSet = dao.search(sub_sql.toString());
					boolean isMax = false;
					boolean isMin = false;
					BigDecimal MaxV = null;
					if (!"".equals(MaxValue)) {
						MaxV = new BigDecimal(MaxValue);
						isMax = true;
					}
					BigDecimal MinV = null;
					if (!"".equals(MinValue)) {
						MinV = new BigDecimal(MinValue);
						isMin = true;
					}
					while (rowSet.next()) {
						String p0407 = rowSet.getString("p0407");
						// 不管是权重还是分值，首先看调整后的，如果调整后的有值，就用调整后的来比较，否则用标准的来比较
						if ("0".equals(this.template_vo.getString("status")))// 分值模板
						{
							if (rowSet.getString("p0421") == null) {
								BigDecimal bd = new BigDecimal(""
										+ rowSet.getFloat("p0413"));
								// 结果是-1 小于0 等于 1 大于
								if (isMax/* &&zero.compareTo(bd)!=0 */
										&& MaxV.compareTo(bd) == -1)// 准许的最大值，小于分值
								{
									BigDecimal p0413 = new BigDecimal(
											rowSet.getString("p0413"));
									buf.append("【" + itemdesc + "】项目下任务【"
											+ p0407 + "】的分值("
											+ moveZero(p0413.toString())/*
																		 * moveZero(
																		 * rowSet
																		 * .
																		 * getString
																		 * (
																		 * "p0412"
																		 * ))
																		 */
											+ ")大于规定的该项目下任务的最大分值(" + MaxValue
											+ ")\r\n请重新调整目标卡！");
									return buf.toString();
								}
								if (isMin/* &&zero.compareTo(bd)!=0 */
										&& bd.compareTo(MinV) == -1)// 分值小于最小值
								{
									BigDecimal p0413 = new BigDecimal(
											rowSet.getString("p0413"));
									buf.append("【" + itemdesc + "】项目下任务【"
											+ p0407 + "】的分值("
											+ moveZero(p0413.toString())/*
																		 * moveZero(
																		 * rowSet
																		 * .
																		 * getString
																		 * (
																		 * "p0412"
																		 * ))
																		 */
											+ ")小于规定的该项目下任务的最小分值(" + MinValue
											+ ")\r\n请重新调整目标卡！");
									return buf.toString();
								}
							} else {
								BigDecimal bd = new BigDecimal(""
										+ rowSet.getFloat("p0421"));
								// 结果是-1 小于0 等于 1 大于
								if (isMax/* &&zero.compareTo(bd)!=0 */
										&& MaxV.compareTo(bd) == -1)// 准许的最大值，小于分值
								{
									BigDecimal p0421 = new BigDecimal(
											rowSet.getString("p0421"));
									buf.append("【" + itemdesc + "】项目下任务【"
											+ p0407 + "】的分值("
											+ moveZero(p0421.toString())/*
																		 * moveZero(
																		 * rowSet
																		 * .
																		 * getString
																		 * (
																		 * "p0412"
																		 * ))
																		 */
											+ ")大于规定的该项目下任务的最大分值(" + MaxValue
											+ ")\r\n请重新调整目标卡！");
									return buf.toString();
								}
								if (isMin/* &&zero.compareTo(bd)!=0 */
										&& bd.compareTo(MinV) == -1)// 准许的最大值，小于分值
								{
									BigDecimal p0421 = new BigDecimal(
											rowSet.getString("p0421"));
									buf.append("【" + itemdesc + "】项目下任务【"
											+ p0407 + "】的分值("
											+ moveZero(p0421.toString())/*
																		 * moveZero(
																		 * rowSet
																		 * .
																		 * getString
																		 * (
																		 * "p0412"
																		 * ))
																		 */
											+ ")小于规定的该项目下任务的最小分值(" + MinValue
											+ ")\r\n请重新调整目标卡！");
									return buf.toString();
								}
							}
						} else {

							if (rowSet.getString("p0423") == null) {
								BigDecimal bd = new BigDecimal(""
										+ rowSet.getFloat("p0415"));
								// 结果是-1 小于0 等于 1 大于
								if (isMax/* &&zero.compareTo(bd)!=0 */
										&& MaxV.compareTo(bd) == -1)// 准许的最大值，小于权重
								{
									BigDecimal p0415 = new BigDecimal(
											rowSet.getString("p0415"));
									String p0415_str = moveZero(p0415
											.toString());
									if (!"".equals(p0415_str))
										p0415_str = Double
												.parseDouble(p0415_str)
												* 100
												+ "%";
									String MaxValue_str = moveZero(MaxValue);
									if (!"".equals(MaxValue_str))
										MaxValue_str = Double
												.parseDouble(MaxValue_str)
												* 100 + "%";
									buf.append("【" + itemdesc + "】项目下任务【"
											+ p0407 + "】的权重(" + p0415_str
											+ ")大于规定的该项目下任务的最大权重("
											+ MaxValue_str + ")\r\n请重新调整目标卡！");
									return buf.toString();
								}
								if (isMin/* &&zero.compareTo(bd)!=0 */
										&& bd.compareTo(MinV) == -1)// 准许的最大值，小于权重
								{
									BigDecimal p0415 = new BigDecimal(
											rowSet.getString("p0415"));
									String p0415_str = moveZero(p0415
											.toString());
									if (!"".equals(p0415_str))
										p0415_str = Double
												.parseDouble(p0415_str)
												* 100
												+ "%";
									String MinValue_str = moveZero(MinValue);
									if (!"".equals(MinValue_str))
										MinValue_str = Double
												.parseDouble(MinValue_str)
												* 100 + "%";
									buf.append("【" + itemdesc + "】项目下任务【"
											+ p0407 + "】的权重(" + p0415_str
											+ ")小于规定的该项目下任务的最小权重("
											+ MinValue_str + ")\r\n请重新调整目标卡！");
									return buf.toString();
								}
							} else {
								BigDecimal bd = new BigDecimal(""
										+ rowSet.getFloat("p0423"));
								// 结果是-1 小于0 等于 1 大于
								if (isMax/* &&zero.compareTo(bd)!=0 */
										&& MaxV.compareTo(bd) == -1)// 准许的最大值，小于权重
								{
									BigDecimal p0423 = new BigDecimal(
											rowSet.getString("p0423"));
									String p0423_str = moveZero(p0423
											.toString());
									if (!"".equals(p0423_str))
										p0423_str = Double
												.parseDouble(p0423_str)
												* 100
												+ "%";
									String MaxValue_str = moveZero(MaxValue);
									if (!"".equals(MaxValue_str))
										MaxValue_str = Double
												.parseDouble(MaxValue_str)
												* 100 + "%";
									buf.append("【" + itemdesc + "】项目下任务【"
											+ p0407 + "】的权重(" + p0423_str
											+ ")大于规定的该项目下任务的最大权重("
											+ MaxValue_str + ")\r\n请重新调整目标卡！");
									return buf.toString();
								}
								if (isMin/* &&zero.compareTo(bd)!=0 */
										&& bd.compareTo(MinV) == -1)// 准许的最大值，小于权重
								{
									BigDecimal p0423 = new BigDecimal(
											rowSet.getString("p0423"));
									String p0423_str = moveZero(p0423
											.toString());
									if (!"".equals(p0423_str))
										p0423_str = Double
												.parseDouble(p0423_str)
												* 100
												+ "%";
									String MinValue_str = moveZero(MinValue);
									if (!"".equals(MinValue_str))
										MinValue_str = Double
												.parseDouble(MinValue_str)
												* 100 + "%";
									buf.append("【" + itemdesc + "】项目下任务【"
											+ p0407 + "】的权重(" + p0423_str
											+ ")小于规定的该项目下任务的最小权重("
											+ MinValue_str + ")\r\n请重新调整目标卡！");
									return buf.toString();
								}
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			if (rowSet != null) {
				try {
					rowSet.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		return buf.toString();
	}

	/**
	 * 校验是否严格按照项目的权重|分值，来制订任务的权重|分值
	 * 
	 * @param itemid
	 * @return
	 */
	public String validateIsLimit(String itemid) {
		StringBuffer buf = new StringBuffer("");
		RowSet rs = null;
		RowSet rowSet = null;
		try {
			StringBuffer sql = new StringBuffer("");
			sql.append("select item_id,itemdesc,score,rank,rank_type from per_template_item where UPPER(template_id)='"
					+ this.plan_vo.getString("template_id").toUpperCase() + "'");
			sql.append(" and (child_id is null or "
					+ Sql_switcher.length("child_id") + "=0 )");// 是否只控制椰子节点还是全部控制
			if (itemid != null && !"".equals(itemid))
				sql.append(" and item_id=" + itemid);
			sql.append(" order by item_id");
			ContentDAO dao = new ContentDAO(this.conn);
			HashMap dynaMap = null;
			if (this.perObject_vo != null
					&& this.perObject_vo.getString("body_id") != null
					&& !"".equals(this.perObject_vo.getString("body_id"))) {
				LoadXml loadXml = new LoadXml();
				dynaMap = loadXml
						.getDynaItem(this.plan_vo.getInt("plan_id") + "",
								this.conn,
								this.perObject_vo.getString("body_id"));
			}
			LoadXml loadxml = null;
			if (BatchGradeBo.getPlanLoadXmlMap().get(
					String.valueOf(this.plan_vo.getInt("plan_id"))) == null) {
				loadxml = new LoadXml(this.conn, String.valueOf(this.plan_vo
						.getInt("plan_id")));
				BatchGradeBo.getPlanLoadXmlMap()
						.put(String.valueOf(this.plan_vo.getInt("plan_id")),
								loadxml);
			} else
				loadxml = (LoadXml) BatchGradeBo.getPlanLoadXmlMap().get(
						String.valueOf(this.plan_vo.getInt("plan_id")));
			this.planParam = loadxml.getDegreeWhole();
			boolean isScoreFromItem = false;
			if ("1".equals(this.template_vo.getString("status"))
					&& this.planParam.get("ScoreFromItem") != null
					&& "true"
							.equalsIgnoreCase((String) this.planParam.get("ScoreFromItem")))
				isScoreFromItem = true;
			rs = dao.search(sql.toString());
			while (rs.next()) {
				String dyna_value = "";
				String value = "0";
				String item_id = rs.getString("item_id");
				String itemdesc = rs.getString("itemdesc");
				if (dynaMap != null
						&& dynaMap.get(this.perObject_vo.getString("body_id")
								+ item_id) != null) {
					HashMap map = (HashMap) dynaMap.get(this.perObject_vo
							.getString("body_id") + item_id);
					dyna_value = moveZero((String) map.get("dyna_value"));
				}
				if ("0".equals(this.template_vo.getString("status")))// 分值模板
				{
					value = rs.getString("score");
				} else {
					value = rs.getString("rank");
				}
				if (dyna_value != null && dyna_value.length() > 0) {
					value = dyna_value;
				}
				BigDecimal vbd = null;
				if (value != null && !"".equals(value))
					vbd = new BigDecimal(value);
				BigDecimal zero = new BigDecimal("0");
				if (vbd != null) {
					if (vbd.compareTo(zero) == 0)
						vbd = null;
				}
				if (vbd == null)
					continue;
				StringBuffer sub_sql = new StringBuffer("");
				sub_sql.append("select item_id,p0407,");
				if ("0".equals(this.template_vo.getString("status")))// 分值模板
				{
					sub_sql.append(" p0413,p0421 ");
				} else {
					sub_sql.append(" p0415,p0423 ");
				}
				sub_sql.append(" from p04 where plan_id="
						+ this.plan_vo.getInt("plan_id"));
				if (this.plan_vo.getInt("object_type") == 1
						|| this.plan_vo.getInt("object_type") == 3
						|| this.plan_vo.getInt("object_type") == 4)
					sub_sql.append(" and b0110='" + this.object_id + "'");
				else if (this.plan_vo.getInt("object_type") == 2)
					sub_sql.append(" and a0100='" + this.object_id + "'");
				// if(this.plan_vo.getInt("status")>=4&&this.plan_vo.getInt("status")!=8)
				// {
				// if(this.planParam.get("NoShowTargetAdjustHistory")!=null&&((String)this.planParam.get("NoShowTargetAdjustHistory")).equalsIgnoreCase("True"))
				sub_sql.append(" and ( ( state=-1  and (chg_type!=3 or chg_type is null)  ) or state is null or state<>-1 )");
				// }
				sub_sql.append(" and item_id=" + item_id);
				rowSet = dao.search(sub_sql.toString());
				BigDecimal total = new BigDecimal("0");
				while (rowSet.next()) {
					// 不管是权重还是分值，首先看调整后的，如果调整后的有值，就用调整后的来比较，否则用标准的来比较
					if ("0".equals(this.template_vo.getString("status")))// 分值模板
					{
						if (rowSet.getString("p0421") == null) {
							BigDecimal bd = new BigDecimal(""
									+ rowSet.getFloat("p0413"));
							total = total.add(bd);
							// 结果是-1 小于0 等于 1 大于
						} else {
							BigDecimal bd = new BigDecimal(""
									+ rowSet.getFloat("p0421"));
							total = total.add(bd);
						}
					} else {

						if (rowSet.getString("p0423") == null) {
							BigDecimal bd = new BigDecimal(""
									+ rowSet.getFloat("p0415"));
							total = total.add(bd);
						} else {
							BigDecimal bd = new BigDecimal(""
									+ rowSet.getFloat("p0423"));
							total = total.add(bd);
						}
					}
				}
				if (vbd != null) {
					if (isScoreFromItem) {
						BigDecimal one = new BigDecimal("1");
						if (total.compareTo(one) != 0) {
							buf.append("【" + itemdesc
									+ "】项目下任务的权重之和不等于100%\r\n请重新调整目标卡！");
							return buf.toString();
						}
					} else {
						if (vbd.compareTo(total) != 0) {
							if ("0"
									.equals(this.template_vo.getString("status")))// 分值模板
							{
								buf.append("【" + itemdesc
										+ "】项目下任务的分值之和与该项目的分值不相等\r\n请重新调整目标卡！");
								return buf.toString();
							} else {
								buf.append("【" + itemdesc
										+ "】项目下任务的权重之和与该项目的权重不相等\r\n请重新调整目标卡！");
								return buf.toString();
							}
						}
					}
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			if (rowSet != null) {
				try {
					rowSet.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		return buf.toString();
	}

	public boolean isHaveLeader() {
		boolean flag = false;
		RowSet rs = null;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			rs = dao.search("select object_id from per_mainbody where body_id=-1 and plan_id="
					+ this.plan_vo.getInt("plan_id")
					+ " and object_id='"
					+ this.object_id + "'");
			while (rs.next()) {
				flag = true;
				break;
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		return flag;
	}

	public String getObjectInfoHtml(String clientName, String optDesc) {
		StringBuffer desc = new StringBuffer("");
		RowSet rs = null;

		try {
			desc.append("<table   class='ListTable' cellspacing='0'  cellpadding='0'  width='100%' align='left'> ");
			LazyDynaBean personnelInfo = null;
			String tdHeight = "height='22'";
			if ("zglt".equals(clientName))
				tdHeight = "height='33'";
			String planInfo = getPlanInfo();// 计划年度名称
			Sys_Oth_Parameter sysbo = new Sys_Oth_Parameter(this.conn);
			String display_e0122 = sysbo
					.getValue(Sys_Oth_Parameter.DISPLAY_E0122);
			if (display_e0122 == null || "00".equals(display_e0122)
					|| "".equals(display_e0122))
				display_e0122 = "0";
			String isVisibleUN = SystemConfig.getPropertyValue("isVisibleUN");
			String per_object_infofield = SystemConfig
					.getPropertyValue("per_object_infofield");
			String per_object_infofieldDesc = "";
			String per_object_infofieldContent = "";
			boolean isDefine = false;
			if (per_object_infofield != null
					&& !"".equals(per_object_infofield.trim())) {
				isDefine = true;
				StringBuffer sql = new StringBuffer();
				StringBuffer leftjoin = new StringBuffer("");
				HashMap fieldSetMap = new HashMap();
				String[] arr = per_object_infofield.split(",");
				boolean flag = false;
				for (int i = 0; i < arr.length; i++) {
					if (arr[i] == null || "".equals(arr[i]))
						continue;
					FieldItem item = DataDictionary.getFieldItem(arr[i]
							.toLowerCase());
					if (item != null && "1".equals(item.getUseflag())) {
						if ("".equals(per_object_infofieldDesc)
								&& "2"
										.equals(String.valueOf(
                                                getPlan_vo().getInt("object_type")))
								&& item.getFieldsetid().startsWith("A"))
							per_object_infofieldDesc = item.getItemdesc();
						else if ("".equals(per_object_infofieldDesc)
								&& item.getFieldsetid().startsWith("B"))
							per_object_infofieldDesc = item.getItemdesc();

						if ("2"
								.equals(String.valueOf(getPlan_vo().getInt("object_type")))
								&& item.getFieldsetid().startsWith("A")) {
							sql.append(" " + item.getItemid() + ",");
							if (!"A01".equalsIgnoreCase(item.getFieldsetid())
									&& fieldSetMap.get(item.getFieldsetid()
											.toUpperCase()) == null) {
								// leftjoin.append(" left join USR"+item.getFieldsetid()+" on USRA01.a0100=USR"+item.getFieldsetid()+".A0100 and ");
								// leftjoin.append("USR"+item.getFieldsetid()+".i9999=(select max(i9999) from USR"+item.getFieldsetid());
								// leftjoin.append(" a where a.a0100=USR"+item.getFieldsetid()+".A0100)");

								leftjoin.append(" left join  (select * from  USR"
										+ item.getFieldsetid()
										+ " b where b.i9999=(select max(a.i9999) from USR"
										+ item.getFieldsetid()
										+ " a where a.a0100=b.A0100 )  )  USR"
										+ item.getFieldsetid()
										+ "   on USRA01.a0100=USR"
										+ item.getFieldsetid() + ".A0100 ");
								fieldSetMap.put(item.getFieldsetid()
										.toUpperCase(), "1");
							}

						} else if (item.getFieldsetid().startsWith("B")) {
							sql.append(" " + item.getItemid() + ",");
							if (!"B01".equalsIgnoreCase(item.getFieldsetid())
									&& fieldSetMap.get(item.getFieldsetid()
											.toUpperCase()) == null) {
								// leftjoin.append(" left join "+item.getFieldsetid()+" on B01.B0110="+item.getFieldsetid()+".B0110 and ");
								// leftjoin.append(item.getFieldsetid()+".i9999=(select max(i9999) from "+item.getFieldsetid()+" a where a.b0110="+item.getFieldsetid()+".B0110)");
								leftjoin.append(" left join  (select * from  "
										+ item.getFieldsetid()
										+ " b where b.i9999=(select max(a.i9999) from  "
										+ item.getFieldsetid()
										+ " a where a.b0110=b.b0110 )  )  "
										+ item.getFieldsetid()
										+ "   on B01.B0110="
										+ item.getFieldsetid() + ".B0110 ");

								fieldSetMap.put(item.getFieldsetid()
										.toUpperCase(), "1");
							}
						}
					}
				}
				if (!"".equals(per_object_infofieldDesc)
						&& "zglt".equalsIgnoreCase(clientName)) {
					per_object_infofieldDesc = "职级";
				}
				ContentDAO dao = new ContentDAO(this.conn);
				StringBuffer sql_sb = new StringBuffer();

				if (sql.toString().length() > 0) {
					sql.setLength(sql.length() - 1);
					sql_sb.append(" select " + sql.toString() + " from ");
					if ("2"
							.equals(String.valueOf(getPlan_vo().getInt("object_type")))) {
						sql_sb.append(" USRA01 ");
						sql_sb.append(leftjoin);
						sql_sb.append(" where USRA01.A0100='" + this.object_id
								+ "'");
					} else {
						sql_sb.append(" B01 ");
						sql_sb.append(leftjoin);
						sql_sb.append(" where B01.B0110='" + this.object_id
								+ "'");
					}
					rs = dao.search(sql_sb.toString());
					SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
					while (rs.next()) {
						StringBuffer value = new StringBuffer();
						for (int i = 0; i < arr.length; i++) {
							if (arr[i] == null || "".equals(arr[i]))
								continue;
							FieldItem item = DataDictionary.getFieldItem(arr[i]
									.toLowerCase());
							if (item != null && "1".equals(item.getUseflag())) {
								if ("A".equalsIgnoreCase(item.getItemtype())) {
									if (rs.getString(item.getItemid()) != null) {
										if (item.isCode())
											value.append(AdminCode.getCodeName(
													item.getCodesetid(),
													rs.getString(item
															.getItemid())));
										else
											value.append(rs.getString(item
													.getItemid()));
									}
								} else if ("D".equalsIgnoreCase(
                                        item.getItemtype())) {
									if (rs.getDate(item.getItemid()) != null)
										value.append(format.format(rs
												.getDate(item.getItemid())));
								} else if ("N".equalsIgnoreCase(
                                        item.getItemtype())) {
									if (rs.getString(item.getItemid()) != null) {
										if (item.getDecimalwidth() == 0)
											value.append(rs.getInt(item
													.getItemid()));
										else
											value.append(PubFunc.round(
													rs.getString(item
															.getItemid()), item
															.getDecimalwidth()));
									}
								} else {
									if (rs.getString(item.getItemid()) != null)
										value.append(rs.getString(item
												.getItemid()));
								}
							}
						}
						per_object_infofieldContent = value.toString();
					}
				}
			}

			if ("2".equals(String.valueOf(getPlan_vo().getInt("object_type")))) {
				personnelInfo = getPersonnelInfo("Usr", object_id);
				String[] ar = planInfo.split("`");
				int colspan = 5;
				if (personnelInfo != null
						&& (String) personnelInfo.get("e01a1") != null
						&& ((String) personnelInfo.get("e01a1")).length() > 0
						&& AdminCode.getCodeName("@K",
								(String) personnelInfo.get("e01a1")) != null
						&& AdminCode.getCodeName("@K",
								(String) personnelInfo.get("e01a1")).length() > 0
						&& !"zglt"
								.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName")))
					colspan += 2;
				if (!"".equals(per_object_infofieldDesc))
					colspan += 2;
				desc.append("<tr "
						+ tdHeight
						+ "><td "
						+ tdHeight
						+ " class='RecordRow_objInfo common_border_color' align='center' width='150px'><font class='"
						+ getTt4CssClassName() + "'>考核表名称</font></td>");
				desc.append("<td " + tdHeight
						+ " class='RecordRow_objInfo common_border_color' align='center' colspan='"
						+ colspan + "'><font class='" + getTt4CssClassName()
						+ "'>" + (ar.length > 1 ? ar[1] : "&nbsp;") + "  "
						+ optDesc + "</font></td>");
				desc.append("</tr>");
				desc.append("<tr "
						+ tdHeight
						+ "><td "
						+ tdHeight
						+ " class='RecordRow_objInfo common_border_color' align='center' width='150px'><font class='"
						+ getTt4CssClassName() + "'>姓名</font></td>");
				desc.append("<td "
						+ tdHeight
						+ " class='RecordRow_objInfo common_border_color' align='center'><font class='"
						+ getTt5CssClassName() + "'>"
						+ (String) personnelInfo.get("a0101") + "</font></td>");
				desc.append("<td "
						+ tdHeight
						+ " class='RecordRow_objInfo common_border_color' align='center'><font class='"
						+ getTt4CssClassName() + "'>所属部门</font></td>");
				desc.append("<td "
						+ tdHeight
						+ " class='RecordRow_objInfo common_border_color' align='center'><font class='"
						+ getTt5CssClassName() + "'>");
				if (personnelInfo != null
						&& (String) personnelInfo.get("b0110") != null
						&& ((String) personnelInfo.get("b0110")).length() > 0
						&& (String) personnelInfo.get("e0122") != null
						&& ((String) personnelInfo.get("e0122")).length() > 0) {
					if (!"false".equalsIgnoreCase(isVisibleUN))
						desc.append(AdminCode.getCodeName("UN",
								(String) personnelInfo.get("b0110")) + "/");
					if (Integer.parseInt(display_e0122) == 0) {
						desc.append(AdminCode.getCodeName("UM",
								(String) personnelInfo.get("e0122")));
					} else {
						CodeItem item = AdminCode.getCode("UM",
								(String) personnelInfo.get("e0122"),
								Integer.parseInt(display_e0122));
						if (item != null) {
							desc.append(item.getCodename());
						} else {
							desc.append(AdminCode.getCodeName("UM",
									(String) personnelInfo.get("e0122")));
						}

					}
				} else {
					if ((String) personnelInfo.get("b0110") != null
							&& ((String) personnelInfo.get("b0110")).length() > 0) {
						if (!"false".equalsIgnoreCase(isVisibleUN))
							desc.append(AdminCode.getCodeName("UN",
									(String) personnelInfo.get("b0110")));
					} else if ((String) personnelInfo.get("e0122") != null
							&& ((String) personnelInfo.get("e0122")).length() > 0) {
						if (Integer.parseInt(display_e0122) == 0) {
							desc.append(AdminCode.getCodeName("UM",
									(String) personnelInfo.get("e0122")));
						} else {
							CodeItem item = AdminCode.getCode("UM",
									(String) personnelInfo.get("e0122"),
									Integer.parseInt(display_e0122));
							if (item != null) {
								desc.append(item.getCodename());
							} else {
								desc.append(AdminCode.getCodeName("UM",
										(String) personnelInfo.get("e0122")));
							}

						}
					} else
						desc.append("&nbsp;&nbsp;");
				}
				desc.append("</font></td>");
				if (personnelInfo != null
						&& (String) personnelInfo.get("e01a1") != null
						&& ((String) personnelInfo.get("e01a1")).length() > 0
						&& AdminCode.getCodeName("@K",
								(String) personnelInfo.get("e01a1")) != null
						&& AdminCode.getCodeName("@K",
								(String) personnelInfo.get("e01a1")).length() > 0) {
					desc.append("<td "
							+ tdHeight
							+ " class='RecordRow_objInfo common_border_color' align='center'><font class='"
							+ getTt4CssClassName() + "'>岗位</font></td>");
					desc.append("<td "
							+ tdHeight
							+ " class='RecordRow_objInfo common_border_color' align='center'><font class='"
							+ getTt5CssClassName() + "'>");
					desc.append(AdminCode.getCodeName("@K",
							(String) personnelInfo.get("e01a1")));
					desc.append("</font></td>");
				}
				if (!"".equals(per_object_infofieldDesc)) {
					desc.append("<td "
							+ tdHeight
							+ " class='RecordRow_objInfo common_border_color' align='center'><font class='"
							+ getTt4CssClassName() + "'>"
							+ per_object_infofieldDesc + "</font></td>");
					desc.append("<td "
							+ tdHeight
							+ " class='RecordRow_objInfo common_border_color' align='center'><font class='"
							+ getTt5CssClassName() + "'>");
					desc.append(per_object_infofieldContent);
					desc.append("</font></td>");
				}
				if (!"zglt"
						.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {
					desc.append("<td "
							+ tdHeight
							+ " class='RecordRow_objInfo common_border_color' align='center'><font class='"
							+ getTt4CssClassName() + "'>考核期间</font></td>");
					desc.append("<td "
							+ tdHeight
							+ " class='RecordRow_objInfo common_border_color' align='center'><font class='"
							+ getTt5CssClassName() + "'>" + ar[0]
							+ "</font></td>");
				}
				desc.append("</tr></table>");

			} else {
				String uu = "";
				if (AdminCode.getCodeName("UM", object_id) != null
						&& AdminCode.getCodeName("UM", object_id).length() > 0) {
					if (Integer.parseInt(display_e0122) == 0) {
						uu = AdminCode.getCodeName("UM", object_id);
					} else {
						CodeItem item = AdminCode.getCode("UM", object_id,
								Integer.parseInt(display_e0122));
						if (item != null) {
							uu = item.getCodename();
						} else {
							uu = AdminCode.getCodeName("UM", object_id);
						}

					}
				}
				if (AdminCode.getCodeName("UN", object_id) != null
						&& AdminCode.getCodeName("UN", object_id).length() > 0) {
					uu = AdminCode.getCodeName("UN", object_id);
				}
				int colspan = 3;
				if (!"".equals(per_object_infofieldDesc))
					colspan += 2;
				int ltcolspan = 1;
				if (!"".equals(per_object_infofieldDesc))
					ltcolspan = 3;
				String[] ar = planInfo.split("`");
				desc.append("<tr "
						+ tdHeight
						+ " ><td "
						+ tdHeight
						+ "  class='RecordRow_objInfo common_border_color' align='center' width='150px'><font class='"
						+ getTt4CssClassName() + "'>考核表名称</font></td>");// class='trShallow'
				if (!"zglt"
						.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName")))
					desc.append("<td "
							+ tdHeight
							+ " class='RecordRow_objInfo common_border_color' align='center' colspan='"
							+ colspan + "'><font class='"
							+ getTt4CssClassName() + "'>"
							+ (ar.length > 1 ? ar[1] : "&nbsp;") + "  "
							+ optDesc + "</font></td></tr>");
				else
					desc.append("<td "
							+ tdHeight
							+ " class='RecordRow_objInfo common_border_color' align='center' colspan='"
							+ ltcolspan + "'><font class='"
							+ getTt4CssClassName() + "'>"
							+ (ar.length > 1 ? ar[1] : "&nbsp;") + "  "
							+ optDesc + "</font></td></tr>");
				desc.append("<tr "
						+ tdHeight
						+ "><td "
						+ tdHeight
						+ " class='RecordRow_objInfo common_border_color' align='center' width='150px'><font class='"
						+ getTt4CssClassName() + "'>部门/单位</font></td>");// class='trDeep'
				desc.append("<td "
						+ tdHeight
						+ " class='RecordRow_objInfo common_border_color' align='center'><font class='"
						+ getTt5CssClassName() + "'>" + uu + "</font></td>");
				if (!"".equals(per_object_infofieldDesc)) {
					desc.append("<td "
							+ tdHeight
							+ " class='RecordRow_objInfo common_border_color' align='center'><font class='"
							+ getTt4CssClassName() + "'>"
							+ per_object_infofieldDesc + "</font></td>");
					desc.append("<td "
							+ tdHeight
							+ " class='RecordRow_objInfo common_border_color' align='center'><font class='"
							+ getTt5CssClassName() + "'>"
							+ per_object_infofieldContent + "</font></td>");
				}
				if (!"zglt"
						.equalsIgnoreCase(SystemConfig.getPropertyValue("clientName"))) {
					desc.append("<td "
							+ tdHeight
							+ " class='RecordRow_objInfo common_border_color' align='center'><font class='"
							+ getTt4CssClassName() + "'>考核期间</font></td>");
					desc.append("<td "
							+ tdHeight
							+ " class='RecordRow_objInfo common_border_color' align='center'><font class='"
							+ getTt5CssClassName() + "'>" + ar[0]
							+ "</font></td>");
				}
				desc.append("</tr></table>");
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		return desc.toString();
	}

	/**
	 * 判断必打分是否符合要求
	 * 
	 * @param plan_id
	 * @param mainbody_id
	 * @param object_id
	 * @return
	 */
	public boolean validateMustFill(String plan_id, String mainbody_id,
			String object_id) {
		boolean flag = false;
		RowSet rs = null;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			StringBuffer buf = new StringBuffer("");
			buf.append("select count(p0400) from per_target_evaluation where ");
			buf.append("plan_id=" + plan_id + " and object_id='" + object_id
					+ "' and mainbody_id='" + mainbody_id + "' ");
			buf.append(" and plan_id=" + plan_id);
			rs = dao.search(buf.toString());
			if (rs.next()) {
				int num = rs.getInt(1);
				if (num == 0 && !isAllScore(plan_id, mainbody_id, object_id))
					flag = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception ee) {

			}
		}
		return flag;
	}

	/***
	 * 判断所有项目是否都填写了，去掉统一打分指标，去掉没权限的，去掉考核机构限制住的，去掉没有权重的
     *
	 * 
	 * @param plan_id
	 * @param mainbody_id
	 * @param object_id
	 * @return
	 */
	public boolean isAllScore(String plan_id, String mainbody_id,
			String object_id) {
		boolean flag = true;
		RowSet rs = null;
		try {
			StringBuffer buf = new StringBuffer("");
			buf.append(" select p0401,chg_type,state,item_id from p04 where p0400 not in");
			buf.append("(select p0400 from per_target_evaluation where ");
			buf.append("plan_id=" + plan_id + " and object_id='" + object_id
					+ "' and mainbody_id='" + mainbody_id + "')");
			buf.append(" and plan_id=" + plan_id + " and ");
            // 如果是权重模板时,去掉没有权重的指标。 haosl 2019-7-3
            if (!"0".equals(this.template_vo.getString("status"))) {
                buf.append(Sql_switcher.isnull("P0415","0")+"<> 0 and ");
            }
			if ("2".equals(this.plan_vo.getString("object_type")))
				buf.append(" a0100=");
			else
				buf.append(" b0110=");
			buf.append("'" + object_id + "'");
			buf.append(" and ( ( state=-1 and (chg_type!=3 or chg_type is null) ) or state is null or state<>-1 )");// 去掉删除的任务
			if (this.privByOrg)// 按考核机构限制
			{
				if (this.userView.getUnitIdByBusi("5") != null
						&& this.userView.getUnitIdByBusi("5").length() > 0
						&& !"UN"
								.equalsIgnoreCase(this.userView.getUnitIdByBusi("5")))// &&(this.plan_vo.getInt("status")!=4&&this.plan_vo.getInt("status")!=6&&this.perObject_vo.getString("sp_flag")!=null&&!this.perObject_vo.getString("sp_flag").equals("")&&!this.perObject_vo.getString("sp_flag").equals("01"))
				{
					String temp = this.userView.getUnitIdByBusi("5"); // 操作单位 5:
																		// 绩效管理
																		// 6：培训管理
																		// 7：招聘管理
					String[] arr = temp.split("`");
					StringBuffer t_buf = new StringBuffer();
					for (int i = 0; i < arr.length; i++) {
						if (arr[i] == null || "".equals(arr[i]))
							continue;
						t_buf.append(" or score_org like '"
								+ arr[i].substring(2) + "%'");
					}
					t_buf.append(" or score_org is null or score_org =''");
					buf.append(" and (" + t_buf.toString().substring(3) + ")");
				} else {
					buf.append(" and (UPPER(score_org)='"
							+ this.userView.getUserOrgId()
							+ "' or UPPER(score_org)='"
							+ this.userView.getUserDeptId() + "'");
					buf.append(" or score_org is null or score_org ='')");
				}
			}
			ContentDAO dao = new ContentDAO(this.conn);
			rs = dao.search(buf.toString());
			while (rs.next()) {
				if (!flag)
					break;
				String chg_type = rs.getString("chg_type") == null ? "" : rs
						.getString("chg_type");
				String state = rs.getString("state") == null ? "" : rs
						.getString("state");
				if ("3".equals(chg_type) && "-1".equals(state))
					continue;
				RecordVo vo = new RecordVo("per_point");
				vo.setString("point_id", rs.getString("p0401"));
				if (dao.isExistRecordVo(vo)) {
					String status = vo.getString("status");
					if ("1".equals(status))// 统一打分指标去掉
						continue;
				}
				String p0401 = rs.getString("p0401");
				String item_id = rs.getString("item_id");
				if (this.itemPrivMap != null
						&& (this.itemPrivMap.get(p0401) != null
								&& "1"
										.equals((String) this.itemPrivMap.get(p0401)) || this.itemPrivMap
								.get(item_id) != null
								&& "1"
										.equals((String) this.itemPrivMap.get(item_id)))) {
					flag = false;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return flag;
	}

	/**
	 * 判断所有能打分任务的评分说明是否都填写
	 * 
	 * @param plan_id
	 * @param object_id
	 * @param mainbody_id
	 * @return
	 */
	public boolean isAllScoreExplain(String plan_id, String object_id,
			String mainbody_id) {
		boolean flag = true;
		RowSet rs = null;
		try {
			StringBuffer buf = new StringBuffer("");
			/** reasons为text类型，一些函数和运算符不能使用，所以暂不用isnull或者=‘’来判断，只能一天记录一条记录的看 */
			ContentDAO dao = new ContentDAO(this.conn);
			buf.append("select reasons from per_target_evaluation where ");
			buf.append("plan_id=" + plan_id + " and object_id='" + object_id
					+ "' and mainbody_id='" + mainbody_id + "'");
			StringBuffer _str = new StringBuffer();//记录sql语句，用来判断是否有指标评分了
			_str.append(buf.toString());
			ArrayList MustFillOptionsList = (ArrayList) this.planParam.get("MustFillOptionsList");
			boolean aflag = true;
			StringBuffer str = new StringBuffer();
			for (int i = 0; MustFillOptionsList!=null && i < MustFillOptionsList.size(); i++) {
				LazyDynaBean abean = (LazyDynaBean) MustFillOptionsList.get(i);
				String Flag = (String) abean.get("Flag");
				String IsValid = (String) abean.get("IsValid");
				if ("true".equalsIgnoreCase(IsValid))
					aflag = false;
				String DegreeId = (String) abean
						.get("DegreeId");
				if ("Up".equalsIgnoreCase(Flag)
						&& "true".equalsIgnoreCase(IsValid)) {
					str.append(" or UPPER(degree_id)<'"
							+ DegreeId.toUpperCase() + "'");
				} else if ("Down".equalsIgnoreCase(Flag)
						&& "true".equalsIgnoreCase(IsValid)) {
					str.append(" or UPPER(degree_id)>'"
							+ DegreeId.toUpperCase() + "'");
				}
			}
			if(str.length()>0){
				buf.append(" and (1=2");
				buf.append(str);
				buf.append(")");
			}
			boolean isHaveValue = false;//判断是否打过分了，如果没打分那么也认为评分说明没填 zhaoxg add 2015-12-10
			rs = dao.search(buf.toString());
			while (rs.next()) {
				String reasons = Sql_switcher.readMemo(rs, "reasons");
				if ("".equals(reasons.trim())) {
					flag = false;
					break;
				}
			}
			if(_str.toString().length()>0){
				RowSet rs1 = dao.search(_str.toString());
				if(rs1.next()){
					isHaveValue = true;
				}
			}
			if(!isHaveValue){
				flag = false;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return flag;
	}

	/**
	 * 如果没有文本的绩效报告，逻辑需要，插入一条空的。
	 * 
	 * @param planid
	 * @param article_type
	 * @param fileflag
	 * @return
	 */
	private int insertPerArticleRecord(String planid, int article_type,
			int fileflag) {
		int article_id = 0;
		RowSet rs = null;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			DBMetaModel dbmodel = new DBMetaModel(this.conn);
			dbmodel.reloadTableModel("per_article");
			RecordVo avo = new RecordVo("per_article");
			article_id = DbNameBo.getPrimaryKey("per_article", "article_id",
					conn);
			avo.setInt("article_id", article_id);
			avo.setInt("plan_id", Integer.parseInt(planid));
			String b0110 = "";
			String e0122 = "";
			String e01a1 = "";
			rs = dao.search("select b0110,e0122,e01a1 from "
					+ this.userView.getDbname() + "A01 where a0100='"
					+ this.userView.getA0100() + "'");
			if (rs.next()) {
				b0110 = rs.getString("b0110") != null ? rs.getString("b0110")
						: "";
				e0122 = rs.getString("e0122") != null ? rs.getString("e0122")
						: "";
				e01a1 = rs.getString("e01a1") != null ? rs.getString("e01a1")
						: "";
			}
			avo.setString("b0110", b0110);
			avo.setString("e0122", e0122);
			avo.setString("e01a1", e01a1);
			avo.setString("nbase", this.userView.getDbname());
			avo.setString("a0100", this.userView.getA0100());
			avo.setString("a0101", this.userView.getUserFullName());
			avo.setInt("article_type", article_type);
			avo.setInt("fileflag", fileflag);
			avo.setInt("state", 0);
			dao.addValueObject(avo);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return article_id;
	}

	public boolean isSub(String context, String plan_id, String a0100,
			String nbase, int article_type) {
		boolean flag = true;
		RowSet rowSet = null;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			rowSet = dao
					.search("select count(*) from per_article where article_type="
							+ article_type
							+ " and  plan_id="
							+ plan_id
							+ " and fileflag=2 and a0100='"
							+ a0100
							+ "' and lower(nbase)='"
							+ nbase.toLowerCase()
							+ "'");
			int n = 0;
			if (rowSet.next())
				n = rowSet.getInt(1);
			if (n == 0 && (context == null || context.trim().length() == 0))
				flag = false;
			if (rowSet != null)
				rowSet.close();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rowSet != null)
					rowSet.close();
			} catch (Exception e) {

				e.printStackTrace();
			}
		}
		return flag;
	}

	public String isTraceOrMust() {
		String str = "0";
		String TargetMustFillItem = "";
		if (this.planParam.get("TargetMustFillItem") != null
				&& ((String) this.planParam.get("TargetMustFillItem")).trim()
						.length() > 0)
			TargetMustFillItem = ((String) this.planParam
					.get("TargetMustFillItem")).trim().toLowerCase();
		/** 和这个没有关系 */
		/*
		 * if(this.TargetDefineItem.length()>0&&this.TargetDefineItem.indexOf(
		 * ",ATTACHMENT,")!=-1) str="4";
		 */
		if (("," + this.TargetTraceItem.toUpperCase() + ",")
				.indexOf(",ATTACHMENT,") != -1
				&& ("," + TargetMustFillItem.toUpperCase() + ",")
						.indexOf(",ATTACHMENT,") != -1) {
			str = "3";
		} else if (("," + this.TargetTraceItem.toUpperCase() + ",")
				.indexOf(",ATTACHMENT,") != -1) {
			str = "1";
		} else if (("," + TargetMustFillItem.toUpperCase() + ",")
				.indexOf(",ATTACHMENT,") != -1) {
			str = "2";
		}
		return str;
	}

	public int getIsRejectFunc(String object_id, String mainbody_id) {
		int flag = 0;
		try {
			if (this.planParam.get("GradeByBodySeq") != null
					&& "True"
							.equalsIgnoreCase(((String) this.planParam.get("GradeByBodySeq")).trim())) {
				if (this.planParam.get("AllowSeeAllGrade") != null
						&& "True".equalsIgnoreCase(((String) this.planParam.get("AllowSeeAllGrade"))
								.trim())) {
					ContentDAO dao = new ContentDAO(this.conn);
					String sql = "select count(b.object_id) from per_mainbody b where b.plan_id="
							+ plan_id
							+ " and exists ( "
							+ " select null from per_mainbody a where  a.object_id=b.object_id and b.seq<a.seq  and  a.plan_id="
							+ plan_id
							+ " "
							+ " and   a.status<>2  and a.object_id='"
							+ object_id
							+ "' and  a.mainbody_id='"
							+ mainbody_id + "' ) and status=2 ";
					RowSet rowSet2 = dao.search(sql);
					if (rowSet2.next()) {
						if (rowSet2.getInt(1) > 0)
							flag = 1;
					}

					if (rowSet2 != null)
						rowSet2.close();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return flag;
	}

	public HashMap isVisibleScoreBox(String object_id, String body_id,
			String plan_id) {
		HashMap map = new HashMap();
		RowSet rs = null;
		try {
			StringBuffer buf = new StringBuffer();
			ContentDAO dao = new ContentDAO(this.conn);
			DbWizard dbWizard = new DbWizard(this.conn);
			if (dbWizard.isExistTable("per_itempriv_" + plan_id, false)) {
				buf.append("select * from per_itempriv_" + plan_id);
				buf.append(" where object_id='" + object_id + "'");
				if (body_id != null && !"".equals(body_id))
					buf.append(" and body_id=" + body_id);
				rs = dao.search(buf.toString());
				while (rs.next()) {
					ResultSetMetaData mt = rs.getMetaData();
					int columnNum = 0;
					int hasPrivNum = 0;
					for (int i = 0; i < mt.getColumnCount(); i++) {
						String columnName = mt.getColumnName(i + 1);
						if (columnName.length() > 2
								&& "C_".equalsIgnoreCase(
                                columnName.substring(0, 2))) {
							columnNum++;
							String priv = "";
                            
                            String b = rs.getString("body_id");
                            Integer _opt = (Integer) bodyOptMap.get(b);
                            if (_opt.intValue() == 1) { // 表示参与评分，且只能确认
								priv = "1";
							} else {
								priv = rs.getString(columnName) != null ? rs.getString(columnName) : "0";
							}
							if ("0".equals(priv))
								hasPrivNum++;
						}
					}
					if (columnNum == hasPrivNum)// 所有的项目，都没有权限
					{
						String bodyid = rs.getString("body_id");
						map.put(bodyid, "1");
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return map;
	}

	/**
	 * 根据计划编号和主体编号，查询打分确认标识
	 * @param body_id 主体类别编号(由于历史原因，页面传递的body_id是无效的，正确的在this.mainbodyBean里面，所以这个参数弃之不用)
	 * @return -1：不参与评分操作(isgrade=1)，0：打分，1：确认
	 * @throws SQLException 如果发生了SQLException
	 * @author 刘蒙
	 */
	public int getPlanBodyOpt(String body_id) throws SQLException {
		ContentDAO dao = new ContentDAO(this.conn);
		RowSet optRowSet = null;
		StringBuffer optSql = new StringBuffer("SELECT isgrade,opt FROM per_plan_body WHERE 1=1");
		optSql.append(" AND plan_id=").append(this.plan_vo.getInt("plan_id"));
		optSql.append(" AND body_id=").append("'"+body_id+"'");
		int planBodyOpt = -1;
		try {
			optRowSet = dao.search(optSql.toString());
			if (optRowSet.next()) {
				int iOpt = optRowSet.getInt("opt");
				int iIsgrade = optRowSet.getInt("isgrade");
				planBodyOpt = iIsgrade == 0 ? iOpt : planBodyOpt; // 只有参与评分了，opt才有效
			}
		} catch (SQLException e) {
			throw e;
		} finally {
			if (optRowSet != null) {
				try {
					optRowSet.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return planBodyOpt;
	}

	public void getSelfScoreOrg(String sql) {
		this.selfScoreOrgMap = new HashMap();
		RowSet rs = null;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			rs = dao.search(sql);
			while (rs.next()) {
				this.selfScoreOrgMap.put(rs.getString("p0400"),
						rs.getString("p0400"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 获得目标任务调整记录
	 * 
	 * @param p0400
	 * @return
	 */
	public String getStringContent(String p0400) {
		String sql = "select * from p04 where p0400='" + p0400 + "'";
		RowSet rs = null;
		ResultSet res = null;
		String content = "";
		String optTime = "";
		String optName = "";
		String b0110 = "";
		String e0122 = "";
		String e01a1 = "";
		int chg_type = -7;
		String str = "";
		ContentDAO dao = new ContentDAO(this.conn);
		try {
			rs = dao.search(sql);
			while (rs.next()) {
				optTime = String.valueOf(rs.getDate("optTime"));
				optName = rs.getString("optName");
				chg_type = rs.getInt("chg_type");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (chg_type == 1) {
			str = "调整了此任务！";
		} else if (chg_type == 2) {
			str = "新增了此任务！";
		} else if (chg_type == 3) {
			str = "删除了此任务！";
		}
		if (optName != null && optTime != null && !"".equalsIgnoreCase(optName)
				&& optTime!=null && !"".equalsIgnoreCase(optTime)) {
			
			if(optTime.lastIndexOf(".")!=-1)
			    optTime = optTime.substring(0, optTime.lastIndexOf("."));
			/*
			String ssl = "select * from usra01 where a0101='" + optName + "'";
			try {
				res = dao.search(ssl);
				
				while (res.next()) {
					b0110 = res.getString("b0110");
					e0122 = res.getString("e0122");
					e01a1 = res.getString("e01a1");
					b0110 = AdminCode.getCodeName("UN", b0110 != null ? b0110
							: "");
					e0122 = AdminCode.getCodeName("UM", e0122 != null ? e0122
							: "");
					e01a1 = AdminCode.getCodeName("@K", e01a1 != null ? e01a1
							: "");

				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			if (b0110 != null && !b0110.equalsIgnoreCase("")) {
				b0110 = b0110 + "/";
			}
			if (e0122 != null && !e0122.equalsIgnoreCase("")) {
				e0122 = e0122 + "/";
			}
			if (e01a1 != null && !e01a1.equalsIgnoreCase("")) {
				e01a1 = e01a1 + "/";
			}*/
			content = optTime + "&nbsp;&nbsp;&nbsp;" + optName + " " + str; //+ b0110 + e0122 + e01a1
					
		}
		return content;
	}

	/**
	 * 判断是否需要发送邮件; 若需要查出邮件模板编号
	 * 
	 * @return
	 */
	public String getEmailTemplateId() throws GeneralException {
		String emailId = "";
		RowSet rs = null;
		String email = ""; // true 发送邮件 false 不发
		String templateId = ""; // 邮件模板
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			rs = dao.search("select str_value from constant where constant='PER_PARAMETERS'");
			if (rs.next()) {
				String str_value = rs.getString("str_value");
				if (str_value != null && str_value.trim().length() > 0) {
					Document doc = PubFunc.generateDom(str_value);
					String xpath = "//Per_Parameters";
					XPath xpath_ = XPath.newInstance(xpath);
					Element ele = (Element) xpath_.selectSingleNode(doc);
					Element child;
					if (ele != null) {
						child = ele.getChild("AdjustTask");
						if (child != null) {
							email = child.getAttributeValue("email");
							templateId = child.getAttributeValue("template");
							// if(templateId==null ||
							// templateId.trim().length()<=0 ||
							// templateId.equals("-1"))
							// throw GeneralExceptionHandler.Handle(new
							// Exception("目标卡任务调整需邮件通知模板没有设置！"));
						}
					}
				}
			}
			emailId = email + "&" + templateId;
			if (rs != null)
				rs.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return emailId;
	}

	// 取得发送邮件所需数据
	public LazyDynaBean getEmailFieldList(String templateId)
			throws GeneralException {
		LazyDynaBean bean = new LazyDynaBean();
		RowSet rs = null;
		RowSet rowSet = null;
		try {
			ContentDAO dao = new ContentDAO(this.conn);
			String sql = "select address,subject,content from email_name where id="
					+ templateId;
			rs = dao.search(sql);
			while (rs.next()) {
				String fieldsetid = "";
				String emailField = isNull(rs.getString("address"));
				if (emailField != null && emailField.trim().length() > 0) {
					emailField = emailField.substring(0,
							emailField.indexOf(":")).trim();

					String sqlStr = "select fieldsetid from fielditem where itemid='"
							+ emailField + "'";
					rowSet = dao.search(sqlStr);
					while (rowSet.next()) {
						fieldsetid = rowSet.getString("fieldsetid");
					}
					if (fieldsetid == null || fieldsetid.trim().length() <= 0)
						throw GeneralExceptionHandler
								.Handle(new GeneralException("模板邮件指标定义错误！"));

				}
				String subject = isNull(rs.getString("subject"));
				String content = isNull(rs.getString("content"));

				bean.set("emailField", emailField);
				bean.set("fieldsetid", fieldsetid);
				bean.set("subject", subject);
				bean.set("content", content);
				// bean.set("emailField", SafeCode.encode(str));
			}
			if (rs != null)
				rs.close();
			if (rowSet != null)
				rowSet.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return bean;
	}

	public String isNull(String str) {
		if (str == null || str.trim().length() <= 0
				|| " ".equalsIgnoreCase(str) || "".equalsIgnoreCase(str))
			return "";
		else
			return str;
	}

	public String getEmailValue(String emailField, String emailFieldSet,
			String a0100) throws SQLException {

		ContentDAO dao = new ContentDAO(this.conn);
		String emailValue = "";
		StringBuffer sql = new StringBuffer();
		if ("a01".equalsIgnoreCase(emailFieldSet)) {
			sql.append("select a." + emailField + " address from Usr"
					+ emailFieldSet + " a where a.a0100='" + a0100 + "'");
		} else {
			sql.append("select a." + emailField + " address from Usr"
					+ emailFieldSet + " a where a.a0100=" + a0100
					+ " and i9999=(select max(i9999) i9999 from Usr"
					+ emailFieldSet + " b where b.a0100='" + a0100 + "')");
		}
		RowSet rs = dao.search(sql.toString());
		if (rs.next())
			emailValue = rs.getString(1);

		if (rs != null)
			rs.close();
		return emailValue;
	}

	// 发邮件
	public void sendEmailObj(String p0400, String operator,
			ArrayList taskDescribeList) {
		try {
			String email = ""; // true 发送邮件 false 不发
			String templateId = ""; // 邮件模板
			String emailId = this.getEmailTemplateId();
			if (emailId != null && emailId.trim().length() > 0) {
				email = emailId.substring(0, emailId.indexOf("&")).trim();
				templateId = emailId.substring(emailId.indexOf("&") + 1,
						emailId.length()).trim();

				if (email != null && email.trim().length() > 0
						&& "true".equalsIgnoreCase(email)) {
					String subject = "目标卡任务调整情况";
					RecordVo avo = ConstantParamter
							.getRealConstantVo("SS_EMAIL");
					String emailField = avo.getString("str_value"); // 邮件指标
					String fieldsetid = "A01"; // 邮件指标的主集
					StringBuffer content = new StringBuffer("");
					String p0407 = ""; // 任务名称
					String objName = ""; // 考核对象名称
					for (int i = 0; i < taskDescribeList.size(); i++) {
						LazyDynaBean bean = (LazyDynaBean) taskDescribeList
								.get(i);
						String itemid = (String) bean.get("itemid");
						if ("p0407".equalsIgnoreCase(itemid))
							p0407 = (String) bean.get("value");
						else if ("a0101".equalsIgnoreCase(itemid))
							objName = (String) bean.get("value");

						if ((p0407 != null && p0407.trim().length() > 0)
								&& (objName != null && objName.trim().length() > 0))
							break;
					}
					if ((taskDescribeList == null || taskDescribeList.size() <= 0)
							&& (p0400 != null && p0400.trim().length() > 0)) {
						ContentDAO dao = new ContentDAO(this.conn);
						RowSet rs = dao
								.search("select a0101,p0407 from p04 where p0400 = '"
										+ p0400 + "' ");
						if (rs.next()) {
							objName = rs.getString("a0101");
							p0407 = rs.getString("p0407");
						}
					}
					String fromAddr = this.getFromAddr();

					// 设置了邮件模板
					if (templateId != null && templateId.trim().length() > 0
							&& !"-1".equals(templateId)) {
						LazyDynaBean abean = this.getEmailFieldList(templateId);
						emailField = (String) abean.get("emailField"); // 邮件指标
						fieldsetid = (String) abean.get("fieldsetid"); // 邮件指标的主集
						subject = (String) abean.get("subject"); // 模板标题
						String contentTemp = (String) abean.get("content"); // 邮件模板内容

						// EmailTemplateBo embo = new
						// EmailTemplateBo(this.getFrameconn());
						// RecordVo plan_vo = embo.getPlanVo(planid);
						// 得模板项目列表
						// ArrayList list =
						// embo.getTemplateFieldInfo(Integer.parseInt(templateId),
						// 2);
						String emailContent = contentTemp;
						// String emailContent =
						// embo.getFactContent(contentTemp, "Usr"+object_id,
						// list, this.userView);

						emailContent = emailContent.replaceAll("#考核计划名称#",
								this.plan_vo.getString("name"));
						emailContent = emailContent.replaceAll("#操作人名称#",
								this.userView.getUserName());
						emailContent = emailContent.replaceAll("#收件人名称#",
								objName);
						if ("new".equals(operator))
							emailContent = emailContent.replaceAll("#任务名称#",
									"新建了任务：" + p0407);
						else if ("edit".equals(operator))
							emailContent = emailContent.replaceAll("#任务名称#",
									"调整了任务：" + p0407);
						else if ("del".equals(operator))
							emailContent = emailContent.replaceAll("#任务名称#",
									"删除了任务：" + p0407);
						emailContent = emailContent.replaceAll("#系统日期#",
								PubFunc.getStringDate("yyyy-MM-dd HH:mm:ss"));
						content.append(emailContent);
					} else {
						content.append(objName + "：\n");
						content.append("     您好！\n");
						content.append("     " + this.plan_vo.getString("name")
								+ " 已经被 " + this.userView.getUserName()
								+ " 调整，请注意查阅！\n");
						content.append("     调整时间为："
								+ PubFunc.getStringDate("yyyy-MM-dd HH:mm:ss")
								+ "。 \n");
						content.append("     调整内容如下： \n");
						if ("new".equals(operator))
							content.append("     \"" + p0407 + "\" 任务被新建。");
						else if ("edit".equals(operator))
							content.append("     \"" + p0407 + "\" 任务被调整。");
						else if ("del".equals(operator))
							content.append("     \"" + p0407 + "\" 任务被删除。");
					}
					String toAddr = this.getEmailValue(emailField, fieldsetid,
							this.object_id);
					if (toAddr == null
							|| (toAddr != null && ("".equals(toAddr.trim()) || "无".equals(toAddr
									.trim()))))
						return;
					
//					EMailBo emailbo = new EMailBo(this.conn, true, "Usr");
//					emailbo.sendEmail(subject, content.toString(), "", fromAddr, toAddr);
					
					// 改由异步方式发送邮件 lium
					LazyDynaBean bean = new LazyDynaBean();
					bean.set("subject", subject);
					bean.set("toAddr", toAddr);
					bean.set("bodyText",content.toString());
			    	AsyncEmailBo async = new AsyncEmailBo(conn, userView);

			    	async.send(bean);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	
	/**
	 * 复制下级评分
	 * @param level
	 * @param object_id
	 * @param plan_id
	 */
	public  void copyLowerGrade(int level,String object_id,String plan_id)
	{
		try
		{
			ContentDAO dao = new ContentDAO(this.conn);
			IDGenerator idg = new IDGenerator(2, this.conn);
			ArrayList allMainBodyList=this.getLowerGradeList(dao, level, object_id,plan_id);
			if(allMainBodyList.size()==0)
				return;
			String mainBodyId=(String) allMainBodyList.get(allMainBodyList.size()-1);//取最近的考核主体
			this.copyLastMainbodyEvaluation(dao, plan_id, mainBodyId, object_id, this.userView.getA0100(), idg);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	
	/**
	 * 取得下级考核主体的信息列表
	 * @param dao
	 * @param body_id // 5:本人 0：上上级 1：直接上级 2：同级 -1：第三级领导, -2：第四级领导 ,3下级；4下下级
	 * @param objectId
	 * @param planId
	 * @return list
	 * @throws GeneralException 
	 */
		public ArrayList getLowerGradeList(ContentDAO dao,int level, String objectId,String planId) throws GeneralException {
			ArrayList list = new ArrayList();
			try {
				if (level == 5)
					return list;
				String level_str = "";
				switch (level) {
				case 1:
					level_str = "5,2";
					break;
				case 0:
					level_str = "5,1,2";
					break;
				case -1:
					level_str = "5,1,0,2";
					break;
				case -2:
					level_str = "5,1,0,-1,2";
					break;
				}

				if (level_str.length() == 0)
					return list;
				StringBuffer sql = new StringBuffer("");
				sql.append("select pm.*,pms.name from per_mainbody pm,per_mainbodyset pms where pm.body_id=pms.body_id ");
				sql.append(" and pm.plan_id=" + planId + " and pm.object_id='"
						+ objectId + "' and  ");
				if (Sql_switcher.searchDbServer() == Constant.ORACEL)
					sql.append("  pms.level_o");
				else
					sql.append("  pms.level ");
				sql.append(" in (" + level_str + ")");
				String cloumn = "level";
				if (Sql_switcher.searchDbServer() == Constant.ORACEL)
					cloumn = "level_o";
				sql.append(" order by " + cloumn + " desc ");
				RowSet frowset = dao.search(sql.toString());
				LazyDynaBean abean = null;
				while (frowset.next()) { 
					if (frowset.getString("status") == null|| !"2".equals(frowset.getString("status")))//status0:未打分1:正在编辑2:已提交3:不打分  筛选已提交的
						continue; 
					list.add(frowset.getString("mainbody_id"));
				}
				frowset.close();
			} catch (Exception e) {
				e.printStackTrace();
				throw GeneralExceptionHandler.Handle(e);
			}
			return list;
		}
	
	
	
	
	/**
	 * 将最近的下级主体对考核对象评分复制到当前操作人对考核对象的评分
	 * @param dao
	 * @param plan_id
	 * @param mainbody_id
	 * @param object_id
	 * @param userId
	 * @param idg
	 * @throws GeneralException
	 */
		public void copyLastMainbodyEvaluation(ContentDAO dao,String plan_id,String mainbody_id,String object_id,String userId,IDGenerator idg) throws GeneralException{
			String sql="delete from per_target_evaluation where plan_id='"+plan_id+"' and mainbody_id='"+userId+"' and object_id='"+object_id+"'";
			try {
				dao.delete(sql, new ArrayList());
				sql="select * from per_target_evaluation where plan_id='"+plan_id+"' and mainbody_id='"+mainbody_id+"' and object_id='"+object_id+"'";
				RowSet frowset=dao.search(sql);
				ResultSetMetaData rsmd=frowset.getMetaData();
				int nColumn=rsmd.getColumnCount();
				ArrayList insertList=new ArrayList();
				ArrayList contentList=new ArrayList();
				String columnValue="";
				String 	columnName="";
				String columnType="";
				String insertSql="insert into per_target_evaluation( ";
				String valueSql=" )values(";
				int n=0;
				while(frowset.next()){
					contentList=new ArrayList();
					for(int i=1;i<=nColumn;i++){
						columnName=rsmd.getColumnName(i);
						columnType=rsmd.getColumnTypeName(i);
						if("id".equalsIgnoreCase(columnName)){
							columnValue=idg.getId("per_target_evaluation.id");
						}else if("mainbody_id".equalsIgnoreCase(columnName)){
							columnValue=userId;
						}
						else{
							columnValue=frowset.getString(columnName);
						}
						if("numeric".equalsIgnoreCase(columnType)&&(columnValue==null|| "0E-8".equals(columnValue))){
							columnValue="0";
						}
						if(n==0){
					    	if(i!=nColumn){
						    	insertSql+=columnName+",";
						    	valueSql+="?,";
					    	}else{
					    		insertSql+=columnName;
						    	valueSql+="?)";
					    	}

					    }
		
							contentList.add(columnValue);

						
					}
					insertList.add(contentList);
					n++;
					
				}
				sql=insertSql+valueSql;
				dao.batchInsert(sql, insertList);
				
				//修改总分
				sql="update per_mainbody set status='1',score=(select score from per_mainbody where plan_id='"+plan_id+"' and mainbody_id='"+mainbody_id+"' and object_id='"+object_id+"') where plan_id='"+plan_id+"' and mainbody_id='"+userId+"' and object_id='"+object_id+"'";
				dao.update(sql);

			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				throw GeneralExceptionHandler.Handle(e);
			}
			
		} 
	
	
	
	
	/*
	 * 得到personList 用于目标卡导入 郭峰
	 */
	public ArrayList getObjectA0100(String object_id) {
		if (object_id == null)
			object_id = "";
		ArrayList list = new ArrayList();
		LazyDynaBean abean = new LazyDynaBean();
		abean.set("a0100", object_id);
		list.add(abean);
		return list;
	}
    /**
     * 推送待办
     * 
     */
    public void postPendingTask(String object_id, String type){
    	PendingTask pt = new PendingTask();
    	 LazyDynaBean bean = new LazyDynaBean();
    	 if("1".equals(type)){//推送
    		 String _title=this.plan_vo.getString("name")+"_(退回)";
             String _sql="";
             if("False".equalsIgnoreCase(NoApproveTargetCanScore)){
                 _sql="select pm.* from per_mainbody pm,per_object po where pm.object_id=po.object_id and po.plan_id='"+plan_id+"' and pm.plan_id='"+plan_id+"' and pm.mainbody_id='"+this.userView.getA0100()+"' and po.sp_flag='03'  and "+Sql_switcher.isnull("status", "0")+"<>2";
             }else{
                 _sql="select * from per_mainbody  where plan_id='"+plan_id+"' and "+Sql_switcher.isnull("status", "0")+"<>2 and mainbody_id='"+this.userView.getA0100()+"'";
             }   
             String href="";
             if ("2".equals(object_type))
                 href = "/performance/objectiveManage/myObjective/my_objective_list.do?b_init=init&returnflag=8&opt=1";
             bean.set("oper", "start");
             bean.set("title", _title);
             bean.set("url", href);
             bean.set("sql", _sql);
             LazyDynaBean _bean=PerformanceImplementBo.updatePendingTask(this.conn, this.userView,"Usr"+object_id,plan_id,bean,"1");
             if("add".equals(_bean.get("flag"))){
                 pt.insertPending("PER"+_bean.get("pending_id"),"P",_title,this.userView.getDbname()+this.userView.getA0100(),"Usr"+object_id,href,0,1,"打分退回",this.userView);   
             }   
             if("update".equals(_bean.get("selfflag"))){
                 pt.updatePending("P", "PER"+_bean.get("selfpending_id"), 1, "打分退回", this.userView);
             }
    	 }else{//消除待办
    		ContentDAO dao = new ContentDAO(this.conn);
			try {
				String sql = "update t_hr_pendingtask set Pending_status='1' where Receiver='" + "Usr"+object_id + "' and Ext_flag='PERPF_" + plan_id + "'";
				dao.update(sql);
			} catch (Exception e) {
				e.printStackTrace();
			}
    		 
    	 }
         
    }
	public HashMap<String, ArrayList>  getCardGradeMembersA0101Map() {
		if(cardGradeMembersA0101Map==null)
			cardGradeMembersA0101Map=new HashMap<String, ArrayList> ();
		return cardGradeMembersA0101Map;
	}
	
	/**
	 * 获取评价人加密后的id串，页面选人控件使用
	 * @param strP0400
	 * @return
	 * @author zhanghua
	 * @date 2017年10月24日
	 */
	public HashMap<String, ArrayList> getCardGradeMembersA0101Map(ArrayList<String> strP0400) {
		if(this.cardGradeMembersA0101Map==null ||this.cardGradeMembersA0101Map.size()==0){
			try{
				
				StringBuffer p0400=new StringBuffer();
				RowSet rs=null;
				for(String str:strP0400){
					p0400.append(str+",");
				}
				p0400.deleteCharAt(p0400.length()-1);
				ContentDAO dao = new ContentDAO(conn);
				String strSql="select p0400,NBASE,A0100 from per_grade_members where p0400 in ("+p0400+")";
				rs=dao.search(strSql);
				
				cardGradeMembersA0101Map=new HashMap<String, ArrayList>();
				ArrayList<String> dataList =null;
				while(rs.next()){
					if(cardGradeMembersA0101Map.containsKey(PubFunc.encrypt(rs.getString("p0400")))){
						dataList=cardGradeMembersA0101Map.get(PubFunc.encrypt(rs.getString("p0400")));
						dataList.add(PubFunc.encrypt(( rs.getString("nbase")+rs.getString("A0100") )));
					}else{
						dataList=new ArrayList<String>();
						dataList.add(PubFunc.encrypt(( rs.getString("nbase")+rs.getString("A0100") )));
						cardGradeMembersA0101Map.put(PubFunc.encrypt(rs.getString("p0400")), dataList);
					}
				}
				dataList=new ArrayList<String>();
				dataList.add(PubFunc.encrypt("Usr"+this.object_id));//选人控件获取考核对象使用，因为评价人不能指定为考核对象
				cardGradeMembersA0101Map.put("objectid", dataList);
				
			}catch(Exception e){
				e.printStackTrace();
			}
		}
		
		return cardGradeMembersA0101Map;
	}
	public void setCardGradeMembersA0101Map(
			HashMap<String, ArrayList> getCardGradeMembersA0101Map) {
		this.cardGradeMembersA0101Map = getCardGradeMembersA0101Map;
	}
    
	/**
	 * 获取当前用户做为目标卡评价人的计划id
	 * @param planid
	 * @return
	 * @author zhanghua
	 * @date 2017年11月1日
	 */
	public HashMap<String,String> getGradeMembersMap(){
		HashMap<String,String> map=new HashMap<String, String>();
		try{
			ContentDAO dao=new ContentDAO(this.conn);
			StringBuffer strSql=new StringBuffer();
			strSql.append(" SELECT pp.plan_id  FROM per_plan pp inner join per_object pe on pe.Plan_id=pp.Plan_id INNER JOIN P04 ON P04.plan_id = pe.plan_id AND pe.object_id=p04.A0100 ");
			strSql.append(" INNER JOIN per_grade_members p on p.P0400=p04.P0400 WHERE pp.method='2' and  ( pp.status='5' or pp.status='8') AND (pe.sp_flag='02' OR pe.sp_flag='07') ");
			strSql.append(" AND p.A0100='"+this.userView.getA0100()+"' and upper(p.NBASE)='USR' GROUP BY pp.plan_id ");
			RowSet rs=dao.search(strSql.toString());
			while(rs.next()){
				map.put(rs.getString("plan_id"), "");
			}
			
			
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}
	/**
	 * 获取当前用户被指定考核对象指定为评价人的目标卡p0400
	 * @param objectid
	 * @return
	 * @author zhanghua
	 * @date 2017年11月2日
	 */
	private HashMap<String,String> getRaterObjectCardMap(String objectid){
		HashMap<String,String> map=new HashMap<String, String>();
		try{
			String pobject="a0100";
			if (this.getPlan_vo().getInt("object_type") == 1
					|| this.getPlan_vo().getInt("object_type") == 3
					|| this.getPlan_vo().getInt("object_type") == 4)
				pobject="b0110";
			ContentDAO dao=new ContentDAO(this.conn);
			StringBuffer strSql=new StringBuffer();
			strSql.append("select t.p0400 from ( ");
			strSql.append(" select p04.p0400,p.A0100 as rater,p.NBASE from p04  ");
			strSql.append(" left join per_grade_members p on p04.p0400=p.P0400 ");
			strSql.append(" where p04."+pobject+"='"+objectid+"'  and p04.plan_id='"+this.plan_id+"'");
			strSql.append(" ) t where (t.rater='"+this.userView.getA0100()+"') or "+Sql_switcher.isnull("rater", "' '")+"=' ' ");
			RowSet rs=dao.search(strSql.toString());
			while(rs.next()){
				map.put(rs.getString("p0400"), "");
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return map;
	}

    public HashMap<String, String> getRaterObjectCardMap() {
        return raterObjectCardMap;
    }

    public void setRaterObjectCardMap(HashMap<String, String> raterObjectCardMap) {
        this.raterObjectCardMap = raterObjectCardMap;
    }

    private  HashMap<String,String> raterObjectCardMap= null;

    /**
     * 判断是否开启了目标卡可选择多评价人 (可不调用本类中带参数的构造方法，初始化的东西太多了,调用setplan_id 和setconn之后即可使用)
     * @return
     * @author zhanghua
     * @date 2017年10月19日
     */
    public boolean isOpenGrade_Members(){
    	boolean isOpen=false;
    	try{
    		String DefineItem="";
    		String isopen="false";
    		
    		if(this.planParam!=null&&this.planParam.size()>0){
    			DefineItem=(String) this.planParam.get("TargetDefineItem");
    			isopen=(String) this.planParam.get("TargetTraceEnabled");
    		}
    		else{
    			LoadXml parameter_content = null;
 	         	if(BatchGradeBo.getPlanLoadXmlMap().get(plan_id+"")==null)
				{
						
 	         		parameter_content = new LoadXml(this.conn,plan_id+"");
					BatchGradeBo.getPlanLoadXmlMap().put(plan_id+"",parameter_content);
				}
				else
				{
					parameter_content=(LoadXml)BatchGradeBo.getPlanLoadXmlMap().get(plan_id+"");
				}
    			Hashtable params = parameter_content.getDegreeWhole();
    			DefineItem=(String) params.get("TargetDefineItem");
    			isopen=(String) params.get("TargetTraceEnabled");
    		}
    		
    		if("true".equals(isopen.toLowerCase())&&StringUtils.isNotBlank(DefineItem)&&DefineItem.toLowerCase().indexOf("rater")>-1)
    			return true;
    		else
    			return false;
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    	return isOpen;
    }
    /**
     * 批量更新评价人
     * @param strP0400 p0400
     * @param raterIdMap 评价人列表 <nbase,[a0100]>
     * @author zhanghua
     * @date 2017年10月26日
     */
    public void UpdateGradeMembers(String strP0400,HashMap<String,ArrayList<String>> raterIdMap){
    	try{
    		ContentDAO dao=new ContentDAO(conn);
    		
    		//如果map是空的 那么删除此条p0400的所有评价人
    		if(raterIdMap.size()==0){
    			StringBuffer strSql=new StringBuffer();
				strSql.append("delete from per_grade_members where p0400=?");
				ArrayList datalist=new ArrayList();
				datalist.add(strP0400);
				dao.update(strSql.toString(),datalist);
				return;
    		}
    		
    		
    		Iterator iter = raterIdMap.entrySet().iterator();
    		
			while(iter.hasNext()){
				Map.Entry entry = (Map.Entry) iter.next();
				String key = (String)entry.getKey();
				ArrayList<String> list = (ArrayList<String>)entry.getValue();
				StringBuffer strSql=new StringBuffer();
				strSql.append("delete from per_grade_members where upper(NBASE)='"+key.toUpperCase()+"' and p0400=? and a0100 not in (");
				for(int i=0;i<list.size();i++){
					strSql.append("?,");
				}
				strSql.deleteCharAt(strSql.length()-1);
				strSql.append(")");
				ArrayList datalist=new ArrayList();
				datalist.add(strP0400);
				datalist.addAll(list);
				dao.update(strSql.toString(),datalist);
				
				strSql.setLength(0);
				
				
				strSql.append(" insert into per_grade_members (P0400,NBASE,A0100,A0101,Create_user,Create_date) ");
				strSql.append(" select ?,?,n.a0100,n.a0101,'"+this.userView.getUserName()+"',"+Sql_switcher.sqlNow()+" from "+key+"A01 n ");
				strSql.append(" where n.a0100 in (");
				
				for(int i=0;i<list.size();i++){
					strSql.append("?,");
				}
				strSql.deleteCharAt(strSql.length()-1);
				strSql.append(")");
				strSql.append(" and not exists (select 1 from per_grade_members s where s.p0400=? and s.a0100=n.a0100 and upper(s.NBASE)='"+key.toUpperCase()+"')");
				datalist=new ArrayList();
				datalist.add(strP0400);
				datalist.add(key);
				datalist.addAll(list);
				datalist.add(strP0400);
				dao.update(strSql.toString(),datalist);
			}
			
    		
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    }
    /**
     * 获取考核对象的所有参与审批的考核主体
     * @param object_id
     * @return
     */
    private HashMap<String,String> getMainbodyidByTargetMakeSeries(String object_id){
    	HashMap<String,String> map =new HashMap<String, String>();
    	try{
    		ContentDAO dao=new ContentDAO(conn);
    		StringBuffer strSql=new StringBuffer();
    		String targetMakeSeries=(String) this.planParam.get("targetMakeSeries");
    		String level_str = "";
    		String temp = Sql_switcher.searchDbServer() == Constant.ORACEL ? " pms.level_o" : " pms.level ";
    		
    		String GradeByBodySeq=(String)this.planParam.get("GradeByBodySeq"); //按考核主体顺序号控制评分流程(True, False默认为False)	
    		if("True".equalsIgnoreCase(GradeByBodySeq)){
    			strSql.append("select pm.mainbody_id,pm.object_id," + temp);
				strSql.append(" from per_mainbody pm LEFT JOIN per_plan_body ppb ON pm.plan_id = ppb.plan_id AND pm.body_id = ppb.body_id,");
				strSql.append(" per_mainbodyset pms where pm.body_id=pms.body_id ");
				strSql.append(" and pm.plan_id=" + plan_id + " and nullif(pm.seq,0) is not null and pm.object_id=? ");
    		}else{
	    		int property=0;
	    		if (targetMakeSeries != null && targetMakeSeries.trim().length() > 0) {
	    			property = Integer.parseInt(targetMakeSeries);
	    		}
	    		switch (property) { // 不是本人，不在审批流程中的主体
		    		case 1: level_str = "1"; break;
		    		case 2: level_str = "1,0"; break;
		    		case 3: level_str = "1,0,-1"; break;
		    		case 4: level_str = "1,0,-1,-2"; break;
		    		default: level_str = "1,0,-1,-2";
	    		}
	    		
	    		strSql.append("select pm.mainbody_id,pm.object_id," + temp);
				strSql.append(" from per_mainbody pm LEFT JOIN per_plan_body ppb ON pm.plan_id = ppb.plan_id AND pm.body_id = ppb.body_id,");
				strSql.append(" per_mainbodyset pms where pm.body_id=pms.body_id ");
				//strSql.append(" AND "+Sql_switcher.isnull("ppb.opt", "0")+" <> 1 and ("+Sql_switcher.isnull("ppb.isgrade", "0")+" <>'1') ");
				strSql.append(" and pm.plan_id=" + plan_id + " and " + temp + " in (" + level_str + ") and pm.object_id=? ");
    		}
			ArrayList list=new ArrayList();
			list.add(object_id);
    		
//			switch(Sql_switcher.searchDbServer())
//			{
//			  case Constant.MSSQL:
//			  {
//				strSql.append(" and (" + Sql_switcher.isnull("pm.STATUS", "0") + "=0 or pm.status=0 or pm.status='1') order by pms.level desc");
//			  	break;
//			  }
//			  case Constant.DB2:
//			  {
//				strSql.append(" and (" + Sql_switcher.isnull("pm.STATUS", "0") + "=0 or pm.status=0 or pm.status='1') order by pms.level desc");
//			  	break;
//			  }
//			  case Constant.ORACEL:
//			  {
//				strSql.append(" and (" + Sql_switcher.isnull("pm.STATUS", "0") + "=0 or pm.status=0 or pm.status='1') order by pms.level_o desc");
//			  	break;
//			  }
//			}
			
			RowSet rs=dao.search(strSql.toString(),list);
			while(rs.next()){
				map.put(rs.getString("mainbody_id"), "");
			}
    		
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    	return map;
    }
    /**
     * 任务启动打分，或者目标卡批准时 清除评价人代办任务 
     * @param plan_id
     * @param type 0启动 1批准
     * @author zhanghua
     * @date 2017年11月8日
     */
    public void cleanGradePendingTask(String plan_id,String type,String sender){
    	try{
    		ContentDAO dao=new ContentDAO(conn);
    		String strSql="select * from t_hr_pendingtask where pending_type='33' and upper(ext_flag) like 'PERPJ_"+plan_id+"_%' and pending_status<>'1'";
    		if(StringUtils.isNotBlank(sender)){
    			strSql+=" and upper(sender)='"+sender.toUpperCase()+"'";
    		}
    		RowSet rs=dao.search(strSql);
    		String pendingType="";
    		if("0".equals(type))
    			pendingType="计划已启动,停止评价";
    		else if("1".equals(type))
    			pendingType="计划已批准,停止评价";
			while(rs.next()){					
				LazyDynaBean be = new LazyDynaBean();
				LazyDynaBean temp_bean=PerformanceImplementBo.updatePendingTask(this.conn, this.userView,"Usr"+this.userView.getA0100(),rs.getString("pending_id"),be,"5");
				PendingTask pt = new PendingTask();
				if("update".equals(temp_bean.get("selfflag"))){
					pt.updatePending("P", "PER"+temp_bean.get("selfpending_id"), 1, pendingType, this.userView);
				}
			}
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    }
    
	public int getObjTableColumnNum() {
		return objTableColumnNum;
	}

	public void setObjTableColumnNum(int objTableColumnNum) {
		this.objTableColumnNum = objTableColumnNum;
	}

	public String getFromModel() {
		return fromModel;
	}

	public void setFromModel(String fromModel) {
		this.fromModel = fromModel;
	}

	public UserView getUserView() {
		return userView;
	}

	public void setUserView(UserView userView) {
		this.userView = userView;
	}

	public String getModel() {
		return model;
	}

	public void setModel(String model) {
		this.model = model;
	}

	public Hashtable getPublicParam() {
		return this.publicParam;
	}

	public String getIsShowHistoryTask() {
		return isShowHistoryTask;
	}

	public void setIsShowHistoryTask(String isShowHistoryTask) {
		this.isShowHistoryTask = isShowHistoryTask;
	}

	public String getOptCardObject() {
		return optCardObject;
	}

	public void setOptCardObject(String optCardObject) {
		this.optCardObject = optCardObject;
	}

	public ArrayList getSelfP04List() {
		return this.p04List;
	}

	public HashMap getPerPointMap() {
		return perPointMap;
	}

	public HashMap getSelfPerPointScoreMap() {
		return perPointMap;
	}

	public void setPerPointMap(HashMap perPointMap) {
		this.perPointMap = perPointMap;
	}

	public void setPerPointScoreMap(HashMap perPointScoreMap) {
		this.perPointScoreMap = perPointScoreMap;
	}

	public String getAgent_id() {
		return agent_id;
	}

	public void setAgent_id(String agent_id) {
		this.agent_id = agent_id;
	}

	public String getAgent_name() {
		return agent_name;
	}

	public void setAgent_name(String agent_name) {
		this.agent_name = agent_name;
	}

	public HashMap getNumberMap() {
		return numberMap;
	}

	public void setNumberMap(HashMap numberMap) {
		this.numberMap = numberMap;
	}

	public void setAdjustPoint(boolean isAdjustPoint) {
		this.isAdjustPoint = isAdjustPoint;
	}

	public String getRealSpFlag() {
		return this.realSpFlag;
	}

	public boolean getHasAddMinusItem() {
		return this.hasAddMinusItem;
	}

	public void setTemplateItemList(ArrayList templateItemList) {
		this.templateItemList = templateItemList;
	}

	public String getDeptDutySubSet() {
		return DeptDutySubSet;
	}

	public void setDeptDutySubSet(String deptDutySubSet) {
		DeptDutySubSet = deptDutySubSet;
	}

	public String getDeptDutyTargetItem() {
		return DeptDutyTargetItem;
	}

	public void setDeptDutyTargetItem(String deptDutyTargetItem) {
		DeptDutyTargetItem = deptDutyTargetItem;
	}

	public String getDeptDutyDataItem() {
		return DeptDutyDataItem;
	}

	public void setDeptDutyDataItem(String deptDutyDataItem) {
		DeptDutyDataItem = deptDutyDataItem;
	}

	public String getDeptDutyTextValue() {
		return DeptDutyTextValue;
	}

	public void setDeptDutyTextValue(String deptDutyTextValue) {
		DeptDutyTextValue = deptDutyTextValue;
	}

	public String getEditCardSp() {
		return editCardSp;
	}

	public void setEditCardSp(String editCardSp) {
		this.editCardSp = editCardSp;
	}

	public String getObject_id() {
		return object_id;
	}

	public void setObject_id(String object_id) {
		this.object_id = object_id;
	}
	
	public HashMap getP04Map() {
		return p04Map;
	}
	public void setP04Map(HashMap p04Map) {
		this.p04Map = p04Map;
	}
	public boolean isDigit(String str){
		boolean flag = true;
		try{
			int n = Integer.parseInt(str);
		}catch(Exception e){
			flag = false;
		}
		return flag;
	}
	public int getIsShowOpinion() {
		return isShowOpinion;
	}
	public void setIsShowOpinion(int isShowOpinion) {
		this.isShowOpinion = isShowOpinion;
	}
	/**
	 * 判断是否没有本人或者团队负责人主体类别，即本人不参与评分
	 * 
	 * true 本人参与评分； false不认不参与评分
	 * @param plan_id
	 * @throws GeneralException 
	 */
	public boolean isSelfScore(String plan_id) throws GeneralException {
		ContentDAO dao = new ContentDAO(conn);
		RowSet rs = null;
		try {
			String sql = "select 0 from per_plan_body where plan_id=? and body_id in (select body_id from per_mainbodyset where ";
			if (Sql_switcher.searchDbServer() == Constant.ORACEL)
				sql+="level_o=5)";
			else
				sql+="level=5)";
			List values = new ArrayList();
			values.add(plan_id);
			rs = dao.search(sql,values);
			return rs.next();
		}catch (Exception e) {
			throw GeneralExceptionHandler.Handle(e);
		}finally {
			PubFunc.closeDbObj(rs);
		}
		
	}
	
	public String getFactContent(String content,String prea0100,ArrayList fieldList,UserView uv,RecordVo plan_vo,String objectName,String appealName)
	{
		String fact_content=content;
		try
		{
			fact_content=fact_content.replaceAll("#发件人名称#", this.userView.getUserName());			
			fact_content=fact_content.replaceAll("#审批人名称#", appealName);
			fact_content=fact_content.replaceAll("#目标对象名称#", objectName);
			fact_content=fact_content.replaceAll("#收件人名称#",objectName); 					
			fact_content=fact_content.replaceAll("#考核计划名称#",plan_vo.getString("name"));
			fact_content=fact_content.replaceAll("#系统日期#",PubFunc.getStringDate("yyyy-MM-dd HH:mm:ss"));
            fact_content=fact_content.replaceAll("\\$sys:考核计划名称\\$",plan_vo.getString("name"));//替换考核计划名称
			EmailTemplateBo bo = new EmailTemplateBo(this.conn);
			String pre=prea0100.substring(0,3);
			String a0100=prea0100.substring(3);
			StringBuffer buf = new StringBuffer();
			StringBuffer table_name=new StringBuffer();
			HashSet name_set = new HashSet();
			StringBuffer where_sql=new StringBuffer();
			StringBuffer where_sql2= new StringBuffer();
			ContentDAO dao = new ContentDAO(this.conn);
			RowSet rs = null;
			for(int i=0;i<fieldList.size();i++)
			{
				LazyDynaBean bean = (LazyDynaBean)fieldList.get(i);
				String id=(String)bean.get("id");
				String fieldtitle=(String)bean.get("fieldtitle");
				String fieldtype=((String)bean.get("fieldtype")).trim();
				String fieldcontent=(String)bean.get("fieldcontent");
				String fieldid=(String)bean.get("fieldid");
				String dateformat=(String)bean.get("dateformat");
				String fieldlen=(String)bean.get("fieldlen");
				String ndec=(String)bean.get("ndec");
				String codeset=(String)(bean.get("codeset")==null?"":bean.get("codeset"));
				String nflag=(String)bean.get("nflag");
				String replace="";//要被替换的内容
				String factcontent="";
				String setid="";
				if("0".equals(nflag))
				{
					replace="\\$"+fieldid+":"+fieldtitle.trim()+"\\$";
				}
				if("1".equals(nflag))
				{
					replace="\\#"+fieldid+":"+fieldtitle.trim()+"\\#";
				}
				/**指标和公式项目处理不同*/
				if("0".equals(nflag))//指标
				{
					String fieldsetid="";
					if("A0101".equalsIgnoreCase(fieldcontent.trim())|| "B0110".equalsIgnoreCase(fieldcontent.trim())|| "E0122".equalsIgnoreCase(fieldcontent.trim())|| "e01a1".equalsIgnoreCase(fieldcontent.trim()))
						fieldsetid="a01";
					else
			    		fieldsetid=bo.getFieldSetId(fieldcontent.trim());
					if(fieldsetid==null||fieldsetid.length()<=0)
						continue;
					buf.append("select ");
					buf.append(fieldcontent);
					buf.append(" from ");
					buf.append(pre+fieldsetid);
					buf.append(" where ");
					/*if(isConf(fieldsetid))//是否用判断年月标识
					{
						buf.append("");
					}
					else
					{*/
						buf.append(pre+fieldsetid+".a0100='");
						buf.append(a0100+"'");
						if("a01".equalsIgnoreCase(fieldsetid))
						{
							
						}		
						else
						{
							buf.append(" and ");
						    buf.append(pre+fieldsetid+".i9999=(select max(i9999) from ");
						    buf.append(pre+fieldsetid);
						    buf.append(" where ");
						    buf.append(pre+fieldsetid+".a0100='");
						    buf.append(a0100+"')");
						}						
						rs=dao.search(buf.toString());
						while(rs.next())
						{			
							//  JinChunhai 2011.05.19  orcle库遇到日期型的字段后台会报错
							if(codeset!=null&&!"0".equalsIgnoreCase(codeset)&& "A".equalsIgnoreCase(fieldtype))  // 代码型
							{
								factcontent=rs.getString(fieldcontent.trim());
								
							}else if("N".equalsIgnoreCase(fieldtype.trim()))  // 数值型按格式显示
							{
								factcontent=rs.getString(fieldcontent.trim());
								
							}else if("D".equalsIgnoreCase(fieldtype.trim()))  // 日期型按格式显示
							{
								java.sql.Date dd=rs.getDate(fieldcontent.trim());
								if (dd != null) {
									SimpleDateFormat format=new SimpleDateFormat("yyyy.MM.dd HH:mm:ss");
									factcontent=format.format(dd);
								} else {
									factcontent = "";
								}
								
							}else 
							{
								factcontent=rs.getString(fieldcontent.trim());
							}
							
//							factcontent=rs.getString(fieldcontent.trim());
						}
						
						if(codeset!=null&&!"0".equalsIgnoreCase(codeset)&& "A".equalsIgnoreCase(fieldtype))//代码型
						{
							factcontent=AdminCode.getCodeName(codeset,factcontent);
						}
						
						/**日期型按格式显示*/
						if("D".equalsIgnoreCase(fieldtype.trim())&&!(dateformat==null|| "".equals(dateformat)))
							factcontent=bo.getYMDFormat(Integer.parseInt(dateformat),factcontent);
						/**数值型按格式显示*/
						if("N".equalsIgnoreCase(fieldtype.trim()))
							factcontent=bo.getNumberFormat(Integer.parseInt(fieldlen),Integer.parseInt(ndec),factcontent);
						if(factcontent==null||factcontent.trim().length()==0)
			    		{
			    			if("N".equalsIgnoreCase(fieldtype.trim()))
			    				factcontent="0.0";
			    			else
			    				factcontent=" ";
			    		}
						fact_content=fact_content.replaceAll(replace,factcontent);
					    buf.setLength(0);
						table_name.setLength(0);
						where_sql.setLength(0);
						where_sql2.setLength(0);
					
				}
				if("1".equals(nflag))//公式
				{
					String zh_sql=bo.getSql(fieldcontent,fieldtype,uv);
					if(zh_sql==null||zh_sql.length()<=0)
						continue;
					if("D".equalsIgnoreCase(fieldtype.trim()))//日期型是否直接查
					{
					    setid=bo.getFieldSetId(zh_sql.trim());
						buf.append("select ");
						buf.append(zh_sql);
						buf.append(" from ");
						if(setid!=null&&!"".equals(setid))
							buf.append(pre+setid);
						else
							buf.append(" usra01 ");
						buf.append(" where a0100='");
						buf.append(a0100+"'");
					}
					else
					{
			    		String[] temp_arr=zh_sql.split(",");
				    	if(temp_arr.length>1)
			    		{
				    		buf.append("select ");
				    		buf.append(zh_sql);
				    		buf.append(" from ");
			    			for(int j=0;j<temp_arr.length-1;j++)
			    			{
					    		int index=temp_arr[j].lastIndexOf("(")+1;
					    		String itemid=temp_arr[j].substring(index,temp_arr[j].length());
					    		String fieldsetid ="";
					    		if("B0110".equalsIgnoreCase(itemid)|| "E0122".equalsIgnoreCase(itemid)|| "e01a1".equalsIgnoreCase(itemid))
					    			fieldsetid="a01";
					    		else
					    	    	fieldsetid=bo.getFieldSetId(itemid);//item.getFieldsetid();
					    		String tableName=pre+fieldsetid;
					    		name_set.add(tableName);
					    		if(j!=0)
						    		where_sql2.append(" and ");
					     		where_sql2.append(tableName+".a0100='");
					      		where_sql2.append(a0100+"'");
							//
					    		if("a01".equalsIgnoreCase(fieldsetid))
					    		{
					    		}
					    		else
					    		{
					    			if(j!=0)
					    				where_sql.append(" and ");
				    	    		where_sql.append(tableName);
					        		where_sql.append(".i9999=(");
				         			where_sql.append("select max(i9999) from ");
					        		where_sql.append(tableName+" "+tableName);
					        		where_sql.append(" where ");
					        		where_sql.append(tableName+".a0100='");
					        		where_sql.append(a0100+"') ");
					    		}
					    	}
				    		buf.append(name_set.toString().substring(1,name_set.toString().length()-1));
				    		buf.append(" where ");
				    		buf.append(where_sql);
					    	if(where_sql.length()>0)
					    	      buf.append(" and ");
			    	    	buf.append(where_sql2);
			    		}
			    		else
			    		{
				    		buf.append(zh_sql);
				    	} 	
			    	}					
					rs=dao.search(buf.toString());
		    		while(rs.next())
		    		{
		    			if("D".equalsIgnoreCase(fieldtype))
		    			{
		    			/*
		    				if(setid==null || setid.trim().length()<=0 || setid.equals(""))
		    				{
		    	    			if(rs.getString(1)!=null)
		    	    			{
		    			             factcontent=rs.getString(1);
		    			    	}else
		    			    	{
		    			    		factcontent="";
		    		    		}
		    				}else */
		    				{
		    					if(rs.getDate(1)!=null)
		    					{
		    						java.sql.Date dd=rs.getDate(1);
			    			        SimpleDateFormat format=new SimpleDateFormat("yyyy.MM.dd HH:mm:ss");
			    			        factcontent=format.format(dd);
		    					}
		    					else
		    					{
		    						factcontent="";
		    					}
		    				}
		    			}
		    			else
	    	    			factcontent=rs.getString(1);
		    		}
		    		
		    		/**日期型按格式显示*/
					if("D".equalsIgnoreCase(fieldtype.trim())&&!(dateformat==null|| "".equals(dateformat)))
						factcontent=bo.getYMDFormat(Integer.parseInt(dateformat),factcontent);
					/**数值型按格式显示*/
					if("N".equalsIgnoreCase(fieldtype.trim()))
						factcontent=bo.getNumberFormat(Integer.parseInt(fieldlen),Integer.parseInt(ndec),factcontent);
					if(factcontent==null||factcontent.trim().length()==0)
		    		{
		    			if("N".equalsIgnoreCase(fieldtype.trim()))
		    				factcontent="0.0";
		    			else
		    				factcontent=" ";
		    		}
				    fact_content=fact_content.replaceAll(replace,factcontent);
			    	buf.setLength(0);
			    	table_name.setLength(0);
			    	name_set.clear();
		    		where_sql.setLength(0);
		    		where_sql2.setLength(0);
				}
			
			}
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return fact_content;
	}
}
