package com.hjsj.hrms.businessobject.sys.job;

import com.google.gson.Gson;
import com.hjsj.hrms.businessobject.sys.ConstantXml;
import com.hjsj.hrms.module.system.distributedreporting.businessobject.*;
import com.hjsj.hrms.module.system.distributedreporting.generatedata.GenerateDataBo;
import com.hjsj.hrms.module.system.distributedreporting.generatedata.generatedatabean.*;
import com.hjsj.hrms.utils.PubFunc;
import com.hrms.frame.dao.ContentDAO;
import com.hrms.frame.dao.RecordVo;
import com.hrms.frame.dao.utility.DateUtils;
import com.hrms.frame.utility.AdminDb;
import com.hrms.hjsj.sys.ConstantParamter;
import com.hrms.struts.exception.GeneralException;
import com.hrms.struts.exception.GeneralExceptionHandler;
import com.hrms.struts.valueobject.UserView;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.URL;
import java.net.URLConnection;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/**
 * Title:KqSyncJob
 * Description:后台作业定时上报数据。生成数据后，按照上级设定的上报方式，完成数据包的传输。
 * Company:hjsj
 * create time:2019年7月26日13:16:50
 * @author duxl
 * @version 1.0
 */
public class AutoGenerateDRDataJob implements Job {
    @Override
    public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {
        Gson gson = new Gson();
        Connection conn = null;
        GenerateDataBo gdataBo = null;
        String startTime = "";
        String dataStartTime = "";
        String orgType = "";
        List sendinfoList = new ArrayList();
        String uuid = UUID.randomUUID().toString();
        List<String> locorgCodeList = new ArrayList();
        try {
            conn = AdminDb.getConnection();
            UserView userView = new UserView("su", conn);
            userView.canLogin(false);
            gdataBo = new GenerateDataBo(userView, conn);
            ConstantXml constantXml = new ConstantXml(conn, "FBTB_FILEPATH");
            RecordVo paramvo = ConstantParamter.getRealConstantVo(DrConstant.BS_ASYN_PARAM_C);
            String siteJson = paramvo.getString("str_value");
            SiteBean siteBean = (SiteBean) gson.fromJson(siteJson, SiteBean.class);
            String reportPhoto = siteBean.getReport_photo();//是否上班照片，1为是
            String importType = siteBean.getImport_type();//上报方式：0 手工上报，1 中间库，2 FTP，3 webservices
            String locorgCode = siteBean.getLocorgcode();//本单位编码
            if(!locorgCode.contains("`")) {//不存在则默认加上分隔符
                locorgCode = "1`"+locorgCode;
            }
            orgType = locorgCode.split("`")[0];
            String orgIds = locorgCode.split("`")[1];  // 1为单机构；2为多机构
            String[] orgIdArr = orgIds.split(",");
            locorgCodeList = Arrays.asList(orgIdArr);
            SuperorgBean superorg = siteBean.getSuperorg();
            String unitcode = superorg.getUnitcode();//上级单位编码
            String schemeType = siteBean.getPkgtype();//1为全量；2为增量
            SendParamBean sendparam = siteBean.getSendparam();
            RecordVo planvo = ConstantParamter.getRealConstantVo(DrConstant.BS_ASYN_PLAN_C);
            String menuJson = planvo.getString("str_value");
            MenusBean menusBean = (MenusBean) gson.fromJson(menuJson, MenusBean.class);
            String psnStatus = menusBean.getPsn_status();
            String nbases = siteBean.getNbase(); //获取上报人员库
            String[] nbaseArr = nbases.split(",");
            Date date = new Date();
            DrLogger drLogger  = new DrLogger(locorgCodeList.get(0),0,date);
            String endTime = PubFunc.FormatDate(date, "yyyyMMddHHmmssSSS");//数据上报截止时间
            ArrayList <Map<String, String>> list = gdataBo.getTableList();//下级对应上的表（上级下发的同步子集名称）
            if("1".equalsIgnoreCase(schemeType)){
                gdataBo.deleteJZTable(list,drLogger);
            }else{
                if(sendparam == null){
                    schemeType = "1";
                    gdataBo.deleteJZTable(list,drLogger);
                }else{
                    dataStartTime = sendparam.getIncdatatime();//增量起始时间
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                    startTime = PubFunc.FormatDate(dateFormat.parse(dataStartTime), "yyyyMMddHHmmssSSS");
                }
            }
            gdataBo.createOrgJZTable(drLogger);//创建组织机构基准表
            gdataBo.insertOrgToJZTable(orgType,locorgCodeList, unitcode,drLogger,dataStartTime,schemeType);//插入组织机构数据到基准表
            ArrayList <String> mappingList = gdataBo.getMappingList(drLogger);
            if(!mappingList.contains("B01")){
                gdataBo.createViewOrg("B01","b0110");
                drLogger.write("分布同步：创建V_ASYN_B01视图成功！");
            }
            if(!mappingList.contains("K01")){
                gdataBo.createViewOrg("K01","e01a1");
                drLogger.write("分布同步：创建V_ASYN_K01视图成功！");
            }
            for (Map<String, String> tableMap : list) {
                String tableSet1 = tableMap.get("set1");//上级需要上传的子集
                String tableSet2 = tableMap.get("set2");//下级对应的子集或视图
                String firstTable = tableSet2.substring(0, 1).toUpperCase();//A B K V
                List<Map<String, Object>> fieldList = gdataBo.getStandardField(tableSet1,drLogger);//获取代码标准的对应字段
                String alertColunm = gdataBo.createStandardTable(fieldList, tableSet1,drLogger);//创建或更新基准表
                gdataBo.createView(tableSet1,drLogger);//创建视图
                String columnsSql = gdataBo.getColumnsSql(tableSet1, drLogger);//获取需要插入的字段
                if ("A".equalsIgnoreCase(firstTable)) { //人员
                    for (int i = 0; i < nbaseArr.length; i++) {
                        String nbase = nbaseArr[i];
                        gdataBo.addGuidKeyFieldAndInsert(tableSet2, nbase,drLogger);//增加GUIDKEY字段，并且插入
                        gdataBo.updateAlertColunm(nbase,tableSet1,tableSet2,alertColunm,drLogger);//更新新增的字段到基准表
                        gdataBo.insertDataToJZTable(nbase, columnsSql, tableSet1,tableSet2, locorgCodeList,drLogger);//按照所选单位插入数据到基准表
                        gdataBo.updateDataToJZTable(nbase, columnsSql, tableSet1,tableSet2,drLogger);//比较modtime更新数据到基准表
                    }
                    if("2".equalsIgnoreCase(schemeType)){//增量时判断删除数据
                        gdataBo.deleteDataToJZTable(nbaseArr,tableSet1,tableSet2,drLogger,dataStartTime);//比较guidkey是否存在，不存在的为删除内容
                    }
                }
                if ("B".equalsIgnoreCase(firstTable) || "K".equalsIgnoreCase(firstTable)) { //单位岗位
                    if(!tableSet1.contains("01")){
                        gdataBo.addGuidKeyFieldAndInsert(tableSet2, "",drLogger);//增加GUIDKEY字段，并且插入
                        gdataBo.insertSubsetBKDataToJZTable(columnsSql, tableSet1,tableSet2, locorgCodeList,orgType,drLogger);//新增、更新BK子集数据
                    }else{
                        gdataBo.insertBKDataToJZTable(columnsSql, tableSet1,tableSet2, locorgCodeList,orgType,drLogger);//新增、更新BK主集数据
                    }
                    if("2".equalsIgnoreCase(schemeType)) {//增量时判断删除数据
                        gdataBo.deleteBKVDataToJZTable(tableSet1,tableSet2,drLogger,dataStartTime);
                    }
                    gdataBo.transBKJZTableCode(tableSet1, unitcode,orgType , locorgCodeList, drLogger);//按上级代码转换[b0110、e01a1]
                }
                if("V".equalsIgnoreCase(firstTable)){ //视图人员子集
                    gdataBo.asynViewDataTOJZTable(columnsSql, tableSet1,tableSet2, locorgCodeList,drLogger);
                    if("2".equalsIgnoreCase(schemeType)) {//增量时判断删除数据
                        gdataBo.deleteBKVDataToJZTable(tableSet1,tableSet2,drLogger,dataStartTime);
                    }
                }
                List<Map<String, String>> codeSetList = gdataBo.getCodeSetList(tableSet1,drLogger);//获取所有需要转换的代码项
                gdataBo.transCodeItem(codeSetList, tableSet1,drLogger);//根据对应转换代码
                gdataBo.transOrganizationCode(tableSet1, unitcode,locorgCodeList,orgType,drLogger);//人员岗位对应
            }
            if(StringUtils.isNotEmpty(psnStatus)){
                gdataBo.filterPsnStatusData(list,drLogger,uuid,psnStatus);//过滤人员状态指标为空的数据
            }
            gdataBo.filterMustbeAndUniqueData(menusBean,list,drLogger,uuid);//过滤必填和唯一数据
            gdataBo.filterValidateRules(list,drLogger,uuid);//过滤校验规则数据
            if("1".equalsIgnoreCase(reportPhoto)){
                mappingList.add("PHOTO");
            }
            if(!mappingList.contains("B01")){
                mappingList.add("B01");
            }
            if(!mappingList.contains("K01")){
                mappingList.add("K01");
            }
            if("0".equalsIgnoreCase(importType)){//手工上报
                // todo 手工上报支不支持自动待定
            }else if("1".equalsIgnoreCase(importType)){//中间库
                // todo 中间库方式待定
            }else if("2".equalsIgnoreCase(importType)){//FTP
                FtpBean ftpBean = siteBean.getFtp();
                String ip = ftpBean.getIp();
                String port = ftpBean.getPort();
                String username = ftpBean.getUsername();
                String pwd = ftpBean.getPwd();
                String data_path = ftpBean.getData_path();
                HashMap<String,Object> map = new HashMap();
                map.put("locorgcode",locorgCodeList);
                map.put("dataStartTime",dataStartTime);
                map.put("logid",uuid.toUpperCase());
                map.put("endTime",endTime);
                map.put("startTime",startTime);
                createDataPackage(mappingList,schemeType,superorg,constantXml,map,date,importType);
                gdataBo.deleteViewTable(list);
                String zipName = "DT" + unitcode + "_" + endTime + ".zip";
                String pkgPath = "asyn" + File.separator + "asynreport" + File.separator + "zip" ;
                sendinfoList.add(gdataBo.getMaxId("t_sys_asyn_sendinfo"));
                sendinfoList.add(uuid);
                sendinfoList.add(locorgCodeList.get(0));
                sendinfoList.add(Integer.parseInt(schemeType));
                sendinfoList.add(Integer.parseInt(importType));
                sendinfoList.add(DateUtils.getTimestamp(date));
                sendinfoList.add("包生成成功");
                sendinfoList.add(pkgPath + File.separator + zipName);
                gdataBo.updateSendinfo("insert into t_sys_asyn_sendinfo (ID,GUIDKEY,UNITCODE,DataType,sendType,SENDTIME,STATUS,pkgpath) values(?,?,?,?,?,?,?,?) ", sendinfoList);
                FtpUtilBo ftpUtilBo = new FtpUtilBo(ip,Integer.parseInt(port),username,pwd,data_path);
                pkgPath = constantXml.getNodeAttributeValue("/filepath", "rootpath")+ File.separator + pkgPath;
                boolean flag = ftpUtilBo.uploadFtp(zipName,pkgPath);
                if(flag){
                    saveIncdatatime(siteJson,DateUtils.format(date,"yyyy-MM-dd HH:mm"),conn);
                    gdataBo.updateSendinfo("update t_sys_asyn_sendinfo set STATUS =  '上报成功' WHERE GUIDKEY = '" + uuid + "'", new ArrayList());
                }else{
                    gdataBo.updateSendinfo("update t_sys_asyn_sendinfo set STATUS =  '包上传失败',SITUATION = '数据包上传失败！' WHERE GUIDKEY = '" + uuid + "'", new ArrayList());
                }
            }else if("3".equalsIgnoreCase(importType)){//webservice
                WsdlBean wsdlBean = siteBean.getWsdl();
                String sjwsdl = wsdlBean.getSjwsdl();
                HashMap<String,Object> map = new HashMap();
                map.put("locorgcode",locorgCodeList);
                map.put("dataStartTime",dataStartTime);
                map.put("logid",uuid.toUpperCase());
                map.put("endTime",endTime);
                map.put("startTime",startTime);
                createDataPackage(mappingList,schemeType,superorg,constantXml,map,date,importType);
                gdataBo.deleteViewTable(list);
                String zipName = "DT" + unitcode + "_" + endTime + ".zip";
                String pkgPath = "asyn" + File.separator + "asynreport" + File.separator + "zip" + File.separator;
                sendinfoList.add(gdataBo.getMaxId("t_sys_asyn_sendinfo"));
                sendinfoList.add(uuid);
                sendinfoList.add(locorgCodeList.get(0));
                sendinfoList.add(Integer.parseInt(schemeType));
                sendinfoList.add(Integer.parseInt(importType));
                sendinfoList.add(DateUtils.getTimestamp(date));
                sendinfoList.add("包生成成功");
                sendinfoList.add(pkgPath+zipName);
                gdataBo.updateSendinfo("insert into t_sys_asyn_sendinfo (ID,GUIDKEY,UNITCODE,DataType,sendType,SENDTIME,STATUS,pkgpath) values(?,?,?,?,?,?,?,?) ", sendinfoList);
                pkgPath = constantXml.getNodeAttributeValue("/filepath", "rootpath") + File.separator + pkgPath + "cache" + File.separator;
                // resultFlag = true时，所有分卷数据包发送成功
                boolean resultFlag = sendSplitDataPackage(pkgPath,sjwsdl,drLogger);
                JSONObject json = new JSONObject();
                json.put("message",resultFlag);
                json.put("fileName",zipName);
                JSONObject jsonResult = sendFinishMseeage(sjwsdl,json.toString());
                drLogger.write("分布上报：数据包发送结束返回值:"+jsonResult);
                if (null != jsonResult)
                {
                    String flag = jsonResult.getString("flag");
                    if("1".equals(flag)){
                        FileUtil.deleteFile(pkgPath);
                        saveIncdatatime(siteJson,DateUtils.format(date,"yyyy-MM-dd HH:mm"),conn);
                        gdataBo.updateSendinfo("update t_sys_asyn_sendinfo set STATUS =  '上报成功' WHERE GUIDKEY = '" + uuid + "'", new ArrayList());
                    }else{
                        FileUtil.deleteFile(pkgPath);
                        gdataBo.updateSendinfo("update t_sys_asyn_sendinfo set STATUS =  '包上传失败',SITUATION = '" + jsonResult.getString("msg") + "' WHERE GUIDKEY = '" + uuid + "'", new ArrayList());
                    }
                }else{
                    FileUtil.deleteFile(pkgPath);
                    gdataBo.updateSendinfo("update t_sys_asyn_sendinfo set STATUS =  '包上传失败',SITUATION = '数据包上传失败！' WHERE GUIDKEY = '" + uuid + "'", new ArrayList());
                }
            }
        }catch (Exception e){
            if (null!=gdataBo) {
                gdataBo.updateSendinfo("update t_sys_asyn_sendinfo set STATUS =  '包生成失败',SITUATION = '" + e.getMessage() + "' WHERE GUIDKEY = '" + uuid + "'", new ArrayList());
            }
            e.printStackTrace();
        }finally {
            PubFunc.closeDbObj(conn);
        }
    }

    /**
     * 发送数据包完成信息
     * @param sjwsdl
     * @param json
     * @return
     */
    private JSONObject sendFinishMseeage(String sjwsdl, String json) {
        PrintWriter out = null;
        BufferedReader in = null;
        JSONObject result = null;
        try{
            URL realUrl = new URL(sjwsdl);
            // 打开和URL之间的连接
            URLConnection conn = realUrl.openConnection();
            conn.setRequestProperty("connection", "Keep-Alive");
            conn.setRequestProperty("Charsert", "GBK");
            conn.setRequestProperty("Content-Type", "application/zip");
            conn.setRequestProperty("User-Agent", "Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DigExt)");
            conn.setRequestProperty("Finish","true");
            // 发送POST请求必须设置如下两行
            conn.setDoOutput(true);
            conn.setDoInput(true);
            // 获取URLConnection对象对应的输出流
            out = new PrintWriter(conn.getOutputStream());
            // 发送请求参数
            out.print(json);
            // flush输出流的缓冲
            out.flush();
            // 定义BufferedReader输入流来读取URL的响应
            in = new BufferedReader(
                    new InputStreamReader(conn.getInputStream(),"GBK"));
            String line;
            StringBuffer buffer = new StringBuffer();
            while ((line = in.readLine()) != null) {
                buffer.append(line);
            }
            result = JSONObject.fromObject(buffer.toString());
        }catch (Exception e){
            e.printStackTrace();
        } finally {
            PubFunc.closeIoResource(out);
            PubFunc.closeIoResource(in);
        }
        return result;
    }


    private boolean sendSplitDataPackage(String pkgPath, String sjwsdl, DrLogger drLogger) {
        try{
            List<String> fileNameList = FileUtil.getFile(pkgPath);
            // 创建一个线程池
            ExecutorService pool = Executors.newFixedThreadPool(fileNameList.size());
            List<Future<String>> resultFultterList = new ArrayList<Future<String>>();
            for(int i=0;i<fileNameList.size();i++){
                String fileName =  fileNameList.get(i);
                SendSplitZipThread c1 = new SendSplitZipThread(fileName,sjwsdl,pkgPath,drLogger);
                resultFultterList.add(pool.submit(c1));
            }
            // 关闭线程池
            pool.shutdown();
            // 检查resultFultterList的值，如果有false，则有分卷数据包发送不成功
            for (Future<String> future : resultFultterList) {
                String futureResult = future.get();
                if("false".equals(futureResult)){
                    return false;
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return true;
    }

    /**
     * 保存上次上传时间
     * @param siteJson
     * @param incdatatime
     * @param conn
     */
    private void saveIncdatatime(String siteJson, String incdatatime, Connection conn) {
        JSONObject sendParamJson = new JSONObject();
        try{
            ContentDAO dao = new ContentDAO(conn);
            RecordVo vo = new RecordVo("constant");
            JSONObject json = JSONObject.fromObject(siteJson);
            sendParamJson.put("incdatatime",incdatatime);
            json.put("sendparam", sendParamJson);
            vo.setString("constant", DrConstant.BS_ASYN_PARAM_C);
            vo.setString("str_value", json.toString());
            dao.updateValueObject(vo);
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    /**
     * 生成数据包
     * @param mappingList
     * @param schemeType
     * @param superorg
     * @param constantXml
     * @param map
     * @throws GeneralException
     */
    private void createDataPackage(ArrayList<String> mappingList, String schemeType, SuperorgBean superorg, ConstantXml constantXml, HashMap<String, Object> map,Date date,String importType) throws GeneralException {
        try{
            String dataStartTime = map.get("dataStartTime").toString();
            List<String> locorgCodeList = (List<String>) map.get("locorgcode");
            String logid = map.get("logid").toString();
            String endTime = map.get("endTime").toString();
            String startTime = map.get("startTime").toString();
            String unitcode = superorg.getUnitcode();
            String unitguid = superorg.getUnitguid();
            String unitname = superorg.getUnitname();
            // 创建一个线程池
            ExecutorService pool = Executors.newFixedThreadPool(mappingList.size());
            List<Future<Map>> resultFultterList = new ArrayList<Future<Map>>();
            for(int i=0;i<mappingList.size();i++){
                String table =  mappingList.get(i);
                DataGenerateThread c1 = new DataGenerateThread(schemeType,dataStartTime,table,locorgCodeList,unitcode,date);
                resultFultterList.add(pool.submit(c1));
            }
            // 关闭线程池
            pool.shutdown();
            List<String> filePathList = new ArrayList();
            JSONArray aFileList = new JSONArray();
            JSONArray bFileList = new JSONArray();
            JSONArray kFileList = new JSONArray();
            JSONArray pFileList = new JSONArray();
            for (Future<Map> future : resultFultterList) {
                Map<String, Object> fileMap = future.get();
                JSONArray aFileArray = (JSONArray) fileMap.get("A");
                JSONArray bFileArray = (JSONArray) fileMap.get("B");
                JSONArray kFileArray = (JSONArray) fileMap.get("K");
                JSONArray pFileArray = (JSONArray) fileMap.get("P");
                List<String> filePath = (List<String>) fileMap.get("filePath");//文件路径
                filePathList.addAll(filePath);
                aFileList.addAll(aFileArray);
                bFileList.addAll(bFileArray);
                kFileList.addAll(kFileArray);
                pFileList.addAll(pFileArray);
            }
            JSONObject idxjson = new JSONObject();
            idxjson.put("orgid", unitguid);
            idxjson.put("orgcode", unitcode);
            idxjson.put("orgname", unitname);
            idxjson.put("logid", logid);
            idxjson.put("asyntype", schemeType);
            if ("1".equalsIgnoreCase(schemeType)) {
                idxjson.put("incstarttime", endTime);
            } else {
                idxjson.put("incstarttime", startTime);
            }
            idxjson.put("endtime", endTime);
            idxjson.put("A", aFileList);
            idxjson.put("B", bFileList);
            idxjson.put("K", kFileList);
            idxjson.put("P", pFileList);

            String idxjsonPath = constantXml.getNodeAttributeValue("/filepath", "rootpath") + File.separator + "asyn" + File.separator + "asynreport" + File.separator + "data";
            FileUtil.createJsonFile(idxjson.toString(), idxjsonPath, "idx");
            filePathList.add(idxjsonPath + File.separator + "idx.json");
            String zipPath = constantXml.getNodeAttributeValue("/filepath", "rootpath") + File.separator + "asyn" + File.separator + "asynreport" + File.separator + "zip";
            String zipName = "DT" + unitcode + "_" + endTime + ".zip";
            if("3".equals(importType)){
                FileUtil.createSplitZip(zipPath+ File.separator + "cache" + File.separator + zipName, filePathList, DrConstant.ZIP_PASSWORD);//分卷压缩
                //将分卷压缩的数据包重新压缩整包
                List<String> zipPathList = getZipPathList(zipPath+File.separator+"cache");
                if(zipPathList.size()>1){
                    FileUtil.createEncrypZip(zipPath+ File.separator + zipName, zipPathList, null);//生成数据包，放在服务器
                }else{
                    FileUtil.copyFile(zipPath+ File.separator + "cache" + File.separator + zipName,zipPath,null);
                }
            }else{
                FileUtil.createEncrypZip(zipPath+ File.separator + zipName, filePathList, DrConstant.ZIP_PASSWORD);//生成数据包，放在服务器
            }
            String photoPath = constantXml.getNodeAttributeValue("/filepath", "rootpath") + File.separator + "asyn" + File.separator + "asynreport" + File.separator + "data"+ File.separator +"photo";
            FileUtil.deleteFile(idxjsonPath);
            FileUtil.deleteFile(photoPath);
        }catch (Exception e){
            e.printStackTrace();
            throw GeneralExceptionHandler.Handle(e);
        }
    }

    /**
     * 获取分卷压缩路径名称
     * @return
     * @param zipFilePath
     */
    private List<String> getZipPathList(String zipFilePath) {
        List zipNameList = FileUtil.getFile(zipFilePath);
        List zipPathList = new ArrayList();
        for (int i = 0; i <zipNameList.size() ; i++) {
            zipPathList.add(zipFilePath+File.separator+zipNameList.get(i));
        }
        return zipPathList;
    }
}
